var ContentBuilder = (function () {
  'use strict';

  function _typeof$2(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof$2 = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof$2 = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof$2(obj);
  }

  function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties$1(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass$1(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties$1(Constructor, staticProps);
    return Constructor;
  }

  var Util = /*#__PURE__*/function () {
    function Util(builder) {
      _classCallCheck$1(this, Util);

      this.builder = builder;
    }

    _createClass$1(Util, [{
      key: "cellSelected",
      value: function cellSelected() {
        return document.querySelector('.cell-active');
      }
    }, {
      key: "builderStuff",
      value: function builderStuff() {
        return document.querySelector('#_cbhtml');
      }
    }, {
      key: "cellNext",
      value: function cellNext(cell) {
        var dom = new Dom();
        var c = cell.nextElementSibling;

        if (c) {
          if (!dom.hasClass(c, 'is-row-tool') && !dom.hasClass(c, 'is-rowadd-tool')) {
            return c;
          } else {
            return null;
          }
        }

        return null;
      }
    }, {
      key: "out",
      value: function out(s) {
        if (this.builder) {
          var val = this.builder.opts.lang[s];
          if (val) return val;else {
            if (this.builder.checkLang) console.log(s);
            return s;
          }
        } else {
          return s;
        }
      }
    }, {
      key: "confirm",
      value: function confirm(message, callback) {
        var _this = this;

        var dom = new Dom();
        var html = "<div class=\"is-modal is-confirm\">\n            <div style=\"max-width:526px;text-align:center;\">\n                <p>".concat(message, "</p>\n                <button title=\"").concat(this.out('Delete'), "\" class=\"input-ok classic\">").concat(this.out('Delete'), "</button>\n            </div>\n        </div>");
        var builderStuff = this.builderStuff();
        var confirmmodal = builderStuff.querySelector('.is-confirm');

        if (!confirmmodal) {
          dom.appendHtml(builderStuff, html);
          confirmmodal = builderStuff.querySelector('.is-confirm');
        }

        this.showModal(confirmmodal, false, function () {
          //this function runs when overlay is clicked. Remove modal.
          confirmmodal.parentNode.removeChild(confirmmodal); //do task

          callback(false);
        }, true);
        var buttonok = confirmmodal.querySelector('.is-confirm .input-ok');
        dom.addEventListener(buttonok, 'click', function () {
          _this.hideModal(confirmmodal);

          confirmmodal.parentNode.removeChild(confirmmodal); //remove modal
          //do task

          callback(true);
        });
      }
      /*
      Note:
      - if overlayStay = false, cancelCallback will be called if overlay is clicked.
      - hideModal will remove the modal element, so calling show modal multiple times won't attach multiple events (safe).
      */

    }, {
      key: "showModal",
      value: function showModal(modal, overlayStay, cancelCallback, animated) {
        var _this2 = this;

        var dom = new Dom();
        dom.addClass(modal, 'active');
        var animate = false;

        if (this.builder) {
          if (this.builder.opts.animateModal) {
            animate = true;

            if (!animated) {
              // if not set or false
              animate = false; // overide   
            }
          }
        } else {
          if (animated) {
            // if set true
            animate = true; // overide
          }
        }

        if (animate) {
          if (this.builder) {
            var buildercontainers = document.querySelectorAll(this.builder.opts.container);
            Array.prototype.forEach.call(buildercontainers, function (buildercontainer) {
              buildercontainer.style.transform = 'scale(0.98)';
              buildercontainer.style.WebkitTransform = 'scale(0.98)';
              buildercontainer.style.MozTransform = 'scale(0.98)';
            });
          }
        }

        if (!modal.querySelector('.is-modal-overlay')) {
          var html;

          if (overlayStay) {
            html = '<div class="is-modal-overlay" style="position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(255,255,255,0.3);z-index:-1;"></div>';
          } else {
            html = '<div class="is-modal-overlay" style="position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(255,255,255,0.000001);z-index:-1;"></div>';
          }

          modal.insertAdjacentHTML('afterbegin', html);

          if (!overlayStay) {
            var overlay = modal.querySelector('.is-modal-overlay');
            dom.addEventListener(overlay, 'click', function () {
              //cancelCallback
              if (cancelCallback) cancelCallback();

              _this2.hideModal(modal);
            });
          }
        }
      }
    }, {
      key: "hideModal",
      value: function hideModal(modal) {
        if (this.builder) {
          var buildercontainers = document.querySelectorAll(this.builder.opts.container);
          Array.prototype.forEach.call(buildercontainers, function (buildercontainer) {
            buildercontainer.style.transform = '';
            buildercontainer.style.WebkitTransform = '';
            buildercontainer.style.MozTransform = '';
          });
        }

        var dom = new Dom();
        dom.removeClass(modal, 'active');
      }
    }, {
      key: "fixLayout",
      value: function fixLayout(row) {
        var dom = new Dom();
        var cellCount = row.childElementCount - 2; //minus is-row-tool & is-rowadd-tool

        var rowClass = this.builder.opts.row;
        var colClass = this.builder.opts.cols;
        var colEqual = this.builder.opts.colequal;

        if (colEqual.length > 0) {
          var cols = dom.elementChildren(row);
          cols.forEach(function (col) {
            if (dom.hasClass(col, 'is-row-tool') || dom.hasClass(col, 'is-rowadd-tool')) return;

            for (var i = 0; i <= colClass.length - 1; i++) {
              dom.removeClass(col, colClass[i]);
            }

            for (var _i = 0; _i <= colEqual.length - 1; _i++) {
              if (colEqual[_i].length === cellCount) {
                dom.addClass(col, colEqual[_i][0]);
                break;
              }
            }

            if (cellCount === 1) {
              dom.addClass(col, colClass[colClass.length - 1]);
            }
          });
          return;
        } //others (12 columns grid)


        if (rowClass !== '' && colClass.length > 0) {
          var n = 0;

          var _cols = dom.elementChildren(row);

          _cols.forEach(function (col) {
            if (dom.hasClass(col, 'is-row-tool') || dom.hasClass(col, 'is-rowadd-tool')) return;
            n++;

            for (var i = 0; i <= colClass.length - 1; i++) {
              dom.removeClass(col, colClass[i]);
            }

            if (cellCount === 1) dom.addClass(col, colClass[11]);
            if (cellCount === 2) dom.addClass(col, colClass[5]);
            if (cellCount === 3) dom.addClass(col, colClass[3]);
            if (cellCount === 4) dom.addClass(col, colClass[2]);

            if (cellCount === 5) {
              // 2, 2, 2, 2, 4
              if (n === 5) dom.addClass(col, colClass[3]);else dom.addClass(col, colClass[1]);
            }

            if (cellCount === 6) dom.addClass(col, colClass[1]); // 2, 2, 2, 2, 2, 2

            if (cellCount === 7) {
              // 2, 2, 2, 2, 2, 1, 1
              if (n >= 6) dom.addClass(col, colClass[0]);else dom.addClass(col, colClass[1]);
            }

            if (cellCount === 8) {
              // 2, 2, 2, 2, 1, 1, 1, 1
              if (n >= 5) dom.addClass(col, colClass[0]);else dom.addClass(col, colClass[1]);
            }

            if (cellCount === 9) {
              // 2, 2, 2, 1, 1, 1, 1, 1, 1
              if (n >= 4) dom.addClass(col, colClass[0]);else dom.addClass(col, colClass[1]);
            }

            if (cellCount === 10) {
              // 2, 2, 1, 1, 1, 1, 1, 1, 1, 1
              if (n >= 3) dom.addClass(col, colClass[0]);else dom.addClass(col, colClass[1]);
            }

            if (cellCount === 11) {
              // 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
              if (n >= 2) dom.addClass(col, colClass[0]);else dom.addClass(col, colClass[1]);
            }

            if (cellCount === 12) dom.addClass(col, colClass[0]); // 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
          });
        }
      }
    }, {
      key: "addContent",
      value: function addContent(html, mode, attr) {
        var dom = new Dom();

        if (this.builder.opts.onAdd) {
          html = this.builder.opts.onAdd(html);
        }

        var cell = this.cellSelected();
        var row;

        if (!cell) {
          // If no active cell, check if it is from .row-add-initial (empty info)
          row = document.querySelector('.row-active');
          if (!row) return;else {
            // Empty content will always use 'row' mode to insert block.
            mode = 'row';
          }
        } else {
          row = cell.parentNode;
        }

        if (mode === 'cell' || mode === 'cell-left' || mode === 'cell-right') {
          var maxCols = 4;

          if (this.builder.maxColumns) {
            maxCols = this.builder.maxColumns;
          } //Limit up to 4 cells in a row


          if (row.childElementCount >= maxCols + 2) {
            //+2 => includes is-row-tool & is-rowadd-tool
            alert(this.out('You have reached the maximum number of columns'));
            return false;
          }

          this.builder.uo.saveForUndo();
          var cellElement;

          if (this.builder.opts.row === '') {
            // TODO: Test using in old Insite
            var s = this.builder.opts.cellFormat;
            var pos = s.indexOf('</');
            html = s.substring(0, pos) + html + s.substring(pos);
            cellElement = this.createElementFromHTML(html);
          } else {
            cellElement = cell.cloneNode(true); // Cleanup from module related clone

            cellElement.removeAttribute('data-noedit');
            cellElement.removeAttribute('data-protected');
            cellElement.removeAttribute('data-module');
            cellElement.removeAttribute('data-module-desc');
            cellElement.removeAttribute('data-dialog-width');
            cellElement.removeAttribute('data-html');
            cellElement.removeAttribute('data-settings');

            for (var i = 1; i <= 20; i++) {
              cellElement.removeAttribute('data-html-' + i);
            }

            cellElement.removeAttribute('data-noedit');
            dom.removeClass(cellElement, 'cell-active');
            cellElement.removeAttribute('data-click');

            if (attr) {
              cellElement.setAttribute(attr, '');
            }

            cellElement.innerHTML = html;
          }

          row.insertBefore(cellElement, cell);

          if (mode === 'cell' || mode === 'cell-right') {
            dom.moveAfter(cellElement, cell);
          }

          this.builder.applyBehavior();
          this.fixLayout(row);
          cellElement.click(); //change active block to the newly created
        }

        if (mode === 'row') {
          this.builder.uo.saveForUndo();

          var rowElement, _cellElement;

          if (this.builder.opts.row === '') {
            rowElement = this.htmlToElement(this.builder.opts.rowFormat);
            var _s = this.builder.opts.cellFormat;

            var _pos = _s.indexOf('</');

            html = _s.substring(0, _pos) + html + _s.substring(_pos); // go to last deeper level

            var targetrow = dom.elementChildren(rowElement);

            while (targetrow.length > 0) {
              targetrow = targetrow[0];

              if (dom.elementChildren(targetrow).length > 0) {
                targetrow = dom.elementChildren(targetrow);
              } else {
                break;
              }
            }

            targetrow.innerHTML = html;
            _cellElement = targetrow.firstChild;

            if (attr) {
              _cellElement.setAttribute(attr, '');
            }
          } else {
            _cellElement = dom.createElement('div');
            dom.addClass(_cellElement, this.builder.opts.cols[this.builder.opts.cols.length - 1]);
            _cellElement.innerHTML = html;

            if (attr) {
              _cellElement.setAttribute(attr, '');
            }

            rowElement = dom.createElement('div');
            dom.addClass(rowElement, this.builder.opts.row);
            dom.appendChild(rowElement, _cellElement);
          }

          row.parentNode.insertBefore(rowElement, row);
          dom.moveAfter(rowElement, row);
          this.builder.applyBehavior();

          _cellElement.click(); //change active block to the newly created

        }

        if (mode === 'elm') {
          var elm = this.builder.activeElement; // See elementtool.js line 195-196. // document.querySelector('.elm-active');

          if (!elm) return;
          this.builder.uo.saveForUndo();
          var element = elm; // while(!dom.hasClass(element.parentNode, 'cell-active')) {
          //     element = element.parentNode;
          // }

          element.insertAdjacentHTML('afterend', html);
          this.builder.applyBehavior();
          var newelement = element.nextElementSibling;

          if (newelement.tagName.toLowerCase() === 'img') {
            var timeoutId;
            clearTimeout(timeoutId);
            timeoutId = setTimeout(function () {
              if (newelement.complete) {
                newelement.click(); //console.log(2);
              }
            }, 200);
          } else {
            newelement.click();
          } // LATER: auto scroll
          // LATER: If image, then it needs time to load (resulting incorrect position), so hide element tool. 

        } // Call onChange


        this.builder.opts.onChange();
      } // https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro

    }, {
      key: "htmlToElement",
      value: function htmlToElement(html) {
        var template = document.createElement('template');
        html = html.trim(); // Never return a text node of whitespace as the result

        template.innerHTML = html;
        return template.content.firstChild;
      }
    }, {
      key: "addSnippet",
      value: function addSnippet(html, bSnippet, noedit) {
        var _this3 = this;

        this.builder.uo.saveForUndo();
        var dom = new Dom();
        var rowElement;
        var bAddLast = false;
        var cell;
        var cellElement;
        var columnTool;
        var builderStuff = this.builderStuff();
        var quickadd = builderStuff.querySelector('.quickadd');
        var mode = quickadd.getAttribute('data-mode');

        if (bSnippet && (mode === 'cell' || mode === 'cell-left' || mode === 'cell-right')) {
          if (noedit) {
            this.addContent(html, mode, 'data-noedit');
          } else {
            this.addContent(html, mode);
          }

          return;
        } else if (bSnippet && mode === 'row') {
          /*
          Buttons, line, social, video, map (Grid layout not included).
          Can be inserted after current row, cell, element, or last row.
          */
          // NEW: See contentbuilder.js line 328
          // OLD: See contentbuilder-jquery.js addSnippet() line 16529
          // Just snippet (without row/column grid), ex. buttons, line, social, video, map.
          // Can be inserted after current row, column (cell), element, or last row.
          // html = `<div class="${this.builder.opts.row}"><div class="${this.builder.opts.cols[this.builder.opts.cols.length-1]}"${(noedit? ' data-noedit': '')}>${html}</div></div>`;
          // OR like addContent() in util.js line 245)
          cellElement = document.createElement('div');
          cellElement.className = this.builder.opts.cols[this.builder.opts.cols.length - 1];
          cellElement.innerHTML = html;

          if (noedit) {
            cellElement.setAttribute('data-noedit', '');
          }

          rowElement = document.createElement('div');
          rowElement.className = this.builder.opts.row;
          rowElement.appendChild(cellElement); // Add after selected row

          cell = this.builder.cellSelected();
          var row;

          if (cell) {
            row = cell.parentNode;
          } else {
            // If no active cell, check if it is from .row-add-initial (empty info)
            row = document.querySelector('.row-active');

            if (!row) {
              bAddLast = true;
            }
          } // Add after last row


          if (bAddLast) {
            var nodes = document.querySelectorAll('.is-builder');
            var last = nodes[nodes.length - 1];
            var rows = dom.elementChildren(last);
            var lastrow = rows[rows.length - 1];
            row = lastrow;
          }

          row.parentNode.insertBefore(rowElement, row);
          dom.moveAfter(rowElement, row);
          this.builder.applyBehavior();
          cellElement.click(); //change active block to the newly created
          // Change to row selection

          rowElement.className = rowElement.className.replace('row-outline', ''); // columnTool = parent.document.querySelector('.is-column-tool');

          columnTool = document.querySelector('.is-column-tool');
          columnTool.className = columnTool.className.replace('active', '');
        } else {
          /*
          Complete with grid layout. Also may containes custom script(data-html)
          Can be inserted after current row or last row.
          */
          // NEW: See contentbuilder.js line 341 AND contentbuilder-jquery.js (addContentMore) line 11526
          // OLD: See contentbuilder-jquery.js (addContentMore) line 11526
          // Snippet is wrapped in row/colum (may contain custom code or has [data-html] attribute)
          // Can only be inserted after current row or last row (not on column or element).
          var snippet = document.createElement('div');
          snippet.innerHTML = html;
          var blocks = snippet.querySelectorAll('[data-html]');
          Array.prototype.forEach.call(blocks, function (block) {
            // Render custom code block
            html = decodeURIComponent(block.getAttribute('data-html'));
            html = html.replace(/{id}/g, _this3.makeId());

            for (var i = 1; i <= 20; i++) {
              html = html.replace('[%HTML' + i + '%]', block.getAttribute('data-html-' + i) === undefined ? '' : decodeURIComponent(block.getAttribute('data-html-' + i))); //render editable area
            }

            block.innerHTML = html;
          }); //html = snippet.innerHTML; 
          // Add after selected row

          cell = this.builder.activeCol;

          var _row;

          if (cell) {
            _row = cell.parentNode; // in email mode, cell active is also under row active (incorrect, but cell active is not needed in email mode. So this line works!)
          } else {
            // If no active cell, check if it is from .row-add-initial (empty info)
            _row = document.querySelector('.row-active');

            if (!_row) {
              bAddLast = true;
            }
          } // Add after last row


          if (bAddLast) {
            var _nodes = document.querySelectorAll('.is-builder');

            var _last = _nodes[_nodes.length - 1];

            var _rows = dom.elementChildren(_last);

            var _lastrow = _rows[_rows.length - 1];
            _row = _lastrow;
          } // Use createContextualFragment() to make embedded script executable
          // https://ghinda.net/article/script-tags/


          var range = document.createRange();

          _row.parentNode.insertBefore(range.createContextualFragment(snippet.innerHTML), _row.nextSibling);

          rowElement = snippet.childNodes[0]; // Auto scroll

          var y = _row.getBoundingClientRect().top + _row.offsetHeight + window.pageYOffset - 120;
          window.scroll({
            top: y,
            behavior: 'smooth'
          }); // window.scrollTo(0, y);

          rowElement = _row.nextElementSibling; // a must. Must be before applyBehavior() to prevent element delete during fixLayout

          this.builder.applyBehavior(); // checkEmpty & onRender called here

          cellElement = rowElement.childNodes[0];
          cellElement.click(); //change active block to the newly created
          // Change to row selection

          rowElement.className = rowElement.className.replace('row-outline', ''); // columnTool = parent.document.querySelector('.is-column-tool');

          columnTool = document.querySelector('.is-column-tool');
          columnTool.className = columnTool.className.replace('active', '');
        } // Call onChange


        this.builder.opts.onChange();
      }
    }, {
      key: "clearActiveCell",
      value: function clearActiveCell() {
        // this.builder.lastActiveCol = this.cellSelected(); // get active cell before cleared (will be used by snippets dialog)
        var dom = new Dom();
        var divs = document.getElementsByClassName('cell-active');

        while (divs.length) {
          divs[0].classList.remove('cell-active');
        }

        divs = document.getElementsByClassName('row-outline');

        while (divs.length) {
          divs[0].classList.remove('row-outline');
        }

        divs = document.getElementsByClassName('row-active');

        while (divs.length) {
          divs[0].classList.remove('row-active');
        }

        divs = document.getElementsByClassName('builder-active');

        while (divs.length) {
          divs[0].classList.remove('builder-active');
        }

        var builderStuff = this.builderStuff();

        if (builderStuff) {
          var columnTool = builderStuff.querySelector('.is-column-tool');
          dom.removeClass(columnTool, 'active');
          var elmTool = builderStuff.querySelector('.is-element-tool');
          elmTool.style.display = '';
        }

        this.builder.activeCol = null;
      }
    }, {
      key: "clearAfterUndoRedo",
      value: function clearAfterUndoRedo() {
        var dom = new Dom();
        var builderStuff = this.builderStuff();
        var tools = builderStuff.querySelectorAll('.is-tool');
        Array.prototype.forEach.call(tools, function (tool) {
          tool.style.display = '';
        });
        this.builder.moveable.updateRect();
        document.querySelector('.moveable-control-box').style.display = 'none';
        this.builder.activeSpacer = null;
        this.builder.activeCodeBlock = null;
        this.builder.activeLink = null;
        this.builder.activeIframe = null;
        this.builder.activeTd = null;
        this.builder.activeTable = null;
        this.builder.activeModule = null;
        var icons = document.querySelectorAll('.icon-active');
        Array.prototype.forEach.call(icons, function (icon) {
          dom.removeClass(icon, 'icon-active');
        });
        this.builder.activeIcon = null; // RTE

        var rteTool = builderStuff.querySelector('.is-rte-tool'); // rteTool.style.display = 'none';

        var rteButtons = rteTool.querySelectorAll('button');
        Array.prototype.forEach.call(rteButtons, function (rteButton) {
          dom.removeClass(rteButton, 'on');
        });
        var elementRteTool = builderStuff.querySelector('.is-elementrte-tool'); // rteTool.style.display = 'none';

        rteButtons = elementRteTool.querySelectorAll('button');
        Array.prototype.forEach.call(rteButtons, function (rteButton) {
          dom.removeClass(rteButton, 'on');
        });
        var pops = builderStuff.querySelectorAll('.is-pop');
        Array.prototype.forEach.call(pops, function (pop) {
          pop.style.display = '';
        });
      }
    }, {
      key: "hideControls",
      value: function hideControls() {
        var builderStuff = this.builderStuff();
        var tools = builderStuff.querySelectorAll('.is-tool');
        Array.prototype.forEach.call(tools, function (tool) {
          tool.style.display = '';
        });
        this.builder.moveable.updateRect();
        document.querySelector('.moveable-control-box').style.display = 'none';
      }
    }, {
      key: "clearControls",
      value: function clearControls() {
        var dom = new Dom();
        var builderStuff = this.builderStuff();
        if (!builderStuff) return; // in case the builder is destroyed

        var tools = builderStuff.querySelectorAll('.is-tool');
        Array.prototype.forEach.call(tools, function (tool) {
          tool.style.display = '';
        });
        this.builder.moveable.updateRect();
        document.querySelector('.moveable-control-box').style.display = 'none';
        this.builder.activeSpacer = null;
        this.builder.activeCodeBlock = null;
        this.builder.activeLink = null;
        this.builder.activeIframe = null;
        this.builder.activeTd = null;
        this.builder.activeTable = null;
        this.builder.activeModule = null;
        this.builder.activeImage = null;
        var icons = document.querySelectorAll('.icon-active');
        Array.prototype.forEach.call(icons, function (icon) {
          dom.removeClass(icon, 'icon-active');
        });
        this.builder.activeIcon = null; // show iframe overlay to make it clickable

        var ovls = document.querySelectorAll('.ovl');
        Array.prototype.forEach.call(ovls, function (ovl) {
          ovl.style.display = 'block';
        }); // Element Panel & Snippets sidebar

        var panels = builderStuff.querySelectorAll('.is-side.elementstyles');
        Array.prototype.forEach.call(panels, function (panel) {
          dom.removeClass(panel, 'active');
        }); // Element Panel things

        var elms = document.querySelectorAll('[data-saveforundo]');
        Array.prototype.forEach.call(elms, function (elm) {
          elm.removeAttribute('data-saveforundo');
        });
        elms = document.querySelectorAll('.elm-inspected');
        Array.prototype.forEach.call(elms, function (elm) {
          dom.removeClass(elm, 'elm-inspected');
        }); // RTE

        var rtetool = builderStuff.querySelector('.is-rte-tool');
        if (rtetool) rtetool.style.display = 'none';
        var elementRtetool = builderStuff.querySelector('.is-elementrte-tool');
        if (elementRtetool) elementRtetool.style.display = 'none'; // Element

        elms = document.querySelectorAll('.elm-active');
        Array.prototype.forEach.call(elms, function (elm) {
          dom.removeClass(elm, 'elm-active');
        }); // let rtepops = builderStuff.querySelectorAll('.is-rte-pop');
        // Array.prototype.forEach.call(rtepops, (rtepop) => {
        //     rtepop.style.display = '';
        //     dom.removeClass(rtepop,'active');
        //     dom.addClass(rtepop, 'deactive');
        // });
        // let pops = builderStuff.querySelectorAll('.is-pop');
        // Array.prototype.forEach.call(pops, (pop) => {
        //     pop.style.display = '';
        // });
      } // source: http://stackoverflow.com/questions/1349404/generate-a-string-of-5-random-characters-in-javascript

    }, {
      key: "makeId",
      value: function makeId() {
        var text = '';
        var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';

        for (var i = 0; i < 2; i++) {
          text += possible.charAt(Math.floor(Math.random() * possible.length));
        }

        var text2 = '';
        var possible2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

        for (var _i2 = 0; _i2 < 5; _i2++) {
          text2 += possible2.charAt(Math.floor(Math.random() * possible2.length));
        }

        return text + text2;
      } // source: http://stackoverflow.com/questions/5605401/insert-link-in-contenteditable-element 

    }, {
      key: "saveSelection",
      value: function saveSelection() {
        if (window.getSelection) {
          var sel = window.getSelection();

          if (sel.getRangeAt && sel.rangeCount) {
            var ranges = [];

            for (var i = 0, len = sel.rangeCount; i < len; ++i) {
              ranges.push(sel.getRangeAt(i));
            }

            this.builder.selection = ranges;
            return ranges;
          }
        } else if (document.selection && document.selection.createRange) {
          this.builder.selection = document.selection.createRange();
          return document.selection.createRange();
        }

        this.builder.selection = null;
        return null;
      }
    }, {
      key: "restoreSelection",
      value: function restoreSelection() {
        var savedSel = this.builder.selection;

        if (savedSel) {
          if (window.getSelection) {
            var sel = window.getSelection(); // sel.removeAllRanges();

            if (document.body.createTextRange) {
              // All IE but Edge
              var range = document.body.createTextRange();
              range.collapse();
              range.select();
            } else if (window.getSelection) {
              if (window.getSelection().empty) {
                window.getSelection().empty();
              } else if (window.getSelection().removeAllRanges) {
                window.getSelection().removeAllRanges();
              }
            } else if (document.selection) {
              document.selection.empty();
            }

            for (var i = 0, len = savedSel.length; i < len; ++i) {
              sel.addRange(savedSel[i]);
            }
          } else if (document.selection && savedSel.select) {
            savedSel.select();
          }
        }
      } // Clean Word. Source: 
      // http://patisserie.keensoftware.com/en/pages/remove-word-formatting-from-rich-text-editor-with-javascript
      // http://community.sitepoint.com/t/strip-unwanted-formatting-from-pasted-content/16848/3
      // http://www.1stclassmedia.co.uk/developers/clean-ms-word-formatting.php

    }, {
      key: "cleanHTML",
      value: function cleanHTML(input, cleanstyle) {
        var stringStripper = /(\n|\r| class=(")?Mso[a-zA-Z]+(")?)/g;
        var output = input.replace(stringStripper, ' ');
        var commentSripper = new RegExp('<!--(.*?)-->', 'g');
        output = output.replace(commentSripper, '');
        var tagStripper;

        if (cleanstyle) {
          tagStripper = new RegExp('<(/)*(meta|link|span|\\?xml:|st1:|o:|font)(.*?)>', 'gi');
        } else {
          tagStripper = new RegExp('<(/)*(meta|link|\\?xml:|st1:|o:|font)(.*?)>', 'gi');
        }

        output = output.replace(tagStripper, '');
        var badTags = ['style', 'script', 'applet', 'embed', 'noframes', 'noscript'];

        for (var i = 0; i < badTags.length; i++) {
          tagStripper = new RegExp('<' + badTags[i] + '.*?' + badTags[i] + '(.*?)>', 'gi');
          output = output.replace(tagStripper, '');
        }

        var badAttributes;

        if (cleanstyle) {
          badAttributes = ['style', 'start'];
        } else {
          badAttributes = ['start'];
        }

        for (var _i3 = 0; _i3 < badAttributes.length; _i3++) {
          var attributeStripper = new RegExp(' ' + badAttributes[_i3] + '="(.*?)"', 'gi');
          output = output.replace(attributeStripper, '');
        } // https://gist.github.com/sbrin/6801034
        //output = output.replace(/<!--[\s\S]+?-->/gi, ''); //done (see above)
        //output = output.replace(/<(!|script[^>]*>.*?<\/script(?=[>\s])|\/?(\?xml(:\w+)?|img|meta|link|style|\w:\w+)(?=[\s\/>]))[^>]*>/gi, '');


        output = output.replace(/<(!|script[^>]*>.*?<\/script(?=[>\s])|\/?(\?xml(:\w+)?|img|meta|link|style|\w:\w+)(?=[\s/>]))[^>]*>/gi, '');
        output = output.replace(/<(\/?)s>/gi, '<$1strike>');
        output = output.replace(/&nbsp;/gi, ' '); //output = output.replace(/<span\s+style\s*=\s*"\s*mso-spacerun\s*:\s*yes\s*;?\s*"\s*>([\s\u00a0]*)<\/span>/gi, function(str, spaces) {
        //    return (spaces.length > 0) ? spaces.replace(/./, " ").slice(Math.floor(spaces.length/2)).split("").join("\u00a0") : '';
        //});
        //clean copied elm-active background-color (LATER: improve)

        output = output.replace(/background-color: rgba\(200, 200, 201, 0.11\);/gi, '');
        output = output.replace(/background-color: rgba\(200, 200, 201, 0.11\)/gi, '');
        return output;
      }
    }, {
      key: "checkEmpty",
      value: function checkEmpty() {
        var _this4 = this;

        var dom = new Dom(); // Get all builder areas

        var builders = document.querySelectorAll(this.builder.opts.container);
        Array.prototype.forEach.call(builders, function (builder) {
          var rows = dom.elementChildren(builder);
          var empty = true;
          rows.forEach(function (row) {
            if (dom.hasClass(row, 'row-add-initial')) return;
            if (dom.hasClass(row, 'dummy-space')) return;
            empty = false;
          });

          if (empty) {
            var emptyinfo = builder.querySelector('.row-add-initial');

            if (!emptyinfo) {
              builder.innerHTML = "<button type=\"button\" class=\"row-add-initial\">".concat(_this4.out('Empty'), "<br><span>").concat(_this4.out('+ Click to add content'), "</span></div>");
              emptyinfo = builder.querySelector('.row-add-initial');
            }

            emptyinfo.addEventListener('click', function () {
              _this4.clearActiveCell();

              dom.addClass(emptyinfo, 'row-active'); // Needed for addContent(). Directly apply class in Util is fine.

              var builderStuff = _this4.builderStuff();

              var quickadd = builderStuff.querySelector('.quickadd'); // see quickadd.js. Directly select by class in Util is fine.

              var tabs = quickadd.querySelector('.is-pop-tabs');
              tabs.style.display = 'none';
              var viewportHeight = window.innerHeight;
              var top = emptyinfo.getBoundingClientRect().top;
              var left = emptyinfo.getBoundingClientRect().left + emptyinfo.offsetWidth / 2 - 11;
              quickadd.style.display = 'flex';
              var w = quickadd.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

              var h = quickadd.offsetHeight;

              if (viewportHeight - top > h) {
                top = top + emptyinfo.offsetHeight - 19;
                quickadd.style.top = top + window.pageYOffset + 27 + 'px';
                quickadd.style.left = left - w / 2 + 7 + 'px';
                dom.removeClass(quickadd, 'arrow-bottom');
                dom.removeClass(quickadd, 'arrow-right');
                dom.removeClass(quickadd, 'arrow-left');
                dom.removeClass(quickadd, 'center');
                dom.addClass(quickadd, 'arrow-top');
                dom.addClass(quickadd, 'center');
              } else {
                quickadd.style.top = top + window.pageYOffset - h - 8 + 'px';
                quickadd.style.left = left - w / 2 + 7 + 'px';
                dom.removeClass(quickadd, 'arrow-top');
                dom.removeClass(quickadd, 'arrow-right');
                dom.removeClass(quickadd, 'arrow-left');
                dom.removeClass(quickadd, 'center');
                dom.addClass(quickadd, 'arrow-bottom');
                dom.addClass(quickadd, 'center');
              }

              quickadd.setAttribute('data-mode', 'row');
            });
          } else {
            var _emptyinfo = builder.querySelector('.row-add-initial');

            if (_emptyinfo) _emptyinfo.parentNode.removeChild(_emptyinfo);
          }
        });
      }
    }, {
      key: "clearPreferences",
      value: function clearPreferences() {
        localStorage.removeItem('_buildermode'); //builderMode

        localStorage.removeItem('_editingtoolbar'); //toolbar

        localStorage.removeItem('_editingtoolbardisplay'); //toolbarDisplay

        localStorage.removeItem('_hidecelltool'); //columnTool

        localStorage.removeItem('_rowtool'); //rowTool

        localStorage.removeItem('_hideelementtool'); //elementTool

        localStorage.removeItem('_hidesnippetaddtool'); //snippetAddTool

        localStorage.removeItem('_outlinemode'); //outlineMode

        localStorage.removeItem('_hiderowcoloutline'); //rowcolOutline

        localStorage.removeItem('_outlinestyle'); //outlineStyle

        localStorage.removeItem('_hideelementhighlight'); //elementHighlight

        localStorage.removeItem('_opensnippets'); //snippetOpen

        localStorage.removeItem('_toolstyle'); //toolStyle

        localStorage.removeItem('_snippetssidebardisplay'); //snippetsSidebarDisplay

        localStorage.removeItem('_pasteresult'); //DON'T HAVE PROP
        //NOT USED

        localStorage.removeItem('_scrollableeditor');
        localStorage.removeItem('_animatedsorting');
        localStorage.removeItem('_addbuttonplace');
        localStorage.removeItem('_hiderowtool');
        localStorage.removeItem('_dragwithouthandle');
        localStorage.removeItem('_advancedhtmleditor');
        localStorage.removeItem('_hidecolhtmleditor');
        localStorage.removeItem('_hiderowhtmleditor');
      } // source: http://stackoverflow.com/questions/6690752/insert-html-at-caret-in-a-contenteditable-div */

    }, {
      key: "pasteHtmlAtCaret",
      value: function pasteHtmlAtCaret(html, selectPastedContent) {
        this.restoreSelection();
        var sel, range;

        if (window.getSelection) {
          if (!this.builder.activeCol) return;
          sel = window.getSelection();

          if (sel.getRangeAt && sel.rangeCount) {
            range = sel.getRangeAt(0);
            range.deleteContents();
            var el = document.createElement('div');
            el.innerHTML = html;
            var frag = document.createDocumentFragment(),
                node,
                lastNode;

            while (node = el.firstChild) {
              lastNode = frag.appendChild(node);
            }

            var firstNode = frag.firstChild;
            range.insertNode(frag);

            if (lastNode) {
              range = range.cloneRange();
              range.setStartAfter(lastNode);

              if (selectPastedContent) {
                range.setStartBefore(firstNode);
              } else {
                range.collapse(true);
              }

              sel.removeAllRanges();
              if (!this.builder.isTouchSupport) sel.addRange(range);
            }
          }
        } else if ((sel = document.selection) && sel.type !== 'Control') {
          if (!this.builder.activeCol) return;
          var originalRange = sel.createRange();
          originalRange.collapse(true);
          sel.createRange().pasteHTML(html);

          if (selectPastedContent) {
            range = sel.createRange();
            range.setEndPoint('StartToStart', originalRange);
            if (!this.builder.isTouchSupport) range.select();
          }
        }
      }
    }, {
      key: "refreshModule",
      value: function refreshModule() {
        var module = this.builder.activeModule;
        if (!module) return;
        var index = 1;
        var subblocks = module.querySelectorAll('[data-subblock]');
        Array.prototype.forEach.call(subblocks, function (subblock) {
          var builderhtml = subblock.innerHTML;
          module.setAttribute('data-html-' + index, encodeURIComponent(builderhtml));
          index++;
        });
        var html = decodeURIComponent(module.getAttribute('data-html'));
        html = html.replace(/{id}/g, this.makeId());
        module.innerHTML = '';
        var range = document.createRange();
        range.setStart(module, 0);
        module.appendChild(range.createContextualFragment(html));
        subblocks = module.querySelectorAll('[data-subblock]');
        var i = 1;
        Array.prototype.forEach.call(subblocks, function (subblock) {
          if (module.getAttribute('data-html-' + i)) {
            subblock.innerHTML = decodeURIComponent(module.getAttribute('data-html-' + i));
          }

          i++;
        });
      }
    }, {
      key: "isTouchSupport",
      value: function isTouchSupport() {
        if ('ontouchstart' in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0) {
          return true;
        } else {
          return false;
        }
      } // source: https://stackoverflow.com/questions/4617638/detect-ipad-users-using-jquery
      // isAppleMobile() {
      //     if (navigator && navigator.userAgent && navigator.userAgent !== null) {
      //         var strUserAgent = navigator.userAgent.toLowerCase();
      //         var arrMatches = strUserAgent.match(/(iphone|ipod|ipad)/);
      //         if (arrMatches !== null) return true;
      //     }
      //     return false;
      // }
      // https://stackoverflow.com/questions/31757852/how-can-i-detect-internet-explorer-ie-and-microsoft-edge-using-javascript

    }, {
      key: "detectIE",
      value: function detectIE() {
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf('MSIE ');

        if (msie > 0) {
          return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
        }

        var trident = ua.indexOf('Trident/');

        if (trident > 0) {
          var rv = ua.indexOf('rv:');
          return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
        }

        var edge = ua.indexOf('Edge/');

        if (edge > 0) {
          return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
        }

        return false;
      } // Source: https://css-tricks.com/snippets/javascript/lighten-darken-color/

    }, {
      key: "LightenDarkenColor",
      value: function LightenDarkenColor(col, amt) {
        var usePound = false;

        if (col[0] === '#') {
          col = col.slice(1);
          usePound = true;
        }

        var num = parseInt(col, 16);
        var r = (num >> 16) + amt;
        if (r > 255) r = 255;else if (r < 0) r = 0;
        var b = (num >> 8 & 0x00FF) + amt;
        if (b > 255) b = 255;else if (b < 0) b = 0;
        var g = (num & 0x0000FF) + amt;
        if (g > 255) g = 255;else if (g < 0) g = 0; //return (usePound ? '#' : '') + (g | (b << 8) | (r << 16)).toString(16);

        return (usePound ? '#' : '') + String('000000' + (g | b << 8 | r << 16).toString(16)).slice(-6);
      }
    }, {
      key: "getFontFamilyHTML",
      value: function getFontFamilyHTML() {
        // let path = this.builder.scriptPath + 'fonts/';
        var path = this.builder.fontAssetPath;
        var html = "\n        <!DOCTYPE HTML>\n        <html>\n        <head>\n            <meta charset=\"utf-8\">\n            <title>Fonts</title>\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <meta name=\"description\" content=\"\">  \n            <style>\n                html, body {height:100%}\n                body {overflow:hidden;margin:0;\n                    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n                    font-size:100%; \n                    line-height:1.7;\n                }\n                #divFontList {margin:0;padding:9px 11px 9px 9px;height:100%;overflow-y:scroll !important;box-sizing:border-box;}\n                #divFontList > div {width:100%;cursor:pointer;overflow:hidden;text-align:center;position:relative;}\n                #divFontList > div img {margin:7px 5px 0px 5px;max-width: 230px;max-height: 27px;}\n                #divFontList > div.on div {\n                    background:rgba(0,0,0,0.03);;  \n                }\n                #divFontList > div div {position:absolute;top:0;left:0;width:100%;height:100%;}\n                #divFontList > div:hover div {background:rgba(0,0,0,0.03);}\n            </style>\n        </head>\n        <body>\n\n        <div id=\"divFontList\">\n        <div data-provider=\"\" data-font-family=\"\" style=\"font-size:12px;padding:10px 7px;box-sizing:border-box;\"><div></div>None</div>\n        <div data-provider=\"\" data-font-family=\"Arial, sans-serif\"><div></div><img src=\"".concat(path, "arial.png\"></div>\n        <div data-provider=\"\" data-font-family=\"courier\"><div></div><img src=\"").concat(path, "courier.png\"></div>\n        <div data-provider=\"\" data-font-family=\"Georgia, serif\"><div></div><img src=\"").concat(path, "georgia.png\"></div>\n        <!--<div data-provider=\"\" data-font-family=\"Helvetica Neue, Helvetica, Arial, sans-serif\"><div></div><img src=\"").concat(path, "helvetica_neue.png\"></div>-->\n        <div data-provider=\"\" data-font-family=\"monospace\"><div></div><img src=\"").concat(path, "monospace.png\"></div>\n        <div data-provider=\"\" data-font-family=\"sans-serif\"><div></div><img src=\"").concat(path, "sans_serif.png\"></div>\n        <div data-provider=\"\" data-font-family=\"serif\"><div></div><img src=\"").concat(path, "serif.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Abel, sans-serif\"><div></div><img src=\"").concat(path, "abel.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Abril Fatface\"><div></div><img src=\"").concat(path, "abril_fatface.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Advent Pro, sans-serif\" data-font-style=\"300\"><div></div><img src=\"").concat(path, "advent_pro.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Aladin, cursive\"><div></div><img src=\"").concat(path, "aladin.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Alegreya, serif\" data-font-style=\"400,400i,500,500i,700,700i,800,800i,900,900i\"><div></div><img src=\"").concat(path, "alegreya.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Alegreya Sans SC, sans-serif\" data-font-style=\"300,700\"><div></div><img src=\"").concat(path, "alegreya_sans_sc.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Alegreya SC, serif\" data-font-style=\"400,400i,500,500i,700,700i,800,800i,900,900i\"><div></div><img src=\"").concat(path, "alegreya_sc.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Alice, serif\"><div></div><img src=\"").concat(path, "alice.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Allerta Stencil, sans-serif\"><div></div><img src=\"").concat(path, "allerta_stencil.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Allura, cursive\"><div></div><img src=\"").concat(path, "allura.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Almendra Display, cursive\"><div></div><img src=\"").concat(path, "almendra_display.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Amatic SC, cursive\" data-font-style=\"400,700\"><div></div><img src=\"").concat(path, "amatic_sc.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Andika, sans-serif\"><div></div><img src=\"").concat(path, "andika.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Anonymous Pro, monospace\" data-font-style=\"400,400i,700,700i\"><div></div><img src=\"").concat(path, "anonymous_pro.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Architects Daughter, cursive\"><div></div><img src=\"").concat(path, "architects_daughter.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Arimo, sans-serif\" data-font-style=\"400,400i,700,700i\"><div></div><img src=\"").concat(path, "arimo.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Arsenal, sans-serif\" data-font-style=\"400,400i,700,700i\"><div></div><img src=\"").concat(path, "arsenal.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Assistant\" data-font-style=\"300,700\"><div></div><img src=\"").concat(path, "assistant.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Aubrey, cursive\"><div></div><img src=\"").concat(path, "aubrey.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Anton, sans-serif\"><div></div><img src=\"").concat(path, "anton.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Archivo Narrow, sans-serif\"><div></div><img src=\"").concat(path, "archivo_narrow.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Bad Script, cursive\"><div></div><img src=\"").concat(path, "bad_script.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"BenchNine, sans-serif\"><div></div><img src=\"").concat(path, "benchNine.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Bevan, cursive\"><div></div><img src=\"").concat(path, "bevan.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Bigelow Rules, cursive\"><div></div><img src=\"").concat(path, "bigelow_rules.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Bilbo, cursive\"><div></div><img src=\"").concat(path, "bilbo.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Bonbon, cursive\"><div></div><img src=\"").concat(path, "bonbon.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Bowlby One SC, cursive\"><div></div><img src=\"").concat(path, "bowlby_one_sc.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Cabin Condensed, sans-serif\"><div></div><img src=\"").concat(path, "cabin_condensed.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Carrois Gothic SC, sans-serif\"><div></div><img src=\"").concat(path, "carrois_gothic_sc.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Caveat, cursive\" data-font-style=\"400,700\"><div></div><img src=\"").concat(path, "caveat.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Chewy, cursive\"><div></div><img src=\"").concat(path, "chewy.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Cinzel, serif\"><div></div><img src=\"").concat(path, "cinzel.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Comfortaa, cursive\" data-font-style=\"300\"><div></div><img src=\"").concat(path, "comfortaa.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Concert One, cursive\"><div></div><img src=\"").concat(path, "concert_one.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Cormorant, serif\" data-font-style=\"300,300i,600,600i,700,700i\"><div></div><img src=\"").concat(path, "cormorant.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Cormorant Garamond, serif\" data-font-style=\"300,300i,600,600i,700,700i\"><div></div><img src=\"").concat(path, "cormorant_garamond.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Cormorant Infant, serif\" data-font-style=\"300,300i,600,600i,700,700i\"><div></div><img src=\"").concat(path, "cormorant_infant.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Cormorant SC, serif\" data-font-style=\"300,600,700\"><div></div><img src=\"").concat(path, "cormorant_sc.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Cormorant Unicase, serif\" data-font-style=\"300,600,700\"><div></div><img src=\"").concat(path, "cormorant_unicase.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Cousine\" data-font-style=\"400,700\"><div></div><img src=\"").concat(path, "cousine.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Crafty Girls, cursive\"><div></div><img src=\"").concat(path, "crafty_girls.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Cuprum, sans-serif\" data-font-style=\"400,400i,700,700i\"><div></div><img src=\"").concat(path, "cuprum.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Cutive Mono, monospace\"><div></div><img src=\"").concat(path, "cutive_mono.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Devonshire, cursive\"><div></div><img src=\"").concat(path, "devonshire.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Didact Gothic, sans-serif\"><div></div><img src=\"").concat(path, "didact_gothic.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Diplomata SC, cursive\"><div></div><img src=\"").concat(path, "diplomata_sc.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Dosis, sans-serif\" data-font-style=\"200\"><div></div><img src=\"").concat(path, "dosis.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"EB Garamond, serif\" data-font-style=\"400,400i,600,600i,700,700i,800,800i\"><div></div><img src=\"").concat(path, "eb_garamond.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"El Messiri, sans-serif\" data-font-style=\"400,600,700\"><div></div><img src=\"").concat(path, "el_messiri.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Elsie, cursive\" data-font-style=\"400,900\"><div></div><img src=\"").concat(path, "elsie.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Encode Sans, sans-serif\" data-font-style=\"300,700\"><div></div><img src=\"").concat(path, "encode_sans.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Exo, sans-serif\" data-font-style=\"100\"><div></div><img src=\"").concat(path, "exo.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"'Exo 2', sans-serif\" data-font-style=\"200,200i,600,600i,700,700i,800,800i,900,900i\" data-font-display=\"swap\"><div></div><img src=\"").concat(path, "exo_2.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Felipa, cursive\"><div></div><img src=\"").concat(path, "felipa.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Fira Code, monospace\" data-font-style=\"300,500,600,700\"><div></div><img src=\"").concat(path, "fira_code.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Fira Mono, monospace\" data-font-style=\"400,500,700\"><div></div><img src=\"").concat(path, "fira_mono.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Fira Sans, sans-serif\" data-font-style=\"200,200i,500,500i,700,700i,800,800i,900,900i\"><div></div><img src=\"").concat(path, "fira_sans.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Fira Sans Condensed, sans-serif\" data-font-style=\"200,200i,500,500i,700,700i,800,800i,900,900i\"><div></div><img src=\"").concat(path, "fira_sans_condensed.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Fira Sans Extra Condensed, sans-serif\" data-font-style=\"200,200i,500,500i,700,700i,800,800i,900,900i\"><div></div><img src=\"").concat(path, "fira_sans_extra_condensed.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Fjalla One, sans-serif\"><div></div><img src=\"").concat(path, "fjalla_one.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Forum, cursive\"><div></div><img src=\"").concat(path, "forum.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Frank Ruhl Libre\" data-font-style=\"300,700\"><div></div><img src=\"").concat(path, "frank_ruhl_libre.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Fredericka the Great, cursive\"><div></div><img src=\"").concat(path, "fredericka_the_great.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Gabriela, serif\"><div></div><img src=\"").concat(path, "gabriela.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Gilda Display, serif\"><div></div><img src=\"").concat(path, "gilda_display.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Give You Glory, cursive\"><div></div><img src=\"").concat(path, "give_you_glory.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Gruppo, cursive\"><div></div><img src=\"").concat(path, "gruppo.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Handlee, cursive\"><div></div><img src=\"").concat(path, "handlee.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Happy Monkey, cursive\"><div></div><img src=\"").concat(path, "happy_monkey.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Hind\" data-font-style=\"300,700\"><div></div><img src=\"").concat(path, "hind.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"IBM Plex Mono, monospace\" data-font-style=\"300,300i,500,500i,600,600i,700,700i\"><div></div><img src=\"").concat(path, "ibm_plex_mono.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"IBM Plex Sans, sans-serif\" data-font-style=\"300,300i,500,500i,600,600i,700,700i\"><div></div><img src=\"").concat(path, "ibm_plex_sans.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"IBM Plex Serif, serif\" data-font-style=\"300,300i,500,500i,600,600i,700,700i\"><div></div><img src=\"").concat(path, "ibm_plex_serif.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Iceland, cursive\"><div></div><img src=\"").concat(path, "iceland.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Inconsolata, monospace\" data-font-style=\"400,700\"><div></div><img src=\"").concat(path, "inconsolata.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Josefin Sans, sans-serif\" data-font-style=\"300,700\"><div></div><img src=\"").concat(path, "josefin_sans.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Istok Web, sans-serif\" data-font-style=\"400,400i,700,700i\"><div></div><img src=\"").concat(path, "istok_web.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Julee, cursive\"><div></div><img src=\"").concat(path, "julee.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Julius Sans One, sans-serif\"><div></div><img src=\"").concat(path, "julius_sans_one.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Junge, serif\"><div></div><img src=\"").concat(path, "junge.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Jura, sans-serif\" data-font-style=\"300,600,700\"><div></div><img src=\"").concat(path, "jura.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Just Me Again Down Here, cursive\"><div></div><img src=\"").concat(path, "just_me_again_down_here.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Kaushan Script, cursive\"><div></div><img src=\"").concat(path, "kaushan_script.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Kelly Slab, cursive\"><div></div><img src=\"").concat(path, "kelly_slab.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Kite One, sans-serif\"><div></div><img src=\"").concat(path, "kite_one.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Kosugi, sans-serif\"><div></div><img src=\"").concat(path, "kosugi.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Kosugi Maru, sans-serif\"><div></div><img src=\"").concat(path, "kosugi_maru.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Kurale, serif\"><div></div><img src=\"").concat(path, "kurale.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Lato, sans-serif\" data-font-style=\"300,700\"><div></div><img src=\"").concat(path, "lato.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Ledger, serif\" data-font-style=\"300,700\" data-font-display=\"swap\"><div></div><img src=\"").concat(path, "ledger.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Lekton, sans-serif\" data-font-style=\"400,700\"><div></div><img src=\"").concat(path, "lekton.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Life Savers, cursive\"><div></div><img src=\"").concat(path, "life_savers.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Literata, serif\" data-font-style=\"400,400i,600,600i,700,700i\"><div></div><img src=\"").concat(path, "literata.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Lobster, cursive\"><div></div><img src=\"").concat(path, "lobster.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Lobster Two, cursive\"><div></div><img src=\"").concat(path, "lobster_two.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Londrina Shadow, cursive\"><div></div><img src=\"").concat(path, "londrina_shadow.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Lora, serif\" data-font-style=\"400,700\"><div></div><img src=\"").concat(path, "lora.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Lovers Quarrel, cursive\"><div></div><img src=\"").concat(path, "lovers_quarrel.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"'M PLUS 1p', sans-serif\" data-font-style=\"300,500,700,800,900\" data-font-display=\"swap\"><div></div><img src=\"").concat(path, "m_plus_1p.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"'M PLUS Rounded 1c', sans-serif\" data-font-style=\"300,500,700,800,900\" data-font-display=\"swap\"><div></div><img src=\"").concat(path, "m_plus_rounded_1c.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Macondo, cursive\"><div></div><img src=\"").concat(path, "macondo.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Marcellus SC, serif\"><div></div><img src=\"").concat(path, "marcellus_sc.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Marck Script, cursive\"><div></div><img src=\"").concat(path, "marck_script.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Martel, serif\" data-font-style=\"300,700\"><div></div><img src=\"").concat(path, "martel.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Maven Pro, sans-serif\"><div></div><img src=\"").concat(path, "maven_pro.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Merriweather, serif\" data-font-style=\"300,700\"><div></div><img src=\"").concat(path, "merriweather.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Merriweather Sans\" data-font-style=\"300,700\"><div></div><img src=\"").concat(path, "merriweather_sans.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Mogra, cursive\"><div></div><img src=\"").concat(path, "mogra.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Monoton, cursive\"><div></div><img src=\"").concat(path, "monoton.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Montez, cursive\"><div></div><img src=\"").concat(path, "montez.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Montserrat, sans-serif\" data-font-style=\"300,400,700\"><div></div><img src=\"").concat(path, "montserrat.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Montserrat Alternates, sans-serif\" data-font-style=\"300,300i,500,500i,700,700i,800,800i,900,900i\"><div></div><img src=\"").concat(path, "montserrat_alternates.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Montserrat Subrayada, sans-serif\"><div></div><img src=\"").concat(path, "montserrat_subrayada.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Muli, sans-serif\" data-font-style=\"300,700\"><div></div><img src=\"").concat(path, "muli.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Neucha, cursive\"><div></div><img src=\"").concat(path, "neucha.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Neuton, serif\" data-font-style=\"200,700\"><div></div><img src=\"").concat(path, "neuton.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Nixie One, cursive\"><div></div><img src=\"").concat(path, "nixie_one.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Nothing You Could Do, cursive\"><div></div><img src=\"").concat(path, "nothing_you_could_do.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Noto Sans, sans-serif\" data-font-style=\"400,400i,700,700i\"><div></div><img src=\"").concat(path, "noto_sans.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Noto Sans SC, sans-serif\" data-font-style=\"300,500,700,900\"><div></div><img src=\"").concat(path, "noto_sans_sc.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Noto Serif, serif\" data-font-style=\"400,400i,700,700i\"><div></div><img src=\"").concat(path, "noto_serif.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Noto Serif TC, serif\" data-font-style=\"300,600,700,900\"><div></div><img src=\"").concat(path, "noto_serif_tc.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Nunito, sans-serif\" data-font-style=\"200,200i,600,600i,700,700i,800,800i,900,900i\"><div></div><img src=\"").concat(path, "nunito.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Old Standard TT, serif\" data-font-style=\"400,400i,700\"><div></div><img src=\"").concat(path, "old_standard_tt.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Open Sans, sans-serif\" data-font-style=\"300,400,600,800\"><div></div><img src=\"").concat(path, "open_sans.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Open Sans Condensed, sans-serif\" data-font-style=\"300,300i,700\"><div></div><img src=\"").concat(path, "open_sans_condensed.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Oranienbaum, serif\"><div></div><img src=\"").concat(path, "oranienbaum.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Oswald, sans-serif\" data-font-style=\"300,400,700\"><div></div><img src=\"").concat(path, "oswald.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Oxygen, sans-serif\" data-font-style=\"300,700\"><div></div><img src=\"").concat(path, "oxygen.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Pacifico, cursive\"><div></div><img src=\"").concat(path, "pacifico.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Pangolin, cursive\"><div></div><img src=\"").concat(path, "pangolin.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Passion One, cursive\"><div></div><img src=\"").concat(path, "passion_one.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Pathway Gothic One, sans-serif\"><div></div><img src=\"").concat(path, "pathway_gothic_one.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Pattaya, sans-serif\"><div></div><img src=\"").concat(path, "pattaya.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Petit Formal Script, cursive\"><div></div><img src=\"").concat(path, "petit_formal_script.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Philosopher, sans-serif\"><div></div><img src=\"").concat(path, "philosopher.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Play, sans-serif\" data-font-style=\"400,700\"><div></div><img src=\"").concat(path, "play.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Playfair Display, serif\" data-font-style=\"400,400i,700,700i,900,900i\"><div></div><img src=\"").concat(path, "playfair_display.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Playfair Display SC, serif\" data-font-style=\"400,400i,700,700i,900,900i\"><div></div><img src=\"").concat(path, "playfair_display_sc.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Podkova, serif\" data-font-style=\"400,600,700,800\"><div></div><img src=\"").concat(path, "podkova.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Poiret One, cursive\"><div></div><img src=\"").concat(path, "poiret_one.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Pompiere, cursive\"><div></div><img src=\"").concat(path, "pompiere.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Poppins, sans-serif\" data-font-style=\"400,600\"><div></div><img src=\"").concat(path, "poppins.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Prata, serif\"><div></div><img src=\"").concat(path, "prata.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"'Press Start 2P', cursive\" data-font-display=\"swap\"><div></div><img src=\"").concat(path, "press_start_2p.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Prosto One, cursive\"><div></div><img src=\"").concat(path, "prosto_one.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"PT Mono, monospace\"><div></div><img src=\"").concat(path, "pt_mono.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"PT Sans, sans-serif\" data-font-style=\"400,400i,700,700i\"><div></div><img src=\"").concat(path, "pt_sans.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"PT Sans Caption, sans-serif\" data-font-style=\"400,700\"><div></div><img src=\"").concat(path, "pt_sans_caption.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"PT Sans Narrow, sans-serif\" data-font-style=\"400,700\"><div></div><img src=\"").concat(path, "pt_sans_narrow.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"PT Serif, serif\" data-font-style=\"400,700\"><div></div><img src=\"").concat(path, "pt_serif.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"PT Serif Caption, serif\" data-font-style=\"400,700\"><div></div><img src=\"").concat(path, "pt_serif_caption.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Quattrocento Sans, sans-serif\"><div></div><img src=\"").concat(path, "quattrocento_sans.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Quattrocento, serif\"><div></div><img src=\"").concat(path, "quattrocento.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Quicksand, sans-serif\"><div></div><img src=\"").concat(path, "quicksand.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Qwigley, cursive\"><div></div><img src=\"").concat(path, "qwigley.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Raleway, sans-serif\" data-font-style=\"100\"><div></div><img src=\"").concat(path, "raleway.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Raleway Dots, sans-serif\"><div></div><img src=\"").concat(path, "raleway_dots.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Redressed, cursive\"><div></div><img src=\"").concat(path, "redressed.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Ribeye Marrow, cursive\"><div></div><img src=\"").concat(path, "ribeye_marrow.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Righteous, cursive\"><div></div><img src=\"").concat(path, "righteous.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Roboto, sans-serif\" data-font-style=\"300\"><div></div><img src=\"").concat(path, "roboto.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Roboto Condensed, sans-serif\" data-font-style=\"300,300i,700,700i\"><div></div><img src=\"").concat(path, "roboto_condensed.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Roboto Mono, monospace\" data-font-style=\"300,700\"><div></div><img src=\"").concat(path, "roboto_mono.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Roboto Slab, serif\" data-font-style=\"200,600,700,800,900\"><div></div><img src=\"").concat(path, "roboto_slab.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Rochester, cursive\"><div></div><img src=\"").concat(path, "rochester.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Rouge Script, cursive\"><div></div><img src=\"").concat(path, "rouge_script.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Rubik, sans-serif\" data-font-style=\"300,300i,500,500i,700,700i,900,900i\"><div></div><img src=\"").concat(path, "rubik.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Rubik Mono One, sans-serif\"><div></div><img src=\"").concat(path, "rubik_mono_one.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Ruslan Display, cursive\"><div></div><img src=\"").concat(path, "ruslan_display.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Russo One, sans-serif\"><div></div><img src=\"").concat(path, "russo_one.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Sacramento, cursive\"><div></div><img src=\"").concat(path, "sacramento.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Sanchez, serif\"><div></div><img src=\"").concat(path, "sanchez.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Satisfy, cursive\"><div></div><img src=\"").concat(path, "satisfy.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Sawarabi Gothic, sans-serif\"><div></div><img src=\"").concat(path, "sawarabi_gothic.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Scada, sans-serif\" data-font-style=\"400,400i,700,700i\"><div></div><img src=\"").concat(path, "scada.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Seaweed Script, cursive\"><div></div><img src=\"").concat(path, "seaweed_script.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Seymour One, sans-serif\"><div></div><img src=\"").concat(path, "seymour_one.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Shadows Into Light Two, cursive\"><div></div><img src=\"").concat(path, "shadows_into_light_two.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Six Caps, sans-serif\"><div></div><img src=\"").concat(path, "six_caps.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Snowburst One, cursive\"><div></div><img src=\"").concat(path, "snowburst_one.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Source Code Pro, monospace\" data-font-style=\"300,700\"><div></div><img src=\"").concat(path, "source_code_pro.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Source Sans Pro, sans-serif\" data-font-style=\"200\"><div></div><img src=\"").concat(path, "source_sans_pro.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Special Elite, cursive\"><div></div><img src=\"").concat(path, "special_elite.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Spectral, serif\" data-font-style=\"200,200i,600,600i,700,700i,800,800i\"><div></div><img src=\"").concat(path, "spectral.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Spectral SC, serif\" data-font-style=\"300,300i,600,600i,700,700i,800,800i\"><div></div><img src=\"").concat(path, "spectral_sc.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Squada One, cursive\"><div></div><img src=\"").concat(path, "squada_one.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Stalinist One, cursive\"><div></div><img src=\"").concat(path, "stalinist_one.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Stint Ultra Expanded, cursive\"><div></div><img src=\"").concat(path, "stint_ultra_expanded.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Syncopate, sans-serif\"><div></div><img src=\"").concat(path, "syncopate.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Tangerine, cursive\"><div></div><img src=\"").concat(path, "tangerine.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Tenor Sans, sans-serif\"><div></div><img src=\"").concat(path, "tenor_sans.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Tinos, serif\" data-font-style=\"400,400i,700,700i\"><div></div><img src=\"").concat(path, "tinos.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Ubuntu, sans-serif\" data-font-style=\"300,300i,500,500i,700,700i\"><div></div><img src=\"").concat(path, "ubuntu.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Ubuntu Condensed, sans-serif\"><div></div><img src=\"").concat(path, "ubuntu_condensed.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Ubuntu Mono, monospace\" data-font-style=\"400,700\"><div></div><img src=\"").concat(path, "ubuntu_mono.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Underdog, cursive\"><div></div><img src=\"").concat(path, "underdog.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"UnifrakturMaguntia, cursive\"><div></div><img src=\"").concat(path, "unifrakturmaguntia.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Vast Shadow, cursive\"><div></div><img src=\"").concat(path, "vast_shadow.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Viga, sans-serif\"><div></div><img src=\"").concat(path, "viga.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Vollkorn, serif\" data-font-style=\"400,400i,600,600i,700,700i,900,900i\"><div></div><img src=\"").concat(path, "vollkorn.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Vollkorn SC, serif\" data-font-style=\"400,600,700,900\"><div></div><img src=\"").concat(path, "vollkorn_sc.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Voltaire, sans-serif\"><div></div><img src=\"").concat(path, "voltaire.jpg\"></div>\n        <div data-provider=\"google\" data-font-family=\"Wire One, sans-serif\"><div></div><img src=\"").concat(path, "wire_one.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Yanone Kaffeesatz, sans-serif\" data-font-style=\"300,700\"><div></div><img src=\"").concat(path, "yanone_kaffeesatz.png\"></div>\n        <div data-provider=\"google\" data-font-family=\"Yeseva One, cursive\"><div></div><img src=\"").concat(path, "yeseva_one.png\"></div>\n        </div>\n\n        <script type=\"text/javascript\">\n            var elms = document.querySelectorAll('#divFontList > div');\n            for(var i=0;i<elms.length;i++) {\n                elms[i].addEventListener('click', function(e){\n\n                    var elm = e.target.parentNode;\n                    var on = false;\n                    if(elm.className) {\n                        if(elm.className.indexOf('on')!==-1) {\n                            on = true;\n                        }\n                    }\n                    if(on) {\n                        parent._cb.clearFont();\n                    } else {\n                        var provider = elm.getAttribute('data-provider');\n                        var fontfamily = elm.getAttribute('data-font-family');\n                        var fontstyle = elm.getAttribute('data-font-style');\n                        var fontdisplay = elm.getAttribute('data-font-display');\n                        //parent._cb.applyFont(fontfamily, fontstyle, provider);\n                        parent._cb.setFont(fontfamily, fontstyle, fontdisplay, provider);\n                    }\n\n                });\n            }\n\n        </script>\n        \n        </body>\n        </html>\n                \n        \n        ");
        return html;
      }
    }, {
      key: "getFontFamilyEmail",
      value: function getFontFamilyEmail() {
        // let path = this.builder.scriptPath + 'fonts/';
        var path = this.builder.fontAssetPath;
        var html = "\n        <!DOCTYPE HTML>\n        <html>\n        <head>\n            <meta charset=\"utf-8\">\n            <title>Fonts</title>\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <meta name=\"description\" content=\"\">  \n            <style>\n                html, body {height:100%}\n                body {overflow:hidden;margin:0;\n                    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n                    font-size:100%; \n                    line-height:1.7;\n                }\n                #divFontList {margin:0;padding:9px 11px 9px 9px;height:100%;overflow-y:scroll !important;box-sizing:border-box;}\n                #divFontList > div {width:100%;cursor:pointer;overflow:hidden;text-align:center;position:relative;}\n                #divFontList > div img {margin:7px 5px 0px 5px;max-width: 230px;max-height: 27px;}\n                #divFontList > div.on div {\n                    background:rgba(0,0,0,0.03);;  \n                }\n                #divFontList > div div {position:absolute;top:0;left:0;width:100%;height:100%;}\n                #divFontList > div:hover div {background:rgba(0,0,0,0.03);}\n            </style>\n        </head>\n        <body>\n\n        <div id=\"divFontList\">\n        <div data-provider=\"\" data-font-family=\"\" style=\"font-size:12px;padding:10px 7px;box-sizing:border-box;\"><div></div>None</div>\n        <div data-provider=\"\" data-font-family=\"Arial, sans-serif\"><div></div><img src=\"".concat(path, "arial.png\"></div>\n        <div data-provider=\"\" data-font-family=\"courier\"><div></div><img src=\"").concat(path, "courier.png\"></div>\n        <div data-provider=\"\" data-font-family=\"Georgia, serif\"><div></div><img src=\"").concat(path, "georgia.png\"></div>\n        <!--<div data-provider=\"\" data-font-family=\"Helvetica Neue, Helvetica, Arial, sans-serif\"><div></div><img src=\"").concat(path, "helvetica_neue.png\"></div>-->\n        <div data-provider=\"\" data-font-family=\"monospace\"><div></div><img src=\"").concat(path, "monospace.png\"></div>\n        <div data-provider=\"\" data-font-family=\"sans-serif\"><div></div><img src=\"").concat(path, "sans_serif.png\"></div>\n        <div data-provider=\"\" data-font-family=\"serif\"><div></div><img src=\"").concat(path, "serif.png\"></div>\n        </div>\n\n        <script type=\"text/javascript\">\n            var elms = document.querySelectorAll('#divFontList > div');\n            for(var i=0;i<elms.length;i++) {\n                elms[i].addEventListener('click', function(e){\n\n                    var elm = e.target.parentNode;\n                    var on = false;\n                    if(elm.className) {\n                        if(elm.className.indexOf('on')!==-1) {\n                            on = true;\n                        }\n                    }\n                    if(on) {\n                        parent._cb.clearFont();\n                    } else {\n                        var provider = elm.getAttribute('data-provider');\n                        var fontfamily = elm.getAttribute('data-font-family');\n                        var fontstyle = elm.getAttribute('data-font-style');\n                        var fontdisplay = elm.getAttribute('data-font-display');\n                        //parent._cb.applyFont(fontfamily, fontstyle, provider);\n                        parent._cb.setFont(fontfamily, fontstyle, fontdisplay, provider);\n                    }\n\n                });\n            }\n\n        </script>\n        \n        </body>\n        </html>\n                \n        \n        ");
        return html;
      }
    }]);

    return Util;
  }();
  var Dom = /*#__PURE__*/function () {
    function Dom() {
      _classCallCheck$1(this, Dom);
    }

    _createClass$1(Dom, [{
      key: "createElement",
      value: function createElement(tag) {
        return document.createElement(tag);
      }
    }, {
      key: "appendChild",
      value: function appendChild(parent, child) {
        parent.appendChild(child);
      }
    }, {
      key: "appendHtml",
      value: function appendHtml(parent, html) {
        parent.insertAdjacentHTML('beforeend', html);
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(parent, type, listener) {
        //LATER: if(parent) 
        parent.addEventListener(type, listener);
      }
    }, {
      key: "addClass",
      value: function addClass(element, classname) {
        if (!element) return;
        if (this.hasClass(element, classname)) return;
        if (element.classList.length === 0) element.className = classname;else element.className = element.className + ' ' + classname;
        element.className = element.className.replace(/  +/g, ' '); //else element.classList.add(classname); //error if there is -
      }
    }, {
      key: "removeClass",
      value: function removeClass(element, classname) {
        if (!element) return;

        if (element.classList.length > 0) {
          // element.className = element.className.replace(new RegExp('\\b'+ classname+'\\b', 'g'), '');
          // element.className = element.className.replace(/  +/g, ' ');
          var i, j, imax, jmax;
          var classesToDel = classname.split(' ');

          for (i = 0, imax = classesToDel.length; i < imax; ++i) {
            if (!classesToDel[i]) continue;
            var classtoDel = classesToDel[i]; // https://jsperf.com/removeclass-methods 

            var sClassName = '';
            var currentClasses = element.className.split(' ');

            for (j = 0, jmax = currentClasses.length; j < jmax; ++j) {
              if (!currentClasses[j]) continue;
              if (currentClasses[j] !== classtoDel) sClassName += currentClasses[j] + ' ';
            }

            element.className = sClassName.trim();
          }

          if (element.className === '') element.removeAttribute('class');
        }
      } // https://plainjs.com/javascript/attributes/adding-removing-and-testing-for-classes-9/
      // addClass(element, classname) {
      //     console.log(element.classList)
      //     if (element.classList) element.classList.add(classname);
      //     else if (!this.hasClass(element, classname)) element.className += ' ' + classname;
      // }
      // removeClass(element, classname) {
      //     if (element.classList) element.classList.remove(classname);
      //     else element.className = element.className.replace(new RegExp('\\b'+ classname+'\\b', 'g'), '');
      // }

    }, {
      key: "hasClass",
      value: function hasClass(element, classname) {
        if (!element) return false;

        try {
          var s = element.getAttribute('class');
          return new RegExp('\\b' + classname + '\\b').test(s);
        } catch (e) {// Do Nothing
          // console.log(element);
        } //return element.classList ? element.classList.contains(classname) : new RegExp('\\b'+ classname+'\\b').test(element.className);

      }
    }, {
      key: "moveAfter",
      value: function moveAfter(element, targetElement) {
        targetElement.parentNode.insertBefore(element, targetElement);
        targetElement.parentNode.insertBefore(targetElement, targetElement.previousElementSibling);
      } // https://stackoverflow.com/questions/10381296/best-way-to-get-child-nodes

    }, {
      key: "elementChildren",
      value: function elementChildren(element) {
        var childNodes = element.childNodes;
        var children = [];
        var i = childNodes.length;

        while (i--) {
          if (childNodes[i].nodeType === 1
          /*&& childNodes[i].tagName === 'DIV'*/
          ) {
              children.unshift(childNodes[i]);
            }
        }

        return children;
      }
    }, {
      key: "parentsHasClass",
      value: function parentsHasClass(element, classname) {
        while (element) {
          // if(classname==='is-side') console.log(element.nodeName); // NOTE: click on svg can still returns undefined in IE11
          if (!element.tagName) return false;
          if (element.tagName === 'BODY' || element.tagName === 'HTML') return false; // if(!element.classList) {
          //     console.log('no classList');
          //     return false;
          // }

          if (this.hasClass(element, classname)) {
            return true;
          } // TODO: if(element.nodeName.toLowerCase() === 'svg') console.log(element);


          element = element.parentNode;
        }
      }
    }, {
      key: "parentsHasId",
      value: function parentsHasId(element, id) {
        while (element) {
          if (!element.tagName) return false;
          if (element.tagName === 'BODY' || element.tagName === 'HTML') return false;

          if (element.id === id) {
            return true;
          }

          element = element.parentNode;
        }
      }
    }, {
      key: "parentsHasTag",
      value: function parentsHasTag(element, tagname) {
        while (element) {
          if (!element.tagName) return false;
          if (element.tagName === 'BODY' || element.tagName === 'HTML') return false;

          if (element.tagName.toLowerCase() === tagname.toLowerCase()) {
            return true;
          }

          element = element.parentNode;
        }
      }
    }, {
      key: "parentsHasAttribute",
      value: function parentsHasAttribute(element, attrname) {
        while (element) {
          if (!element.tagName) return false;
          if (element.tagName === 'BODY' || element.tagName === 'HTML') return false;

          try {
            if (element.hasAttribute(attrname)) {
              // error on svg element
              return true;
            }
          } catch (e) {// Do Nothing
            // console.log(element);
            // return false;
          }

          element = element.parentNode;
        }
      }
    }, {
      key: "parentsHasElement",
      value: function parentsHasElement(element, tagname) {
        while (element) {
          if (!element.tagName) return false;
          if (element.tagName === 'BODY' || element.tagName === 'HTML') return false;
          element = element.parentNode;
          if (!element) return false;
          if (!element.tagName) return false;

          if (element.tagName.toLowerCase() === tagname) {
            return true;
          }
        }
      }
    }, {
      key: "removeClasses",
      value: function removeClasses(elms, classname) {
        for (var i = 0; i < elms.length; i++) {
          elms[i].classList.remove(classname);
        }
      }
    }, {
      key: "removeAttributes",
      value: function removeAttributes(elms, attrname) {
        for (var i = 0; i < elms.length; i++) {
          elms[i].removeAttribute(attrname);
        }
      }
    }, {
      key: "removeElements",
      value: function removeElements(elms) {
        Array.prototype.forEach.call(elms, function (el) {
          el.parentNode.removeChild(el);
        });
      } // source: https://stackoverflow.com/questions/2871081/jquery-setting-cursor-position-in-contenteditable-div

    }, {
      key: "moveCursorToElement",
      value: function moveCursorToElement(element) {
        var sel, range;

        if (window.getSelection && document.createRange) {
          range = document.createRange();
          range.selectNodeContents(element);
          range.collapse(false);
          sel = window.getSelection();
          sel.removeAllRanges();
          sel.addRange(range);
        } else if (document.body.createTextRange) {
          range = document.body.createTextRange();
          range.moveToElementText(element);
          range.collapse(false);
          range.select();
        }
      } // source: https://stackoverflow.com/questions/6139107/programmatically-select-text-in-a-contenteditable-html-element

    }, {
      key: "selectElementContents",
      value: function selectElementContents(el) {
        var range = document.createRange();
        range.selectNodeContents(el);
        var sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
      } // Get selected text

    }, {
      key: "getSelected",
      value: function getSelected() {
        if (window.getSelection) {
          return window.getSelection().toString();
        } else if (document.getSelection) {
          return document.getSelection().toString();
        } else {
          var selection = document.selection && document.selection.createRange();

          if (selection.text) {
            return selection.text;
          }

          return false;
        }
      }
    }, {
      key: "checkEditable",
      value: function checkEditable() {
        try {
          var el;
          var curr;

          if (window.getSelection) {
            curr = window.getSelection().getRangeAt(0).commonAncestorContainer;

            if (curr.nodeType === 3) {
              //ini text node
              el = curr.parentNode;
            } else {
              el = curr;
            }
          } else if (document.selection) {
            curr = document.selection.createRange();
            el = document.selection.createRange().parentElement();
          }

          if (this.parentsHasAttribute(el, 'contenteditable')) return true;else return false;
        } catch (e) {
          return false;
        }
      }
    }, {
      key: "textSelection",
      value: function textSelection() {
        try {
          var elm;
          var curr = window.getSelection().getRangeAt(0).commonAncestorContainer; //console.log(curr.nodeType)

          if (curr.nodeType === 3) {
            // text node
            elm = curr.parentNode;

            if (this.parentsHasClass(elm, 'is-builder')) {
              return elm;
            } else {
              return false;
            }
          } else {
            elm = curr;
            var nodeName = elm.nodeName.toLowerCase();

            if (nodeName === 'i' && elm.innerHTML === '') {
              //icon
              if (this.parentsHasClass(elm, 'is-builder')) {
                return elm;
              }
            } // Check if a block (because when placing cursor using arrow keys on empty block, nodeType=1 not 3)


            if (nodeName === 'p' || nodeName === 'h1' || nodeName === 'h2' || nodeName === 'h3' || nodeName === 'h4' || nodeName === 'h5' || nodeName === 'h6' || nodeName === 'li' || nodeName === 'pre' || nodeName === 'blockquote') {
              return elm;
            }

            return false;
          }
        } catch (e) {
          return false;
        }
      }
    }, {
      key: "getStyle",
      value: function getStyle(element, property) {
        return window.getComputedStyle ? window.getComputedStyle(element, null).getPropertyValue(property) : element.style[property.replace(/-([a-z])/g, function (g) {
          return g[1].toUpperCase();
        })];
      }
      /** added by Jack */

    }, {
      key: "doFunction",
      value: function doFunction(elm, fn, incChilds) {
        fn(elm);

        if (incChilds) {
          var elmns = Array.prototype.slice.call(elm.getElementsByTagName('*'));

          for (var i = 0; i < elmns.length; i++) {
            fn(elmns[i]);
          }
        }
      } // ---

    }]);

    return Dom;
  }();

  var dom$C = new Dom();
  var hash$1 = {};
  var HtmlUtil = /*#__PURE__*/function () {
    function HtmlUtil(builder) {
      var _this = this;

      _classCallCheck$1(this, HtmlUtil);

      this.builder = builder;
      var util = new Util(builder);
      var builderstuff = util.builderStuff();
      var viewhtml = builderstuff.querySelector('.viewhtml');

      if (!viewhtml) {
        /*
        Note:
        - viewhtml => non syntax-highlighted. Click enlarge will open viewhtmllarger (syntax-highlighted). No enlarge toggle.
        - viewhtmlformatted => syntax-highlighted. Click enlarge, just make it full-screen.
         - viewhtmlnormal => for general purposes (can be used outside). Syntax-highlighted. Click enlarge, just make it full-screen.
        */
        var html = "<div class=\"is-modal viewhtml\">\n                <div style=\"width:80%;max-width:1200px;height:80%;padding:0;box-sizing:border-box;position:relative;\">\n                    <textarea class=\"tabSupport\" style=\"width:100%;height:100%;border:none;border-bottom:60px solid transparent;margin:0;box-sizing:border-box;\"></textarea>\n                    <button title=\"".concat(util.out('Enlarge'), "\" class=\"input-html-larger\" style=\"width:35px;height:35px;position:absolute;right:20px;top:0;background:#fff;\"><svg class=\"is-icon-flex\" style=\"width:19px;height:19px;fill:rgb(170, 170, 170);\"><use xlink:href=\"#ion-arrow-expand\"></use></svg></button>\n                    <div class=\"is-modal-footer\" style=\"width:100%;height:50px;position:absolute;left:0;bottom:0;border-top: #efefef 1px solid;overflow:hidden;text-align:right\">\n                        <button title=\"").concat(util.out('Cancel'), "\" class=\"input-cancel classic-secondary\">").concat(util.out('Cancel'), "</button>\n                        <button title=\"").concat(util.out('Ok'), "\" class=\"input-ok classic-primary\">").concat(util.out('Ok'), "</button>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"is-modal viewhtmlformatted\">\n                <div style=\"width:80%;max-width:1200px;height:80%;padding:0;box-sizing:border-box;position:relative;overflow:hidden;\">\n                    <iframe id=\"ifrHtmlFormatted\" style=\"width:100%;height:100%;border:none;margin:0;box-sizing:border-box;\" src=\"about:blank\"></iframe>\n                    <textarea style=\"position:absolute;display:none;\"></textarea>\n                    <button title=\" out('Enlarge') + '\" class=\"input-html-larger\" style=\"width:35px;height:35px;position:absolute;right:20px;top:0;background:#fff;\"><svg class=\"is-icon-flex\" style=\"width:19px;height:19px;fill:rgb(170, 170, 170);\"><use xlink:href=\"#ion-arrow-expand\"></use></svg></button>\n                    <div class=\"is-modal-footer\" style=\"display:none\">\n                        <button class=\"input-cancel classic-secondary\">Cancel</button>\n                        <button class=\"input-ok classic-primary\">Ok</button>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"is-modal viewhtmllarger\" style=\"align-items:flex-end;z-index:10005;\">\n                <div style=\"width:100%;height:100%;border:none;padding:0;\">\n                    <iframe id=\"ifrHtml\" style=\"width:100%;height:100%;border: none;\" src=\"about:blank\"></iframe>\n                </div>\n            </div>\n\n            <div class=\"is-modal viewhtmlnormal\"\">\n                <div style=\"width:80%;max-width:1200px;height:80%;padding:0;box-sizing:border-box;position:relative;overflow:hidden;\">\n                    <button title=\"").concat(util.out('Enlarge'), "\" class=\"input-html-larger\" style=\"width:35px;height:35px;position:absolute;right:20px;top:0;background:#fff;\"><svg class=\"is-icon-flex\" style=\"width:19px;height:19px;fill:rgb(170, 170, 170);\"><use xlink:href=\"#ion-arrow-expand\"></use></svg></button>\n                    <iframe id=\"ifrHtml\" style=\"width:100%;height:100%;border: none;\" src=\"about:blank\"></iframe>\n                </div>\n            </div>\n            \n            ");
        dom$C.appendHtml(builderstuff, html);
        viewhtml = builderstuff.querySelector('.viewhtml');
        var viewhtmlformatted = builderstuff.querySelector('.viewhtmlformatted');
        var viewhtmlnormal = builderstuff.querySelector('.viewhtmlnormal');
        var elm = viewhtml.querySelector('.input-html-larger');
        dom$C.addEventListener(elm, 'click', function () {
          var textarea = viewhtml.querySelector('textarea'); // Used  by html dialog (syntaxhighlighting)
          // let elms = document.querySelectorAll('[data-source-active]');
          // Array.prototype.forEach.call(elms, (elm) => {
          //     elm.removeAttribute('data-source-active');
          //     elm.removeAttribute('data-source-ok');
          //     elm.removeAttribute('data-source-cancel');
          // });

          textarea.setAttribute('data-source-active', '1');
          textarea.setAttribute('data-source-ok', '.viewhtml .input-ok');
          textarea.setAttribute('data-source-cancel', '.viewhtml .input-cancel');

          _this.viewHtmlLarger();
        });
        elm = viewhtmlformatted.querySelector('.input-html-larger');
        dom$C.addEventListener(elm, 'click', function () {
          if (dom$C.hasClass(viewhtmlformatted, 'is-modal-full')) {
            dom$C.removeClass(viewhtmlformatted, 'is-modal-full');
          } else {
            dom$C.addClass(viewhtmlformatted, 'is-modal-full');
          }
        });
        elm = viewhtmlnormal.querySelector('.input-html-larger');
        dom$C.addEventListener(elm, 'click', function () {
          if (dom$C.hasClass(viewhtmlnormal, 'is-modal-full')) {
            dom$C.removeClass(viewhtmlnormal, 'is-modal-full');
          } else {
            dom$C.addClass(viewhtmlnormal, 'is-modal-full');
          }
        });
      }
    }

    _createClass$1(HtmlUtil, [{
      key: "viewHtmlNormal",
      value: function viewHtmlNormal() {
        var util = new Util(this.builder);
        var builderstuff = util.builderStuff();
        var viewhtmlnormal = builderstuff.querySelector('.viewhtmlnormal');
        var iframe = viewhtmlnormal.querySelector('iframe');
        iframe.outerHTML = '<iframe id="ifrHtml" style="width:100%;height:100%;border: none;" src="about:blank"></iframe>'; //clear

        var doc = viewhtmlnormal.querySelector('iframe').contentWindow.document;
        doc.open();
        doc.write(this.getIframeHtml()); // use the same html as viewhtmllarger

        doc.close();
        util.showModal(viewhtmlnormal, true, null, false);
      }
    }, {
      key: "viewHtmlLarger",
      value: function viewHtmlLarger() {
        var util = new Util(this.builder);
        var builderstuff = util.builderStuff();
        var viewhtmllarger = builderstuff.querySelector('.viewhtmllarger');
        var iframe = viewhtmllarger.querySelector('iframe');
        iframe.outerHTML = '<iframe id="ifrHtml" style="width:100%;height:100%;border: none;" src="about:blank"></iframe>'; //clear

        var doc = viewhtmllarger.querySelector('iframe').contentWindow.document;
        doc.open();
        doc.write(this.getIframeHtml());
        doc.close();
        util.showModal(viewhtmllarger, true, null, false);
      }
    }, {
      key: "view",
      value: function view(mode, area) {
        var _this2 = this;

        var util = new Util(this.builder);
        var builderstuff = util.builderStuff();
        var viewhtml;

        if (this.builder.opts.htmlSyntaxHighlighting) {
          viewhtml = builderstuff.querySelector('.viewhtmlformatted');
        } else {
          viewhtml = builderstuff.querySelector('.viewhtml');
        }

        viewhtml.querySelector('.is-modal-footer').innerHTML = "<button title=\"".concat(util.out('Cancel'), "\" class=\"input-cancel classic-secondary\">").concat(util.out('Cancel'), "</button>\n            <button title=\"").concat(util.out('Ok'), "\" class=\"input-ok classic-primary\">").concat(util.out('Ok'), "</button>");
        util.showModal(viewhtml, true);

        if (mode === 'cell') {
          // old: 3550
          var cell = util.cellSelected();
          if (!cell) return;
          var textarea = viewhtml.querySelector('textarea');
          textarea.value = this.readHtml(cell, true); // for view=true
        }

        if (mode === 'row') {
          // old: 15534
          var _cell = util.cellSelected();

          if (!_cell) return;
          var row = _cell.parentNode;

          var _textarea = viewhtml.querySelector('textarea');

          _textarea.value = this.readHtml(row, true); // for view=true
          //Change to row selection

          dom$C.removeClass(row, 'row-outline'); //Hide Column tool

          var columnTool = builderstuff.querySelector('.is-column-tool');
          dom$C.removeClass(columnTool, 'active');
        }

        if (mode === 'full') {
          // 
          if (area) ; else {
            var builders = document.querySelectorAll(this.builder.opts.container);

            if (builders.length > 1) {
              var _cell2 = util.cellSelected();

              if (!_cell2) {
                // Return first instance
                area = builders[0];
              } else {
                // Return active instance
                area = _cell2.parentNode.parentNode;
              }
            } else {
              // Single instance
              area = builders[0];
            }

            if (this.builder.opts.page !== '') {
              var wrapper = document.querySelector(this.builder.opts.page);

              if (wrapper) {
                //return wrapper
                area = wrapper;
              }
            }
          }

          var _textarea2 = viewhtml.querySelector('textarea');

          _textarea2.value = this.readHtml(area, true); // for view=true
        }

        var elm = viewhtml.querySelector('.input-ok');
        dom$C.addEventListener(elm, 'click', function () {
          _this2.builder.uo.saveForUndo();

          var textarea = viewhtml.querySelector('textarea');
          var html = textarea.value;
          html = _this2.fromViewToActual(html);

          if (mode === 'cell') {
            var _cell3 = util.cellSelected();

            _cell3.innerHTML = html;

            _this2.builder.applyBehavior(); //Trigger Change event


            _this2.builder.opts.onChange(); //Trigger Render event


            _this2.builder.opts.onRender();
          }

          if (mode === 'row') {
            var _cell4 = util.cellSelected();

            var _row = _cell4.parentNode;
            _row.innerHTML = html;

            _this2.builder.applyBehavior(); //Trigger Change event


            _this2.builder.opts.onChange(); //Trigger Render event


            _this2.builder.opts.onRender();
          }

          if (mode === 'full') {
            // area.innerHTML = html;
            area.innerHTML = ''; // Use createContextualFragment() to make embedded script executable
            // https://ghinda.net/article/script-tags/

            var range = document.createRange();
            range.setStart(area, 0);
            area.appendChild(range.createContextualFragment(html));

            _this2.builder.applyBehavior(); //Trigger Change event


            _this2.builder.opts.onChange(); //Trigger Render event


            _this2.builder.opts.onRender();

            util.clearActiveCell();
          }

          util.clearControls(); // NEW

          util.hideModal(viewhtml);
        });
        elm = viewhtml.querySelector('.input-cancel');
        dom$C.addEventListener(elm, 'click', function () {
          util.hideModal(viewhtml);
        });

        if (this.builder.opts.htmlSyntaxHighlighting) {
          var _textarea3 = viewhtml.querySelector('textarea'); // Used  by html dialog (syntaxhighlighting)
          // let elms = document.querySelectorAll('[data-source-active]');
          // Array.prototype.forEach.call(elms, (elm) => {
          //     elm.removeAttribute('data-source-active');
          //     elm.removeAttribute('data-source-ok');
          //     elm.removeAttribute('data-source-cancel');
          // });


          _textarea3.setAttribute('data-source-active', '1');

          _textarea3.setAttribute('data-source-ok', '.viewhtmlformatted .input-ok');

          _textarea3.setAttribute('data-source-cancel', '.viewhtmlformatted .input-cancel');

          var iframe = viewhtml.querySelector('iframe');
          iframe.outerHTML = '<iframe id="ifrHtmlFormatted" style="width:100%;height:100%;border: none;" src="about:blank"></iframe>'; //clear

          var doc = viewhtml.querySelector('iframe').contentWindow.document;
          doc.open();
          doc.write(this.getIframeHtml());
          doc.close();
        } //Hide popup


        var columnMore = builderstuff.querySelector('.is-pop.columnmore');
        columnMore.style.display = '';
        var rowMore = builderstuff.querySelector('.is-pop.rowmore');
        rowMore.style.display = '';
      }
    }, {
      key: "fromViewToActual",
      value: function fromViewToActual(html) {
        for (var key in hash$1) {
          html = html.replace(key, hash$1[key]);
        }

        return html;
      }
    }, {
      key: "readHtml",
      value: function readHtml(content, view, multiple) {
        //view = true (hide internal attributes). view = false (actual html)
        //Make absolute
        if (this.builder.opts.absolutePath) {
          var _links = content.querySelectorAll('a');

          Array.prototype.forEach.call(_links, function (link) {
            var href = link.href;
            link.setAttribute('href', href);
          });
          var imgs = content.querySelectorAll('img');
          Array.prototype.forEach.call(imgs, function (img) {
            var src = img.src;
            img.setAttribute('src', src);
          });
        }

        var util = new Util(this.builder); //Prepare temporary helpers: #tmp_content & #tmp_buildercontent

        var builderstuff = util.builderStuff();
        var elm = builderstuff.querySelector('#tmp_content');
        if (elm) builderstuff.removeChild(elm);
        elm = builderstuff.querySelector('#tmp_buildercontent');
        if (elm) builderstuff.removeChild(elm);
        var html = "<div id=\"tmp_content\" style=\"position:absolute;top:0;left:0;width:1px;height:1px;overflow:hidden;visibility:hidden;\"></div>\n            <div id=\"tmp_buildercontent\" style=\"position:absolute;top:0;left:0;width:1px;height:1px;overflow:hidden;visibility:hidden;\"></div>";
        dom$C.appendHtml(builderstuff, html);
        var tmp = builderstuff.querySelector('#tmp_content');
        tmp.innerHTML = content.innerHTML; //Find subblocks (previously is-builder) in custom code blocks and save them to data-html-1, data-html-2, and so on.

        var blocks = tmp.querySelectorAll('[data-html]');
        Array.prototype.forEach.call(blocks, function (block) {
          // NEW
          var index = 1;
          var subblocks = block.querySelectorAll('[data-subblock]');
          Array.prototype.forEach.call(subblocks, function (subblock) {
            var html = subblock.innerHTML;
            block.setAttribute('data-html-' + index, encodeURIComponent(html));
            index++;
          });
          /* OLD
          let index = 1;
          //let _builders = block.querySelectorAll('.is-builder');
          Array.prototype.forEach.call(_builders, (_builder) => {
              // let builderhtml = _builder.innerHTML;
               //if(dom.parentsHasClass(_builder, 'slick-cloned')) return; // direct LATER
               //Cleaning
              _builder.style.transform = '';
              _builder.style.WebkitTransform= '';
              _builder.style.MozTransform= '';
              _builder.removeAttribute('data-sort');
              dom.removeClass(_builder, 'builder-active');
               _builder.removeAttribute('hidesnippetaddtool');
              _builder.removeAttribute('gray');
              _builder.removeAttribute('rowoutline');
              _builder.removeAttribute('grayoutline');
              _builder.removeAttribute('hideoutline');
              _builder.removeAttribute('leftrowtool');
              _builder.removeAttribute('minimal');
              _builder.removeAttribute('clean');
              _builder.removeAttribute('grideditor');
              _builder.removeAttribute('gridoutline');
               _builder.removeAttribute('gridoutline'); // old
              _builder.removeAttribute('draggridoutline'); // old
              _builder.removeAttribute('between-blocks-left'); // old
              _builder.removeAttribute('between-blocks-center'); // old  
              _builder.removeAttribute('hideelementhighlight'); 
               let builderhtml = _builder.innerHTML;
              let tmpbuilder = builderstuff.querySelector('#tmp_buildercontent');
              tmpbuilder.innerHTML = builderhtml;
               let elms = tmp.querySelectorAll('.sortable-chosen');
              dom.removeClasses(elms, 'sortable-chosen');
              elms = tmp.querySelectorAll('.sortable-ghost');
              dom.removeClasses(elms, 'sortable-ghost');
              elms = tmpbuilder.querySelectorAll('.elm-active');
              dom.removeClasses(elms, 'elm-active');
              elms = tmpbuilder.querySelectorAll('.elm-inspected');
              dom.removeClasses(elms, 'elm-inspected');
              elms = tmpbuilder.querySelectorAll('.cell-active');
              dom.removeClasses(elms, 'cell-active');
              elms = tmpbuilder.querySelectorAll('.row-active');
              dom.removeClasses(elms, 'row-active');
              elms = tmpbuilder.querySelectorAll('.row-outline');
              dom.removeClasses(elms, 'row-outline');
              //elms = tmpbuilder.querySelectorAll('.is-builder');
              //dom.removeClasses(elms, 'is-builder');
              elms = tmpbuilder.querySelectorAll('.row-outline');
              dom.removeClasses(elms, 'row-outline');
              elms = tmpbuilder.querySelectorAll('[data-click]');
              dom.removeAttributes(elms, 'data-click');
              elms = tmpbuilder.querySelectorAll('[contenteditable]');
              dom.removeAttributes(elms, 'contenteditable');
              elms = tmpbuilder.querySelectorAll('[data-module-active]');
              dom.removeAttributes(elms, 'data-module-active');
               dom.removeElements( tmpbuilder.querySelectorAll('.is-row-tool') );
              dom.removeElements( tmpbuilder.querySelectorAll('.is-rowadd-tool') );
              dom.removeElements( tmpbuilder.querySelectorAll('.ovl') );
              dom.removeElements( tmpbuilder.querySelectorAll('.irow-add-initial') );
               // LATER: rewrite in javascript
              //$builder.find('*[class=""]').removeAttr('class');
              //$builder.find('*[style=""]').removeAttr('style'); 
               elms = tmpbuilder.querySelectorAll('[data-keep]');
              dom.removeAttributes(elms, 'data-keep');
               builderhtml = tmpbuilder.innerHTML.trim();
              builderhtml = builderhtml.replace(/<font/g, '<span').replace(/<\/font/g, '</span');
          
              block.setAttribute('data-html-' + index, encodeURIComponent(builderhtml));
                       index++;
          });
          */
        }); //Render custom code blocks (including any editable areas within)

        blocks = tmp.querySelectorAll('[data-html]');
        Array.prototype.forEach.call(blocks, function (block) {
          var blockhtml = decodeURIComponent(block.getAttribute('data-html'));
          blockhtml = blockhtml.replace(/{id}/g, util.makeId());
          /* OLD
          for(var i=1;i<=20;i++){ 
              blockhtml = blockhtml.replace('[%HTML'+i+'%]', (block.getAttribute('data-html-'+i) === undefined ? '' : decodeURIComponent(block.getAttribute('data-html-'+i))));//render editable area
          }
          block.innerHTML = blockhtml; //embedded script is not (and should not) executed here
          */
          // NEW

          block.innerHTML = blockhtml; //embedded script is not (and should not) executed here  

          var subblocks = block.querySelectorAll('[data-subblock]');
          var i = 1;
          Array.prototype.forEach.call(subblocks, function (subblock) {
            subblock.innerHTML = block.getAttribute('data-html-' + i) === undefined ? '' : decodeURIComponent(block.getAttribute('data-html-' + i));
            i++;
          });
        }); //For Viewing, hide data-html, data-html-1.., data-settings

        if (view) {
          hash$1 = {};
          blocks = tmp.querySelectorAll('[data-html]');
          Array.prototype.forEach.call(blocks, function (block) {
            var uniqueID = util.makeId();
            hash$1[uniqueID] = block.getAttribute('data-html');
            block.setAttribute('data-html', uniqueID);

            for (var i = 1; i <= 20; i++) {
              if (block.getAttribute('data-html-' + i) !== undefined) {
                uniqueID = util.makeId();
                hash$1[uniqueID] = block.getAttribute('data-html-' + i);
                block.getAttribute('data-html-' + i, uniqueID);
              }
            }

            if (block.getAttribute('data-settings') !== undefined) {
              uniqueID = util.makeId();
              hash$1[uniqueID] = block.getAttribute('data-settings');
              block.getAttribute('data-settings', uniqueID);
            }
          });
        } //Cleaning


        var _builders = tmp.querySelectorAll('.is-builder');

        Array.prototype.forEach.call(_builders, function (_builder) {
          _builder.style.transform = '';
          _builder.style.WebkitTransform = '';
          _builder.style.MozTransform = '';

          _builder.removeAttribute('data-sort');

          dom$C.removeClass(_builder, 'builder-active');
        });
        var elms = tmp.querySelectorAll('.sortable-chosen');
        dom$C.removeClasses(elms, 'sortable-chosen');
        elms = tmp.querySelectorAll('.sortable-ghost');
        dom$C.removeClasses(elms, 'sortable-ghost');
        elms = tmp.querySelectorAll('.elm-active');
        dom$C.removeClasses(elms, 'elm-active');
        elms = tmp.querySelectorAll('.elm-inspected');
        dom$C.removeClasses(elms, 'elm-inspected');
        elms = tmp.querySelectorAll('.cell-active');
        dom$C.removeClasses(elms, 'cell-active');
        elms = tmp.querySelectorAll('.row-active');
        dom$C.removeClasses(elms, 'row-active');
        elms = tmp.querySelectorAll('.row-outline');
        dom$C.removeClasses(elms, 'row-outline');
        elms = tmp.querySelectorAll('.is-builder');
        dom$C.removeClasses(elms, 'is-builder');
        elms = tmp.querySelectorAll('.row-outline');
        dom$C.removeClasses(elms, 'row-outline');
        elms = tmp.querySelectorAll('[data-click]');
        dom$C.removeAttributes(elms, 'data-click');
        elms = tmp.querySelectorAll('[contenteditable]');
        dom$C.removeAttributes(elms, 'contenteditable');
        elms = tmp.querySelectorAll('[draggridoutline]');
        dom$C.removeAttributes(elms, 'draggridoutline');
        elms = tmp.querySelectorAll('[between-blocks-left]');
        dom$C.removeAttributes(elms, 'between-blocks-left');
        elms = tmp.querySelectorAll('[between-blocks-center]');
        dom$C.removeAttributes(elms, 'between-blocks-center');
        elms = tmp.querySelectorAll('[hideelementhighlight]');
        dom$C.removeAttributes(elms, 'hideelementhighlight');
        elms = tmp.querySelectorAll('[data-module-active]');
        dom$C.removeAttributes(elms, 'data-module-active');
        elms = tmp.querySelectorAll('[hidesnippetaddtool]');
        dom$C.removeAttributes(elms, 'hidesnippetaddtool');
        elms = tmp.querySelectorAll('[gray]');
        dom$C.removeAttributes(elms, 'gray');
        elms = tmp.querySelectorAll('[rowoutline]');
        dom$C.removeAttributes(elms, 'rowoutline');
        elms = tmp.querySelectorAll('[grayoutline]');
        dom$C.removeAttributes(elms, 'grayoutline');
        elms = tmp.querySelectorAll('[hideoutline]');
        dom$C.removeAttributes(elms, 'hideoutline');
        elms = tmp.querySelectorAll('[leftrowtool]');
        dom$C.removeAttributes(elms, 'leftrowtool');
        elms = tmp.querySelectorAll('[minimal]');
        dom$C.removeAttributes(elms, 'minimal');
        elms = tmp.querySelectorAll('[clean]');
        dom$C.removeAttributes(elms, 'clean');
        elms = tmp.querySelectorAll('[grideditor]');
        dom$C.removeAttributes(elms, 'grideditor');
        elms = tmp.querySelectorAll('[gridoutline]');
        dom$C.removeAttributes(elms, 'gridoutline');
        dom$C.removeElements(tmp.querySelectorAll('.is-row-tool'));
        dom$C.removeElements(tmp.querySelectorAll('.is-rowadd-tool'));
        dom$C.removeElements(tmp.querySelectorAll('.ovl'));
        dom$C.removeElements(tmp.querySelectorAll('.row-add-initial')); //Extra cleaning

        elms = tmp.querySelectorAll('.aos-init');
        dom$C.removeClasses(elms, 'aos-init');
        elms = tmp.querySelectorAll('.aos-animate');
        dom$C.removeClasses(elms, 'aos-animate');
        elms = tmp.querySelectorAll('.skrollable');
        dom$C.removeClasses(elms, 'skrollable');
        elms = tmp.querySelectorAll('.skrollable-after');
        dom$C.removeClasses(elms, 'skrollable-after');
        elms = tmp.querySelectorAll('.skrollable-before');
        dom$C.removeClasses(elms, 'skrollable-before');
        elms = tmp.querySelectorAll('.skrollable-between');
        dom$C.removeClasses(elms, 'skrollable-between');
        var emptyclasses = tmp.querySelectorAll('[class=""]');
        Array.prototype.forEach.call(emptyclasses, function (emptyclass) {
          emptyclass.removeAttribute('class');
        });
        var emptystyles = tmp.querySelectorAll('[style=""]');
        Array.prototype.forEach.call(emptystyles, function (emptystyle) {
          emptystyle.removeAttribute('style');
        });
        elms = tmp.querySelectorAll('[data-keep]');
        dom$C.removeAttributes(elms, 'data-keep'); //Cleanup button <span contenteditable="false"><a contenteditable="true">button</a></span>

        var links = tmp.querySelectorAll('a');
        Array.prototype.forEach.call(links, function (link) {
          if (link.style.display === 'inline-block') {
            if (link.parentNode.childElementCount === 1 && link.parentNode.tagName.toLowerCase() === 'span') {
              link.parentNode.outerHTML = link.parentNode.innerHTML;
            }
          }
        });
        html = '';

        if (multiple) {
          //ContentBox
          // Remove dummy DIV after last section
          var _elms = tmp.querySelectorAll('.is-dummy');

          dom$C.removeElements(_elms);
          _elms = tmp.querySelectorAll('.is-animated');
          Array.prototype.forEach.call(_elms, function (elm) {
            dom$C.removeClass(elm, 'animated');
            dom$C.removeClass(elm, 'pulse');
            dom$C.removeClass(elm, 'bounceIn');
            dom$C.removeClass(elm, 'fadeIn');
            dom$C.removeClass(elm, 'fadeOut'); //new

            dom$C.removeClass(elm, 'fadeInDown');
            dom$C.removeClass(elm, 'fadeInLeft');
            dom$C.removeClass(elm, 'fadeInRight');
            dom$C.removeClass(elm, 'fadeInUp');
            dom$C.removeClass(elm, 'flipInX');
            dom$C.removeClass(elm, 'flipInY');
            dom$C.removeClass(elm, 'slideInUp');
            dom$C.removeClass(elm, 'slideInDown');
            dom$C.removeClass(elm, 'slideInLeft');
            dom$C.removeClass(elm, 'slideInRight');
            dom$C.removeClass(elm, 'zoomIn');
            elm.style.animationDelay = '';
          }); //Cleanup utils

          _elms = tmp.querySelectorAll('.is-appeared');
          Array.prototype.forEach.call(_elms, function (elm) {
            dom$C.removeClass(elm, 'is-appeared');
          });
          _elms = tmp.querySelectorAll('.box-active');
          Array.prototype.forEach.call(_elms, function (elm) {
            dom$C.removeClass(elm, 'box-active');
          });
          _elms = tmp.querySelectorAll('.section-active');
          Array.prototype.forEach.call(_elms, function (elm) {
            dom$C.removeClass(elm, 'section-active');
          });
          _elms = tmp.querySelectorAll('.is-section-tool');
          dom$C.removeElements(_elms);
          var html_content = '';
          var html_footer = '';
          var html_others = ''; // Apply behavior on each row

          var sections = dom$C.elementChildren(tmp);
          sections.forEach(function (section) {
            var currentSection = section;

            if (dom$C.hasClass(currentSection, 'is-section')) {
              var secclass = ''; // var secstyle = '';

              if (currentSection.getAttribute('class')) secclass = ' class="' + currentSection.getAttribute('class') + '"'; // if (currentSection.getAttribute('style')) secstyle = ' style="' + currentSection.getAttribute('style') + '"';

              var copySection = currentSection.cloneNode(true);
              var htmlSection = copySection.outerHTML;
              html += htmlSection; //content & footer

              if (secclass.indexOf('is-static') === -1) {
                html_content += htmlSection + '\n\n';
              } else {
                html_footer += htmlSection + '\n\n';
              }
            } else {
              copySection = currentSection.cloneNode(true);
              htmlSection = copySection.outerHTML;
              html += htmlSection; //others

              html_others += htmlSection;
            }
          });
          if (html_footer !== '') html_footer = '<!---FOOTER--->\n' + html_footer;
          if (html_others !== '') html_others = '<!---OTHERS--->\n' + html_others;
          var contentbox = document.querySelector('[data-contentbox');
          var disableStaticSection = false;

          if (contentbox) {
            disableStaticSection = contentbox.settings.disableStaticSection;
          }

          if (!disableStaticSection) {
            html = html_content + html_footer + html_others;
          }
        } else {
          html = tmp.innerHTML.trim();
          html = html.replace(/<font/g, '<span').replace(/<\/font/g, '</span');
        }

        elm = builderstuff.querySelector('#tmp_content');
        if (elm) builderstuff.removeChild(elm);
        elm = builderstuff.querySelector('#tmp_buildercontent');
        if (elm) builderstuff.removeChild(elm);
        return html;
      }
    }, {
      key: "getIframeHtml",
      value: function getIframeHtml() {
        return "\n        <!DOCTYPE HTML>\n        <html>\n        <head>\n            <meta charset=\"utf-8\">\n            <title>Fonts</title>\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <meta name=\"description\" content=\"\">  \n            <link href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/codemirror.css\" rel=\"stylesheet\" type=\"text/css\" />\n        \n            <style>\n                html, body {height:100%}\n                body {margin:0;overflow:hidden;}\n                \n                button {\n                    width: 51px;\n                    height: 45px;\n                    line-height:1;\n                    display: inline-block;\n                    box-sizing:border-box;\n                    margin: 0;\n                    padding: 0;\n                    cursor: pointer;\n                    background-color:#fff;  \n                    color: #4a4a4a; \n                    border: 1px solid transparent;\n                    font-family: sans-serif;\n                    letter-spacing: 1px;\n                    font-size:12px;\n                    font-weight:normal;\n                    text-transform:uppercase;\n                    text-align:center;  \n                    position:relative;\n                    border-radius: 0;\n                    transition: all ease 0.3s;    \n                    user-select: none;\n                    -moz-user-select: none;\n                    -khtml-user-select: none;\n                    -webkit-user-select: none;\n                    -o-user-select: none;              \n                    }\n                button.classic-primary {display:inline-block;width:auto;height:50px;padding-left:30px;padding-right:30px;min-width:135px;background: #f7f7f7;}\n                button.classic-secondary {display:inline-block;width:auto;height:50px;padding-left:30px;padding-right:30px;background:transparent;}\n                button.classic-primary:hover {background: #fafafa;}\n                button:focus {outline:none;}\n                textarea {font-family: courier;font-size: 17px;line-height: 2;letter-spacing: 1px;padding:8px 16px;box-sizing:border-box;border:1px solid rgb(199, 199, 199);}\n                textarea:focus {outline:none}  \n                \n                #code {display:none;}\n                .CodeMirror {\n                    font-family: courier;\n                    font-size: 15px;\n                    line-height:1.9;\n                    width:100%;height:100%;\n                }\n            </style>\n        </head>\n        <body>\n        <div style=\"position:absolute;top:0;left:0;width:100%;height:100%;border:none;border-bottom:50px solid transparent;box-sizing: border-box;\">\n            <textarea id=\"code\"></textarea> \n        </div>\n        <div style=\"width:100%;height:50px;position:absolute;left:0;bottom:0;border-top: #efefef 1px solid;overflow:hidden;text-align:right\">\n            <button title=\"Cancel\" class=\"input-cancel classic-secondary\">Cancel</button>\n            <button title=\"Ok\" class=\"input-ok classic-primary\">Ok</button>\n        </div>\n        \n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/codemirror.js\" type=\"text/javascript\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/mode/xml/xml.js\" type=\"text/javascript\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/mode/javascript/javascript.js\" type=\"text/javascript\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/mode/css/css.js\" type=\"text/javascript\"></script>\n        <script type=\"text/javascript\">\n        \n            var source = parent.document.querySelector('textarea[data-source-active]');\n            var selectorOk = source.getAttribute('data-source-ok');\n            var selectorCancel = source.getAttribute('data-source-cancel');\n        \n            var html = source.value;\n            var myTextArea = document.querySelector('#code');\n            myTextArea.value = html;\n        \n            var htmlEditor = CodeMirror.fromTextArea(myTextArea, {\n                value: html,\n                mode: \"text/html\",\n                lineWrapping: true,\n                lineNumbers: true,\n                tabMode: \"indent\"\n            });\n            htmlEditor.on(\"change\", function (cm, change) {\n                myTextArea.value = cm.getValue();\n            });\n        \n            let elm = document.querySelector('.input-ok');\n            elm.addEventListener('click', function(e){\n        \n                myTextArea.value = htmlEditor.getValue();\n        \n                var html = myTextArea.value;\n                source.value = html;\n\n                source.removeAttribute('data-source-active');\n                source.removeAttribute('data-source-ok');\n                source.removeAttribute('data-source-cancel');\n        \n                var modal = parent.document.querySelector('.viewhtmllarger');\n                if(modal.className.indexOf('active')!==-1) {\n                    modal.className = modal.className.replace('active', '');\n                } else {\n                    modal = parent.document.querySelector('.viewhtmlformatted');\n                    modal.className = modal.className.replace('active', '');\n                }\n        \n                modal = parent.document.querySelector('.viewhtmlnormal');\n                if(modal.className.indexOf('active')!==-1) {\n                    modal.className = modal.className.replace('active', '');\n                }\n\n                parent.document.querySelector(selectorOk).click();\n            });\n        \n            elm = document.querySelector('.input-cancel');\n            elm.addEventListener('click', function(e){\n                source.removeAttribute('data-source-active');\n                source.removeAttribute('data-source-ok');\n                source.removeAttribute('data-source-cancel');\n        \n                var modal = parent.document.querySelector('.viewhtmllarger');\n                if(modal.className.indexOf('active')!==-1) {\n                    modal.className = modal.className.replace('active', '');\n                } else {\n                    modal = parent.document.querySelector('.viewhtmlformatted');\n                    modal.className = modal.className.replace('active', '');\n                }\n        \n                modal = parent.document.querySelector('.viewhtmlnormal');\n                if(modal.className.indexOf('active')!==-1) {\n                    modal.className = modal.className.replace('active', '');\n                }\n\n                parent.document.querySelector(selectorCancel).click();\n            });\n        \n        </script>\n        \n        </body>\n        </html>\n        \n        ";
      }
    }]);

    return HtmlUtil;
  }();

  var dom$B = new Dom();

  var UndoRedo = /*#__PURE__*/function () {
    function UndoRedo(builder) {
      _classCallCheck$1(this, UndoRedo);

      this.builder = builder;
      this.undoList = [];
    }

    _createClass$1(UndoRedo, [{
      key: "readStyles",
      value: function readStyles() {
        if (this.builder.opts.undoContainerOnly) return '';
        var css = '';
        var i, src;
        var links = document.getElementsByTagName('link');

        for (i = 0; i < links.length; i++) {
          src = links[i].href.toLowerCase();

          if (src.indexOf('basetype-') !== -1) {
            css += links[i].outerHTML;
          }
        }

        links = document.getElementsByTagName('link');

        for (i = 0; i < links.length; i++) {
          src = links[i].href.toLowerCase();

          if (src.indexOf('basetype-') !== -1) ; else if (src.indexOf('type-') !== -1) {
            css += links[i].outerHTML;
          }
        }

        return css;
      }
    }, {
      key: "writeStyles",
      value: function writeStyles(styles) {
        if (this.builder.opts.undoContainerOnly) return;
        var i, src;
        var links = document.getElementsByTagName('link');

        for (i = 0; i < links.length; i++) {
          src = links[i].href.toLowerCase();

          if (src.indexOf('basetype-') !== -1) {
            links[i].parentNode.removeChild(links[i]);
          } else if (src.indexOf('type-') !== -1) {
            links[i].parentNode.removeChild(links[i]);
          }
        }

        var head = document.getElementsByTagName('head')[0];
        dom$B.appendHtml(head, styles);
      }
    }, {
      key: "readHtml",
      value: function readHtml() {
        var htmlutil = new HtmlUtil(this.builder);

        if (this.builder.opts.page !== '' && !this.builder.opts.undoContainerOnly) {
          var wrapper = document.querySelector(this.builder.opts.page);
          return htmlutil.readHtml(wrapper, false);
        } else {
          var builders = document.querySelectorAll(this.builder.opts.container);
          var html = '';
          Array.prototype.forEach.call(builders, function (builder) {
            // if(html==='') {
            //     html = htmlutil.readHtml(builder, false);
            // } else {
            //     html+= '####|####' + htmlutil.readHtml(builder, false);
            // }
            html += htmlutil.readHtml(builder, false) + '####|####'; //new
          });
          html = html.substr(0, html.length - 9); //new

          return html;
        }
      }
    }, {
      key: "writeHtml",
      value: function writeHtml(html) {
        if (this.builder.opts.page !== '' && !this.builder.opts.undoContainerOnly) {
          var wrapper = document.querySelector(this.builder.opts.page); // wrapper.innerHTML = html;
          // Use createContextualFragment() to make embedded script executable
          // https://ghinda.net/article/script-tags/

          var range = document.createRange();
          wrapper.innerHTML = '';
          wrapper.appendChild(range.createContextualFragment(html));
        } else {
          var builders = document.querySelectorAll(this.builder.opts.container);
          var n = 0;
          Array.prototype.forEach.call(builders, function (builder) {
            // builder.innerHTML = html.split('####|####')[n];
            // Use createContextualFragment() to make embedded script executable
            // https://ghinda.net/article/script-tags/
            var range = document.createRange();
            builder.innerHTML = '';
            builder.appendChild(range.createContextualFragment(html.split('####|####')[n]));
            n++;
          });
        }
      }
    }, {
      key: "saveForUndo",
      value: function saveForUndo(checkLater) {
        if (this.builder.undoRedoStyles) {
          if (this.undoList[120]) {
            var saves = this.undoList[120][0];
            var html = saves.split('###$###')[1]; // Styles doesn't need to be checked. saveForUndoCheck is true only after colorpicker or gradient picker opened
            // (because after opened, user may not make changes, so checking for content change is needed).
            // This relates to html content, not styles. So we always check html content, not styles. 

            if (this.builder.saveForUndoCheck) {
              if (html === this.readHtml()) {
                // no change
                // console.log('no change');
                if (checkLater === true) this.builder.saveForUndoCheck = true;else this.builder.saveForUndoCheck = false;
                return;
              }
            }
          }
        } else {
          if (this.undoList[120]) {
            var _html = this.undoList[120][0];

            if (this.builder.saveForUndoCheck) {
              if (_html === this.readHtml()) {
                // no change
                // console.log('no change');
                if (checkLater === true) this.builder.saveForUndoCheck = true;else this.builder.saveForUndoCheck = false;
                return;
              }
            }
          }
        }

        if (checkLater === true) this.builder.saveForUndoCheck = true;else this.builder.saveForUndoCheck = false; // console.log('save');

        this.undoList[140] = this.undoList[139]; // addition

        this.undoList[139] = this.undoList[138];
        this.undoList[138] = this.undoList[137];
        this.undoList[137] = this.undoList[136];
        this.undoList[136] = this.undoList[135];
        this.undoList[135] = this.undoList[134];
        this.undoList[134] = this.undoList[133];
        this.undoList[133] = this.undoList[132];
        this.undoList[132] = this.undoList[131];
        this.undoList[131] = this.undoList[130];
        this.undoList[130] = this.undoList[129];
        this.undoList[129] = this.undoList[128];
        this.undoList[128] = this.undoList[127];
        this.undoList[127] = this.undoList[126];
        this.undoList[126] = this.undoList[125];
        this.undoList[125] = this.undoList[124];
        this.undoList[124] = this.undoList[123];
        this.undoList[123] = this.undoList[122];
        this.undoList[122] = this.undoList[121];
        this.undoList[121] = this.undoList[120];

        if (this.builder.undoRedoStyles) {
          var styles = this.readStyles();

          var _html2 = this.readHtml();

          var _saves = ' ' + styles + '###$###' + _html2;

          this.undoList[120] = [_saves, null];
        } else {
          this.undoList[120] = [this.readHtml(), null];
        }
      }
    }, {
      key: "doUndo",
      value: function doUndo() {
        if (!this.undoList[120]) return;
        if (this.builder.undoRedoInProcess === true) return; // do not precess if previous operation is still running
        // console.log('undo');

        this.builder.undoRedoInProcess = true;
        this.undoList[99] = this.undoList[100];
        this.undoList[100] = this.undoList[101];
        this.undoList[101] = this.undoList[102];
        this.undoList[102] = this.undoList[103];
        this.undoList[103] = this.undoList[104];
        this.undoList[104] = this.undoList[105];
        this.undoList[105] = this.undoList[106];
        this.undoList[106] = this.undoList[107];
        this.undoList[107] = this.undoList[108];
        this.undoList[108] = this.undoList[109];
        this.undoList[109] = this.undoList[110];
        this.undoList[110] = this.undoList[111];
        this.undoList[111] = this.undoList[112];
        this.undoList[112] = this.undoList[113];
        this.undoList[113] = this.undoList[114];
        this.undoList[114] = this.undoList[115];
        this.undoList[115] = this.undoList[116];
        this.undoList[116] = this.undoList[117];
        this.undoList[117] = this.undoList[118];
        this.undoList[118] = this.undoList[119];

        if (this.builder.undoRedoStyles) {
          var styles = this.readStyles();
          var html = this.readHtml();
          var saves = ' ' + styles + '###$###' + html;
          this.undoList[119] = [saves, null]; // -

          saves = this.undoList[120][0];
          styles = saves.split('###$###')[0].trim();
          html = saves.split('###$###')[1];
          this.writeStyles(styles);
          this.writeHtml(html);
        } else {
          this.undoList[119] = [this.readHtml(), null];
          var _html3 = this.undoList[120][0];
          this.writeHtml(_html3);
        }

        this.builder.applyBehavior();
        this.builder.opts.onChange();
        this.undoList[120] = this.undoList[121];
        this.undoList[121] = this.undoList[122];
        this.undoList[122] = this.undoList[123];
        this.undoList[123] = this.undoList[124];
        this.undoList[124] = this.undoList[125];
        this.undoList[125] = this.undoList[126];
        this.undoList[126] = this.undoList[127];
        this.undoList[127] = this.undoList[128];
        this.undoList[128] = this.undoList[129];
        this.undoList[129] = this.undoList[130];
        this.undoList[130] = this.undoList[131];
        this.undoList[131] = this.undoList[132];
        this.undoList[132] = this.undoList[133];
        this.undoList[133] = this.undoList[134];
        this.undoList[134] = this.undoList[135];
        this.undoList[135] = this.undoList[136];
        this.undoList[136] = this.undoList[137];
        this.undoList[137] = this.undoList[138];
        this.undoList[138] = this.undoList[139];
        this.undoList[139] = this.undoList[140];
        this.undoList[140] = this.undoList[141];
        var util = new Util(this.builder);
        util.clearActiveCell();
        util.clearAfterUndoRedo();
        var elm = document.querySelector('[data-saveforundo]');

        if (elm) {
          var panel = document.querySelector('.is-side.elementstyles');
          dom$B.addClass(panel, 'active');
          setTimeout(function () {
            elm.click();
          }, 700);
        } else {
          var _panel = document.querySelector('.is-side.elementstyles');

          dom$B.removeClass(_panel, 'active');
        }

        if (this.builder.opts.onUndo) {
          this.builder.opts.onUndo();
        }

        this.builder.undoRedoInProcess = false;
      }
    }, {
      key: "doRedo",
      value: function doRedo() {
        if (!this.undoList[119]) return;
        if (this.builder.undoRedoInProcess === true) return; // do not precess if previous operation is still running
        // console.log('redo');

        this.builder.undoRedoInProcess = true;
        this.undoList[141] = this.undoList[140];
        this.undoList[140] = this.undoList[139];
        this.undoList[139] = this.undoList[138];
        this.undoList[138] = this.undoList[137];
        this.undoList[137] = this.undoList[136];
        this.undoList[136] = this.undoList[135];
        this.undoList[135] = this.undoList[134];
        this.undoList[134] = this.undoList[133];
        this.undoList[133] = this.undoList[132];
        this.undoList[132] = this.undoList[131];
        this.undoList[131] = this.undoList[130];
        this.undoList[130] = this.undoList[129];
        this.undoList[129] = this.undoList[128];
        this.undoList[128] = this.undoList[127];
        this.undoList[127] = this.undoList[126];
        this.undoList[126] = this.undoList[125];
        this.undoList[125] = this.undoList[124];
        this.undoList[124] = this.undoList[123];
        this.undoList[123] = this.undoList[122];
        this.undoList[122] = this.undoList[121];
        this.undoList[121] = this.undoList[120];

        if (this.builder.undoRedoStyles) {
          var styles = this.readStyles();
          var html = this.readHtml();
          var saves = ' ' + styles + '###$###' + html;
          this.undoList[120] = [saves, null]; // -

          saves = this.undoList[119][0];
          styles = saves.split('###$###')[0].trim();
          html = saves.split('###$###')[1];
          this.writeStyles(styles);
          this.writeHtml(html);
        } else {
          this.undoList[120] = [this.readHtml(), null];
          var _html4 = this.undoList[119][0];
          this.writeHtml(_html4);
        }

        this.builder.applyBehavior();
        this.builder.opts.onChange();
        this.undoList[119] = this.undoList[118];
        this.undoList[118] = this.undoList[117];
        this.undoList[117] = this.undoList[116];
        this.undoList[116] = this.undoList[115];
        this.undoList[115] = this.undoList[114];
        this.undoList[114] = this.undoList[113];
        this.undoList[113] = this.undoList[112];
        this.undoList[112] = this.undoList[111];
        this.undoList[111] = this.undoList[110];
        this.undoList[110] = this.undoList[109];
        this.undoList[109] = this.undoList[108];
        this.undoList[108] = this.undoList[107];
        this.undoList[107] = this.undoList[106];
        this.undoList[106] = this.undoList[105];
        this.undoList[105] = this.undoList[104];
        this.undoList[104] = this.undoList[103];
        this.undoList[103] = this.undoList[102];
        this.undoList[102] = this.undoList[101];
        this.undoList[101] = this.undoList[100];
        this.undoList[100] = this.undoList[99];
        this.undoList[99] = null;
        var util = new Util(this.builder);
        util.clearActiveCell();
        util.clearAfterUndoRedo();
        var elm = document.querySelector('[data-saveforundo]');

        if (elm) {
          var panel = document.querySelector('.is-side.elementstyles');
          dom$B.addClass(panel, 'active');
          setTimeout(function () {
            elm.click();
          }, 700);
        } else {
          var _panel2 = document.querySelector('.is-side.elementstyles');

          dom$B.removeClass(_panel2, 'active');
        }

        if (this.builder.opts.onRedo) {
          this.builder.opts.onRedo();
        }

        this.builder.undoRedoInProcess = false;
      }
    }]);

    return UndoRedo;
  }();

  var util = new Util();
  var dom$A = new Dom();

  var prepareSvgIcons = function prepareSvgIcons() {
    var html = "<svg width=\"0\" height=\"0\" style=\"position:absolute;display:none;\">\n        <defs>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-arrow-left\"><path d=\"M352 115.4L331.3 96 160 256l171.3 160 20.7-19.3L201.5 256z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-arrow-right\"><path d=\"M160 115.4L180.7 96 352 256 180.7 416 160 396.7 310.5 256z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-plus-outline\"><path d=\"M256 48C141.1 48 48 141.1 48 256s93.1 208 208 208 208-93.1 208-208S370.9 48 256 48zm0 398.7c-105.1 0-190.7-85.5-190.7-190.7S150.9 65.3 256 65.3 446.7 150.9 446.7 256 361.1 446.7 256 446.7z\"></path><path d=\"M264.1 128h-16.8v119.9H128v16.8h119.3V384h16.8V264.7H384v-16.8H264.1z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-image\"><path d=\"M368 224c26.5 0 48-21.5 48-48s-21.5-48-48-48-48 21.5-48 48 21.5 48 48 48z\"></path><path d=\"M452 64H60c-15.6 0-28 12.7-28 28.3v327.4c0 15.6 12.4 28.3 28 28.3h392c15.6 0 28-12.7 28-28.3V92.3c0-15.6-12.4-28.3-28-28.3zM348.9 261.7c-3-3.5-7.6-6.2-12.8-6.2-5.1 0-8.7 2.4-12.8 5.7L304.6 277c-3.9 2.8-7 4.7-11.5 4.7-4.3 0-8.2-1.6-11-4.1-1-.9-2.8-2.6-4.3-4.1L224 215.3c-4-4.6-10-7.5-16.7-7.5-6.7 0-12.9 3.3-16.8 7.8L64 368.2V107.7c1-6.8 6.3-11.7 13.1-11.7h357.7c6.9 0 12.5 5.1 12.9 12l.3 260.4-99.1-106.7z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-photos-outline\"><path d=\"M96 128v320h384V128H96zm368 304H112V144h352v288z\"></path><path d=\"M32 64v320h48v-16H48V80h352v32h16V64z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-settings-strong\"><path d=\"M32 376h283.35c6.186-14.112 20.281-24 36.65-24s30.465 9.888 36.65 24H480v32h-91.35c-6.186 14.112-20.281 24-36.65 24s-30.465-9.888-36.65-24H32M32 240h91.35c6.186-14.112 20.281-24 36.65-24s30.465 9.888 36.65 24H480v32H196.65c-6.186 14.112-20.281 24-36.65 24s-30.465-9.888-36.65-24H32M32 104h283.35c6.186-14.112 20.281-24 36.65-24s30.465 9.888 36.65 24H480v32h-91.35c-6.186 14.112-20.281 24-36.65 24s-30.465-9.888-36.65-24H32\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-settings\"><path d=\"M352 104c8.837 0 16 7.163 16 16s-7.163 16-16 16-16-7.163-16-16 7.163-16 16-16m0-16c-17.645 0-32 14.355-32 32s14.355 32 32 32 32-14.355 32-32-14.355-32-32-32zM352 376c8.837 0 16 7.163 16 16s-7.163 16-16 16-16-7.163-16-16 7.163-16 16-16m0-16c-17.645 0-32 14.355-32 32s14.355 32 32 32 32-14.355 32-32-14.355-32-32-32zM160 240c8.837 0 16 7.163 16 16s-7.163 16-16 16-16-7.163-16-16 7.163-16 16-16m0-16c-17.645 0-32 14.355-32 32s14.355 32 32 32 32-14.355 32-32-14.355-32-32-32zM207.32 248H480v16H207.32c.439-2.604.68-5.273.68-8s-.24-5.396-.68-8zM112 256c0 2.727.24 5.396.68 8H32v-16h80.68a47.955 47.955 0 0 0-.68 8zM399.32 384H480v16h-80.68c.439-2.604.68-5.273.68-8s-.24-5.396-.68-8zM304 392c0 2.727.24 5.396.68 8H32v-16h272.68a47.955 47.955 0 0 0-.68 8zM399.32 112H480v16h-80.68c.439-2.604.68-5.273.68-8s-.24-5.396-.68-8zM304.68 112c-.439 2.604-.68 5.273-.68 8s.24 5.396.68 8H32v-16h272.68z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-android-options\"><path d=\"M32 384h272v32H32zM400 384h80v32h-80zM384 447.5c0 17.949-14.327 32.5-32 32.5-17.673 0-32-14.551-32-32.5v-95c0-17.949 14.327-32.5 32-32.5 17.673 0 32 14.551 32 32.5v95z\"></path><g><path d=\"M32 240h80v32H32zM208 240h272v32H208zM192 303.5c0 17.949-14.327 32.5-32 32.5-17.673 0-32-14.551-32-32.5v-95c0-17.949 14.327-32.5 32-32.5 17.673 0 32 14.551 32 32.5v95z\"></path></g><g><path d=\"M32 96h272v32H32zM400 96h80v32h-80zM384 159.5c0 17.949-14.327 32.5-32 32.5-17.673 0-32-14.551-32-32.5v-95c0-17.949 14.327-32.5 32-32.5 17.673 0 32 14.551 32 32.5v95z\"></path></g></symbol>\n            <symbol viewBox=\"0 0 2048.0 2048.0\" id=\"icon-list-number\"><rect x=\"0\" y=\"0\" width=\"2048.00\" height=\"2048.00\" fill=\"#ffffff\" /><g id=\"document\" transform=\"matrix(1,0,0,1,1024.0,1024.0)\"><path d=\"M-1043.45,1024 C-1039.25,946.283 -1023.18,878.648 -995.249,821.096 C-967.313,763.544 -912.806,711.242 -831.728,664.192 L-710.742,594.247 C-656.55,562.74 -618.532,535.854 -596.687,513.589 C-562.24,478.722 -545.016,438.813 -545.016,393.863 C-545.016,341.352 -560.769,299.658 -592.276,268.781 C-623.783,237.904 -665.792,222.466 -718.304,222.466 C-796.02,222.466 -849.792,251.873 -879.619,310.685 C-895.582,342.192 -904.404,385.882 -906.084,441.754 L-1021.4,441.754 C-1020.14,363.197 -1005.65,299.133 -977.92,249.562 C-928.769,162.183 -842.02,118.494 -717.673,118.494 C-614.331,118.494 -538.82,146.43 -491.139,202.302 C-443.459,258.174 -419.619,320.347 -419.619,388.822 C-419.619,461.078 -445.034,522.831 -495.865,574.082 C-525.272,603.909 -577.993,640.037 -654.03,682.466 L-740.358,730.356 C-781.527,753.041 -813.874,774.676 -837.399,795.26 C-879.408,831.808 -905.874,872.347 -916.797,916.877 L-424.03,916.877 L-424.03,1024 L-1043.45,1024 Z \"  /><path d=\"M-922.391,-764.384 L-922.391,-851.343 C-840.474,-859.324 -783.341,-872.662 -750.994,-891.356 C-718.647,-910.05 -694.492,-954.265 -678.529,-1024 L-589.049,-1024 L-589.049,-125.425 L-710.035,-125.425 L-710.035,-764.384 L-922.391,-764.384 Z \"  /><path d=\"M-198.618,-510.942 L-198.618,-667.156 L1004.57,-667.156 L1004.57,-510.942 L-198.618,-510.942 Z \"  /><path d=\"M-198.618,78.1071 L-198.618,-78.1071 L1004.57,-78.1071 L1004.57,78.1071 L-198.618,78.1071 Z \"  /><path d=\"M-179.185,649.354 L-179.185,493.14 L1024,493.14 L1024,649.354 L-179.185,649.354 Z \"  /></g></symbol>\n            <symbol viewBox=\"0 0 2048.0 2048.0\" id=\"icon-list-bullet\"><rect x=\"0\" y=\"0\" width=\"2048.00\" height=\"2048.00\" fill=\"#ffffff\" /><g id=\"document\" transform=\"matrix(1,0,0,1,1024.0,1024.0)\"><path d=\"M-379.801,-514.33 L-379.801,-670.545 L914.662,-670.545 L914.662,-514.33 L-379.801,-514.33 Z \"  /><path d=\"M-379.801,78.1071 L-379.801,-78.1071 L914.662,-78.1071 L914.662,78.1071 L-379.801,78.1071 Z \"  /><path d=\"M-379.801,670.545 L-379.801,514.33 L914.662,514.33 L914.662,670.545 L-379.801,670.545 Z \"  /><path d=\"M-929.642,-469.441 L-929.642,-715.434 L-669.092,-715.434 L-669.092,-469.441 L-929.642,-469.441 Z \"  /><path d=\"M-929.642,127.109 L-929.642,-118.885 L-669.092,-118.885 L-669.092,127.109 L-929.642,127.109 Z \"  /><path d=\"M-929.642,715.434 L-929.642,469.441 L-669.092,469.441 L-669.092,715.434 L-929.642,715.434 Z \"  /></g></symbol>\n            <symbol viewBox=\"0 0 2048.0 2048.0\" id=\"icon-clean\"><g transform=\"matrix(1,0,0,1,1024.0,1024.0)\"><path d=\"M75.0013,893.849 L-1030.73,900.993 L-32.1518,-880.838 L1009.54,-880.838 L75.0013,893.849 Z \" /><path d=\"M-30.8571,780.685 L-845.2,787.828 L-508.893,193.749 L305.26,194.963 L-30.8571,780.685 Z \" fill=\"#ffffff\" fill-opacity=\"1.00\" /></g></symbol>\n            <symbol viewBox=\"0 0 2048.0 2048.0\" id=\"icon-align-full\"><rect x=\"0\" y=\"0\" width=\"2048.00\" height=\"2048.00\" fill=\"#ffffff\" /><g id=\"document\" transform=\"matrix(1,0,0,1,1024.0,1024.0)\"><path d=\"M-770.727,738.299 L-770.727,582.085 L769.712,582.085 L769.712,738.299 L-770.727,738.299 Z \" /><path d=\"M-770.727,-534.628 L-770.727,-690.842 L769.712,-690.842 L769.712,-534.628 L-770.727,-534.628 Z \" /><path d=\"M-770.219,-115.563 L-770.219,-271.777 L770.219,-271.777 L770.219,-115.563 L-770.219,-115.563 Z \" /><path d=\"M-770.219,303.503 L-770.219,147.288 L770.219,147.288 L770.219,303.503 L-770.219,303.503 Z \" /></g></symbol>\n            <symbol viewBox=\"0 0 2048.0 2048.0\" id=\"icon-align-center\"><rect x=\"0\" y=\"0\" width=\"2048.00\" height=\"2048.00\" fill=\"#ffffff\" /><g id=\"document\" transform=\"matrix(1,0,0,1,1024.0,1024.0)\"><path d=\"M-770.727,738.299 L-770.727,582.085 L769.712,582.085 L769.712,738.299 L-770.727,738.299 Z \" /><path d=\"M-552.286,-107.697 L-552.286,-263.911 L552.286,-263.911 L552.286,-107.697 L-552.286,-107.697 Z \" /><path d=\"M-467.355,319.234 L-467.355,163.02 L466.34,163.02 L466.34,319.234 L-467.355,319.234 Z \" /><path d=\"M-770.727,-534.628 L-770.727,-690.842 L769.712,-690.842 L769.712,-534.628 L-770.727,-534.628 Z \" /></g></symbol>\n            <symbol viewBox=\"0 0 2048.0 2048.0\" id=\"icon-align-left\"><rect x=\"0\" y=\"0\" width=\"2048.00\" height=\"2048.00\" fill=\"#ffffff\" /><g id=\"document\" transform=\"matrix(1,0,0,1,1024.0,1024.0)\"><path d=\"M-770.727,738.299 L-770.727,582.085 L769.712,582.085 L769.712,738.299 L-770.727,738.299 Z \" /><path d=\"M-770.727,-534.628 L-770.727,-690.842 L769.712,-690.842 L769.712,-534.628 L-770.727,-534.628 Z \" /><path d=\"M-770.219,-115.563 L-770.219,-271.777 L482.839,-271.777 L482.839,-115.563 L-770.219,-115.563 Z \" /><path d=\"M-770.219,303.503 L-770.219,147.288 L122.787,147.288 L122.787,303.503 L-770.219,303.503 Z \" /></g></symbol>\n            <symbol viewBox=\"0 0 2048.0 2048.0\" id=\"icon-align-right\"><rect x=\"0\" y=\"0\" width=\"2048.00\" height=\"2048.00\" fill=\"#ffffff\" /><g id=\"document\" transform=\"matrix(1,0,0,1,1024.0,1024.0)\"><path d=\"M-770.727,738.299 L-770.727,582.085 L769.712,582.085 L769.712,738.299 L-770.727,738.299 Z \" /><path d=\"M-770.727,-534.628 L-770.727,-690.842 L769.712,-690.842 L769.712,-534.628 L-770.727,-534.628 Z \" /><path d=\"M-483.346,-118.081 L-483.346,-274.295 L769.712,-274.295 L769.712,-118.081 L-483.346,-118.081 Z \" /><path d=\"M-123.871,303.503 L-123.871,147.288 L769.136,147.288 L769.136,303.503 L-123.871,303.503 Z \" /></g></symbol>\n            <symbol viewBox=\"0 0 2048.0 2048.0\" id=\"icon-indent\"><rect x=\"0\" y=\"0\" width=\"2048.00\" height=\"2048.00\" fill=\"#ffffff\" /><g id=\"document\" transform=\"matrix(1,0,0,1,1024.0,1024.0)\"><path d=\"M-829.04,-514.33 L-829.04,-670.545 L808.959,-670.545 L808.959,-514.33 L-829.04,-514.33 Z \" /><path d=\"M-829.04,670.545 L-829.04,514.33 L808.959,514.33 L808.959,670.545 L-829.04,670.545 Z \" /><path d=\"M-254.279,-110.244 L-254.279,-266.458 L808.959,-266.458 L808.959,-110.244 L-254.279,-110.244 Z \" /><path d=\"M-254.279,266.458 L-254.279,110.244 L808.959,110.244 L808.959,266.458 L-254.279,266.458 Z \" /><path d=\"M-829.04,-195.117 L-490.958,-1.03508e-14 L-829.04,195.117 L-829.04,-195.117 Z \" /></g></symbol>\n            <symbol viewBox=\"0 0 2048.0 2048.0\" id=\"icon-outdent\"><rect x=\"0\" y=\"0\" width=\"2048.00\" height=\"2048.00\" fill=\"#ffffff\" /><g id=\"document\" transform=\"matrix(1,0,0,1,1024.0,1024.0)\"><path d=\"M-829.04,-514.33 L-829.04,-670.545 L808.959,-670.545 L808.959,-514.33 L-829.04,-514.33 Z \" /><path d=\"M-829.04,670.545 L-829.04,514.33 L808.959,514.33 L808.959,670.545 L-829.04,670.545 Z \" /><path d=\"M-829.04,-110.244 L-829.04,-266.458 L234.198,-266.458 L234.198,-110.244 L-829.04,-110.244 Z \" /><path d=\"M-829.04,266.458 L-829.04,110.244 L234.198,110.244 L234.198,266.458 L-829.04,266.458 Z \" /><path d=\"M808.959,-195.117 L470.877,-1.03508e-14 L808.959,195.117 L808.959,-195.117 Z \" /></g></symbol>\n            <symbol viewBox=\"0 0 2048.0 2048.0\" id=\"icon-table\"><rect x=\"0\" y=\"0\" width=\"2048.00\" height=\"2048.00\" fill=\"#ffffff\" /><g id=\"document\" transform=\"matrix(1,0,0,1,1024.0,1024.0)\"><path d=\"M-660.783,660.783 L660.783,660.783 L660.783,-660.783 L-660.783,-660.783 L-660.783,660.783 Z \" fill=\"none\" stroke-width=\"75.82\" stroke=\"#000000\" stroke-linecap=\"square\" stroke-linejoin=\"miter\" /><path d=\"M-37.9645,698.933 L37.9645,698.933 L37.9645,-698.569 L-37.9645,-698.569 L-37.9645,698.933 Z \" fill=\"#000000\" fill-opacity=\"1.00\" stroke-width=\"0.25\" stroke=\"#000000\" stroke-linecap=\"square\" stroke-linejoin=\"miter\" /><path d=\"M-698.933,-37.7825 L-698.933,38.1465 L698.569,38.1465 L698.569,-37.7825 L-698.933,-37.7825 Z \" fill=\"#000000\" fill-opacity=\"1.00\" stroke-width=\"0.25\" stroke=\"#000000\" stroke-linecap=\"square\" stroke-linejoin=\"miter\" /></g></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-android-happy\"><path d=\"M256 48C140.563 48 48 141.6 48 256s92.563 208 208 208 208-93.6 208-208S370.401 48 256 48zm0 374.4c-91.518 0-166.404-74.883-166.404-166.4 0-91.518 74.887-166.4 166.404-166.4S422.404 164.482 422.404 256 347.518 422.4 256 422.4zm72.8-187.2c17.683 0 31.201-13.518 31.201-31.2s-13.519-31.2-31.201-31.2c-17.682 0-31.2 13.518-31.2 31.2s13.518 31.2 31.2 31.2zm-145.6 0c17.682 0 31.2-13.518 31.2-31.2s-13.519-31.2-31.2-31.2c-17.683 0-31.201 13.518-31.201 31.2s13.519 31.2 31.201 31.2zM256 370.4c48.883 0 89.436-30.164 106.081-72.801H149.919C166.564 340.236 207.117 370.4 256 370.4z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-android-create\"><path d=\"M64 368v80h80l235.727-235.729-79.999-79.998L64 368zm377.602-217.602c8.531-8.531 8.531-21.334 0-29.865l-50.135-50.135c-8.531-8.531-21.334-8.531-29.865 0l-39.468 39.469 79.999 79.998 39.469-39.467z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-minus-empty\"><path d=\"M384 265H128v-17h256v17z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-eye\"><path d=\"M256 128c-81.9 0-145.7 48.8-224 128 67.4 67.7 124 128 224 128 99.9 0 173.4-76.4 224-126.6C428.2 198.6 354.8 128 256 128zm0 219.3c-49.4 0-89.6-41-89.6-91.3 0-50.4 40.2-91.3 89.6-91.3s89.6 41 89.6 91.3c0 50.4-40.2 91.3-89.6 91.3z\"></path><path d=\"M256 224c0-7.9 2.9-15.1 7.6-20.7-2.5-.4-5-.6-7.6-.6-28.8 0-52.3 23.9-52.3 53.3s23.5 53.3 52.3 53.3 52.3-23.9 52.3-53.3c0-2.3-.2-4.6-.4-6.9-5.5 4.3-12.3 6.9-19.8 6.9-17.8 0-32.1-14.3-32.1-32z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-reply\"><path d=\"M448 400s-36.8-208-224-208v-80L64 256l160 134.4v-92.3c101.6 0 171 8.9 224 101.9z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-redo\"><path d=\"M64 400h10.3l19.2-31.2c20.5-32.7 44.9-62.8 75.8-76.6 24.4-10.9 46.7-18.9 86.7-20V352l192-128L256 96v80.3c-63 2.8-108.1 20.7-143.3 56.2C60.4 285.2 64 351.5 64 368.2c.1 8.9 0 21.7 0 31.8z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-wrench\"><path d=\"M461.9 114.9l-56.5 56.7-55.1-10-9.9-55.1 56.5-56.7c-12.7-12.7-30.8-18.5-44.2-17.8-13.5.7-42.3 8.3-64.6 32-21.6 22.8-44.3 65.3-24.2 112.5 2.4 5.7 5.1 13.2-2.9 21.2-8.1 8-215 202.8-215 202.8-19.4 16.7-18 47.6-.1 65.6 18.2 17.9 48.9 19 65.6-.3 0 0 193.2-205.8 202.7-215.1 8.5-8.3 16.1-5.5 21.2-2.9 35.6 18.4 86.3 2.4 112.6-23.9 26.3-26.3 31.1-51.7 31.9-64.7.8-12.9-3.7-30-18-44.3zM91.3 443.2c-6.3 6.2-16.5 6.2-22.7 0-6.2-6.3-6.2-16.5 0-22.7 6.3-6.2 16.5-6.2 22.7 0 6.2 6.3 6.2 16.5 0 22.7z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-more\"><path d=\"M113.7 304C86.2 304 64 282.6 64 256c0-26.5 22.2-48 49.7-48 27.6 0 49.8 21.5 49.8 48 0 26.6-22.2 48-49.8 48zM256 304c-27.5 0-49.8-21.4-49.8-48 0-26.5 22.3-48 49.8-48 27.5 0 49.7 21.5 49.7 48 0 26.6-22.2 48-49.7 48zM398.2 304c-27.5 0-49.8-21.4-49.8-48 0-26.5 22.2-48 49.8-48 27.5 0 49.8 21.5 49.8 48 0 26.6-22.2 48-49.8 48z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-code-working\"><circle cx=\"184.166\" cy=\"256.166\" r=\"24\"></circle><circle cx=\"256.166\" cy=\"256.166\" r=\"24\"></circle><circle cx=\"328.166\" cy=\"256.166\" r=\"24\"></circle><g><path d=\"M168 392a23.929 23.929 0 0 1-16.971-7.029l-112-112c-9.373-9.373-9.373-24.569 0-33.941l112-112c9.373-9.372 24.568-9.372 33.941 0 9.371 9.372 9.371 24.568 0 33.941L89.941 256l95.029 95.029c9.371 9.372 9.371 24.568 0 33.941A23.925 23.925 0 0 1 168 392zM344 392a23.929 23.929 0 0 0 16.971-7.029l112-112c9.373-9.373 9.373-24.569 0-33.941l-112-112c-9.373-9.372-24.568-9.372-33.941 0-9.371 9.372-9.371 24.568 0 33.941L422.059 256l-95.029 95.029c-9.371 9.372-9.371 24.568 0 33.941A23.925 23.925 0 0 0 344 392z\"></path></g></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-gear\"><path d=\"M416.349 256.046c-.001-21.013 13.143-38.948 31.651-46.062a196.302 196.302 0 0 0-23.664-57.139 49.423 49.423 0 0 1-20.082 4.254c-12.621 0-25.238-4.811-34.871-14.442-14.863-14.863-18.248-36.846-10.18-54.97A196.274 196.274 0 0 0 302.074 64C294.971 82.529 277.027 95.69 256 95.69c-21.025 0-38.969-13.161-46.073-31.69a196.243 196.243 0 0 0-57.128 23.688c8.068 18.122 4.683 40.104-10.181 54.97-9.631 9.631-22.25 14.443-34.871 14.443a49.429 49.429 0 0 1-20.083-4.255A196.273 196.273 0 0 0 64 209.984c18.509 7.112 31.652 25.049 31.652 46.062 0 21.008-13.132 38.936-31.63 46.054a196.318 196.318 0 0 0 23.692 57.128 49.428 49.428 0 0 1 20.032-4.232c12.622 0 25.239 4.812 34.871 14.443 14.841 14.841 18.239 36.781 10.215 54.889a196.257 196.257 0 0 0 57.13 23.673c7.128-18.479 25.046-31.596 46.038-31.596 20.992 0 38.91 13.115 46.037 31.596a196.234 196.234 0 0 0 57.132-23.675c-8.023-18.106-4.626-40.046 10.216-54.887 9.629-9.632 22.248-14.444 34.868-14.444 6.836 0 13.67 1.411 20.033 4.233a196.318 196.318 0 0 0 23.692-57.128c-18.498-7.119-31.629-25.048-31.629-46.054zM256.9 335.9c-44.3 0-80-35.9-80-80 0-44.101 35.7-80 80-80 44.299 0 80 35.899 80 80 0 44.1-35.701 80-80 80z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-arrow-expand\"><path d=\"M274 209.7l63.9-63.8L288 96h128v128l-49.9-49.9-63.8 63.9zM274 302.3l63.9 63.8L288 416h128V288l-49.9 49.9-63.8-63.9zM238 302.3l-63.9 63.8L224 416H96V288l49.9 49.9 63.8-63.9zM238 209.7l-63.9-63.8L224 96H96v128l49.9-49.9 63.8 63.9z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-android-expand\"><path d=\"M396.795 396.8H320V448h128V320h-51.205zM396.8 115.205V192H448V64H320v51.205zM115.205 115.2H192V64H64v128h51.205zM115.2 396.795V320H64v128h128v-51.205z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-arrow-move\"><path d=\"M480 256l-96-96v76H276V128h76l-96-96-96 96h76v108H128v-76l-96 96 96 96v-76h108v108h-76l96 96 96-96h-76.2l-.4-108.5 108.6.3V352z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-drag\"><path d=\"M0 144h512v32H0zM0 240h512v32H0zM0 336h512v32H0z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-link\"><path d=\"M74.6 256c0-38.3 31.1-69.4 69.4-69.4h88V144h-88c-61.8 0-112 50.2-112 112s50.2 112 112 112h88v-42.6h-88c-38.3 0-69.4-31.1-69.4-69.4zm85.4 22h192v-44H160v44zm208-134h-88v42.6h88c38.3 0 69.4 31.1 69.4 69.4s-31.1 69.4-69.4 69.4h-88V368h88c61.8 0 112-50.2 112-112s-50.2-112-112-112z\"/></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-contrast\"><path d=\"M256 32C132.3 32 32 132.3 32 256s100.3 224 224 224 224-100.3 224-224S379.7 32 256 32zm135.8 359.8C355.5 428 307 448 256 448V64c51 0 99.5 20 135.8 56.2C428 156.5 448 204.7 448 256c0 51.3-20 99.5-56.2 135.8z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-plus-empty\"><path d=\"M384 265H264v119h-17V265H128v-17h119V128h17v120h120v17z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-arrow-thin-up\"><path d=\"M349.7 189.8c-3.1 3.1-8 3-11.3 0L264 123.4V408c0 4.4-3.6 8-8 8s-8-3.6-8-8V123.4l-74.4 66.3c-3.4 2.9-8.1 3.2-11.2.1-3.1-3.1-3.3-8.5-.1-11.4 0 0 87-79.2 88-80s2.8-2.4 5.7-2.4 4.9 1.6 5.7 2.4 88 80 88 80c1.5 1.5 2.3 3.6 2.3 5.7s-.8 4.1-2.3 5.7z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-arrow-thin-down\"><path d=\"M349.7 322.2c-3.1-3.1-8-3-11.3 0L264 388.6V104c0-4.4-3.6-8-8-8s-8 3.6-8 8v284.6l-74.4-66.3c-3.4-2.9-8.1-3.2-11.2-.1-3.1 3.1-3.3 8.5-.1 11.4 0 0 87 79.2 88 80s2.8 2.4 5.7 2.4 4.9-1.6 5.7-2.4 88-80 88-80c1.5-1.5 2.3-3.6 2.3-5.7s-.8-4.1-2.3-5.7z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-arrow-thin-left\"><path d=\"M189.8 349.7c3.1-3.1 3-8 0-11.3L123.4 264H408c4.4 0 8-3.6 8-8s-3.6-8-8-8H123.4l66.3-74.4c2.9-3.4 3.2-8.1.1-11.2-3.1-3.1-8.5-3.3-11.4-.1 0 0-79.2 87-80 88S96 253.1 96 256s1.6 4.9 2.4 5.7 80 88 80 88c1.5 1.5 3.6 2.3 5.7 2.3s4.1-.8 5.7-2.3z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-arrow-thin-right\"><path d=\"M322.2 349.7c-3.1-3.1-3-8 0-11.3l66.4-74.4H104c-4.4 0-8-3.6-8-8s3.6-8 8-8h284.6l-66.3-74.4c-2.9-3.4-3.2-8.1-.1-11.2 3.1-3.1 8.5-3.3 11.4-.1 0 0 79.2 87 80 88s2.4 2.8 2.4 5.7-1.6 4.9-2.4 5.7-80 88-80 88c-1.5 1.5-3.6 2.3-5.7 2.3s-4.1-.8-5.7-2.3z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-close-empty\"><path d=\"M340.2 160l-84.4 84.3-84-83.9-11.8 11.8 84 83.8-84 83.9 11.8 11.7 84-83.8 84.4 84.2 11.8-11.7-84.4-84.3 84.4-84.2z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-android-more-vertical\"><path d=\"M296 136c0-22.002-17.998-40-40-40s-40 17.998-40 40 17.998 40 40 40 40-17.998 40-40zm0 240c0-22.002-17.998-40-40-40s-40 17.998-40 40 17.998 40 40 40 40-17.998 40-40zm0-120c0-22.002-17.998-40-40-40s-40 17.998-40 40 17.998 40 40 40 40-17.998 40-40z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-quote\"><path d=\"M192 64c-40.646 0-72.483 11.229-94.627 33.373C75.229 119.517 64 151.354 64 192v256h160V192h-96c0-23.056 4.922-39.666 14.627-49.373C152.334 132.922 168.944 128 192 128M416 64c-40.646 0-72.483 11.229-94.627 33.373C299.229 119.517 288 151.354 288 192v256h160V192h-96c0-23.056 4.922-39.666 14.627-49.373C376.334 132.922 392.944 128 416 128\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-code\"><path d=\"M168 392a23.929 23.929 0 0 1-16.971-7.029l-112-112c-9.373-9.373-9.373-24.569 0-33.941l112-112c9.373-9.372 24.568-9.372 33.941 0 9.371 9.372 9.371 24.568 0 33.941L89.941 256l95.029 95.029c9.371 9.373 9.371 24.568 0 33.941A23.925 23.925 0 0 1 168 392zM344 392a23.929 23.929 0 0 0 16.971-7.029l112-112c9.373-9.373 9.373-24.569 0-33.941l-112-112c-9.373-9.372-24.568-9.372-33.941 0-9.371 9.372-9.371 24.568 0 33.941L422.059 256l-95.029 95.029c-9.371 9.373-9.371 24.568 0 33.941A23.925 23.925 0 0 0 344 392z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-camera\"><path d=\"M430.4 147h-67.5l-40.4-40.8s-.2-.2-.3-.2l-.2-.2c-6-6-14.1-9.8-23.3-9.8h-84c-9.8 0-18.5 4.2-24.6 10.9v.1l-39.5 40h-69C63 147 48 161.6 48 180.2v202.1c0 18.6 15 33.7 33.6 33.7h348.8c18.5 0 33.6-15.1 33.6-33.7V180.2c0-18.6-15.1-33.2-33.6-33.2zM256 365.5c-50.9 0-92.4-41.6-92.4-92.6 0-51.1 41.5-92.6 92.4-92.6 51 0 92.4 41.5 92.4 92.6 0 51-41.4 92.6-92.4 92.6zm168.1-165c-7.7 0-14-6.3-14-14.1s6.3-14.1 14-14.1 14 6.3 14 14.1-6.3 14.1-14 14.1z\"></path><path d=\"M256 202.9c-38.6 0-69.8 31.3-69.8 70 0 38.6 31.2 70 69.8 70 38.5 0 69.8-31.3 69.8-70s-31.3-70-69.8-70z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-move\"><path d=\"M475.9 246.2l-79.4-79.4c-5.4-5.4-14.2-5.4-19.6 0l-.2.2c-5.4 5.4-5.4 14.2 0 19.6l54.9 54.9-161.8.5.5-161.8 54.9 54.9c5.4 5.4 14.2 5.4 19.6 0l.2-.2c5.4-5.4 5.4-14.2 0-19.6l-79.4-79.4c-5.4-5.4-14.2-5.4-19.6 0l-79.4 79.4c-5.4 5.4-5.4 14.2 0 19.6l.2.2c5.4 5.4 14.2 5.4 19.6 0l54.9-54.9.5 161.8-161.8-.5 54.9-54.9c5.4-5.4 5.4-14.2 0-19.6l-.2-.2c-5.4-5.4-14.2-5.4-19.6 0l-79.4 79.4c-5.4 5.4-5.4 14.2 0 19.6l79.4 79.4c5.4 5.4 14.2 5.4 19.6 0l.2-.2c5.4-5.4 5.4-14.2 0-19.6L80 270.5l161.8-.5-.5 161.8-54.9-54.9c-5.4-5.4-14.2-5.4-19.6 0l-.2.2c-5.4 5.4-5.4 14.2 0 19.6l79.4 79.4c5.4 5.4 14.2 5.4 19.6 0l79.4-79.4c5.4-5.4 5.4-14.2 0-19.6l-.2-.2c-5.4-5.4-14.2-5.4-19.6 0l-54.9 54.9-.5-161.8 161.8.5-54.9 54.9c-5.4 5.4-5.4 14.2 0 19.6l.2.2c5.4 5.4 14.2 5.4 19.6 0l79.4-79.4c5.5-5.4 5.5-14.2 0-19.6z\"/></symbol>\n            <symbol viewBox=\"0 0 2048.0 2048.0\" id=\"icon-ok\"><rect x=\"0\" y=\"0\" width=\"2048.00\" height=\"2048.00\" fill=\"#ffffff\" /><g id=\"document\" transform=\"matrix(1,0,0,1,1024.0,1024.0)\"><path d=\"M330.323,493.628 L330.323,398.406 L-330.323,398.406 L-330.323,493.628 L330.323,493.628 Z \" fill=\"#011534\" fill-opacity=\"1.00\" /><path d=\"M230.718,468.568 L328.59,468.568 L328.59,-599.718 L230.718,-599.718 L230.718,468.568 Z \" fill=\"#011534\" fill-opacity=\"1.00\" /><path d=\"M-300.714,376.053 L-373.748,449.088 L-68.5805,754.255 L4.45387,681.221 L-300.714,376.053 Z \" fill=\"#011534\" fill-opacity=\"1.00\" /><path d=\"M-9.9476e-14,216.241 L-73.0344,143.207 L-378.202,448.375 L-305.168,521.409 L-9.9476e-14,216.241 Z \" fill=\"#011534\" fill-opacity=\"1.00\" /></g></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-grid\"><path d=\"M160 153.3c0 3.7-3 6.7-6.7 6.7h-50.5c-3.7 0-6.7-3-6.7-6.7v-50.5c0-3.7 3-6.7 6.7-6.7h50.5c3.7 0 6.7 3 6.7 6.7v50.5zM288 153.3c0 3.7-3 6.7-6.7 6.7h-50.5c-3.7 0-6.7-3-6.7-6.7v-50.5c0-3.7 3-6.7 6.7-6.7h50.5c3.7 0 6.7 3 6.7 6.7v50.5zM416 153.3c0 3.7-3 6.7-6.7 6.7h-50.5c-3.7 0-6.7-3-6.7-6.7v-50.5c0-3.7 3-6.7 6.7-6.7h50.5c3.7 0 6.7 3 6.7 6.7v50.5z\"></path><g><path d=\"M160 281.3c0 3.7-3 6.7-6.7 6.7h-50.5c-3.7 0-6.7-3-6.7-6.7v-50.5c0-3.7 3-6.7 6.7-6.7h50.5c3.7 0 6.7 3 6.7 6.7v50.5zM288 281.3c0 3.7-3 6.7-6.7 6.7h-50.5c-3.7 0-6.7-3-6.7-6.7v-50.5c0-3.7 3-6.7 6.7-6.7h50.5c3.7 0 6.7 3 6.7 6.7v50.5zM416 281.3c0 3.7-3 6.7-6.7 6.7h-50.5c-3.7 0-6.7-3-6.7-6.7v-50.5c0-3.7 3-6.7 6.7-6.7h50.5c3.7 0 6.7 3 6.7 6.7v50.5z\"></path></g><g><path d=\"M160 409.3c0 3.7-3 6.7-6.7 6.7h-50.5c-3.7 0-6.7-3-6.7-6.7v-50.5c0-3.7 3-6.7 6.7-6.7h50.5c3.7 0 6.7 3 6.7 6.7v50.5zM288 409.3c0 3.7-3 6.7-6.7 6.7h-50.5c-3.7 0-6.7-3-6.7-6.7v-50.5c0-3.7 3-6.7 6.7-6.7h50.5c3.7 0 6.7 3 6.7 6.7v50.5zM416 409.3c0 3.7-3 6.7-6.7 6.7h-50.5c-3.7 0-6.7-3-6.7-6.7v-50.5c0-3.7 3-6.7 6.7-6.7h50.5c3.7 0 6.7 3 6.7 6.7v50.5z\"></path></g></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-gear-b\"><path d=\"M448 294.4v-76.8h-42.8c-3.4-14.4-8.9-28-16.1-40.5l29.8-29.7-54.3-54.3-29.1 29.1c-12.6-7.7-26.4-13.5-41.1-17.3V64h-76.8v40.9c-14.7 3.8-28.5 9.7-41.1 17.3l-29.1-29.1-54.3 54.3 29.8 29.7c-7.2 12.5-12.6 26.1-16.1 40.5H64v76.8h44.1c3.8 13.7 9.5 26.6 16.7 38.6l-31.7 31.7 54.3 54.3 32.3-32.3c11.7 6.8 24.5 11.9 37.9 15.4v46h76.8v-46c13.5-3.5 26.2-8.6 37.9-15.4l32.3 32.3 54.3-54.3-31.6-31.7c7.2-11.9 12.9-24.8 16.7-38.6h44zm-192 15.4c-29.7 0-53.7-24.1-53.7-53.8s24-53.8 53.7-53.8 53.8 24.1 53.8 53.8-24.1 53.8-53.8 53.8z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-grid-view-outline\"><path d=\"M448 192v-16H336V64h-16v112H192V64h-16v112H64v16h112v128H64v16h112v112h16V336h128v112h16V336h112v-16H336V192h112zM320 320H192V192h128v128z\"></path></symbol>\n            <symbol viewBox=\"0 0 2048.0 2048.0\" id=\"icon-increase\"><g id=\"document\" transform=\"matrix(1,0,0,1,1024.0,1024.0)\"><path d=\"M852.574,595.004 L852.574,507.837 L-852.574,507.837 L-852.574,595.004 L852.574,595.004 Z \" /><path d=\"M852.574,224.232 L852.574,137.066 L-852.574,137.066 L-852.574,224.232 L852.574,224.232 Z \" /><path d=\"M852.574,-134.971 L852.574,-222.138 L-852.574,-222.138 L-852.574,-134.971 L852.574,-134.971 Z \" /><path d=\"M852.574,-505.743 L852.574,-592.909 L-852.574,-592.909 L-852.574,-505.743 L852.574,-505.743 Z \" /></g></symbol>\n            <symbol viewBox=\"0 0 2048.0 2048.0\" id=\"icon-decrease\"><g id=\"document\" transform=\"matrix(1,0,0,1,1024.0,1024.0)\"><path d=\"M509.832,595.004 L509.832,507.837 L-509.832,507.837 L-509.832,595.004 L509.832,595.004 Z \" /><path d=\"M509.832,224.232 L509.832,137.066 L-509.832,137.066 L-509.832,224.232 L509.832,224.232 Z \" /><path d=\"M509.832,-136.947 L509.832,-224.113 L-509.832,-224.113 L-509.832,-136.947 L509.832,-136.947 Z \" /><path d=\"M509.832,-505.743 L509.832,-592.909 L-509.832,-592.909 L-509.832,-505.743 L509.832,-505.743 Z \" /></g></symbol>\n            <symbol viewBox=\"0 0 2048.0 2048.0\" id=\"icon-strike\"><g id=\"document\" transform=\"matrix(1,0,0,1,1024.0,1024.0)\"><path d=\"M298.298,-653.766 C292.151,-624.873 284.005,-605.663 273.862,-596.135 C263.719,-586.607 250.656,-581.842 234.673,-581.842 C220.535,-581.842 196.253,-589.526 161.828,-604.895 C87.4454,-637.475 17.0588,-653.766 -49.3321,-653.766 C-155.68,-653.766 -243.28,-621.339 -312.129,-556.485 C-380.979,-491.631 -415.404,-414.328 -415.404,-324.578 C-415.404,-272.94 -403.724,-225.606 -380.364,-182.575 C-357.005,-139.544 -322.733,-100.201 -277.551,-64.5467 C-232.368,-28.8923 -156.295,18.903 -49.3321,78.8392 C57.631,138.775 123.1,177.964 147.074,196.406 C182.729,223.455 209.008,252.654 225.913,284.005 C242.819,315.357 251.271,346.401 251.271,377.137 C251.271,432.463 228.987,480.412 184.419,520.984 C139.851,561.556 79.1465,581.842 2.30524,581.842 C-64.0856,581.842 -125.098,567.089 -180.731,537.582 C-236.364,508.075 -277.704,471.037 -304.753,426.469 C-331.801,381.901 -353.316,314.742 -369.299,224.991 L-403.417,224.991 L-403.417,653.766 L-369.299,653.766 C-364.996,624.873 -358.388,605.817 -349.474,596.596 C-340.561,587.375 -328.42,582.764 -313.051,582.764 C-297.068,582.764 -259.109,592.446 -199.173,611.81 C-139.236,631.174 -99.74,642.393 -80.6834,645.467 C-48.7174,651 -14.5998,653.766 21.6692,653.766 C137.239,653.766 231.753,619.495 305.214,550.952 C378.674,482.41 415.404,400.804 415.404,306.136 C415.404,256.343 403.878,208.701 380.826,163.211 C357.773,117.721 324.885,78.2244 282.161,44.7216 C239.438,11.2188 159.676,-36.8838 42.8774,-99.5863 C-100.355,-176.428 -191.027,-237.901 -229.141,-284.005 C-255.574,-315.357 -268.791,-350.089 -268.791,-388.202 C-268.791,-437.995 -247.89,-482.41 -206.088,-521.445 C-164.287,-560.48 -111.42,-579.998 -47.4879,-579.998 C9.06727,-579.998 63.7783,-565.552 116.645,-536.66 C169.512,-507.767 210.238,-468.732 238.823,-419.554 C267.408,-370.375 287.233,-304.292 298.298,-221.303 L332.415,-221.303 L332.415,-653.766 L298.298,-653.766 Z \" fill=\"#000000\" fill-opacity=\"1.00\" /><path d=\"M-530.954,-41.4477 L-530.954,41.4477 L530.954,41.4477 L530.954,-41.4477 L-530.954,-41.4477 Z \" fill=\"#000000\" fill-opacity=\"1.00\" /></g></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-undo\"><path d=\"M447.9 368.2c0-16.8 3.6-83.1-48.7-135.7-35.2-35.4-80.3-53.4-143.3-56.2V96L64 224l192 128v-79.8c40 1.1 62.4 9.1 86.7 20 30.9 13.8 55.3 44 75.8 76.6l19.2 31.2H448c0-10.1-.1-22.9-.1-31.8z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-ios-redo\"><path d=\"M64 400h10.3l19.2-31.2c20.5-32.7 44.9-62.8 75.8-76.6 24.4-10.9 46.7-18.9 86.7-20V352l192-128L256 96v80.3c-63 2.8-108.1 20.7-143.3 56.2C60.4 285.2 64 351.5 64 368.2c.1 8.9 0 21.7 0 31.8z\"></path></symbol>\n            <symbol viewBox=\"0 0 512 512\" id=\"ion-android-arrow-dropdown\"><path d=\"M128 192l128 128 128-128z\"></path></symbol>\n            </defs>\n        </svg>";
    var builderstuff = util.builderStuff();
    dom$A.appendHtml(builderstuff, html);
  };

  var dom$z = new Dom();

  var renderQuickAdd = function renderQuickAdd(builder) {
    var util = new Util(builder);
    var builderStuff = util.builderStuff();
    var quickadd = builderStuff.querySelector('.quickadd');

    if (!quickadd) {
      var html = "<div class=\"is-pop quickadd arrow-right\" style=\"z-index:10003;\">\n        <div class=\"is-pop-close\" style=\"display:none;z-index:1;width:40px;height:40px;position:absolute;top:0px;right:0px;box-sizing:border-box;padding:0;line-height:40px;font-size: 12px;color:#777;text-align:center;cursor:pointer;\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.47);width:40px;height:40px;\"><use xlink:href=\"#ion-ios-close-empty\"></use></svg></div>\n        <div class=\"is-pop-tabs\">\n            <div class=\"is-pop-tab-item active\" data-value=\"left\">".concat(util.out('Add to Left'), "</div>\n            <div class=\"is-pop-tab-item\" data-value=\"right\">").concat(util.out('Add to Right'), "</div>\n        </div>\n        <div style=\"padding:8px;display:flex;flex-direction:row;flex-flow: wrap;justify-content: center;align-items: center;\">\n            <button title=\"").concat(util.out('Paragraph'), "\" class=\"add-paragraph\"><span style=\"display:block;margin:0 0 8px;\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.8);width:12px;height:12px;\"><use xlink:href=\"#icon-align-full\"></use></svg></span>").concat(util.out('Paragraph'), "</button>\n            <button title=\"").concat(util.out('Headline'), "\" class=\"add-headline\"><span style=\"font-family:serif;display:block;margin:0 0 8px;\">H</span>").concat(util.out('Headline'), "</button>\n            <button title=\"").concat(util.out('Image'), "\" class=\"add-image\"><span style=\"display:block;margin:0 0 8px;\"><svg class=\"is-icon-flex ion-image\" style=\"width:14px;height:14px;\"><use xlink:href=\"#ion-image\"></use></svg></span>").concat(util.out('Image'), "</button>\n            <button title=\"").concat(util.out('Heading 1'), "\" class=\"add-heading1\"><span style=\"font-family:serif;display:block;margin:0 0 8px;\">H1</span>").concat(util.out('Heading 1'), "</button>\n            <button title=\"").concat(util.out('Heading 2'), "\" class=\"add-heading2\"><span style=\"font-family:serif;display:block;margin:0 0 8px;\">H2</span>").concat(util.out('Heading 2'), "</button>\n            <button title=\"").concat(util.out('Heading 3'), "\" class=\"add-heading3\"><span style=\"font-family:serif;display:block;margin:0 0 8px;\">H3</span>").concat(util.out('Heading 3'), "</button>\n            <button title=\"").concat(util.out('List'), "\" class=\"add-list\"><span style=\"display:block;margin:0 0 8px;\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.8);width:13px;height:13px;\"><use xlink:href=\"#icon-list-bullet\"></use></svg></span>").concat(util.out('List'), "</button>\n            <button title=\"").concat(util.out('Quote'), "\" class=\"add-quote\"><span style=\"display:block;margin:0 0 8px;\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.7);width:13px;height:13px;\"><use xlink:href=\"#ion-quote\"></use></svg></span>").concat(util.out('Quote'), "</button>\n            <button title=\"").concat(util.out('Preformatted'), "\" class=\"add-preformatted\"><span style=\"display:block;margin:0 0 8px;\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.7);width:13px;height:13px;\"><use xlink:href=\"#ion-code\"></use></svg></span>").concat(util.out('Preformatted'), "</button>\n            <button title=\"").concat(util.out('Table'), "\" class=\"add-table\"><span style=\"display:block;margin:0 0 8px;\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.7);width:15px;height:15px;\"><use xlink:href=\"#icon-table\"></use></svg></use></svg></svg></span>").concat(util.out('Table'), "</button>\n            <button title=\"").concat(util.out('Spacer'), "\" class=\"add-spacer\"><span style=\"display:block;margin:0 0 8px;\"><span style=\"display:inline-block;background:#eee;width:30px;height:5px;\"></span></span>").concat(util.out('Spacer'), "</button>\n            ").concat(builder.opts.emailMode ? '' : "<button title=\"".concat(util.out('Button'), "\" class=\"add-button\"><span style=\"display:block;margin:0 0 8px;\"><span style=\"display:inline-block;border:#a1a1a1 1px solid;background:#f3f3f3;width:15px;height:6px;\"></span></span>").concat(util.out('Button'), "</button>"), "\n            <button title=\"").concat(util.out('More...'), "\" class=\"add-more classic\" style=\"width:100%;height:45px;margin-top:10px;flex-direction:initial;\">").concat(util.out('More...'), "</button>\n        </div>\n        </div>\n        \n        <div class=\"is-modal snippets\">\n            <div style=\"max-width:1250px;height:90%;padding:0;\">\n            <iframe style=\"width:100%;height:100%;border: none;display: block;\" src=\"about:blank\"></iframe>\n            </div>\n        </div>\n        ");
      dom$z.appendHtml(builderStuff, html);
      quickadd = builderStuff.querySelector('.quickadd');
      document.addEventListener('click', function (e) {
        e = e || window.event;
        var target = e.target || e.srcElement;

        if (quickadd.style.display === 'flex') {
          var a = dom$z.parentsHasClass(target, 'quickadd');
          var b = dom$z.parentsHasClass(target, 'row-add');
          var c = dom$z.parentsHasClass(target, 'is-rowadd-tool');
          var d = dom$z.parentsHasClass(target, 'cell-add');
          var f = dom$z.parentsHasClass(target, 'elm-add');
          var g = dom$z.parentsHasClass(target, 'row-add-initial');

          if (a || b || c || d || f || g) {
            return;
          } else {
            quickadd.style.display = '';
          }
        }
      });
      var tabs = quickadd.querySelectorAll('.is-pop-tab-item');
      Array.prototype.forEach.call(tabs, function (tab) {
        dom$z.addEventListener(tab, 'click', function (e) {
          var elms = quickadd.querySelectorAll('.is-pop-tab-item');
          Array.prototype.forEach.call(elms, function (elm) {
            dom$z.removeClass(elm, 'active');
          });
          dom$z.addClass(e.target, 'active');
          var val = quickadd.querySelector('.active').getAttribute('data-value');

          if (val === 'left') {
            quickadd.setAttribute('data-mode', 'cell-left');
          } else {
            quickadd.setAttribute('data-mode', 'cell-right');
          }
        });
      });
      var elm = quickadd.querySelector('.add-paragraph');
      dom$z.addEventListener(elm, 'click', function () {
        var mode = quickadd.getAttribute('data-mode');
        var html = "<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. \n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, \n            when an unknown printer took a galley of type and scrambled it to make a type specimen book.</p>";
        util.addContent(html, mode);
      });
      elm = quickadd.querySelector('.add-headline');
      dom$z.addEventListener(elm, 'click', function () {
        var mode = quickadd.getAttribute('data-mode');
        var html = "<div class=\"display\">\n                <h1>Headline Goes Here</h1>\n                <p>Lorem Ipsum is simply dummy text</p>\n            </div>";
        util.addContent(html, mode);
      });
      elm = quickadd.querySelector('.add-image');
      dom$z.addEventListener(elm, 'click', function () {
        var mode = quickadd.getAttribute('data-mode');
        var html = '<img onload="imageLoaded(this)" src="' + builder.opts.snippetPath + 'example.jpg" alt="" />';

        if (builder.opts.snippetSampleImage !== '') {
          html = builder.opts.snippetSampleImage;
        }

        util.addContent(html, mode);
      });
      elm = quickadd.querySelector('.add-heading1');
      dom$z.addEventListener(elm, 'click', function () {
        var mode = quickadd.getAttribute('data-mode');
        var html = '<h1>Heading 1 here</h1>';
        util.addContent(html, mode);
      });
      elm = quickadd.querySelector('.add-heading2');
      dom$z.addEventListener(elm, 'click', function () {
        var mode = quickadd.getAttribute('data-mode');
        var html = '<h2>Heading 2 here</h2>';
        util.addContent(html, mode);
      });
      elm = quickadd.querySelector('.add-heading3');
      dom$z.addEventListener(elm, 'click', function () {
        var mode = quickadd.getAttribute('data-mode');
        var html = '<h3>Heading 3 here</h3>';
        util.addContent(html, mode);
      });
      elm = quickadd.querySelector('.add-preformatted');
      dom$z.addEventListener(elm, 'click', function () {
        var mode = quickadd.getAttribute('data-mode');
        var html = "<pre>Lorem Ipsum is simply dummy text of the printing and typesetting industry. \n            Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, \n            when an unknown printer took a galley of type and scrambled it to make a type specimen book.</pre>";
        util.addContent(html, mode);
      });
      elm = quickadd.querySelector('.add-list');
      dom$z.addEventListener(elm, 'click', function () {
        var mode = quickadd.getAttribute('data-mode');
        var html = "<ul style=\"list-style: initial;padding-left: 20px;\">\n                <li>Lorem Ipsum is simply dummy text</li>\n                <li>Lorem Ipsum is simply dummy text</li>\n            </ul>";
        util.addContent(html, mode);
      });
      elm = quickadd.querySelector('.add-quote');
      dom$z.addEventListener(elm, 'click', function () {
        var mode = quickadd.getAttribute('data-mode');
        var html = '<blockquote>Lorem Ipsum is simply dummy text</blockquote>';
        util.addContent(html, mode);
      });
      elm = quickadd.querySelector('.add-button');
      if (elm) dom$z.addEventListener(elm, 'click', function () {
        var mode = quickadd.getAttribute('data-mode');
        var html = '<a href="#" style="display:inline-block;text-decoration:none;transition: all 0.16s ease;border-style:solid;cursor:pointer;background-color: rgb(220, 220, 220); color: rgb(0, 0, 0); border-color: rgb(220, 220, 220); border-width: 2px; border-radius: 0px; padding: 13px 28px; line-height: 1.5; text-transform: uppercase; font-weight: 400; font-size: 14px; letter-spacing: 3px;">Read More</a>';
        util.addContent(html, mode);
      });
      elm = quickadd.querySelector('.add-spacer');
      dom$z.addEventListener(elm, 'click', function () {
        var mode = quickadd.getAttribute('data-mode');
        var html = '<div class="spacer height-80"></div>';
        util.addContent(html, mode, 'data-noedit');
      });
      elm = quickadd.querySelector('.add-table');
      dom$z.addEventListener(elm, 'click', function () {
        var mode = quickadd.getAttribute('data-mode');
        var html = "<table class=\"default\" style=\"border-collapse:collapse;width:100%;\">\n                <tr>\n                    <td><br></td>\n                    <td><br></td>\n                </tr>\n                <tr>\n                    <td><br></td>\n                    <td><br></td>\n                </tr>\n            </table>";
        util.addContent(html, mode);
      });
      elm = quickadd.querySelector('.add-more');
      dom$z.addEventListener(elm, 'click', function () {
        var modal = builderStuff.querySelector('.snippets');
        util.showModal(modal, false, null, false);
        var iframe = modal.querySelector('iframe');

        if (iframe.src === 'about:blank') {
          iframe.src = builder.opts.snippetData;
        }

        quickadd.style.display = '';
      });
    }

    return quickadd;
  };

  var dom$y = new Dom();
  var Grid = /*#__PURE__*/function () {
    function Grid(builder) {
      _classCallCheck$1(this, Grid);

      this.builder = builder;
      this.columnTool = new ColumnTool$1(builder);
      this.rowTool = new RowTool$1(builder);
      this.util = new Util(this.builder);
    }

    _createClass$1(Grid, [{
      key: "moveColumnPrevious",
      value: function moveColumnPrevious() {
        var columnTool = this.columnTool;
        var util = this.util;
        var cell = util.cellSelected();
        if (!cell) return;

        if (cell.previousElementSibling) {
          this.builder.uo.saveForUndo();
          cell.parentElement.insertBefore(cell, cell.previousElementSibling);
          columnTool.position(cell);
          this.builder.opts.onChange();
        }
      }
    }, {
      key: "moveColumnNext",
      value: function moveColumnNext() {
        var columnTool = this.columnTool;
        var util = this.util;
        var cell = util.cellSelected();
        if (!cell) return;
        var cellnext = util.cellNext(cell);

        if (cellnext) {
          this.builder.uo.saveForUndo();
          cell.parentElement.insertBefore(cellnext, cell);
          columnTool.position(cell);
          this.builder.opts.onChange();
        }
      }
    }, {
      key: "moveColumnUp",
      value: function moveColumnUp() {
        var builder = this.builder;
        var columnTool = this.columnTool;
        var util = this.util;
        var cell = util.cellSelected();
        if (!cell) return;
        var row = cell.parentNode;

        if (row.childElementCount - 2 === 1) {
          //-2 => minus is-row-tool & is-rowadd-tool
          if (row.previousElementSibling) {
            var maxCols = 4;

            if (this.builder.maxColumns) {
              maxCols = this.builder.maxColumns;
            }

            if (row.previousElementSibling.childElementCount >= maxCols + 2 || row.previousElementSibling.hasAttribute('data-protected')) {
              //+2 => includes is-row-tool & is-rowaddtool
              this.builder.uo.saveForUndo(); //Move row up

              row.parentNode.insertBefore(row, row.previousElementSibling);
              columnTool.position(cell);
              this.builder.opts.onChange();
              return;
            } else {
              this.builder.uo.saveForUndo(); //Add inside prev row

              var tool = row.previousElementSibling.querySelector('.is-row-tool');
              row.previousElementSibling.removeChild(tool); //remove next row tool

              tool = row.previousElementSibling.querySelector('.is-rowadd-tool');
              row.previousElementSibling.removeChild(tool); //remove next row tool

              row.previousElementSibling.appendChild(cell); //add

              row.parentNode.removeChild(row); //remove current (empty) row

              builder.applyBehavior(); //re-add tool

              columnTool.position(cell);
              cell.click(); //refresh active cell/row

              this.builder.opts.onChange();
            }
          } else {
            //move outside container (move to previous container)
            return;
          }
        } else {
          this.builder.uo.saveForUndo();
          var rowElement = row.cloneNode(true);
          rowElement.innerHTML = '';
          rowElement.appendChild(cell);
          row.parentNode.insertBefore(rowElement, row);
          builder.applyBehavior(); //re-add tool

          columnTool.position(cell);
          cell.click(); //refresh active cell/row

          this.builder.opts.onChange();
        } //fix layout


        row = cell.parentNode; //update active row

        util.fixLayout(row, builder);
        if (row.nextElementSibling) util.fixLayout(row.nextElementSibling, builder);
      }
    }, {
      key: "moveColumnDown",
      value: function moveColumnDown() {
        var builder = this.builder;
        var columnTool = this.columnTool;
        var util = this.util;
        var cell = util.cellSelected();
        if (!cell) return;
        var row = cell.parentNode;

        if (row.childElementCount - 2 === 1) {
          //-2 => minus is-row-tool & is-rowadd-tool
          if (row.nextElementSibling) {
            var maxCols = 4;

            if (this.builder.maxColumns) {
              maxCols = this.builder.maxColumns;
            }

            if (row.nextElementSibling.childElementCount >= maxCols + 2 || row.nextElementSibling.hasAttribute('data-protected')) {
              //+2 => includes is-row-tool & is-rowadd-tool
              this.builder.uo.saveForUndo(); //Move row down

              row.parentNode.insertBefore(row.nextElementSibling, row);
              columnTool.position(cell);
              this.builder.opts.onChange();
              return;
            } else {
              this.builder.uo.saveForUndo(); //Add inside next row

              var tool = row.nextElementSibling.querySelector('.is-row-tool');
              row.nextElementSibling.removeChild(tool); //remove next row tool

              tool = row.nextElementSibling.querySelector('.is-rowadd-tool');
              row.nextElementSibling.removeChild(tool); //remove next row tool

              row.nextElementSibling.appendChild(cell); //add

              row.parentNode.removeChild(row); //remove current (empty) row

              builder.applyBehavior(); //re-add tool

              columnTool.position(cell);
              cell.click(); //refresh active cell/row

              this.builder.opts.onChange();
            }
          } else {
            //move outside container (move to next container)
            return;
          }
        } else {
          this.builder.uo.saveForUndo();
          var rowElement = row.cloneNode(true);
          rowElement.innerHTML = '';
          rowElement.appendChild(cell);
          dom$y.moveAfter(rowElement, row);
          builder.applyBehavior(); //re-add tool

          columnTool.position(cell);
          cell.click(); //refresh active cell/row

          this.builder.opts.onChange();
        } //fix layout


        row = cell.parentNode; //update active row

        util.fixLayout(row, builder);
        if (row.previousElementSibling) util.fixLayout(row.previousElementSibling, builder);
      }
    }, {
      key: "duplicateColumn",
      value: function duplicateColumn() {
        var builder = this.builder;
        var columnTool = this.columnTool;
        var util = this.util;
        var cell = util.cellSelected();
        if (!cell) return;
        this.builder.uo.saveForUndo();
        var cellElement = cell.cloneNode(true);
        dom$y.removeClass(cellElement, 'cell-active');
        cellElement.removeAttribute('data-click');
        var row = cell.parentNode;
        var maxCols = 4;

        if (this.builder.maxColumns) {
          maxCols = this.builder.maxColumns;
        }

        if (row.childElementCount >= maxCols + 2) {
          //+2 => is-row-tool & is-rowadd-tool
          alert(util.out('You have reached the maximum number of columns'));
          return false;
        }

        row.insertBefore(cellElement, cell);
        util.fixLayout(row, builder);
        builder.applyBehavior();
        columnTool.position(cell);
        cell.click(); //refresh active cell/row

        this.builder.opts.onChange();
      }
    }, {
      key: "removeColumn",
      value: function removeColumn() {
        var _this = this;

        var builder = this.builder;
        var columnTool = this.columnTool;
        var util = this.util;
        var cell = util.cellSelected();
        if (!cell) return;
        var row = cell.parentNode;
        columnTool.hide(); //Hide Column tool

        util.confirm(util.out('Are you sure you want to delete this block?'), function (ok) {
          if (ok) {
            _this.builder.uo.saveForUndo();

            if (row.childElementCount - 2 === 1) {
              //-2 => minus is-row-tool & is-rowadd-tool
              row.parentNode.removeChild(row);
              util.checkEmpty();
            } else {
              row.removeChild(cell);
              util.fixLayout(row, builder);
            }

            util.clearActiveCell();

            _this.builder.opts.onChange();
          } else {
            setTimeout(function () {
              columnTool.position(cell);
              columnTool.show();
            }, 200);
          }
        });
      }
    }, {
      key: "increaseColumn",
      value: function increaseColumn() {
        var builder = this.builder;
        var columnTool = this.columnTool;
        var util = this.util;
        var cell = util.cellSelected();
        if (!cell) return;
        var cellnext = util.cellNext(cell);
        var cellnext2;

        if (!cellnext) {
          cellnext = cell.previousElementSibling;
          if (!cellnext) return;
          cellnext2 = cellnext.previousElementSibling;
        } else {
          cellnext2 = util.cellNext(cellnext);
          if (!cellnext2) cellnext2 = cell.previousElementSibling;
        }

        var rowClass = builder.opts.row;
        var colClass = builder.opts.cols;
        var colSizes = builder.opts.colsizes;

        if (rowClass !== '' && colClass.length > 0 && colSizes.length > 0) {
          if (cellnext2) {
            for (var i = 0; i < colSizes.length; i++) {
              var group = colSizes[i];

              for (var j = 0; j < group.length; j++) {
                if (group[j].length === 3) {
                  if (dom$y.hasClass(cell, group[j][0]) && dom$y.hasClass(cellnext, group[j][1]) && dom$y.hasClass(cellnext2, group[j][2])) {
                    if (j + 1 === group.length) ; else {
                      this.builder.uo.saveForUndo();
                      dom$y.removeClass(cell, group[j][0]);
                      dom$y.removeClass(cellnext, group[j][1]);
                      dom$y.removeClass(cellnext2, group[j][2]);
                      dom$y.addClass(cell, group[j + 1][0]);
                      dom$y.addClass(cellnext, group[j + 1][1]);
                      dom$y.addClass(cellnext2, group[j + 1][2]);
                      columnTool.position(cell);
                      this.builder.opts.onChange();
                      return;
                    }
                  }
                }
              }
            }
          }

          for (var _i = 0; _i < colSizes.length; _i++) {
            var _group = colSizes[_i];

            for (var _j = 0; _j < _group.length; _j++) {
              if (_group[_j].length === 2) {
                if (dom$y.hasClass(cell, _group[_j][0]) && dom$y.hasClass(cellnext, _group[_j][1])) {
                  if (_j + 1 === _group.length) ; else {
                    this.builder.uo.saveForUndo();
                    dom$y.removeClass(cell, _group[_j][0]);
                    dom$y.removeClass(cellnext, _group[_j][1]);
                    dom$y.addClass(cell, _group[_j + 1][0]);
                    dom$y.addClass(cellnext, _group[_j + 1][1]);
                    columnTool.position(cell);
                    this.builder.opts.onChange();
                    return;
                  }
                }
              }
            }
          }

          columnTool.position(cell);
          return;
        } //others (12 columns grid)       


        if (rowClass !== '' && colClass.length > 0) {
          if (!dom$y.hasClass(cell, colClass[11])) {
            //if not column full
            if (dom$y.hasClass(cell, colClass[11])) {
              return;
            }

            if (dom$y.hasClass(cellnext, colClass[0])) {
              return;
            }

            this.builder.uo.saveForUndo();

            if (dom$y.hasClass(cell, colClass[10])) {
              dom$y.removeClass(cell, colClass[10]);
              dom$y.addClass(cell, colClass[11]);
            } else if (dom$y.hasClass(cell, colClass[9])) {
              dom$y.removeClass(cell, colClass[9]);
              dom$y.addClass(cell, colClass[10]);
            } else if (dom$y.hasClass(cell, colClass[8])) {
              dom$y.removeClass(cell, colClass[8]);
              dom$y.addClass(cell, colClass[9]);
            } else if (dom$y.hasClass(cell, colClass[7])) {
              dom$y.removeClass(cell, colClass[7]);
              dom$y.addClass(cell, colClass[8]);
            } else if (dom$y.hasClass(cell, colClass[6])) {
              dom$y.removeClass(cell, colClass[6]);
              dom$y.addClass(cell, colClass[7]);
            } else if (dom$y.hasClass(cell, colClass[5])) {
              dom$y.removeClass(cell, colClass[5]);
              dom$y.addClass(cell, colClass[6]);
            } else if (dom$y.hasClass(cell, colClass[4])) {
              dom$y.removeClass(cell, colClass[4]);
              dom$y.addClass(cell, colClass[5]);
            } else if (dom$y.hasClass(cell, colClass[3])) {
              dom$y.removeClass(cell, colClass[3]);
              dom$y.addClass(cell, colClass[4]);
            } else if (dom$y.hasClass(cell, colClass[2])) {
              dom$y.removeClass(cell, colClass[2]);
              dom$y.addClass(cell, colClass[3]);
            } else if (dom$y.hasClass(cell, colClass[1])) {
              dom$y.removeClass(cell, colClass[1]);
              dom$y.addClass(cell, colClass[2]);
            } else if (dom$y.hasClass(cell, colClass[0])) {
              dom$y.removeClass(cell, colClass[0]);
              dom$y.addClass(cell, colClass[1]);
            }

            if (dom$y.hasClass(cellnext, colClass[1])) {
              dom$y.removeClass(cellnext, colClass[1]);
              dom$y.addClass(cellnext, colClass[0]);
            } else if (dom$y.hasClass(cellnext, colClass[2])) {
              dom$y.removeClass(cellnext, colClass[2]);
              dom$y.addClass(cellnext, colClass[1]);
            } else if (dom$y.hasClass(cellnext, colClass[3])) {
              dom$y.removeClass(cellnext, colClass[3]);
              dom$y.addClass(cellnext, colClass[2]);
            } else if (dom$y.hasClass(cellnext, colClass[4])) {
              dom$y.removeClass(cellnext, colClass[4]);
              dom$y.addClass(cellnext, colClass[3]);
            } else if (dom$y.hasClass(cellnext, colClass[5])) {
              dom$y.removeClass(cellnext, colClass[5]);
              dom$y.addClass(cellnext, colClass[4]);
            } else if (dom$y.hasClass(cellnext, colClass[6])) {
              dom$y.removeClass(cellnext, colClass[6]);
              dom$y.addClass(cellnext, colClass[5]);
            } else if (dom$y.hasClass(cellnext, colClass[7])) {
              dom$y.removeClass(cellnext, colClass[7]);
              dom$y.addClass(cellnext, colClass[6]);
            } else if (dom$y.hasClass(cellnext, colClass[8])) {
              dom$y.removeClass(cellnext, colClass[8]);
              dom$y.addClass(cellnext, colClass[7]);
            } else if (dom$y.hasClass(cellnext, colClass[9])) {
              dom$y.removeClass(cellnext, colClass[9]);
              dom$y.addClass(cellnext, colClass[8]);
            } else if (dom$y.hasClass(cellnext, colClass[10])) {
              dom$y.removeClass(cellnext, colClass[10]);
              dom$y.addClass(cellnext, colClass[9]);
            } else if (dom$y.hasClass(cellnext, colClass[11])) {
              dom$y.removeClass(cellnext, colClass[11]);
              dom$y.addClass(cellnext, colClass[10]);
            }

            columnTool.position(cell);
            this.builder.opts.onChange();
          }
        }
      }
    }, {
      key: "decreaseColumn",
      value: function decreaseColumn() {
        var builder = this.builder;
        var columnTool = this.columnTool;
        var util = this.util;
        var cell = util.cellSelected();
        if (!cell) return;
        var cellnext = util.cellNext(cell);
        var cellnext2;

        if (!cellnext) {
          cellnext = cell.previousElementSibling;
          if (!cellnext) return;
          cellnext2 = cellnext.previousElementSibling;
        } else {
          cellnext2 = util.cellNext(cellnext);
          if (!cellnext2) cellnext2 = cell.previousElementSibling;
        }

        var rowClass = builder.opts.row;
        var colClass = builder.opts.cols;
        var colSizes = builder.opts.colsizes;

        if (rowClass !== '' && colClass.length > 0 && colSizes.length > 0) {
          if (cellnext2) {
            for (var i = 0; i < colSizes.length; i++) {
              var group = colSizes[i];

              for (var j = 0; j < group.length; j++) {
                if (group[j].length === 3) {
                  if (dom$y.hasClass(cell, group[j][0]) && dom$y.hasClass(cellnext, group[j][1]) && dom$y.hasClass(cellnext2, group[j][2])) {
                    if (j === 0) ; else {
                      this.builder.uo.saveForUndo();
                      dom$y.removeClass(cell, group[j][0]);
                      dom$y.removeClass(cellnext, group[j][1]);
                      dom$y.removeClass(cellnext2, group[j][2]);
                      dom$y.addClass(cell, group[j - 1][0]);
                      dom$y.addClass(cellnext, group[j - 1][1]);
                      dom$y.addClass(cellnext2, group[j - 1][2]);
                      columnTool.position(cell);
                      this.builder.opts.onChange();
                      return;
                    }
                  }
                }
              }
            }
          }

          for (var _i2 = 0; _i2 < colSizes.length; _i2++) {
            var _group2 = colSizes[_i2];

            for (var _j2 = 0; _j2 < _group2.length; _j2++) {
              if (_group2[_j2].length === 2) {
                if (dom$y.hasClass(cell, _group2[_j2][0]) && dom$y.hasClass(cellnext, _group2[_j2][1])) {
                  if (_j2 === 0) ; else {
                    this.builder.uo.saveForUndo();
                    dom$y.removeClass(cell, _group2[_j2][0]);
                    dom$y.removeClass(cellnext, _group2[_j2][1]);
                    dom$y.addClass(cell, _group2[_j2 - 1][0]);
                    dom$y.addClass(cellnext, _group2[_j2 - 1][1]);
                    columnTool.position(cell);
                    this.builder.opts.onChange();
                    return;
                  }
                }
              }
            }
          }

          columnTool.position(cell);
          return;
        } //others (12 columns grid)       
        // const rowClass = builder.opts.row; //row
        // const colClass = builder.opts.cols; //['col s1', 'col s2', 'col s3', 'col s4', 'col s5', 'col s6', 'col s7', 'col s8', 'col s9', 'col s10', 'col s11', 'col s12']


        if (rowClass !== '' && colClass.length > 0) {
          if (!dom$y.hasClass(cell, colClass[11])) {
            //if not column full
            if (dom$y.hasClass(cell, colClass[0])) {
              return;
            }

            if (dom$y.hasClass(cellnext, colClass[11])) {
              return;
            }

            this.builder.uo.saveForUndo();

            if (dom$y.hasClass(cell, colClass[11])) {
              dom$y.removeClass(cell, colClass[11]);
              dom$y.addClass(cell, colClass[10]);
            } else if (dom$y.hasClass(cell, colClass[10])) {
              dom$y.removeClass(cell, colClass[10]);
              dom$y.addClass(cell, colClass[9]);
            } else if (dom$y.hasClass(cell, colClass[9])) {
              dom$y.removeClass(cell, colClass[9]);
              dom$y.addClass(cell, colClass[8]);
            } else if (dom$y.hasClass(cell, colClass[8])) {
              dom$y.removeClass(cell, colClass[8]);
              dom$y.addClass(cell, colClass[7]);
            } else if (dom$y.hasClass(cell, colClass[7])) {
              dom$y.removeClass(cell, colClass[7]);
              dom$y.addClass(cell, colClass[6]);
            } else if (dom$y.hasClass(cell, colClass[6])) {
              dom$y.removeClass(cell, colClass[6]);
              dom$y.addClass(cell, colClass[5]);
            } else if (dom$y.hasClass(cell, colClass[5])) {
              dom$y.removeClass(cell, colClass[5]);
              dom$y.addClass(cell, colClass[4]);
            } else if (dom$y.hasClass(cell, colClass[4])) {
              dom$y.removeClass(cell, colClass[4]);
              dom$y.addClass(cell, colClass[3]);
            } else if (dom$y.hasClass(cell, colClass[3])) {
              dom$y.removeClass(cell, colClass[3]);
              dom$y.addClass(cell, colClass[2]);
            } else if (dom$y.hasClass(cell, colClass[2])) {
              dom$y.removeClass(cell, colClass[2]);
              dom$y.addClass(cell, colClass[1]);
            } else if (dom$y.hasClass(cell, colClass[1])) {
              dom$y.removeClass(cell, colClass[1]);
              dom$y.addClass(cell, colClass[0]);
            }

            if (dom$y.hasClass(cellnext, colClass[0])) {
              dom$y.removeClass(cellnext, colClass[0]);
              dom$y.addClass(cellnext, colClass[1]);
            } else if (dom$y.hasClass(cellnext, colClass[1])) {
              dom$y.removeClass(cellnext, colClass[1]);
              dom$y.addClass(cellnext, colClass[2]);
            } else if (dom$y.hasClass(cellnext, colClass[2])) {
              dom$y.removeClass(cellnext, colClass[2]);
              dom$y.addClass(cellnext, colClass[3]);
            } else if (dom$y.hasClass(cellnext, colClass[3])) {
              dom$y.removeClass(cellnext, colClass[3]);
              dom$y.addClass(cellnext, colClass[4]);
            } else if (dom$y.hasClass(cellnext, colClass[4])) {
              dom$y.removeClass(cellnext, colClass[4]);
              dom$y.addClass(cellnext, colClass[5]);
            } else if (dom$y.hasClass(cellnext, colClass[5])) {
              dom$y.removeClass(cellnext, colClass[5]);
              dom$y.addClass(cellnext, colClass[6]);
            } else if (dom$y.hasClass(cellnext, colClass[6])) {
              dom$y.removeClass(cellnext, colClass[6]);
              dom$y.addClass(cellnext, colClass[7]);
            } else if (dom$y.hasClass(cellnext, colClass[7])) {
              dom$y.removeClass(cellnext, colClass[7]);
              dom$y.addClass(cellnext, colClass[8]);
            } else if (dom$y.hasClass(cellnext, colClass[8])) {
              dom$y.removeClass(cellnext, colClass[8]);
              dom$y.addClass(cellnext, colClass[9]);
            } else if (dom$y.hasClass(cellnext, colClass[9])) {
              dom$y.removeClass(cellnext, colClass[9]);
              dom$y.addClass(cellnext, colClass[10]);
            } else if (dom$y.hasClass(cellnext, colClass[10])) {
              dom$y.removeClass(cellnext, colClass[10]);
              dom$y.addClass(cellnext, colClass[11]);
            }

            columnTool.position(cell);
            this.builder.opts.onChange();
          }
        }
      } // ROW

    }, {
      key: "removeRow",
      value: function removeRow() {
        var _this2 = this;

        // let builder = this.builder;
        // let columnTool = this.columnTool;
        var util = this.util;
        var cell = util.cellSelected();
        if (!cell) return;
        var row = cell.parentNode; //Change to row selection

        dom$y.removeClass(row, 'row-outline');
        this.columnTool.hide(); //Hide Column tool

        util.confirm(util.out('Are you sure you want to delete this block?'), function (ok) {
          var cell = util.cellSelected();
          if (!cell) return;
          var row = cell.parentNode;

          if (ok) {
            _this2.builder.uo.saveForUndo();

            row.parentNode.removeChild(row);
            util.checkEmpty();

            _this2.builder.opts.onChange();
          }
        });
      }
    }, {
      key: "moveRowUp",
      value: function moveRowUp() {
        var _this3 = this;

        // let builder = this.builder;
        var columnTool = this.columnTool;
        var util = this.util;
        var cell = util.cellSelected();
        if (!cell) return;
        var row = cell.parentNode; //Change to row selection

        dom$y.removeClass(row, 'row-outline');
        columnTool.hide(); //Hide Column tool

        if (row.previousElementSibling) {
          this.builder.uo.saveForUndo();
          row.parentNode.insertBefore(row, row.previousElementSibling);
          this.rowTool.position(row);
          this.builder.opts.onChange();
        } else {
          // Move to previous container
          var currContainer = row.parentNode;
          var prev = null;
          var builders = document.querySelectorAll(this.builder.opts.container);
          Array.prototype.forEach.call(builders, function (builder) {
            if (builder.innerHTML === currContainer.innerHTML) {
              if (prev) {
                dom$y.moveAfter(row, prev.lastChild);

                _this3.rowTool.position(row);

                util.checkEmpty();

                _this3.builder.opts.onChange();

                return false;
              }
            }

            prev = builder;
          });
        }
      }
    }, {
      key: "moveRowDown",
      value: function moveRowDown() {
        var _this4 = this;

        // let builder = this.builder;
        var columnTool = this.columnTool;
        var util = this.util;
        var cell = util.cellSelected();
        if (!cell) return;
        var row = cell.parentNode; //Change to row selection

        dom$y.removeClass(row, 'row-outline');
        columnTool.hide(); //Hide Column tool

        if (row.nextElementSibling) {
          this.builder.uo.saveForUndo();
          row.parentNode.insertBefore(row.nextElementSibling, row);
          this.rowTool.position(row);
          this.builder.opts.onChange();
        } else {
          // Move to next container
          var currContainer = row.parentNode;
          var flag = false;
          var builders = document.querySelectorAll(this.builder.opts.container);
          Array.prototype.forEach.call(builders, function (builder) {
            if (flag) {
              builder.insertBefore(row, builder.firstChild);

              _this4.rowTool.position(row);

              util.checkEmpty();

              _this4.builder.opts.onChange();

              return false;
            }

            if (builder.innerHTML === currContainer.innerHTML) {
              flag = true;
            }
          });
        }
      }
    }, {
      key: "duplicateRow",
      value: function duplicateRow() {
        var builder = this.builder;
        var columnTool = this.columnTool;
        var util = this.util;
        var cell = util.cellSelected();
        if (!cell) return;
        var row = cell.parentNode; //Change to row selection

        dom$y.removeClass(row, 'row-outline');
        columnTool.hide(); //Hide Column tool

        this.builder.uo.saveForUndo(); //Clone row & cleanup attached tool & event

        var rowElement = row.cloneNode(true);
        rowElement.removeChild(rowElement.querySelector('.is-row-tool'));
        var cols = dom$y.elementChildren(rowElement);
        cols.forEach(function (col) {
          col.removeAttribute('data-click');

          if (col.classList.contains('cell-active')) {
            builder.activeCol = col;
          }
        });
        dom$y.moveAfter(rowElement, row); //Unselect current row

        dom$y.removeClass(row, 'row-active');
        dom$y.removeClass(row, 'row-outline');
        cols = dom$y.elementChildren(row);
        cols.forEach(function (col) {
          dom$y.removeClass(col, 'cell-active');
        });
        builder.applyBehavior();
        this.rowTool.position(rowElement);
        this.builder.opts.onChange();
      } // Utilities

    }, {
      key: "refreshColumnTool",
      value: function refreshColumnTool(cell) {
        var columnTool = this.columnTool;
        columnTool.position(cell);
      }
    }, {
      key: "showColumnTool",
      value: function showColumnTool() {
        var columnTool = this.columnTool;
        columnTool.show();
      }
    }, {
      key: "hideColumnTool",
      value: function hideColumnTool() {
        var columnTool = this.columnTool;
        columnTool.hide();
      }
    }]);

    return Grid;
  }();

  var RowTool$1 = /*#__PURE__*/function () {
    function RowTool(builder) {
      _classCallCheck$1(this, RowTool);

      this.builder = builder;
    }

    _createClass$1(RowTool, [{
      key: "position",
      value: function position(row) {
        var util = new Util(this.builder);
        var builderstuff = util.builderStuff();
        var rowTool = row.querySelector('.is-row-tool');
        var rowMore = builderstuff.querySelector('.rowmore');
        dom$y.addClass(rowMore, 'transition1');
        var elm = rowTool.querySelector('.row-more');
        var top = elm.getBoundingClientRect().top + window.pageYOffset;
        var left = elm.getBoundingClientRect().left + window.pageXOffset; // const w = rowMore.offsetWidth; 

        rowMore.style.top = top - 8 + 'px';
        dom$y.removeClass(rowMore, 'arrow-bottom');
        dom$y.removeClass(rowMore, 'arrow-left');
        dom$y.removeClass(rowMore, 'arrow-right');
        dom$y.removeClass(rowMore, 'center');
        dom$y.removeClass(rowMore, 'right');
        dom$y.removeClass(rowMore, 'left');

        if (this.builder.opts.rowTool === 'right') {
          rowMore.style.left = left - rowMore.offsetWidth - 10 + 'px';
          dom$y.addClass(rowMore, 'arrow-right');
          dom$y.addClass(rowMore, 'left');
        } else {
          rowMore.style.left = left + 35 + 'px';
          dom$y.addClass(rowMore, 'arrow-left');
          dom$y.addClass(rowMore, 'left');
        }

        setTimeout(function () {
          dom$y.removeClass(rowMore, 'transition1');
        }, 300);
      }
    }]);

    return RowTool;
  }();

  var ColumnTool$1 = /*#__PURE__*/function () {
    function ColumnTool(builder) {
      _classCallCheck$1(this, ColumnTool);

      this.builder = builder;
    }

    _createClass$1(ColumnTool, [{
      key: "position",
      value: function position(col) {
        var _this5 = this;

        var util = new Util(this.builder);
        var builderstuff = util.builderStuff();
        this.columnTool = builderstuff.querySelector('.is-column-tool');
        this.columnMore = builderstuff.querySelector('.columnmore');
        dom$y.addClass(this.columnMore, 'transition1');
        setTimeout(function () {
          _this5.columnTool.style.top = col.getBoundingClientRect().top - 29 + window.pageYOffset + 'px';
          _this5.columnTool.style.left = col.getBoundingClientRect().left - 1 + 'px';
          var top = parseInt(_this5.columnTool.style.top);
          var left = parseInt(_this5.columnTool.style.left);
          _this5.columnMore.style.top = top + 35 + 'px';
          _this5.columnMore.style.left = left + 19 + 'px';
          setTimeout(function () {
            dom$y.removeClass(_this5.columnMore, 'transition1');
          }, 300);
        }, 300);
      }
    }, {
      key: "hide",
      value: function hide() {
        var util = new Util(this.builder);
        var builderstuff = util.builderStuff();
        this.columnTool = builderstuff.querySelector('.is-column-tool'); // this.columnMore = builderstuff.querySelector('.columnmore');

        dom$y.removeClass(this.columnTool, 'active');
      }
    }, {
      key: "show",
      value: function show() {
        var util = new Util(this.builder);
        var builderstuff = util.builderStuff();
        this.columnTool = builderstuff.querySelector('.is-column-tool'); // this.columnMore = builderstuff.querySelector('.columnmore');

        dom$y.addClass(this.columnTool, 'active');
      }
    }]);

    return ColumnTool;
  }();

  /*
  Draggable
  Insipred by: https://www.kirupa.com/html5/drag.htm
  */
  var initialX, initialY, currentX, currentY, xOffset, yOffset, dragActive, activeDraggableBox;
  var Draggable$1 = /*#__PURE__*/function () {
    function Draggable() {
      var _this = this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck$1(this, Draggable);

      this.opts = opts;
      var elms = document.querySelectorAll(this.opts.selector);
      Array.prototype.forEach.call(elms, function (elm) {
        elm.setAttribute('draggable', '');
        elm.addEventListener('touchstart', _this.dragStart, false);
        elm.addEventListener('touchend', _this.dragEnd, false);
        elm.addEventListener('mousedown', _this.dragStart, false);
        elm.addEventListener('mouseup', _this.dragEnd, false);
      });
      document.addEventListener('touchmove', this.drag, false);
      document.addEventListener('mousemove', this.drag, false); // if(this.isTouchSupport) {
      //     window.addEventListener('touchmove', (e)=>{
      //         e.returnValue = true;
      //         if (dragActive) {
      //             e.preventDefault();
      //         }
      //     },
      //         {
      //             passive: dragActive
      //         }
      //     ); 
      // }
    }

    _createClass$1(Draggable, [{
      key: "dragStart",
      value: function dragStart(e) {
        if (!e.target.hasAttribute('draggable')) return; //any child element (ex. close button) should not be draggable. LATER: revew.

        dragActive = true;
        activeDraggableBox = e.target.parentElement;
        var xOffset;
        var yOffset;

        if (!activeDraggableBox.getAttribute('data-xOffset')) {
          activeDraggableBox.setAttribute('data-xOffset', 0);
          xOffset = 0;
        } else {
          xOffset = activeDraggableBox.getAttribute('data-xOffset');
        }

        if (!activeDraggableBox.getAttribute('data-yOffset')) {
          activeDraggableBox.setAttribute('data-yOffset', 0);
          yOffset = 0;
        } else {
          yOffset = activeDraggableBox.getAttribute('data-yOffset');
        }

        if (e.type === 'touchstart') {
          initialX = e.touches[0].clientX - xOffset;
          initialY = e.touches[0].clientY - yOffset;
        } else {
          initialX = e.clientX - xOffset;
          initialY = e.clientY - yOffset;
        }

        activeDraggableBox.setAttribute('data-initialX', initialX);
        activeDraggableBox.setAttribute('data-initialY', initialY);
      }
    }, {
      key: "dragEnd",
      value: function dragEnd(e) {
        if (!e.target.hasAttribute('draggable')) return; //any child element (ex. close button) should not be draggable. LATER: revew.
        //Update

        currentX = activeDraggableBox.getAttribute('data-currentX');
        currentY = activeDraggableBox.getAttribute('data-currentY');
        initialX = currentX;
        initialY = currentY;
        activeDraggableBox.setAttribute('data-initialX', initialX);
        activeDraggableBox.setAttribute('data-initialY', initialY);
        dragActive = false;
      }
    }, {
      key: "drag",
      value: function drag(e) {
        if (dragActive) {
          e.preventDefault();
          var initialX = activeDraggableBox.getAttribute('data-initialX');
          var initialY = activeDraggableBox.getAttribute('data-initialY');

          if (e.type === 'touchmove') {
            currentX = e.touches[0].clientX - initialX;
            currentY = e.touches[0].clientY - initialY;
          } else {
            currentX = e.clientX - initialX;
            currentY = e.clientY - initialY;
          }

          activeDraggableBox.style.transform = 'translate3d(' + currentX + 'px, ' + currentY + 'px, 0)'; //Save

          activeDraggableBox.setAttribute('data-currentX', currentX);
          activeDraggableBox.setAttribute('data-currentY', currentY);
          xOffset = currentX;
          yOffset = currentY;
          activeDraggableBox.setAttribute('data-xOffset', xOffset);
          activeDraggableBox.setAttribute('data-yOffset', yOffset);
        }
      }
    }, {
      key: "isTouchSupport",
      value: function isTouchSupport() {
        if ('ontouchstart' in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0) {
          return true;
        } else {
          return false;
        }
      }
    }]);

    return Draggable;
  }();

  var dom$x = new Dom();

  var renderGridEditor = function renderGridEditor(builder) {
    var util = new Util(builder);
    var grid = new Grid(builder);
    var htmlutil = new HtmlUtil(builder);
    var rowhtmlbutton = '';
    if (builder.opts.rowHtmlEditor) rowhtmlbutton = "<button title=\"".concat(util.out('HTML'), "\" class=\"row-html\">\n            <svg class=\"is-icon-flex\" style=\"margin-right:-3px;fill:rgba(0, 0, 0, 0.65);width:12px;height:12px;\"><use xlink:href=\"#ion-ios-arrow-left\"></use></svg><svg class=\"is-icon-flex\" style=\"margin-left:-2px;fill:rgba(0, 0, 0, 0.65);width:12px;height:12px;\"><use xlink:href=\"#ion-ios-arrow-right\"></use></svg>\n        </button>");
    var colhtmlbutton = '';
    if (builder.opts.columnHtmlEditor) colhtmlbutton = "<button title=\"".concat(util.out('HTML'), "\" class=\"cell-html\">\n            <svg class=\"is-icon-flex\" style=\"margin-right:-3px;fill:rgba(0, 0, 0, 0.65);width:12px;height:12px;\"><use xlink:href=\"#ion-ios-arrow-left\"></use></svg><svg class=\"is-icon-flex\" style=\"margin-left:-2px;fill:rgba(0, 0, 0, 0.65);width:12px;height:12px;\"><use xlink:href=\"#ion-ios-arrow-right\"></use></svg>\n        </button>");
    var html = "<div class=\"is-modal grideditor\" style=\"z-index:10002;\">\n        <div class=\"is-modal-bar is-draggable\" style=\"position: absolute;top: 0;left: 0;width: 100%;z-index:1;line-height:1.5;height:20px;border:none;\">\n            <div class=\"is-modal-close\" style=\"z-index:1;width:20px;height:20px;position:absolute;top:0px;right:0px;box-sizing:border-box;padding:0;line-height:20px;font-size:10px;color:#777;text-align:center;cursor:pointer;\">&#10005;</div>\n        </div>\n        <div style=\"padding:30px 0 5px 18px;font-size:10px;color:#333;text-transform:uppercase;letter-spacing:1px;\">".concat(util.out('Row'), "</div>\n        <div style=\"display:flex;flex-flow:wrap;\">\n            <button title=\"").concat(util.out('Add'), "\" class=\"row-add\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.8);width:19px;height:19px;\"><use xlink:href=\"#ion-ios-plus-empty\"></use></svg></button>\n            <button title=\"").concat(util.out('Duplicate'), "\" class=\"row-duplicate\" style=\"display: block;\"><svg class=\"is-icon-flex\" style=\"width:12px;height:12px;\"><use xlink:href=\"#ion-ios-photos-outline\"></use></svg></button>\n            <button title=\"").concat(util.out('Move Up'), "\" class=\"row-up\" style=\"display: block;\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.7);width:15px;height:15px;\"><use xlink:href=\"#ion-ios-arrow-thin-up\"></use></svg></button>\n            <button title=\"").concat(util.out('Move Down'), "\" class=\"row-down\" style=\"display: block;\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.7);width:15px;height:15px;\"><use xlink:href=\"#ion-ios-arrow-thin-down\"></use></svg></button>\n            ").concat(rowhtmlbutton, "\n            <button title=\"").concat(util.out('Delete'), "\" class=\"row-remove\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.8);width:20px;height:20px;\"><use xlink:href=\"#ion-ios-close-empty\"></use></svg></button>\n        </div>\n        <div style=\"padding:8px 0 5px 18px;font-size:11px;color:#333;text-transform:uppercase;letter-spacing:1px;\">").concat(util.out('Column'), "</div>\n        <div style=\"display:flex;flex-flow:wrap;\">\n            <button title=\"").concat(util.out('Add'), "\" class=\"cell-add\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.8);width:19px;height:19px;\"><use xlink:href=\"#ion-ios-plus-empty\"></use></svg></button>\n            <button title=\"").concat(util.out('Duplicate'), "\" class=\"cell-duplicate\"><svg class=\"is-icon-flex\" style=\"width:12px;height:12px;\"><use xlink:href=\"#ion-ios-photos-outline\"></use></svg></button>\n            <button title=\"").concat(util.out('Move Up'), "\" class=\"cell-up\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.7);width:15px;height:15px;\"><use xlink:href=\"#ion-ios-arrow-thin-up\"></use></svg></button>\n            <button title=\"").concat(util.out('Move Down'), "\" class=\"cell-down\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.7);width:15px;height:15px;\"><use xlink:href=\"#ion-ios-arrow-thin-down\"></use></svg></button>\n            <button title=\"").concat(util.out('Move Left'), "\" class=\"cell-prev\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.7);width:15px;height:15px;\"><use xlink:href=\"#ion-ios-arrow-thin-left\"></use></svg></button>\n            <button title=\"").concat(util.out('Move Right'), "\" class=\"cell-next\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.7);width:15px;height:15px;\"><use xlink:href=\"#ion-ios-arrow-thin-right\"></use></svg></button>\n            <button title=\"").concat(util.out('Increase'), "\" class=\"cell-increase\"><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#icon-increase\"></use></svg></button>\n            <button title=\"").concat(util.out('Decrease'), "\" class=\"cell-decrease\"><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#icon-decrease\"></use></svg></button>\n            ").concat(colhtmlbutton, "\n            <button title=\"").concat(util.out('Delete'), "\" class=\"cell-remove\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.8);width:20px;height:20px;\"><use xlink:href=\"#ion-ios-close-empty\"></use></svg></button>\n            <div class=\"is-separator\">\n                <button title=\"").concat(util.out('Outline'), "\" class=\"grid-outline\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.8);width:12px;height:12px;\"><use xlink:href=\"#ion-ios-grid-view-outline\"></use></svg></button>\n                <!--<button title=\"").concat(util.out('Element Tool'), "\" class=\"cell-elmtool\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.7);width:12px;height:12px;\"><use xlink:href=\"#ion-ios-gear\"></use></svg></button>-->\n            </div>\n        </div>\n    </div>"); //LATER:
    //<button title="${util.out('Element Tool')}" class="cell-elmtool"><svg class="is-icon-flex" style="fill:rgba(0, 0, 0, 0.7);width:12px;height:12px;"><use xlink:href="#ion-ios-gear"></use></svg></button>

    var builderstuff = util.builderStuff();
    dom$x.appendHtml(builderstuff, html);
    new Draggable$1({
      selector: '.is-draggable'
    });
    var grideditor = document.querySelector('.grideditor');
    document.addEventListener('click', function (e) {
      e = e || window.event;
      var target = e.target || e.srcElement;

      if (dom$x.hasClass(grideditor, 'active')) {
        var a = dom$x.parentsHasClass(target, 'is-builder');
        var b = dom$x.parentsHasClass(target, 'grideditor');
        var c = dom$x.parentsHasClass(target, 'is-modal');
        var d = dom$x.parentsHasClass(target, 'is-pop');
        var f = dom$x.parentsHasClass(target, 'rte-grideditor') || dom$x.hasClass(target, 'rte-grideditor');

        if (a || b || c || d || f) {
          grideditor.style.display = '';
          return;
        } else {
          grideditor.style.display = 'none';
        }
      }
    }, false);
    var elm = grideditor.querySelector('.is-modal-close');
    dom$x.addEventListener(elm, 'click', function () {
      dom$x.removeClass(grideditor, 'active');
      var builders = document.querySelectorAll(builder.opts.container);
      Array.prototype.forEach.call(builders, function (builder) {
        builder.removeAttribute('grideditor');
      });
    });
    elm = grideditor.querySelector('.grid-outline');
    dom$x.addEventListener(elm, 'click', function () {
      var builders = document.querySelectorAll(builder.opts.container);
      Array.prototype.forEach.call(builders, function (builder) {
        if (builder.hasAttribute('gridoutline')) {
          builder.removeAttribute('gridoutline');
        } else {
          builder.setAttribute('gridoutline', '');
        }
      });
    });
    var quickadd = renderQuickAdd(builder); // CELL

    elm = grideditor.querySelector('.cell-add');
    dom$x.addEventListener(elm, 'click', function () {
      var tabs = quickadd.querySelector('.is-pop-tabs');
      tabs.style.display = 'flex';
      var elm = grideditor.querySelector('.cell-add');
      var top = elm.getBoundingClientRect().top + window.pageYOffset;
      var left = elm.getBoundingClientRect().left + window.pageXOffset;
      quickadd.style.display = 'flex';
      var w = quickadd.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.
      //const h = quickadd.offsetHeight;

      quickadd.style.top = top + 'px';
      quickadd.style.left = left - w - 8 + 'px';
      dom$x.removeClass(quickadd, 'arrow-bottom');
      dom$x.removeClass(quickadd, 'arrow-left');
      dom$x.removeClass(quickadd, 'arrow-top');
      dom$x.removeClass(quickadd, 'center');
      dom$x.removeClass(quickadd, 'left');
      dom$x.addClass(quickadd, 'arrow-right');
      dom$x.addClass(quickadd, 'right');
      var val = quickadd.querySelector('.active').getAttribute('data-value');

      if (val === 'left') {
        quickadd.setAttribute('data-mode', 'cell-left');
      } else {
        quickadd.setAttribute('data-mode', 'cell-right');
      }
    });
    elm = grideditor.querySelector('.cell-prev');
    dom$x.addEventListener(elm, 'click', function () {
      grid.moveColumnPrevious();
      util.clearControls();
    });
    elm = grideditor.querySelector('.cell-next');
    dom$x.addEventListener(elm, 'click', function () {
      grid.moveColumnNext();
      util.clearControls();
    });
    elm = grideditor.querySelector('.cell-increase');
    dom$x.addEventListener(elm, 'click', function () {
      grid.increaseColumn();
      util.clearControls();
    });
    elm = grideditor.querySelector('.cell-decrease');
    dom$x.addEventListener(elm, 'click', function () {
      grid.decreaseColumn();
      util.clearControls();
    });
    elm = grideditor.querySelector('.cell-up');
    dom$x.addEventListener(elm, 'click', function () {
      grid.moveColumnUp();
      util.clearControls();
    });
    elm = grideditor.querySelector('.cell-down');
    dom$x.addEventListener(elm, 'click', function () {
      grid.moveColumnDown();
      util.clearControls();
    });
    elm = grideditor.querySelector('.cell-duplicate');
    dom$x.addEventListener(elm, 'click', function () {
      grid.duplicateColumn();
      util.clearControls();
    });
    elm = grideditor.querySelector('.cell-remove');
    dom$x.addEventListener(elm, 'click', function () {
      grid.removeColumn();
      util.clearControls();
    });
    elm = grideditor.querySelector('.cell-html');
    if (elm) dom$x.addEventListener(elm, 'click', function () {
      var cell = util.cellSelected();
      if (!cell) return;
      htmlutil.view('cell');
    }); // ROW

    elm = grideditor.querySelector('.row-add');
    dom$x.addEventListener(elm, 'click', function () {
      var tabs = quickadd.querySelector('.is-pop-tabs');
      tabs.style.display = 'none';
      var elm = grideditor.querySelector('.row-add');
      var top = elm.getBoundingClientRect().top + window.pageYOffset;
      var left = elm.getBoundingClientRect().left + window.pageXOffset;
      quickadd.style.display = 'flex';
      var w = quickadd.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.
      //const h = quickadd.offsetHeight;

      quickadd.style.top = top + 'px';
      quickadd.style.left = left - w - 8 + 'px';
      dom$x.removeClass(quickadd, 'arrow-bottom');
      dom$x.removeClass(quickadd, 'arrow-left');
      dom$x.removeClass(quickadd, 'arrow-top');
      dom$x.removeClass(quickadd, 'center');
      dom$x.removeClass(quickadd, 'left');
      dom$x.addClass(quickadd, 'arrow-right');
      dom$x.addClass(quickadd, 'right');
      quickadd.setAttribute('data-mode', 'row');
    });
    elm = grideditor.querySelector('.row-up');
    dom$x.addEventListener(elm, 'click', function () {
      grid.moveRowUp();
      util.clearControls();
    });
    elm = grideditor.querySelector('.row-down');
    dom$x.addEventListener(elm, 'click', function () {
      grid.moveRowDown();
      util.clearControls();
    });
    elm = grideditor.querySelector('.row-duplicate');
    dom$x.addEventListener(elm, 'click', function () {
      grid.duplicateRow();
      util.clearControls();
    });
    elm = grideditor.querySelector('.row-remove');
    dom$x.addEventListener(elm, 'click', function () {
      grid.removeRow();
      util.clearControls();
    });
    elm = grideditor.querySelector('.row-html');
    if (elm) dom$x.addEventListener(elm, 'click', function () {
      var cell = util.cellSelected();
      if (!cell) return;
      htmlutil.view('row');
    });
  };

  var dom$w = new Dom();

  var Dropdown = function Dropdown(element) {
    var _this = this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck$1(this, Dropdown);

    var defaults = {
      onChange: function onChange() {}
    };
    this.opts = Object.assign(this, defaults, opts);
    var selectbox = element;
    var groupname = selectbox.getAttribute('data-group');
    var dropdown = document.querySelector('.is-selectbox-options[data-group="' + groupname + '"]');
    if (this.opts.dropdown) dropdown = this.opts.dropdown;
    dom$w.addEventListener(selectbox, 'click', function () {
      if (dropdown.style.display === 'none') {
        var dropdowns = document.querySelectorAll('.is-selectbox-options');
        Array.prototype.forEach.call(dropdowns, function (elm) {
          elm.style.display = 'none';
        });
        dropdown.style.display = 'block';

        var _elms = dom$w.elementChildren(dropdown);

        _elms.forEach(function (elm) {
          dom$w.removeClass(elm, 'selected');
        });

        var value = selectbox.getAttribute('data-value');
        var optionselected = dropdown.querySelector('[data-value="' + value + '"]');

        if (optionselected) {
          dom$w.addClass(optionselected, 'selected');
        }
      } else {
        dropdown.style.display = 'none';
      }
    });
    var elms = dom$w.elementChildren(dropdown);
    elms.forEach(function (elm) {
      dom$w.addEventListener(elm, 'click', function () {
        dropdown.style.display = 'none';
        var cat = elm.getAttribute('data-value');
        selectbox.querySelector('span').innerHTML = elm.innerHTML;
        selectbox.setAttribute('data-value', cat);

        _this.opts.onChange(cat);
      });
    });
  };

  /**!
   * Sortable 1.13.0
   * @author	RubaXa   <trash@rubaxa.org>
   * @author	owenm    <owen23355@gmail.com>
   * @license MIT
   */
  function _typeof$1(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof$1 = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof$1 = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof$1(obj);
  }

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      });
    }

    return target;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  var version$1 = "1.13.0";

  function userAgent(pattern) {
    if (typeof window !== 'undefined' && window.navigator) {
      return !!
      /*@__PURE__*/
      navigator.userAgent.match(pattern);
    }
  }

  var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
  var Edge = userAgent(/Edge/i);
  var FireFox = userAgent(/firefox/i);
  var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
  var IOS = userAgent(/iP(ad|od|hone)/i);
  var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);

  var captureMode = {
    capture: false,
    passive: false
  };

  function on(el, event, fn) {
    el.addEventListener(event, fn, !IE11OrLess && captureMode);
  }

  function off(el, event, fn) {
    el.removeEventListener(event, fn, !IE11OrLess && captureMode);
  }

  function matches(
  /**HTMLElement*/
  el,
  /**String*/
  selector) {
    if (!selector) return;
    selector[0] === '>' && (selector = selector.substring(1));

    if (el) {
      try {
        if (el.matches) {
          return el.matches(selector);
        } else if (el.msMatchesSelector) {
          return el.msMatchesSelector(selector);
        } else if (el.webkitMatchesSelector) {
          return el.webkitMatchesSelector(selector);
        }
      } catch (_) {
        return false;
      }
    }

    return false;
  }

  function getParentOrHost(el) {
    return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
  }

  function closest(
  /**HTMLElement*/
  el,
  /**String*/
  selector,
  /**HTMLElement*/
  ctx, includeCTX) {
    if (el) {
      ctx = ctx || document;

      do {
        if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
          return el;
        }

        if (el === ctx) break;
        /* jshint boss:true */
      } while (el = getParentOrHost(el));
    }

    return null;
  }

  var R_SPACE = /\s+/g;

  function toggleClass$1(el, name, state) {
    if (el && name) {
      if (el.classList) {
        el.classList[state ? 'add' : 'remove'](name);
      } else {
        var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
        el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
      }
    }
  }

  function css(el, prop, val) {
    var style = el && el.style;

    if (style) {
      if (val === void 0) {
        if (document.defaultView && document.defaultView.getComputedStyle) {
          val = document.defaultView.getComputedStyle(el, '');
        } else if (el.currentStyle) {
          val = el.currentStyle;
        }

        return prop === void 0 ? val : val[prop];
      } else {
        if (!(prop in style) && prop.indexOf('webkit') === -1) {
          prop = '-webkit-' + prop;
        }

        style[prop] = val + (typeof val === 'string' ? '' : 'px');
      }
    }
  }

  function matrix(el, selfOnly) {
    var appliedTransforms = '';

    if (typeof el === 'string') {
      appliedTransforms = el;
    } else {
      do {
        var transform = css(el, 'transform');

        if (transform && transform !== 'none') {
          appliedTransforms = transform + ' ' + appliedTransforms;
        }
        /* jshint boss:true */

      } while (!selfOnly && (el = el.parentNode));
    }

    var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
    /*jshint -W056 */

    return matrixFn && new matrixFn(appliedTransforms);
  }

  function find$2(ctx, tagName, iterator) {
    if (ctx) {
      var list = ctx.getElementsByTagName(tagName),
          i = 0,
          n = list.length;

      if (iterator) {
        for (; i < n; i++) {
          iterator(list[i], i);
        }
      }

      return list;
    }

    return [];
  }

  function getWindowScrollingElement() {
    var scrollingElement = document.scrollingElement;

    if (scrollingElement) {
      return scrollingElement;
    } else {
      return document.documentElement;
    }
  }
  /**
   * Returns the "bounding client rect" of given element
   * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
   * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
   * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
   * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
   * @param  {[HTMLElement]} container              The parent the element will be placed in
   * @return {Object}                               The boundingClientRect of el, with specified adjustments
   */


  function getRect$1(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
    if (!el.getBoundingClientRect && el !== window) return;
    var elRect, top, left, bottom, right, height, width;

    if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
      elRect = el.getBoundingClientRect();
      top = elRect.top;
      left = elRect.left;
      bottom = elRect.bottom;
      right = elRect.right;
      height = elRect.height;
      width = elRect.width;
    } else {
      top = 0;
      left = 0;
      bottom = window.innerHeight;
      right = window.innerWidth;
      height = window.innerHeight;
      width = window.innerWidth;
    }

    if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
      // Adjust for translate()
      container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
      // Not needed on <= IE11

      if (!IE11OrLess) {
        do {
          if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
            var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container

            top -= containerRect.top + parseInt(css(container, 'border-top-width'));
            left -= containerRect.left + parseInt(css(container, 'border-left-width'));
            bottom = top + elRect.height;
            right = left + elRect.width;
            break;
          }
          /* jshint boss:true */

        } while (container = container.parentNode);
      }
    }

    if (undoScale && el !== window) {
      // Adjust for scale()
      var elMatrix = matrix(container || el),
          scaleX = elMatrix && elMatrix.a,
          scaleY = elMatrix && elMatrix.d;

      if (elMatrix) {
        top /= scaleY;
        left /= scaleX;
        width /= scaleX;
        height /= scaleY;
        bottom = top + height;
        right = left + width;
      }
    }

    return {
      top: top,
      left: left,
      bottom: bottom,
      right: right,
      width: width,
      height: height
    };
  }
  /**
   * Checks if a side of an element is scrolled past a side of its parents
   * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
   * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
   * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
   * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
   */


  function isScrolledPast(el, elSide, parentSide) {
    var parent = getParentAutoScrollElement(el, true),
        elSideVal = getRect$1(el)[elSide];
    /* jshint boss:true */

    while (parent) {
      var parentSideVal = getRect$1(parent)[parentSide],
          visible = void 0;

      if (parentSide === 'top' || parentSide === 'left') {
        visible = elSideVal >= parentSideVal;
      } else {
        visible = elSideVal <= parentSideVal;
      }

      if (!visible) return parent;
      if (parent === getWindowScrollingElement()) break;
      parent = getParentAutoScrollElement(parent, false);
    }

    return false;
  }
  /**
   * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
   * and non-draggable elements
   * @param  {HTMLElement} el       The parent element
   * @param  {Number} childNum      The index of the child
   * @param  {Object} options       Parent Sortable's options
   * @return {HTMLElement}          The child at index childNum, or null if not found
   */


  function getChild(el, childNum, options) {
    var currentChild = 0,
        i = 0,
        children = el.children;

    while (i < children.length) {
      if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && children[i] !== Sortable.dragged && closest(children[i], options.draggable, el, false)) {
        if (currentChild === childNum) {
          return children[i];
        }

        currentChild++;
      }

      i++;
    }

    return null;
  }
  /**
   * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
   * @param  {HTMLElement} el       Parent element
   * @param  {selector} selector    Any other elements that should be ignored
   * @return {HTMLElement}          The last child, ignoring ghostEl
   */


  function lastChild(el, selector) {
    var last = el.lastElementChild;

    while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
      last = last.previousElementSibling;
    }

    return last || null;
  }
  /**
   * Returns the index of an element within its parent for a selected set of
   * elements
   * @param  {HTMLElement} el
   * @param  {selector} selector
   * @return {number}
   */


  function index(el, selector) {
    var index = 0;

    if (!el || !el.parentNode) {
      return -1;
    }
    /* jshint boss:true */


    while (el = el.previousElementSibling) {
      if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
        index++;
      }
    }

    return index;
  }
  /**
   * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
   * The value is returned in real pixels.
   * @param  {HTMLElement} el
   * @return {Array}             Offsets in the format of [left, top]
   */


  function getRelativeScrollOffset(el) {
    var offsetLeft = 0,
        offsetTop = 0,
        winScroller = getWindowScrollingElement();

    if (el) {
      do {
        var elMatrix = matrix(el),
            scaleX = elMatrix.a,
            scaleY = elMatrix.d;
        offsetLeft += el.scrollLeft * scaleX;
        offsetTop += el.scrollTop * scaleY;
      } while (el !== winScroller && (el = el.parentNode));
    }

    return [offsetLeft, offsetTop];
  }
  /**
   * Returns the index of the object within the given array
   * @param  {Array} arr   Array that may or may not hold the object
   * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
   * @return {Number}      The index of the object in the array, or -1
   */


  function indexOfObject(arr, obj) {
    for (var i in arr) {
      if (!arr.hasOwnProperty(i)) continue;

      for (var key in obj) {
        if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
      }
    }

    return -1;
  }

  function getParentAutoScrollElement(el, includeSelf) {
    // skip to window
    if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
    var elem = el;
    var gotSelf = false;

    do {
      // we don't need to get elem css if it isn't even overflowing in the first place (performance)
      if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
        var elemCSS = css(elem);

        if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
          if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
          if (gotSelf || includeSelf) return elem;
          gotSelf = true;
        }
      }
      /* jshint boss:true */

    } while (elem = elem.parentNode);

    return getWindowScrollingElement();
  }

  function extend(dst, src) {
    if (dst && src) {
      for (var key in src) {
        if (src.hasOwnProperty(key)) {
          dst[key] = src[key];
        }
      }
    }

    return dst;
  }

  function isRectEqual(rect1, rect2) {
    return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
  }

  var _throttleTimeout;

  function throttle$2(callback, ms) {
    return function () {
      if (!_throttleTimeout) {
        var args = arguments,
            _this = this;

        if (args.length === 1) {
          callback.call(_this, args[0]);
        } else {
          callback.apply(_this, args);
        }

        _throttleTimeout = setTimeout(function () {
          _throttleTimeout = void 0;
        }, ms);
      }
    };
  }

  function cancelThrottle() {
    clearTimeout(_throttleTimeout);
    _throttleTimeout = void 0;
  }

  function scrollBy(el, x, y) {
    el.scrollLeft += x;
    el.scrollTop += y;
  }

  function clone(el) {
    var Polymer = window.Polymer;
    var $ = window.jQuery || window.Zepto;

    if (Polymer && Polymer.dom) {
      return Polymer.dom(el).cloneNode(true);
    } else if ($) {
      return $(el).clone(true)[0];
    } else {
      return el.cloneNode(true);
    }
  }

  var expando = 'Sortable' + new Date().getTime();

  function AnimationStateManager() {
    var animationStates = [],
        animationCallbackId;
    return {
      captureAnimationState: function captureAnimationState() {
        animationStates = [];
        if (!this.options.animation) return;
        var children = [].slice.call(this.el.children);
        children.forEach(function (child) {
          if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
          animationStates.push({
            target: child,
            rect: getRect$1(child)
          });

          var fromRect = _objectSpread({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation


          if (child.thisAnimationDuration) {
            var childMatrix = matrix(child, true);

            if (childMatrix) {
              fromRect.top -= childMatrix.f;
              fromRect.left -= childMatrix.e;
            }
          }

          child.fromRect = fromRect;
        });
      },
      addAnimationState: function addAnimationState(state) {
        animationStates.push(state);
      },
      removeAnimationState: function removeAnimationState(target) {
        animationStates.splice(indexOfObject(animationStates, {
          target: target
        }), 1);
      },
      animateAll: function animateAll(callback) {
        var _this = this;

        if (!this.options.animation) {
          clearTimeout(animationCallbackId);
          if (typeof callback === 'function') callback();
          return;
        }

        var animating = false,
            animationTime = 0;
        animationStates.forEach(function (state) {
          var time = 0,
              target = state.target,
              fromRect = target.fromRect,
              toRect = getRect$1(target),
              prevFromRect = target.prevFromRect,
              prevToRect = target.prevToRect,
              animatingRect = state.rect,
              targetMatrix = matrix(target, true);

          if (targetMatrix) {
            // Compensate for current animation
            toRect.top -= targetMatrix.f;
            toRect.left -= targetMatrix.e;
          }

          target.toRect = toRect;

          if (target.thisAnimationDuration) {
            // Could also check if animatingRect is between fromRect and toRect
            if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect
            (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
              // If returning to same place as started from animation and on same axis
              time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
            }
          } // if fromRect != toRect: animate


          if (!isRectEqual(toRect, fromRect)) {
            target.prevFromRect = fromRect;
            target.prevToRect = toRect;

            if (!time) {
              time = _this.options.animation;
            }

            _this.animate(target, animatingRect, toRect, time);
          }

          if (time) {
            animating = true;
            animationTime = Math.max(animationTime, time);
            clearTimeout(target.animationResetTimer);
            target.animationResetTimer = setTimeout(function () {
              target.animationTime = 0;
              target.prevFromRect = null;
              target.fromRect = null;
              target.prevToRect = null;
              target.thisAnimationDuration = null;
            }, time);
            target.thisAnimationDuration = time;
          }
        });
        clearTimeout(animationCallbackId);

        if (!animating) {
          if (typeof callback === 'function') callback();
        } else {
          animationCallbackId = setTimeout(function () {
            if (typeof callback === 'function') callback();
          }, animationTime);
        }

        animationStates = [];
      },
      animate: function animate(target, currentRect, toRect, duration) {
        if (duration) {
          css(target, 'transition', '');
          css(target, 'transform', '');
          var elMatrix = matrix(this.el),
              scaleX = elMatrix && elMatrix.a,
              scaleY = elMatrix && elMatrix.d,
              translateX = (currentRect.left - toRect.left) / (scaleX || 1),
              translateY = (currentRect.top - toRect.top) / (scaleY || 1);
          target.animatingX = !!translateX;
          target.animatingY = !!translateY;
          css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
          this.forRepaintDummy = repaint(target); // repaint

          css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
          css(target, 'transform', 'translate3d(0,0,0)');
          typeof target.animated === 'number' && clearTimeout(target.animated);
          target.animated = setTimeout(function () {
            css(target, 'transition', '');
            css(target, 'transform', '');
            target.animated = false;
            target.animatingX = false;
            target.animatingY = false;
          }, duration);
        }
      }
    };
  }

  function repaint(target) {
    return target.offsetWidth;
  }

  function calculateRealTime(animatingRect, fromRect, toRect, options) {
    return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
  }

  var plugins = [];
  var defaults = {
    initializeByDefault: true
  };
  var PluginManager = {
    mount: function mount(plugin) {
      // Set default static properties
      for (var option in defaults) {
        if (defaults.hasOwnProperty(option) && !(option in plugin)) {
          plugin[option] = defaults[option];
        }
      }

      plugins.forEach(function (p) {
        if (p.pluginName === plugin.pluginName) {
          throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
        }
      });
      plugins.push(plugin);
    },
    pluginEvent: function pluginEvent(eventName, sortable, evt) {
      var _this = this;

      this.eventCanceled = false;

      evt.cancel = function () {
        _this.eventCanceled = true;
      };

      var eventNameGlobal = eventName + 'Global';
      plugins.forEach(function (plugin) {
        if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable

        if (sortable[plugin.pluginName][eventNameGlobal]) {
          sortable[plugin.pluginName][eventNameGlobal](_objectSpread({
            sortable: sortable
          }, evt));
        } // Only fire plugin event if plugin is enabled in this sortable,
        // and plugin has event defined


        if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
          sortable[plugin.pluginName][eventName](_objectSpread({
            sortable: sortable
          }, evt));
        }
      });
    },
    initializePlugins: function initializePlugins(sortable, el, defaults, options) {
      plugins.forEach(function (plugin) {
        var pluginName = plugin.pluginName;
        if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
        var initialized = new plugin(sortable, el, sortable.options);
        initialized.sortable = sortable;
        initialized.options = sortable.options;
        sortable[pluginName] = initialized; // Add default options from plugin

        _extends(defaults, initialized.defaults);
      });

      for (var option in sortable.options) {
        if (!sortable.options.hasOwnProperty(option)) continue;
        var modified = this.modifyOption(sortable, option, sortable.options[option]);

        if (typeof modified !== 'undefined') {
          sortable.options[option] = modified;
        }
      }
    },
    getEventProperties: function getEventProperties(name, sortable) {
      var eventProperties = {};
      plugins.forEach(function (plugin) {
        if (typeof plugin.eventProperties !== 'function') return;

        _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
      });
      return eventProperties;
    },
    modifyOption: function modifyOption(sortable, name, value) {
      var modifiedValue;
      plugins.forEach(function (plugin) {
        // Plugin must exist on the Sortable
        if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin

        if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
          modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
        }
      });
      return modifiedValue;
    }
  };

  function dispatchEvent$1(_ref) {
    var sortable = _ref.sortable,
        rootEl = _ref.rootEl,
        name = _ref.name,
        targetEl = _ref.targetEl,
        cloneEl = _ref.cloneEl,
        toEl = _ref.toEl,
        fromEl = _ref.fromEl,
        oldIndex = _ref.oldIndex,
        newIndex = _ref.newIndex,
        oldDraggableIndex = _ref.oldDraggableIndex,
        newDraggableIndex = _ref.newDraggableIndex,
        originalEvent = _ref.originalEvent,
        putSortable = _ref.putSortable,
        extraEventProperties = _ref.extraEventProperties;
    sortable = sortable || rootEl && rootEl[expando];
    if (!sortable) return;
    var evt,
        options = sortable.options,
        onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature

    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent(name, {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent(name, true, true);
    }

    evt.to = toEl || rootEl;
    evt.from = fromEl || rootEl;
    evt.item = targetEl || rootEl;
    evt.clone = cloneEl;
    evt.oldIndex = oldIndex;
    evt.newIndex = newIndex;
    evt.oldDraggableIndex = oldDraggableIndex;
    evt.newDraggableIndex = newDraggableIndex;
    evt.originalEvent = originalEvent;
    evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;

    var allEventProperties = _objectSpread({}, extraEventProperties, PluginManager.getEventProperties(name, sortable));

    for (var option in allEventProperties) {
      evt[option] = allEventProperties[option];
    }

    if (rootEl) {
      rootEl.dispatchEvent(evt);
    }

    if (options[onName]) {
      options[onName].call(sortable, evt);
    }
  }

  var pluginEvent = function pluginEvent(eventName, sortable) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        originalEvent = _ref.evt,
        data = _objectWithoutProperties(_ref, ["evt"]);

    PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread({
      dragEl: dragEl,
      parentEl: parentEl,
      ghostEl: ghostEl,
      rootEl: rootEl,
      nextEl: nextEl,
      lastDownEl: lastDownEl,
      cloneEl: cloneEl,
      cloneHidden: cloneHidden,
      dragStarted: moved,
      putSortable: putSortable,
      activeSortable: Sortable.active,
      originalEvent: originalEvent,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex,
      hideGhostForTarget: _hideGhostForTarget,
      unhideGhostForTarget: _unhideGhostForTarget,
      cloneNowHidden: function cloneNowHidden() {
        cloneHidden = true;
      },
      cloneNowShown: function cloneNowShown() {
        cloneHidden = false;
      },
      dispatchSortableEvent: function dispatchSortableEvent(name) {
        _dispatchEvent({
          sortable: sortable,
          name: name,
          originalEvent: originalEvent
        });
      }
    }, data));
  };

  function _dispatchEvent(info) {
    dispatchEvent$1(_objectSpread({
      putSortable: putSortable,
      cloneEl: cloneEl,
      targetEl: dragEl,
      rootEl: rootEl,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex
    }, info));
  }

  var dragEl,
      parentEl,
      ghostEl,
      rootEl,
      nextEl,
      lastDownEl,
      cloneEl,
      cloneHidden,
      oldIndex,
      newIndex,
      oldDraggableIndex,
      newDraggableIndex,
      activeGroup,
      putSortable,
      awaitingDragStarted = false,
      ignoreNextClick = false,
      sortables = [],
      tapEvt,
      touchEvt,
      lastDx,
      lastDy,
      tapDistanceLeft,
      tapDistanceTop,
      moved,
      lastTarget,
      lastDirection,
      pastFirstInvertThresh = false,
      isCircumstantialInvert = false,
      targetMoveDistance,
      // For positioning ghost absolutely
  ghostRelativeParent,
      ghostRelativeParentInitialScroll = [],
      // (left, top)
  _silent = false,
      savedInputChecked = [];
  /** @const */

  var documentExists = typeof document !== 'undefined',
      PositionGhostAbsolutely = IOS,
      CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
      // This will not pass for IE9, because IE9 DnD only works on anchors
  supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
      supportCssPointerEvents = function () {
    if (!documentExists) return; // false when <= IE11

    if (IE11OrLess) {
      return false;
    }

    var el = document.createElement('x');
    el.style.cssText = 'pointer-events:auto';
    return el.style.pointerEvents === 'auto';
  }(),
      _detectDirection = function _detectDirection(el, options) {
    var elCSS = css(el),
        elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
        child1 = getChild(el, 0, options),
        child2 = getChild(el, 1, options),
        firstChildCSS = child1 && css(child1),
        secondChildCSS = child2 && css(child2),
        firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect$1(child1).width,
        secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect$1(child2).width;

    if (elCSS.display === 'flex') {
      return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
    }

    if (elCSS.display === 'grid') {
      return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
    }

    if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
      var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
      return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
    }

    return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
  },
      _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
    var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
        dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
        dragElOppLength = vertical ? dragRect.width : dragRect.height,
        targetS1Opp = vertical ? targetRect.left : targetRect.top,
        targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
        targetOppLength = vertical ? targetRect.width : targetRect.height;
    return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
  },

  /**
   * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
   * @param  {Number} x      X position
   * @param  {Number} y      Y position
   * @return {HTMLElement}   Element of the first found nearest Sortable
   */
  _detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
    var ret;
    sortables.some(function (sortable) {
      if (lastChild(sortable)) return;
      var rect = getRect$1(sortable),
          threshold = sortable[expando].options.emptyInsertThreshold,
          insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
          insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;

      if (threshold && insideHorizontally && insideVertically) {
        return ret = sortable;
      }
    });
    return ret;
  },
      _prepareGroup = function _prepareGroup(options) {
    function toFn(value, pull) {
      return function (to, from, dragEl, evt) {
        var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;

        if (value == null && (pull || sameGroup)) {
          // Default pull value
          // Default pull and put value if same group
          return true;
        } else if (value == null || value === false) {
          return false;
        } else if (pull && value === 'clone') {
          return value;
        } else if (typeof value === 'function') {
          return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
        } else {
          var otherGroup = (pull ? to : from).options.group.name;
          return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
        }
      };
    }

    var group = {};
    var originalGroup = options.group;

    if (!originalGroup || _typeof$1(originalGroup) != 'object') {
      originalGroup = {
        name: originalGroup
      };
    }

    group.name = originalGroup.name;
    group.checkPull = toFn(originalGroup.pull, true);
    group.checkPut = toFn(originalGroup.put);
    group.revertClone = originalGroup.revertClone;
    options.group = group;
  },
      _hideGhostForTarget = function _hideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', 'none');
    }
  },
      _unhideGhostForTarget = function _unhideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', '');
    }
  }; // #1184 fix - Prevent click event on fallback if dragged but item not changed position


  if (documentExists) {
    document.addEventListener('click', function (evt) {
      if (ignoreNextClick) {
        evt.preventDefault();
        evt.stopPropagation && evt.stopPropagation();
        evt.stopImmediatePropagation && evt.stopImmediatePropagation();
        ignoreNextClick = false;
        return false;
      }
    }, true);
  }

  var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
    if (dragEl) {
      evt = evt.touches ? evt.touches[0] : evt;

      var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);

      if (nearest) {
        // Create imitation event
        var event = {};

        for (var i in evt) {
          if (evt.hasOwnProperty(i)) {
            event[i] = evt[i];
          }
        }

        event.target = event.rootEl = nearest;
        event.preventDefault = void 0;
        event.stopPropagation = void 0;

        nearest[expando]._onDragOver(event);
      }
    }
  };

  var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
    if (dragEl) {
      dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
    }
  };
  /**
   * @class  Sortable
   * @param  {HTMLElement}  el
   * @param  {Object}       [options]
   */


  function Sortable(el, options) {
    if (!(el && el.nodeType && el.nodeType === 1)) {
      throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
    }

    this.el = el; // root element

    this.options = options = _extends({}, options); // Export instance

    el[expando] = this;
    var defaults = {
      group: null,
      sort: true,
      disabled: false,
      store: null,
      handle: null,
      draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
      swapThreshold: 1,
      // percentage; 0 <= x <= 1
      invertSwap: false,
      // invert always
      invertedSwapThreshold: null,
      // will be set to same as swapThreshold if default
      removeCloneOnHide: true,
      direction: function direction() {
        return _detectDirection(el, this.options);
      },
      ghostClass: 'sortable-ghost',
      chosenClass: 'sortable-chosen',
      dragClass: 'sortable-drag',
      ignore: 'a, img',
      filter: null,
      preventOnFilter: true,
      animation: 0,
      easing: null,
      setData: function setData(dataTransfer, dragEl) {
        dataTransfer.setData('Text', dragEl.textContent);
      },
      dropBubble: false,
      dragoverBubble: false,
      dataIdAttr: 'data-id',
      delay: 0,
      delayOnTouchOnly: false,
      touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
      forceFallback: false,
      fallbackClass: 'sortable-fallback',
      fallbackOnBody: false,
      fallbackTolerance: 0,
      fallbackOffset: {
        x: 0,
        y: 0
      },
      supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,
      emptyInsertThreshold: 5
    };
    PluginManager.initializePlugins(this, el, defaults); // Set default options

    for (var name in defaults) {
      !(name in options) && (options[name] = defaults[name]);
    }

    _prepareGroup(options); // Bind all private methods


    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    } // Setup drag mode


    this.nativeDraggable = options.forceFallback ? false : supportDraggable;

    if (this.nativeDraggable) {
      // Touch start threshold cannot be greater than the native dragstart threshold
      this.options.touchStartThreshold = 1;
    } // Bind events


    if (options.supportPointer) {
      on(el, 'pointerdown', this._onTapStart);
    } else {
      on(el, 'mousedown', this._onTapStart);
      on(el, 'touchstart', this._onTapStart);
    }

    if (this.nativeDraggable) {
      on(el, 'dragover', this);
      on(el, 'dragenter', this);
    }

    sortables.push(this.el); // Restore sorting

    options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager

    _extends(this, AnimationStateManager());
  }

  Sortable.prototype =
  /** @lends Sortable.prototype */
  {
    constructor: Sortable,
    _isOutsideThisEl: function _isOutsideThisEl(target) {
      if (!this.el.contains(target) && target !== this.el) {
        lastTarget = null;
      }
    },
    _getDirection: function _getDirection(evt, target) {
      return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
    },
    _onTapStart: function _onTapStart(
    /** Event|TouchEvent */
    evt) {
      if (!evt.cancelable) return;

      var _this = this,
          el = this.el,
          options = this.options,
          preventOnFilter = options.preventOnFilter,
          type = evt.type,
          touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
          target = (touch || evt).target,
          originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
          filter = options.filter;

      _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.


      if (dragEl) {
        return;
      }

      if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
        return; // only left button and enabled
      } // cancel dnd if original target is content editable


      if (originalTarget.isContentEditable) {
        return;
      } // Safari ignores further event handling after mousedown


      if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {
        return;
      }

      target = closest(target, options.draggable, el, false);

      if (target && target.animated) {
        return;
      }

      if (lastDownEl === target) {
        // Ignoring duplicate `down`
        return;
      } // Get the index of the dragged element within its parent


      oldIndex = index(target);
      oldDraggableIndex = index(target, options.draggable); // Check filter

      if (typeof filter === 'function') {
        if (filter.call(this, evt, target, this)) {
          _dispatchEvent({
            sortable: _this,
            rootEl: originalTarget,
            name: 'filter',
            targetEl: target,
            toEl: el,
            fromEl: el
          });

          pluginEvent('filter', _this, {
            evt: evt
          });
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      } else if (filter) {
        filter = filter.split(',').some(function (criteria) {
          criteria = closest(originalTarget, criteria.trim(), el, false);

          if (criteria) {
            _dispatchEvent({
              sortable: _this,
              rootEl: criteria,
              name: 'filter',
              targetEl: target,
              fromEl: el,
              toEl: el
            });

            pluginEvent('filter', _this, {
              evt: evt
            });
            return true;
          }
        });

        if (filter) {
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      }

      if (options.handle && !closest(originalTarget, options.handle, el, false)) {
        return;
      } // Prepare `dragstart`


      this._prepareDragStart(evt, touch, target);
    },
    _prepareDragStart: function _prepareDragStart(
    /** Event */
    evt,
    /** Touch */
    touch,
    /** HTMLElement */
    target) {
      var _this = this,
          el = _this.el,
          options = _this.options,
          ownerDocument = el.ownerDocument,
          dragStartFn;

      if (target && !dragEl && target.parentNode === el) {
        var dragRect = getRect$1(target);
        rootEl = el;
        dragEl = target;
        parentEl = dragEl.parentNode;
        nextEl = dragEl.nextSibling;
        lastDownEl = target;
        activeGroup = options.group;
        Sortable.dragged = dragEl;
        tapEvt = {
          target: dragEl,
          clientX: (touch || evt).clientX,
          clientY: (touch || evt).clientY
        };
        tapDistanceLeft = tapEvt.clientX - dragRect.left;
        tapDistanceTop = tapEvt.clientY - dragRect.top;
        this._lastX = (touch || evt).clientX;
        this._lastY = (touch || evt).clientY;
        dragEl.style['will-change'] = 'all';

        dragStartFn = function dragStartFn() {
          pluginEvent('delayEnded', _this, {
            evt: evt
          });

          if (Sortable.eventCanceled) {
            _this._onDrop();

            return;
          } // Delayed drag has been triggered
          // we can re-enable the events: touchmove/mousemove


          _this._disableDelayedDragEvents();

          if (!FireFox && _this.nativeDraggable) {
            dragEl.draggable = true;
          } // Bind the events: dragstart/dragend


          _this._triggerDragStart(evt, touch); // Drag start event


          _dispatchEvent({
            sortable: _this,
            name: 'choose',
            originalEvent: evt
          }); // Chosen item


          toggleClass$1(dragEl, options.chosenClass, true);
        }; // Disable "draggable"


        options.ignore.split(',').forEach(function (criteria) {
          find$2(dragEl, criteria.trim(), _disableDraggable);
        });
        on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'mouseup', _this._onDrop);
        on(ownerDocument, 'touchend', _this._onDrop);
        on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)

        if (FireFox && this.nativeDraggable) {
          this.options.touchStartThreshold = 4;
          dragEl.draggable = true;
        }

        pluginEvent('delayStart', this, {
          evt: evt
        }); // Delay is impossible for native DnD in Edge or IE

        if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
          if (Sortable.eventCanceled) {
            this._onDrop();

            return;
          } // If the user moves the pointer or let go the click or touch
          // before the delay has been reached:
          // disable the delayed drag


          on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
          on(ownerDocument, 'touchend', _this._disableDelayedDrag);
          on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
          on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
          on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
          options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
          _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
        } else {
          dragStartFn();
        }
      }
    },
    _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(
    /** TouchEvent|PointerEvent **/
    e) {
      var touch = e.touches ? e.touches[0] : e;

      if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
        this._disableDelayedDrag();
      }
    },
    _disableDelayedDrag: function _disableDelayedDrag() {
      dragEl && _disableDraggable(dragEl);
      clearTimeout(this._dragStartTimer);

      this._disableDelayedDragEvents();
    },
    _disableDelayedDragEvents: function _disableDelayedDragEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._disableDelayedDrag);
      off(ownerDocument, 'touchend', this._disableDelayedDrag);
      off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
      off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
    },
    _triggerDragStart: function _triggerDragStart(
    /** Event */
    evt,
    /** Touch */
    touch) {
      touch = touch || evt.pointerType == 'touch' && evt;

      if (!this.nativeDraggable || touch) {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._onTouchMove);
        } else if (touch) {
          on(document, 'touchmove', this._onTouchMove);
        } else {
          on(document, 'mousemove', this._onTouchMove);
        }
      } else {
        on(dragEl, 'dragend', this);
        on(rootEl, 'dragstart', this._onDragStart);
      }

      try {
        if (document.selection) {
          // Timeout neccessary for IE9
          _nextTick(function () {
            document.selection.empty();
          });
        } else {
          window.getSelection().removeAllRanges();
        }
      } catch (err) {}
    },
    _dragStarted: function _dragStarted(fallback, evt) {

      awaitingDragStarted = false;

      if (rootEl && dragEl) {
        pluginEvent('dragStarted', this, {
          evt: evt
        });

        if (this.nativeDraggable) {
          on(document, 'dragover', _checkOutsideTargetEl);
        }

        var options = this.options; // Apply effect

        !fallback && toggleClass$1(dragEl, options.dragClass, false);
        toggleClass$1(dragEl, options.ghostClass, true);
        Sortable.active = this;
        fallback && this._appendGhost(); // Drag start event

        _dispatchEvent({
          sortable: this,
          name: 'start',
          originalEvent: evt
        });
      } else {
        this._nulling();
      }
    },
    _emulateDragOver: function _emulateDragOver() {
      if (touchEvt) {
        this._lastX = touchEvt.clientX;
        this._lastY = touchEvt.clientY;

        _hideGhostForTarget();

        var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        var parent = target;

        while (target && target.shadowRoot) {
          target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
          if (target === parent) break;
          parent = target;
        }

        dragEl.parentNode[expando]._isOutsideThisEl(target);

        if (parent) {
          do {
            if (parent[expando]) {
              var inserted = void 0;
              inserted = parent[expando]._onDragOver({
                clientX: touchEvt.clientX,
                clientY: touchEvt.clientY,
                target: target,
                rootEl: parent
              });

              if (inserted && !this.options.dragoverBubble) {
                break;
              }
            }

            target = parent; // store last element
          }
          /* jshint boss:true */
          while (parent = parent.parentNode);
        }

        _unhideGhostForTarget();
      }
    },
    _onTouchMove: function _onTouchMove(
    /**TouchEvent*/
    evt) {
      if (tapEvt) {
        var options = this.options,
            fallbackTolerance = options.fallbackTolerance,
            fallbackOffset = options.fallbackOffset,
            touch = evt.touches ? evt.touches[0] : evt,
            ghostMatrix = ghostEl && matrix(ghostEl, true),
            scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
            scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
            relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
            dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
            dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging

        if (!Sortable.active && !awaitingDragStarted) {
          if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
            return;
          }

          this._onDragStart(evt, true);
        }

        if (ghostEl) {
          if (ghostMatrix) {
            ghostMatrix.e += dx - (lastDx || 0);
            ghostMatrix.f += dy - (lastDy || 0);
          } else {
            ghostMatrix = {
              a: 1,
              b: 0,
              c: 0,
              d: 1,
              e: dx,
              f: dy
            };
          }

          var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
          css(ghostEl, 'webkitTransform', cssMatrix);
          css(ghostEl, 'mozTransform', cssMatrix);
          css(ghostEl, 'msTransform', cssMatrix);
          css(ghostEl, 'transform', cssMatrix);
          lastDx = dx;
          lastDy = dy;
          touchEvt = touch;
        }

        evt.cancelable && evt.preventDefault();
      }
    },
    _appendGhost: function _appendGhost() {
      // Bug if using scale(): https://stackoverflow.com/questions/2637058
      // Not being adjusted for
      if (!ghostEl) {
        var container = this.options.fallbackOnBody ? document.body : rootEl,
            rect = getRect$1(dragEl, true, PositionGhostAbsolutely, true, container),
            options = this.options; // Position absolutely

        if (PositionGhostAbsolutely) {
          // Get relatively positioned parent
          ghostRelativeParent = container;

          while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
            ghostRelativeParent = ghostRelativeParent.parentNode;
          }

          if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
            if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
            rect.top += ghostRelativeParent.scrollTop;
            rect.left += ghostRelativeParent.scrollLeft;
          } else {
            ghostRelativeParent = getWindowScrollingElement();
          }

          ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
        }

        ghostEl = dragEl.cloneNode(true);
        toggleClass$1(ghostEl, options.ghostClass, false);
        toggleClass$1(ghostEl, options.fallbackClass, true);
        toggleClass$1(ghostEl, options.dragClass, true);
        css(ghostEl, 'transition', '');
        css(ghostEl, 'transform', '');
        css(ghostEl, 'box-sizing', 'border-box');
        css(ghostEl, 'margin', 0);
        css(ghostEl, 'top', rect.top);
        css(ghostEl, 'left', rect.left);
        css(ghostEl, 'width', rect.width);
        css(ghostEl, 'height', rect.height);
        css(ghostEl, 'opacity', '0.8');
        css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
        css(ghostEl, 'zIndex', '100000');
        css(ghostEl, 'pointerEvents', 'none');
        Sortable.ghost = ghostEl;
        container.appendChild(ghostEl); // Set transform-origin

        css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
      }
    },
    _onDragStart: function _onDragStart(
    /**Event*/
    evt,
    /**boolean*/
    fallback) {
      var _this = this;

      var dataTransfer = evt.dataTransfer;
      var options = _this.options;
      pluginEvent('dragStart', this, {
        evt: evt
      });

      if (Sortable.eventCanceled) {
        this._onDrop();

        return;
      }

      pluginEvent('setupClone', this);

      if (!Sortable.eventCanceled) {
        cloneEl = clone(dragEl);
        cloneEl.draggable = false;
        cloneEl.style['will-change'] = '';

        this._hideClone();

        toggleClass$1(cloneEl, this.options.chosenClass, false);
        Sortable.clone = cloneEl;
      } // #1143: IFrame support workaround


      _this.cloneId = _nextTick(function () {
        pluginEvent('clone', _this);
        if (Sortable.eventCanceled) return;

        if (!_this.options.removeCloneOnHide) {
          rootEl.insertBefore(cloneEl, dragEl);
        }

        _this._hideClone();

        _dispatchEvent({
          sortable: _this,
          name: 'clone'
        });
      });
      !fallback && toggleClass$1(dragEl, options.dragClass, true); // Set proper drop events

      if (fallback) {
        ignoreNextClick = true;
        _this._loopId = setInterval(_this._emulateDragOver, 50);
      } else {
        // Undo what was set in _prepareDragStart before drag started
        off(document, 'mouseup', _this._onDrop);
        off(document, 'touchend', _this._onDrop);
        off(document, 'touchcancel', _this._onDrop);

        if (dataTransfer) {
          dataTransfer.effectAllowed = 'move';
          options.setData && options.setData.call(_this, dataTransfer, dragEl);
        }

        on(document, 'drop', _this); // #1276 fix:

        css(dragEl, 'transform', 'translateZ(0)');
      }

      awaitingDragStarted = true;
      _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
      on(document, 'selectstart', _this);
      moved = true;

      if (Safari) {
        css(document.body, 'user-select', 'none');
      }
    },
    // Returns true - if no further action is needed (either inserted or another condition)
    _onDragOver: function _onDragOver(
    /**Event*/
    evt) {
      var el = this.el,
          target = evt.target,
          dragRect,
          targetRect,
          revert,
          options = this.options,
          group = options.group,
          activeSortable = Sortable.active,
          isOwner = activeGroup === group,
          canSort = options.sort,
          fromSortable = putSortable || activeSortable,
          vertical,
          _this = this,
          completedFired = false;

      if (_silent) return;

      function dragOverEvent(name, extra) {
        pluginEvent(name, _this, _objectSpread({
          evt: evt,
          isOwner: isOwner,
          axis: vertical ? 'vertical' : 'horizontal',
          revert: revert,
          dragRect: dragRect,
          targetRect: targetRect,
          canSort: canSort,
          fromSortable: fromSortable,
          target: target,
          completed: completed,
          onMove: function onMove(target, after) {
            return _onMove(rootEl, el, dragEl, dragRect, target, getRect$1(target), evt, after);
          },
          changed: changed
        }, extra));
      } // Capture animation state


      function capture() {
        dragOverEvent('dragOverAnimationCapture');

        _this.captureAnimationState();

        if (_this !== fromSortable) {
          fromSortable.captureAnimationState();
        }
      } // Return invocation when dragEl is inserted (or completed)


      function completed(insertion) {
        dragOverEvent('dragOverCompleted', {
          insertion: insertion
        });

        if (insertion) {
          // Clones must be hidden before folding animation to capture dragRectAbsolute properly
          if (isOwner) {
            activeSortable._hideClone();
          } else {
            activeSortable._showClone(_this);
          }

          if (_this !== fromSortable) {
            // Set ghost class to new sortable's ghost class
            toggleClass$1(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
            toggleClass$1(dragEl, options.ghostClass, true);
          }

          if (putSortable !== _this && _this !== Sortable.active) {
            putSortable = _this;
          } else if (_this === Sortable.active && putSortable) {
            putSortable = null;
          } // Animation


          if (fromSortable === _this) {
            _this._ignoreWhileAnimating = target;
          }

          _this.animateAll(function () {
            dragOverEvent('dragOverAnimationComplete');
            _this._ignoreWhileAnimating = null;
          });

          if (_this !== fromSortable) {
            fromSortable.animateAll();
            fromSortable._ignoreWhileAnimating = null;
          }
        } // Null lastTarget if it is not inside a previously swapped element


        if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
          lastTarget = null;
        } // no bubbling and not fallback


        if (!options.dragoverBubble && !evt.rootEl && target !== document) {
          dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted


          !insertion && nearestEmptyInsertDetectEvent(evt);
        }

        !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
        return completedFired = true;
      } // Call when dragEl has been inserted


      function changed() {
        newIndex = index(dragEl);
        newDraggableIndex = index(dragEl, options.draggable);

        _dispatchEvent({
          sortable: _this,
          name: 'change',
          toEl: el,
          newIndex: newIndex,
          newDraggableIndex: newDraggableIndex,
          originalEvent: evt
        });
      }

      if (evt.preventDefault !== void 0) {
        evt.cancelable && evt.preventDefault();
      }

      target = closest(target, options.draggable, el, true);
      dragOverEvent('dragOver');
      if (Sortable.eventCanceled) return completedFired;

      if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
        return completed(false);
      }

      ignoreNextClick = false;

      if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list
      : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
        vertical = this._getDirection(evt, target) === 'vertical';
        dragRect = getRect$1(dragEl);
        dragOverEvent('dragOverValid');
        if (Sortable.eventCanceled) return completedFired;

        if (revert) {
          parentEl = rootEl; // actualization

          capture();

          this._hideClone();

          dragOverEvent('revert');

          if (!Sortable.eventCanceled) {
            if (nextEl) {
              rootEl.insertBefore(dragEl, nextEl);
            } else {
              rootEl.appendChild(dragEl);
            }
          }

          return completed(true);
        }

        var elLastChild = lastChild(el, options.draggable);

        if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
          // If already at end of list: Do not insert
          if (elLastChild === dragEl) {
            return completed(false);
          } // assign target only if condition is true


          if (elLastChild && el === evt.target) {
            target = elLastChild;
          }

          if (target) {
            targetRect = getRect$1(target);
          }

          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
            capture();
            el.appendChild(dragEl);
            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (target.parentNode === el) {
          targetRect = getRect$1(target);
          var direction = 0,
              targetBeforeFirstSwap,
              differentLevel = dragEl.parentNode !== el,
              differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
              side1 = vertical ? 'top' : 'left',
              scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
              scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;

          if (lastTarget !== target) {
            targetBeforeFirstSwap = targetRect[side1];
            pastFirstInvertThresh = false;
            isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
          }

          direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
          var sibling;

          if (direction !== 0) {
            // Check if target is beside dragEl in respective direction (ignoring hidden elements)
            var dragIndex = index(dragEl);

            do {
              dragIndex -= direction;
              sibling = parentEl.children[dragIndex];
            } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
          } // If dragEl is already beside target: Do not insert


          if (direction === 0 || sibling === target) {
            return completed(false);
          }

          lastTarget = target;
          lastDirection = direction;
          var nextSibling = target.nextElementSibling,
              after = false;
          after = direction === 1;

          var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

          if (moveVector !== false) {
            if (moveVector === 1 || moveVector === -1) {
              after = moveVector === 1;
            }

            _silent = true;
            setTimeout(_unsilent, 30);
            capture();

            if (after && !nextSibling) {
              el.appendChild(dragEl);
            } else {
              target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
            } // Undo chrome's scroll adjustment (has no effect on other browsers)


            if (scrolledPastTop) {
              scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
            }

            parentEl = dragEl.parentNode; // actualization
            // must be done before animation

            if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
              targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect$1(target)[side1]);
            }

            changed();
            return completed(true);
          }
        }

        if (el.contains(dragEl)) {
          return completed(false);
        }
      }

      return false;
    },
    _ignoreWhileAnimating: null,
    _offMoveEvents: function _offMoveEvents() {
      off(document, 'mousemove', this._onTouchMove);
      off(document, 'touchmove', this._onTouchMove);
      off(document, 'pointermove', this._onTouchMove);
      off(document, 'dragover', nearestEmptyInsertDetectEvent);
      off(document, 'mousemove', nearestEmptyInsertDetectEvent);
      off(document, 'touchmove', nearestEmptyInsertDetectEvent);
    },
    _offUpEvents: function _offUpEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._onDrop);
      off(ownerDocument, 'touchend', this._onDrop);
      off(ownerDocument, 'pointerup', this._onDrop);
      off(ownerDocument, 'touchcancel', this._onDrop);
      off(document, 'selectstart', this);
    },
    _onDrop: function _onDrop(
    /**Event*/
    evt) {
      var el = this.el,
          options = this.options; // Get the index of the dragged element within its parent

      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      pluginEvent('drop', this, {
        evt: evt
      });
      parentEl = dragEl && dragEl.parentNode; // Get again after plugin event

      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);

      if (Sortable.eventCanceled) {
        this._nulling();

        return;
      }

      awaitingDragStarted = false;
      isCircumstantialInvert = false;
      pastFirstInvertThresh = false;
      clearInterval(this._loopId);
      clearTimeout(this._dragStartTimer);

      _cancelNextTick(this.cloneId);

      _cancelNextTick(this._dragStartId); // Unbind events


      if (this.nativeDraggable) {
        off(document, 'drop', this);
        off(el, 'dragstart', this._onDragStart);
      }

      this._offMoveEvents();

      this._offUpEvents();

      if (Safari) {
        css(document.body, 'user-select', '');
      }

      css(dragEl, 'transform', '');

      if (evt) {
        if (moved) {
          evt.cancelable && evt.preventDefault();
          !options.dropBubble && evt.stopPropagation();
        }

        ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

        if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
          // Remove clone(s)
          cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
        }

        if (dragEl) {
          if (this.nativeDraggable) {
            off(dragEl, 'dragend', this);
          }

          _disableDraggable(dragEl);

          dragEl.style['will-change'] = ''; // Remove classes
          // ghostClass is added in dragStarted

          if (moved && !awaitingDragStarted) {
            toggleClass$1(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
          }

          toggleClass$1(dragEl, this.options.chosenClass, false); // Drag stop event

          _dispatchEvent({
            sortable: this,
            name: 'unchoose',
            toEl: parentEl,
            newIndex: null,
            newDraggableIndex: null,
            originalEvent: evt
          });

          if (rootEl !== parentEl) {
            if (newIndex >= 0) {
              // Add event
              _dispatchEvent({
                rootEl: parentEl,
                name: 'add',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              }); // Remove event


              _dispatchEvent({
                sortable: this,
                name: 'remove',
                toEl: parentEl,
                originalEvent: evt
              }); // drag from one list and drop into another


              _dispatchEvent({
                rootEl: parentEl,
                name: 'sort',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              });

              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }

            putSortable && putSortable.save();
          } else {
            if (newIndex !== oldIndex) {
              if (newIndex >= 0) {
                // drag & drop within the same list
                _dispatchEvent({
                  sortable: this,
                  name: 'update',
                  toEl: parentEl,
                  originalEvent: evt
                });

                _dispatchEvent({
                  sortable: this,
                  name: 'sort',
                  toEl: parentEl,
                  originalEvent: evt
                });
              }
            }
          }

          if (Sortable.active) {
            /* jshint eqnull:true */
            if (newIndex == null || newIndex === -1) {
              newIndex = oldIndex;
              newDraggableIndex = oldDraggableIndex;
            }

            _dispatchEvent({
              sortable: this,
              name: 'end',
              toEl: parentEl,
              originalEvent: evt
            }); // Save sorting


            this.save();
          }
        }
      }

      this._nulling();
    },
    _nulling: function _nulling() {
      pluginEvent('nulling', this);
      rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
      savedInputChecked.forEach(function (el) {
        el.checked = true;
      });
      savedInputChecked.length = lastDx = lastDy = 0;
    },
    handleEvent: function handleEvent(
    /**Event*/
    evt) {
      switch (evt.type) {
        case 'drop':
        case 'dragend':
          this._onDrop(evt);

          break;

        case 'dragenter':
        case 'dragover':
          if (dragEl) {
            this._onDragOver(evt);

            _globalDragOver(evt);
          }

          break;

        case 'selectstart':
          evt.preventDefault();
          break;
      }
    },

    /**
     * Serializes the item into an array of string.
     * @returns {String[]}
     */
    toArray: function toArray() {
      var order = [],
          el,
          children = this.el.children,
          i = 0,
          n = children.length,
          options = this.options;

      for (; i < n; i++) {
        el = children[i];

        if (closest(el, options.draggable, this.el, false)) {
          order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
        }
      }

      return order;
    },

    /**
     * Sorts the elements according to the array.
     * @param  {String[]}  order  order of the items
     */
    sort: function sort(order, useAnimation) {
      var items = {},
          rootEl = this.el;
      this.toArray().forEach(function (id, i) {
        var el = rootEl.children[i];

        if (closest(el, this.options.draggable, rootEl, false)) {
          items[id] = el;
        }
      }, this);
      useAnimation && this.captureAnimationState();
      order.forEach(function (id) {
        if (items[id]) {
          rootEl.removeChild(items[id]);
          rootEl.appendChild(items[id]);
        }
      });
      useAnimation && this.animateAll();
    },

    /**
     * Save the current sorting
     */
    save: function save() {
      var store = this.options.store;
      store && store.set && store.set(this);
    },

    /**
     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
     * @param   {HTMLElement}  el
     * @param   {String}       [selector]  default: `options.draggable`
     * @returns {HTMLElement|null}
     */
    closest: function closest$1(el, selector) {
      return closest(el, selector || this.options.draggable, this.el, false);
    },

    /**
     * Set/get option
     * @param   {string} name
     * @param   {*}      [value]
     * @returns {*}
     */
    option: function option(name, value) {
      var options = this.options;

      if (value === void 0) {
        return options[name];
      } else {
        var modifiedValue = PluginManager.modifyOption(this, name, value);

        if (typeof modifiedValue !== 'undefined') {
          options[name] = modifiedValue;
        } else {
          options[name] = value;
        }

        if (name === 'group') {
          _prepareGroup(options);
        }
      }
    },

    /**
     * Destroy
     */
    destroy: function destroy() {
      pluginEvent('destroy', this);
      var el = this.el;
      el[expando] = null;
      off(el, 'mousedown', this._onTapStart);
      off(el, 'touchstart', this._onTapStart);
      off(el, 'pointerdown', this._onTapStart);

      if (this.nativeDraggable) {
        off(el, 'dragover', this);
        off(el, 'dragenter', this);
      } // Remove draggable attributes


      Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
        el.removeAttribute('draggable');
      });

      this._onDrop();

      this._disableDelayedDragEvents();

      sortables.splice(sortables.indexOf(this.el), 1);
      this.el = el = null;
    },
    _hideClone: function _hideClone() {
      if (!cloneHidden) {
        pluginEvent('hideClone', this);
        if (Sortable.eventCanceled) return;
        css(cloneEl, 'display', 'none');

        if (this.options.removeCloneOnHide && cloneEl.parentNode) {
          cloneEl.parentNode.removeChild(cloneEl);
        }

        cloneHidden = true;
      }
    },
    _showClone: function _showClone(putSortable) {
      if (putSortable.lastPutMode !== 'clone') {
        this._hideClone();

        return;
      }

      if (cloneHidden) {
        pluginEvent('showClone', this);
        if (Sortable.eventCanceled) return; // show clone at dragEl or original position

        if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
          rootEl.insertBefore(cloneEl, dragEl);
        } else if (nextEl) {
          rootEl.insertBefore(cloneEl, nextEl);
        } else {
          rootEl.appendChild(cloneEl);
        }

        if (this.options.group.revertClone) {
          this.animate(dragEl, cloneEl);
        }

        css(cloneEl, 'display', '');
        cloneHidden = false;
      }
    }
  };

  function _globalDragOver(
  /**Event*/
  evt) {
    if (evt.dataTransfer) {
      evt.dataTransfer.dropEffect = 'move';
    }

    evt.cancelable && evt.preventDefault();
  }

  function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
    var evt,
        sortable = fromEl[expando],
        onMoveFn = sortable.options.onMove,
        retVal; // Support for new CustomEvent feature

    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent('move', {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent('move', true, true);
    }

    evt.to = toEl;
    evt.from = fromEl;
    evt.dragged = dragEl;
    evt.draggedRect = dragRect;
    evt.related = targetEl || toEl;
    evt.relatedRect = targetRect || getRect$1(toEl);
    evt.willInsertAfter = willInsertAfter;
    evt.originalEvent = originalEvent;
    fromEl.dispatchEvent(evt);

    if (onMoveFn) {
      retVal = onMoveFn.call(sortable, evt, originalEvent);
    }

    return retVal;
  }

  function _disableDraggable(el) {
    el.draggable = false;
  }

  function _unsilent() {
    _silent = false;
  }

  function _ghostIsLast(evt, vertical, sortable) {
    var rect = getRect$1(lastChild(sortable.el, sortable.options.draggable));
    var spacer = 10;
    return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
  }

  function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
    var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
        targetLength = vertical ? targetRect.height : targetRect.width,
        targetS1 = vertical ? targetRect.top : targetRect.left,
        targetS2 = vertical ? targetRect.bottom : targetRect.right,
        invert = false;

    if (!invertSwap) {
      // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
      if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
        // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
        // check if past first invert threshold on side opposite of lastDirection
        if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
          // past first invert threshold, do not restrict inverted threshold to dragEl shadow
          pastFirstInvertThresh = true;
        }

        if (!pastFirstInvertThresh) {
          // dragEl shadow (target move distance shadow)
          if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
          : mouseOnAxis > targetS2 - targetMoveDistance) {
            return -lastDirection;
          }
        } else {
          invert = true;
        }
      } else {
        // Regular
        if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
          return _getInsertDirection(target);
        }
      }
    }

    invert = invert || invertSwap;

    if (invert) {
      // Invert of regular
      if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
        return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
      }
    }

    return 0;
  }
  /**
   * Gets the direction dragEl must be swapped relative to target in order to make it
   * seem that dragEl has been "inserted" into that element's position
   * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
   * @return {Number}                   Direction dragEl must be swapped
   */


  function _getInsertDirection(target) {
    if (index(dragEl) < index(target)) {
      return 1;
    } else {
      return -1;
    }
  }
  /**
   * Generate id
   * @param   {HTMLElement} el
   * @returns {String}
   * @private
   */


  function _generateId(el) {
    var str = el.tagName + el.className + el.src + el.href + el.textContent,
        i = str.length,
        sum = 0;

    while (i--) {
      sum += str.charCodeAt(i);
    }

    return sum.toString(36);
  }

  function _saveInputCheckedState(root) {
    savedInputChecked.length = 0;
    var inputs = root.getElementsByTagName('input');
    var idx = inputs.length;

    while (idx--) {
      var el = inputs[idx];
      el.checked && savedInputChecked.push(el);
    }
  }

  function _nextTick(fn) {
    return setTimeout(fn, 0);
  }

  function _cancelNextTick(id) {
    return clearTimeout(id);
  } // Fixed #973:


  if (documentExists) {
    on(document, 'touchmove', function (evt) {
      if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
        evt.preventDefault();
      }
    });
  } // Export utils


  Sortable.utils = {
    on: on,
    off: off,
    css: css,
    find: find$2,
    is: function is(el, selector) {
      return !!closest(el, selector, el, false);
    },
    extend: extend,
    throttle: throttle$2,
    closest: closest,
    toggleClass: toggleClass$1,
    clone: clone,
    index: index,
    nextTick: _nextTick,
    cancelNextTick: _cancelNextTick,
    detectDirection: _detectDirection,
    getChild: getChild
  };
  /**
   * Get the Sortable instance of an element
   * @param  {HTMLElement} element The element
   * @return {Sortable|undefined}         The instance of Sortable
   */

  Sortable.get = function (element) {
    return element[expando];
  };
  /**
   * Mount a plugin to Sortable
   * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
   */


  Sortable.mount = function () {
    for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
      plugins[_key] = arguments[_key];
    }

    if (plugins[0].constructor === Array) plugins = plugins[0];
    plugins.forEach(function (plugin) {
      if (!plugin.prototype || !plugin.prototype.constructor) {
        throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
      }

      if (plugin.utils) Sortable.utils = _objectSpread({}, Sortable.utils, plugin.utils);
      PluginManager.mount(plugin);
    });
  };
  /**
   * Create sortable instance
   * @param {HTMLElement}  el
   * @param {Object}      [options]
   */


  Sortable.create = function (el, options) {
    return new Sortable(el, options);
  }; // Export


  Sortable.version = version$1;

  var autoScrolls = [],
      scrollEl,
      scrollRootEl,
      scrolling = false,
      lastAutoScrollX,
      lastAutoScrollY,
      touchEvt$1,
      pointerElemChangedInterval;

  function AutoScrollPlugin() {
    function AutoScroll() {
      this.defaults = {
        scroll: true,
        scrollSensitivity: 30,
        scrollSpeed: 10,
        bubbleScroll: true
      }; // Bind all private methods

      for (var fn in this) {
        if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
          this[fn] = this[fn].bind(this);
        }
      }
    }

    AutoScroll.prototype = {
      dragStarted: function dragStarted(_ref) {
        var originalEvent = _ref.originalEvent;

        if (this.sortable.nativeDraggable) {
          on(document, 'dragover', this._handleAutoScroll);
        } else {
          if (this.options.supportPointer) {
            on(document, 'pointermove', this._handleFallbackAutoScroll);
          } else if (originalEvent.touches) {
            on(document, 'touchmove', this._handleFallbackAutoScroll);
          } else {
            on(document, 'mousemove', this._handleFallbackAutoScroll);
          }
        }
      },
      dragOverCompleted: function dragOverCompleted(_ref2) {
        var originalEvent = _ref2.originalEvent;

        // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)
        if (!this.options.dragOverBubble && !originalEvent.rootEl) {
          this._handleAutoScroll(originalEvent);
        }
      },
      drop: function drop() {
        if (this.sortable.nativeDraggable) {
          off(document, 'dragover', this._handleAutoScroll);
        } else {
          off(document, 'pointermove', this._handleFallbackAutoScroll);
          off(document, 'touchmove', this._handleFallbackAutoScroll);
          off(document, 'mousemove', this._handleFallbackAutoScroll);
        }

        clearPointerElemChangedInterval();
        clearAutoScrolls();
        cancelThrottle();
      },
      nulling: function nulling() {
        touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
        autoScrolls.length = 0;
      },
      _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
        this._handleAutoScroll(evt, true);
      },
      _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
        var _this = this;

        var x = (evt.touches ? evt.touches[0] : evt).clientX,
            y = (evt.touches ? evt.touches[0] : evt).clientY,
            elem = document.elementFromPoint(x, y);
        touchEvt$1 = evt; // IE does not seem to have native autoscroll,
        // Edge's autoscroll seems too conditional,
        // MACOS Safari does not have autoscroll,
        // Firefox and Chrome are good

        if (fallback || Edge || IE11OrLess || Safari) {
          autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change

          var ogElemScroller = getParentAutoScrollElement(elem, true);

          if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
            pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour

            pointerElemChangedInterval = setInterval(function () {
              var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);

              if (newElem !== ogElemScroller) {
                ogElemScroller = newElem;
                clearAutoScrolls();
              }

              autoScroll(evt, _this.options, newElem, fallback);
            }, 10);
            lastAutoScrollX = x;
            lastAutoScrollY = y;
          }
        } else {
          // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
          if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
            clearAutoScrolls();
            return;
          }

          autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
        }
      }
    };
    return _extends(AutoScroll, {
      pluginName: 'scroll',
      initializeByDefault: true
    });
  }

  function clearAutoScrolls() {
    autoScrolls.forEach(function (autoScroll) {
      clearInterval(autoScroll.pid);
    });
    autoScrolls = [];
  }

  function clearPointerElemChangedInterval() {
    clearInterval(pointerElemChangedInterval);
  }

  var autoScroll = throttle$2(function (evt, options, rootEl, isFallback) {
    // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
    if (!options.scroll) return;
    var x = (evt.touches ? evt.touches[0] : evt).clientX,
        y = (evt.touches ? evt.touches[0] : evt).clientY,
        sens = options.scrollSensitivity,
        speed = options.scrollSpeed,
        winScroller = getWindowScrollingElement();
    var scrollThisInstance = false,
        scrollCustomFn; // New scroll root, set scrollEl

    if (scrollRootEl !== rootEl) {
      scrollRootEl = rootEl;
      clearAutoScrolls();
      scrollEl = options.scroll;
      scrollCustomFn = options.scrollFn;

      if (scrollEl === true) {
        scrollEl = getParentAutoScrollElement(rootEl, true);
      }
    }

    var layersOut = 0;
    var currentParent = scrollEl;

    do {
      var el = currentParent,
          rect = getRect$1(el),
          top = rect.top,
          bottom = rect.bottom,
          left = rect.left,
          right = rect.right,
          width = rect.width,
          height = rect.height,
          canScrollX = void 0,
          canScrollY = void 0,
          scrollWidth = el.scrollWidth,
          scrollHeight = el.scrollHeight,
          elCSS = css(el),
          scrollPosX = el.scrollLeft,
          scrollPosY = el.scrollTop;

      if (el === winScroller) {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
      } else {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
      }

      var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
      var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);

      if (!autoScrolls[layersOut]) {
        for (var i = 0; i <= layersOut; i++) {
          if (!autoScrolls[i]) {
            autoScrolls[i] = {};
          }
        }
      }

      if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
        autoScrolls[layersOut].el = el;
        autoScrolls[layersOut].vx = vx;
        autoScrolls[layersOut].vy = vy;
        clearInterval(autoScrolls[layersOut].pid);

        if (vx != 0 || vy != 0) {
          scrollThisInstance = true;
          /* jshint loopfunc:true */

          autoScrolls[layersOut].pid = setInterval(function () {
            // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
            if (isFallback && this.layer === 0) {
              Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely

            }

            var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
            var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;

            if (typeof scrollCustomFn === 'function') {
              if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
                return;
              }
            }

            scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
          }.bind({
            layer: layersOut
          }), 24);
        }
      }

      layersOut++;
    } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));

    scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
  }, 30);

  var drop = function drop(_ref) {
    var originalEvent = _ref.originalEvent,
        putSortable = _ref.putSortable,
        dragEl = _ref.dragEl,
        activeSortable = _ref.activeSortable,
        dispatchSortableEvent = _ref.dispatchSortableEvent,
        hideGhostForTarget = _ref.hideGhostForTarget,
        unhideGhostForTarget = _ref.unhideGhostForTarget;
    if (!originalEvent) return;
    var toSortable = putSortable || activeSortable;
    hideGhostForTarget();
    var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
    var target = document.elementFromPoint(touch.clientX, touch.clientY);
    unhideGhostForTarget();

    if (toSortable && !toSortable.el.contains(target)) {
      dispatchSortableEvent('spill');
      this.onSpill({
        dragEl: dragEl,
        putSortable: putSortable
      });
    }
  };

  function Revert() {}

  Revert.prototype = {
    startIndex: null,
    dragStart: function dragStart(_ref2) {
      var oldDraggableIndex = _ref2.oldDraggableIndex;
      this.startIndex = oldDraggableIndex;
    },
    onSpill: function onSpill(_ref3) {
      var dragEl = _ref3.dragEl,
          putSortable = _ref3.putSortable;
      this.sortable.captureAnimationState();

      if (putSortable) {
        putSortable.captureAnimationState();
      }

      var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);

      if (nextSibling) {
        this.sortable.el.insertBefore(dragEl, nextSibling);
      } else {
        this.sortable.el.appendChild(dragEl);
      }

      this.sortable.animateAll();

      if (putSortable) {
        putSortable.animateAll();
      }
    },
    drop: drop
  };

  _extends(Revert, {
    pluginName: 'revertOnSpill'
  });

  function Remove() {}

  Remove.prototype = {
    onSpill: function onSpill(_ref4) {
      var dragEl = _ref4.dragEl,
          putSortable = _ref4.putSortable;
      var parentSortable = putSortable || this.sortable;
      parentSortable.captureAnimationState();
      dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
      parentSortable.animateAll();
    },
    drop: drop
  };

  _extends(Remove, {
    pluginName: 'removeOnSpill'
  });

  Sortable.mount(new AutoScrollPlugin());
  Sortable.mount(Remove, Revert);

  var dom$v = new Dom();

  var renderSnippetPanel = function renderSnippetPanel(builder) {
    var util = new Util(builder);
    var builderStuff = util.builderStuff();
    var hideHandle = '';
    var sidePanel = builder.opts.sidePanel;

    if (builder.opts.snippetList === '#divSnippetList') {
      var html = "<div id=\"divSnippetList\" class=\"is-side ".concat(sidePanel === 'right' ? '' : ' fromleft', " snippetlist\">\n            </div>");
      dom$v.appendHtml(builderStuff, html);

      if (!builder.opts.snippetHandle) {
        hideHandle = 'display:none;';
      }
    } else {
      hideHandle = 'display:none;';
      sidePanel = 'left';
    }

    var defaultcat = '';
    var defaultcatval = '';
    var catoptions = '';

    if (builder.opts.emailMode) {
      defaultcatval = builder.opts.defaultEmailSnippetCategory;

      for (var i = 0; i < builder.opts.emailSnippetCategories.length; i++) {
        catoptions += '<div data-value="' + builder.opts.emailSnippetCategories[i][0] + '">' + builder.opts.emailSnippetCategories[i][1] + '</div>';
        if (builder.opts.emailSnippetCategories[i][0] === builder.opts.defaultEmailSnippetCategory) defaultcat = builder.opts.emailSnippetCategories[i][1];
      }
    } else {
      defaultcatval = builder.opts.defaultSnippetCategory;

      for (var _i = 0; _i < builder.opts.snippetCategories.length; _i++) {
        catoptions += '<div data-value="' + builder.opts.snippetCategories[_i][0] + '">' + builder.opts.snippetCategories[_i][1] + '</div>';
        if (builder.opts.snippetCategories[_i][0] === builder.opts.defaultSnippetCategory) defaultcat = builder.opts.snippetCategories[_i][1];
      }
    }

    var html_snippets = '' + '<div style="position:absolute;top:0;right:0;padding: 0;width:100%;z-index:2;">' + '<div class="is-selectbox snippet-cat" data-group="snippet-cat" data-value="' + defaultcatval + '">' + '<span>' + defaultcat + '</span>' + '<svg class="is-icon-flex" style="position:absolute;top:13px;right:10px;"><use xlink:href="#ion-android-arrow-dropdown"></use></svg>' + '</div>' + '<div class="is-selectbox-options" data-group="snippet-cat">' + catoptions + '</div>' + '</div>' + (sidePanel === 'right' ? '<div id="divSnippetScrollUp" style="top:calc(50% - 27px);right:25px;">&#9650;</div>' + '<div id="divSnippetScrollDown" style="top:calc(50% + 27px);right:25px;">&#9660;</div>' + '<div id="divSnippetHandle" title="' + util.out('Snippets') + '" data-title="' + util.out('Snippets') + '" style="' + hideHandle + '">' + '<svg class="is-icon-flex"><use xlink:href="#ion-ios-arrow-left"></use></svg>' + '</div>' : '<div id="divSnippetScrollUp" style="top:calc(50% - 27px);left:10px;">&#9650;</div>' + '<div id="divSnippetScrollDown" style="top:calc(50% + 27px);left:10px;">&#9660;</div>' + '<div id="divSnippetHandle" title="' + util.out('Snippets') + '" data-title="' + util.out('Snippets') + '" style="' + hideHandle + '">' + '<svg class="is-icon-flex"><use xlink:href="#ion-ios-arrow-right"></use></svg>' + '</div>') + '<div class="is-design-list">' + '</div>';
    var snippetPanel = document.querySelector(builder.opts.snippetList);
    dom$v.appendHtml(snippetPanel, html_snippets);

    if (builder.opts.snippetList === '#divSnippetList') {
      // Hide snippet panel on content click
      document.addEventListener('click', function (e) {
        e = e || window.event;
        var target = e.target || e.srcElement;

        if (builder.opts.snippetsSidebarDisplay === 'auto') {
          if (dom$v.hasClass(snippetPanel, 'active')) {
            // let a = dom.parentsHasAttribute(target, 'contenteditable');
            // let b = dom.parentsHasClass(target, 'is-builder'); // builder area
            // if(a||b) {
            //     hideSnippets(builder);
            // }
            var a = dom$v.parentsHasClass(target, 'is-builder'); // builder area

            if (a) {
              hideSnippets(builder);
            }
          }
        }
      }, false);
    }

    var snippetlist = document.querySelector('.is-design-list');
    var snippetPath = builder.opts.snippetPath;
    /*
    Hide slider snippets (backward compatible)
    let bHideSliderSnippet = false;
    try{
        if (typeof jQuery.fn.slick === 'undefined') {
            bHideSliderSnippet = true;
        }
    } catch(e){
        bHideSliderSnippet = true;
    }
    */
    // Hide slider snippet if slick is not included

    var bHideSliderSnippet = true;

    if (window.jQuery) {
      if (window.jQuery.fn.slick) {
        bHideSliderSnippet = false;
      }
    }

    if (bHideSliderSnippet) {
      for (var _i2 = 0; _i2 < builder.opts.snippetJSON.snippets.length; _i2++) {
        if (builder.opts.snippetJSON.snippets[_i2].thumbnail.indexOf('element-slider.png') !== -1) {
          builder.opts.snippetJSON.snippets.splice(_i2, 1);
          break;
        }
      }
    } // /Hide slider snippets


    var index = 1;

    if (builder.opts.emailMode) {
      builder.opts.snippetJSON.snippets.forEach(function (item) {
        item.id = index; //Give id to each record

        if (item.category === builder.opts.defaultEmailSnippetCategory + '') {
          dom$v.appendHtml(snippetlist, '<div class="snippet-item" data-id="' + item.id + '" data-cat="' + item.category + '"><img src="' + snippetPath + item.thumbnail + '"></div>');
        }

        index++;
      });
    } else {
      builder.opts.snippetJSON.snippets.forEach(function (item) {
        item.id = index; //Give id to each record

        if (item.category === builder.opts.defaultSnippetCategory + '') {
          dom$v.appendHtml(snippetlist, '<div class="snippet-item" data-id="' + item.id + '" data-cat="' + item.category + '"><img src="' + snippetPath + item.thumbnail + '"></div>');
        }

        index++;
      });
    }

    var userAgentString = navigator.userAgent;
    var safariAgent = userAgentString.indexOf('Safari') > -1;
    var chromeAgent = userAgentString.indexOf('Chrome') > -1;
    if (chromeAgent && safariAgent) safariAgent = false;
    new Sortable(snippetlist, {
      forceFallback: safariAgent,
      group: {
        name: 'shared',
        pull: 'clone',
        put: false // Do not allow items to be put into this list

      },
      sort: false,
      animation: 150,
      onMove: function onMove() {
        var emptyinfo = document.querySelector('.row-add-initial'); // if there is empty info, remove it during snippet drag drop
        // if(emptyinfo) emptyinfo.parentNode.removeChild(emptyinfo);

        if (emptyinfo) emptyinfo.style.display = 'none';
      },
      onStart: function onStart() {
        builder.uo.saveForUndo(); // Even if cancelled, saveForUndo will make sure not to save if there is no change 

        var elm = document.querySelector('.is-sidebar-overlay');
        if (elm) elm.style.display = 'none'; // LATER: ContentBox
      },
      onEnd: function onEnd() {
        var elm = document.querySelector('.is-sidebar-overlay');
        if (elm) elm.style.display = 'block'; // LATER: ContentBox

        util.checkEmpty(); // In case container is still empty (drag drop snippet cancelled)

        var emptyinfo = document.querySelector('.row-add-initial');
        if (emptyinfo) emptyinfo.style.display = '';
      }
    });
    new Dropdown(document.querySelector('.snippet-cat'), {
      onChange: function onChange(value) {
        var cat = value;
        var elms = snippetlist.querySelectorAll('.snippet-item');
        var exist = false;
        Array.prototype.forEach.call(elms, function (elm) {
          if (elm.getAttribute('data-cat') === cat) exist = true;
        });

        if (!exist) {
          builder.opts.snippetJSON.snippets.forEach(function (item) {
            if (item.category === cat) {
              dom$v.appendHtml(snippetlist, '<div class="snippet-item" data-id="' + item.id + '" data-cat="' + item.category + '"><img src="' + snippetPath + item.thumbnail + '"></div>');
            }
          });
        }

        if (cat) {
          //let elms = snippetlist.querySelectorAll('.snippet-item');
          Array.prototype.forEach.call(elms, function (elm) {
            dom$v.addClass(elm, 'hide');
          });
          Array.prototype.forEach.call(elms, function (elm) {
            if (elm.getAttribute('data-cat') === cat) {
              elm.className = elm.className.replace(/hide/g, '');
            }
          });
        }
      }
    });

    if (builder.opts.snippetList === '#divSnippetList') {
      var snippethandle = snippetPanel.querySelector('#divSnippetHandle');
      dom$v.addEventListener(snippethandle, 'click', function () {
        toggleSnippets(builder);
        util.clearActiveCell();
        util.clearControls();
      });
      var viewportWidth = window.innerWidth;

      if (builder.opts.snippetOpen && viewportWidth >= 960) {
        snippetPanel.style.cssText = 'transition: all ease 0.8s;';
        setTimeout(function () {
          toggleSnippets(builder);
        }, 100);
        setTimeout(function () {
          snippetPanel.style.cssText = '';
        }, 1300);
      }
    } //Scroll helper


    var scrollup = snippetPanel.querySelector('#divSnippetScrollUp');
    var scrolldown = snippetPanel.querySelector('#divSnippetScrollDown'); // if ((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i)) || (navigator.userAgent.match(/iPad/i))) {
    // } else {
    //     scrollup.style.display = 'none';
    //     scrolldown.style.display = 'none';
    // }

    scrollup.style.display = 'none';
    scrolldown.style.display = 'none';
    /*
    TODO
    
    var maxScroll=100000000;       
    jQuery('#divSnippetScrollUp').css('display','none');
    jQuery('#divSnippetScrollUp').on("click touchup", function(e) { 
        jQuery(".is-design-list").animate({ scrollTop: (jQuery(".is-design-list").scrollTop() - (jQuery(".is-design-list").height()-150) ) + "px" },300, function(){
            if(jQuery(".is-design-list").scrollTop()!=0){
                jQuery('#divSnippetScrollUp').fadeIn(300);
            } else {
                    jQuery('#divSnippetScrollUp').fadeOut(300);
            }
            if(jQuery(".is-design-list").scrollTop() != maxScroll){
                jQuery('#divSnippetScrollDown').fadeIn(300);
            } else {
                    jQuery('#divSnippetScrollDown').fadeOut(300);
            }  
        });           
         e.preventDefault();
        e.stopImmediatePropagation();
        return false;
    });            
    jQuery('#divSnippetScrollDown').on("click touchup", function(e) {                         
        jQuery(".is-design-list").animate({ scrollTop: (jQuery(".is-design-list").scrollTop() + (jQuery(".is-design-list").height()-150) ) + "px" }, 300, function() {
            if(jQuery(".is-design-list").scrollTop()!=0){
                jQuery('#divSnippetScrollUp').fadeIn(300);
            } else {
                jQuery('#divSnippetScrollUp').fadeOut(300);
        
            }
            if(maxScroll===100000000){
                maxScroll = jQuery('.is-design-list').prop('scrollHeight') - jQuery('.is-design-list').height() - 30;
            }  
            
            if(jQuery(".is-design-list").scrollTop() != maxScroll){
                jQuery('#divSnippetScrollDown').fadeIn(300);
            } else {
                jQuery('#divSnippetScrollDown').fadeOut(300);
            }  
        });
         e.preventDefault();
        e.stopImmediatePropagation();
        return false;
    });
    */
  };

  function toggleSnippets(builder) {
    var snippetPanel = document.querySelector('#divSnippetList');
    var snippethandle = snippetPanel.querySelector('#divSnippetHandle');

    if (dom$v.hasClass(snippetPanel, 'active')) {
      dom$v.removeClass(snippetPanel, 'active');

      if (builder.opts.sidePanel === 'right') {
        snippethandle.innerHTML = '<svg class="is-icon-flex" style="width:17px;height:17px;fill:rgba(0, 0, 0, 0.75);"><use xlink:href="#ion-ios-arrow-left"></use></svg>';
      } else {
        snippethandle.innerHTML = '<svg class="is-icon-flex" style="width:17px;height:17px;fill:rgba(0, 0, 0, 0.75);"><use xlink:href="#ion-ios-arrow-right"></use></svg>';
      }
    } else {
      dom$v.addClass(snippetPanel, 'active');

      if (builder.opts.sidePanel === 'right') {
        snippethandle.innerHTML = '<svg class="is-icon-flex" style="width:17px;height:17px;fill:rgba(0, 0, 0, 0.75);"><use xlink:href="#ion-ios-arrow-right"></use></svg>';
      } else {
        snippethandle.innerHTML = '<svg class="is-icon-flex" style="width:17px;height:17px;fill:rgba(0, 0, 0, 0.75);"><use xlink:href="#ion-ios-arrow-left"></use></svg>';
      }
    }
  }

  function hideSnippets(builder) {
    var snippetPanel = document.querySelector('#divSnippetList');
    var snippethandle = snippetPanel.querySelector('#divSnippetHandle');
    dom$v.removeClass(snippetPanel, 'active');

    if (builder.opts.sidePanel === 'right') {
      snippethandle.innerHTML = '<svg class="is-icon-flex" style="width:17px;height:17px;fill:rgba(0, 0, 0, 0.75);"><use xlink:href="#ion-ios-arrow-left"></use></svg>';
    } else {
      snippethandle.innerHTML = '<svg class="is-icon-flex" style="width:17px;height:17px;fill:rgba(0, 0, 0, 0.75);"><use xlink:href="#ion-ios-arrow-right"></use></svg>';
    }
  }

  /*!
   * Cropper.js v1.5.11
   * https://fengyuanchen.github.io/cropperjs
   *
   * Copyright 2015-present Chen Fengyuan
   * Released under the MIT license
   *
   * Date: 2021-02-17T11:53:27.572Z
   */

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var IS_BROWSER = typeof window !== 'undefined' && typeof window.document !== 'undefined';
  var WINDOW = IS_BROWSER ? window : {};
  var IS_TOUCH_DEVICE = IS_BROWSER && WINDOW.document.documentElement ? 'ontouchstart' in WINDOW.document.documentElement : false;
  var HAS_POINTER_EVENT = IS_BROWSER ? 'PointerEvent' in WINDOW : false;
  var NAMESPACE = 'cropper'; // Actions

  var ACTION_ALL = 'all';
  var ACTION_CROP = 'crop';
  var ACTION_MOVE = 'move';
  var ACTION_ZOOM = 'zoom';
  var ACTION_EAST = 'e';
  var ACTION_WEST = 'w';
  var ACTION_SOUTH = 's';
  var ACTION_NORTH = 'n';
  var ACTION_NORTH_EAST = 'ne';
  var ACTION_NORTH_WEST = 'nw';
  var ACTION_SOUTH_EAST = 'se';
  var ACTION_SOUTH_WEST = 'sw'; // Classes

  var CLASS_CROP = "".concat(NAMESPACE, "-crop");
  var CLASS_DISABLED = "".concat(NAMESPACE, "-disabled");
  var CLASS_HIDDEN = "".concat(NAMESPACE, "-hidden");
  var CLASS_HIDE = "".concat(NAMESPACE, "-hide");
  var CLASS_INVISIBLE = "".concat(NAMESPACE, "-invisible");
  var CLASS_MODAL = "".concat(NAMESPACE, "-modal");
  var CLASS_MOVE = "".concat(NAMESPACE, "-move"); // Data keys

  var DATA_ACTION = "".concat(NAMESPACE, "Action");
  var DATA_PREVIEW = "".concat(NAMESPACE, "Preview"); // Drag modes

  var DRAG_MODE_CROP = 'crop';
  var DRAG_MODE_MOVE = 'move';
  var DRAG_MODE_NONE = 'none'; // Events

  var EVENT_CROP = 'crop';
  var EVENT_CROP_END = 'cropend';
  var EVENT_CROP_MOVE = 'cropmove';
  var EVENT_CROP_START = 'cropstart';
  var EVENT_DBLCLICK = 'dblclick';
  var EVENT_TOUCH_START = IS_TOUCH_DEVICE ? 'touchstart' : 'mousedown';
  var EVENT_TOUCH_MOVE = IS_TOUCH_DEVICE ? 'touchmove' : 'mousemove';
  var EVENT_TOUCH_END = IS_TOUCH_DEVICE ? 'touchend touchcancel' : 'mouseup';
  var EVENT_POINTER_DOWN = HAS_POINTER_EVENT ? 'pointerdown' : EVENT_TOUCH_START;
  var EVENT_POINTER_MOVE = HAS_POINTER_EVENT ? 'pointermove' : EVENT_TOUCH_MOVE;
  var EVENT_POINTER_UP = HAS_POINTER_EVENT ? 'pointerup pointercancel' : EVENT_TOUCH_END;
  var EVENT_READY = 'ready';
  var EVENT_RESIZE = 'resize';
  var EVENT_WHEEL = 'wheel';
  var EVENT_ZOOM = 'zoom'; // Mime types

  var MIME_TYPE_JPEG = 'image/jpeg'; // RegExps

  var REGEXP_ACTIONS = /^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/;
  var REGEXP_DATA_URL = /^data:/;
  var REGEXP_DATA_URL_JPEG = /^data:image\/jpeg;base64,/;
  var REGEXP_TAG_NAME = /^img|canvas$/i; // Misc
  // Inspired by the default width and height of a canvas element.

  var MIN_CONTAINER_WIDTH = 200;
  var MIN_CONTAINER_HEIGHT = 100;

  var DEFAULTS = {
    // Define the view mode of the cropper
    viewMode: 0,
    // 0, 1, 2, 3
    // Define the dragging mode of the cropper
    dragMode: DRAG_MODE_CROP,
    // 'crop', 'move' or 'none'
    // Define the initial aspect ratio of the crop box
    initialAspectRatio: NaN,
    // Define the aspect ratio of the crop box
    aspectRatio: NaN,
    // An object with the previous cropping result data
    data: null,
    // A selector for adding extra containers to preview
    preview: '',
    // Re-render the cropper when resize the window
    responsive: true,
    // Restore the cropped area after resize the window
    restore: true,
    // Check if the current image is a cross-origin image
    checkCrossOrigin: true,
    // Check the current image's Exif Orientation information
    checkOrientation: true,
    // Show the black modal
    modal: true,
    // Show the dashed lines for guiding
    guides: true,
    // Show the center indicator for guiding
    center: true,
    // Show the white modal to highlight the crop box
    highlight: true,
    // Show the grid background
    background: true,
    // Enable to crop the image automatically when initialize
    autoCrop: true,
    // Define the percentage of automatic cropping area when initializes
    autoCropArea: 0.8,
    // Enable to move the image
    movable: true,
    // Enable to rotate the image
    rotatable: true,
    // Enable to scale the image
    scalable: true,
    // Enable to zoom the image
    zoomable: true,
    // Enable to zoom the image by dragging touch
    zoomOnTouch: true,
    // Enable to zoom the image by wheeling mouse
    zoomOnWheel: true,
    // Define zoom ratio when zoom the image by wheeling mouse
    wheelZoomRatio: 0.1,
    // Enable to move the crop box
    cropBoxMovable: true,
    // Enable to resize the crop box
    cropBoxResizable: true,
    // Toggle drag mode between "crop" and "move" when click twice on the cropper
    toggleDragModeOnDblclick: true,
    // Size limitation
    minCanvasWidth: 0,
    minCanvasHeight: 0,
    minCropBoxWidth: 0,
    minCropBoxHeight: 0,
    minContainerWidth: MIN_CONTAINER_WIDTH,
    minContainerHeight: MIN_CONTAINER_HEIGHT,
    // Shortcuts of events
    ready: null,
    cropstart: null,
    cropmove: null,
    cropend: null,
    crop: null,
    zoom: null
  };

  var TEMPLATE = '<div class="cropper-container" touch-action="none">' + '<div class="cropper-wrap-box">' + '<div class="cropper-canvas"></div>' + '</div>' + '<div class="cropper-drag-box"></div>' + '<div class="cropper-crop-box">' + '<span class="cropper-view-box"></span>' + '<span class="cropper-dashed dashed-h"></span>' + '<span class="cropper-dashed dashed-v"></span>' + '<span class="cropper-center"></span>' + '<span class="cropper-face"></span>' + '<span class="cropper-line line-e" data-cropper-action="e"></span>' + '<span class="cropper-line line-n" data-cropper-action="n"></span>' + '<span class="cropper-line line-w" data-cropper-action="w"></span>' + '<span class="cropper-line line-s" data-cropper-action="s"></span>' + '<span class="cropper-point point-e" data-cropper-action="e"></span>' + '<span class="cropper-point point-n" data-cropper-action="n"></span>' + '<span class="cropper-point point-w" data-cropper-action="w"></span>' + '<span class="cropper-point point-s" data-cropper-action="s"></span>' + '<span class="cropper-point point-ne" data-cropper-action="ne"></span>' + '<span class="cropper-point point-nw" data-cropper-action="nw"></span>' + '<span class="cropper-point point-sw" data-cropper-action="sw"></span>' + '<span class="cropper-point point-se" data-cropper-action="se"></span>' + '</div>' + '</div>';

  /**
   * Check if the given value is not a number.
   */

  var isNaN$1 = Number.isNaN || WINDOW.isNaN;
  /**
   * Check if the given value is a number.
   * @param {*} value - The value to check.
   * @returns {boolean} Returns `true` if the given value is a number, else `false`.
   */

  function isNumber$1(value) {
    return typeof value === 'number' && !isNaN$1(value);
  }
  /**
   * Check if the given value is a positive number.
   * @param {*} value - The value to check.
   * @returns {boolean} Returns `true` if the given value is a positive number, else `false`.
   */

  var isPositiveNumber = function isPositiveNumber(value) {
    return value > 0 && value < Infinity;
  };
  /**
   * Check if the given value is undefined.
   * @param {*} value - The value to check.
   * @returns {boolean} Returns `true` if the given value is undefined, else `false`.
   */

  function isUndefined$1(value) {
    return typeof value === 'undefined';
  }
  /**
   * Check if the given value is an object.
   * @param {*} value - The value to check.
   * @returns {boolean} Returns `true` if the given value is an object, else `false`.
   */

  function isObject$1(value) {
    return _typeof(value) === 'object' && value !== null;
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  /**
   * Check if the given value is a plain object.
   * @param {*} value - The value to check.
   * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.
   */

  function isPlainObject(value) {
    if (!isObject$1(value)) {
      return false;
    }

    try {
      var _constructor = value.constructor;
      var prototype = _constructor.prototype;
      return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');
    } catch (error) {
      return false;
    }
  }
  /**
   * Check if the given value is a function.
   * @param {*} value - The value to check.
   * @returns {boolean} Returns `true` if the given value is a function, else `false`.
   */

  function isFunction$1(value) {
    return typeof value === 'function';
  }
  var slice = Array.prototype.slice;
  /**
   * Convert array-like or iterable object to an array.
   * @param {*} value - The value to convert.
   * @returns {Array} Returns a new array.
   */

  function toArray(value) {
    return Array.from ? Array.from(value) : slice.call(value);
  }
  /**
   * Iterate the given data.
   * @param {*} data - The data to iterate.
   * @param {Function} callback - The process function for each element.
   * @returns {*} The original data.
   */

  function forEach(data, callback) {
    if (data && isFunction$1(callback)) {
      if (Array.isArray(data) || isNumber$1(data.length)
      /* array-like */
      ) {
          toArray(data).forEach(function (value, key) {
            callback.call(data, value, key, data);
          });
        } else if (isObject$1(data)) {
        Object.keys(data).forEach(function (key) {
          callback.call(data, data[key], key, data);
        });
      }
    }

    return data;
  }
  /**
   * Extend the given object.
   * @param {*} target - The target object to extend.
   * @param {*} args - The rest objects for merging to the target object.
   * @returns {Object} The extended object.
   */

  var assign = Object.assign || function assign(target) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (isObject$1(target) && args.length > 0) {
      args.forEach(function (arg) {
        if (isObject$1(arg)) {
          Object.keys(arg).forEach(function (key) {
            target[key] = arg[key];
          });
        }
      });
    }

    return target;
  };
  var REGEXP_DECIMALS = /\.\d*(?:0|9){12}\d*$/;
  /**
   * Normalize decimal number.
   * Check out {@link https://0.30000000000000004.com/}
   * @param {number} value - The value to normalize.
   * @param {number} [times=100000000000] - The times for normalizing.
   * @returns {number} Returns the normalized number.
   */

  function normalizeDecimalNumber(value) {
    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;
    return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;
  }
  var REGEXP_SUFFIX = /^width|height|left|top|marginLeft|marginTop$/;
  /**
   * Apply styles to the given element.
   * @param {Element} element - The target element.
   * @param {Object} styles - The styles for applying.
   */

  function setStyle(element, styles) {
    var style = element.style;
    forEach(styles, function (value, property) {
      if (REGEXP_SUFFIX.test(property) && isNumber$1(value)) {
        value = "".concat(value, "px");
      }

      style[property] = value;
    });
  }
  /**
   * Check if the given element has a special class.
   * @param {Element} element - The element to check.
   * @param {string} value - The class to search.
   * @returns {boolean} Returns `true` if the special class was found.
   */

  function hasClass$1(element, value) {
    return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;
  }
  /**
   * Add classes to the given element.
   * @param {Element} element - The target element.
   * @param {string} value - The classes to be added.
   */

  function addClass$1(element, value) {
    if (!value) {
      return;
    }

    if (isNumber$1(element.length)) {
      forEach(element, function (elem) {
        addClass$1(elem, value);
      });
      return;
    }

    if (element.classList) {
      element.classList.add(value);
      return;
    }

    var className = element.className.trim();

    if (!className) {
      element.className = value;
    } else if (className.indexOf(value) < 0) {
      element.className = "".concat(className, " ").concat(value);
    }
  }
  /**
   * Remove classes from the given element.
   * @param {Element} element - The target element.
   * @param {string} value - The classes to be removed.
   */

  function removeClass$1(element, value) {
    if (!value) {
      return;
    }

    if (isNumber$1(element.length)) {
      forEach(element, function (elem) {
        removeClass$1(elem, value);
      });
      return;
    }

    if (element.classList) {
      element.classList.remove(value);
      return;
    }

    if (element.className.indexOf(value) >= 0) {
      element.className = element.className.replace(value, '');
    }
  }
  /**
   * Add or remove classes from the given element.
   * @param {Element} element - The target element.
   * @param {string} value - The classes to be toggled.
   * @param {boolean} added - Add only.
   */

  function toggleClass(element, value, added) {
    if (!value) {
      return;
    }

    if (isNumber$1(element.length)) {
      forEach(element, function (elem) {
        toggleClass(elem, value, added);
      });
      return;
    } // IE10-11 doesn't support the second parameter of `classList.toggle`


    if (added) {
      addClass$1(element, value);
    } else {
      removeClass$1(element, value);
    }
  }
  var REGEXP_CAMEL_CASE = /([a-z\d])([A-Z])/g;
  /**
   * Transform the given string from camelCase to kebab-case
   * @param {string} value - The value to transform.
   * @returns {string} The transformed value.
   */

  function toParamCase(value) {
    return value.replace(REGEXP_CAMEL_CASE, '$1-$2').toLowerCase();
  }
  /**
   * Get data from the given element.
   * @param {Element} element - The target element.
   * @param {string} name - The data key to get.
   * @returns {string} The data value.
   */

  function getData(element, name) {
    if (isObject$1(element[name])) {
      return element[name];
    }

    if (element.dataset) {
      return element.dataset[name];
    }

    return element.getAttribute("data-".concat(toParamCase(name)));
  }
  /**
   * Set data to the given element.
   * @param {Element} element - The target element.
   * @param {string} name - The data key to set.
   * @param {string} data - The data value.
   */

  function setData(element, name, data) {
    if (isObject$1(data)) {
      element[name] = data;
    } else if (element.dataset) {
      element.dataset[name] = data;
    } else {
      element.setAttribute("data-".concat(toParamCase(name)), data);
    }
  }
  /**
   * Remove data from the given element.
   * @param {Element} element - The target element.
   * @param {string} name - The data key to remove.
   */

  function removeData(element, name) {
    if (isObject$1(element[name])) {
      try {
        delete element[name];
      } catch (error) {
        element[name] = undefined;
      }
    } else if (element.dataset) {
      // #128 Safari not allows to delete dataset property
      try {
        delete element.dataset[name];
      } catch (error) {
        element.dataset[name] = undefined;
      }
    } else {
      element.removeAttribute("data-".concat(toParamCase(name)));
    }
  }
  var REGEXP_SPACES = /\s\s*/;

  var onceSupported = function () {
    var supported = false;

    if (IS_BROWSER) {
      var once = false;

      var listener = function listener() {};

      var options = Object.defineProperty({}, 'once', {
        get: function get() {
          supported = true;
          return once;
        },

        /**
         * This setter can fix a `TypeError` in strict mode
         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}
         * @param {boolean} value - The value to set
         */
        set: function set(value) {
          once = value;
        }
      });
      WINDOW.addEventListener('test', listener, options);
      WINDOW.removeEventListener('test', listener, options);
    }

    return supported;
  }();
  /**
   * Remove event listener from the target element.
   * @param {Element} element - The event target.
   * @param {string} type - The event type(s).
   * @param {Function} listener - The event listener.
   * @param {Object} options - The event options.
   */


  function removeListener(element, type, listener) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var handler = listener;
    type.trim().split(REGEXP_SPACES).forEach(function (event) {
      if (!onceSupported) {
        var listeners = element.listeners;

        if (listeners && listeners[event] && listeners[event][listener]) {
          handler = listeners[event][listener];
          delete listeners[event][listener];

          if (Object.keys(listeners[event]).length === 0) {
            delete listeners[event];
          }

          if (Object.keys(listeners).length === 0) {
            delete element.listeners;
          }
        }
      }

      element.removeEventListener(event, handler, options);
    });
  }
  /**
   * Add event listener to the target element.
   * @param {Element} element - The event target.
   * @param {string} type - The event type(s).
   * @param {Function} listener - The event listener.
   * @param {Object} options - The event options.
   */

  function addListener(element, type, listener) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var _handler = listener;
    type.trim().split(REGEXP_SPACES).forEach(function (event) {
      if (options.once && !onceSupported) {
        var _element$listeners = element.listeners,
            listeners = _element$listeners === void 0 ? {} : _element$listeners;

        _handler = function handler() {
          delete listeners[event][listener];
          element.removeEventListener(event, _handler, options);

          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          listener.apply(element, args);
        };

        if (!listeners[event]) {
          listeners[event] = {};
        }

        if (listeners[event][listener]) {
          element.removeEventListener(event, listeners[event][listener], options);
        }

        listeners[event][listener] = _handler;
        element.listeners = listeners;
      }

      element.addEventListener(event, _handler, options);
    });
  }
  /**
   * Dispatch event on the target element.
   * @param {Element} element - The event target.
   * @param {string} type - The event type(s).
   * @param {Object} data - The additional event data.
   * @returns {boolean} Indicate if the event is default prevented or not.
   */

  function dispatchEvent(element, type, data) {
    var event; // Event and CustomEvent on IE9-11 are global objects, not constructors

    if (isFunction$1(Event) && isFunction$1(CustomEvent)) {
      event = new CustomEvent(type, {
        detail: data,
        bubbles: true,
        cancelable: true
      });
    } else {
      event = document.createEvent('CustomEvent');
      event.initCustomEvent(type, true, true, data);
    }

    return element.dispatchEvent(event);
  }
  /**
   * Get the offset base on the document.
   * @param {Element} element - The target element.
   * @returns {Object} The offset data.
   */

  function getOffset(element) {
    var box = element.getBoundingClientRect();
    return {
      left: box.left + (window.pageXOffset - document.documentElement.clientLeft),
      top: box.top + (window.pageYOffset - document.documentElement.clientTop)
    };
  }
  var location = WINDOW.location;
  var REGEXP_ORIGINS = /^(\w+:)\/\/([^:/?#]*):?(\d*)/i;
  /**
   * Check if the given URL is a cross origin URL.
   * @param {string} url - The target URL.
   * @returns {boolean} Returns `true` if the given URL is a cross origin URL, else `false`.
   */

  function isCrossOriginURL(url) {
    var parts = url.match(REGEXP_ORIGINS);
    return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);
  }
  /**
   * Add timestamp to the given URL.
   * @param {string} url - The target URL.
   * @returns {string} The result URL.
   */

  function addTimestamp(url) {
    var timestamp = "timestamp=".concat(new Date().getTime());
    return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;
  }
  /**
   * Get transforms base on the given object.
   * @param {Object} obj - The target object.
   * @returns {string} A string contains transform values.
   */

  function getTransforms(_ref) {
    var rotate = _ref.rotate,
        scaleX = _ref.scaleX,
        scaleY = _ref.scaleY,
        translateX = _ref.translateX,
        translateY = _ref.translateY;
    var values = [];

    if (isNumber$1(translateX) && translateX !== 0) {
      values.push("translateX(".concat(translateX, "px)"));
    }

    if (isNumber$1(translateY) && translateY !== 0) {
      values.push("translateY(".concat(translateY, "px)"));
    } // Rotate should come first before scale to match orientation transform


    if (isNumber$1(rotate) && rotate !== 0) {
      values.push("rotate(".concat(rotate, "deg)"));
    }

    if (isNumber$1(scaleX) && scaleX !== 1) {
      values.push("scaleX(".concat(scaleX, ")"));
    }

    if (isNumber$1(scaleY) && scaleY !== 1) {
      values.push("scaleY(".concat(scaleY, ")"));
    }

    var transform = values.length ? values.join(' ') : 'none';
    return {
      WebkitTransform: transform,
      msTransform: transform,
      transform: transform
    };
  }
  /**
   * Get the max ratio of a group of pointers.
   * @param {string} pointers - The target pointers.
   * @returns {number} The result ratio.
   */

  function getMaxZoomRatio(pointers) {
    var pointers2 = _objectSpread2({}, pointers);

    var maxRatio = 0;
    forEach(pointers, function (pointer, pointerId) {
      delete pointers2[pointerId];
      forEach(pointers2, function (pointer2) {
        var x1 = Math.abs(pointer.startX - pointer2.startX);
        var y1 = Math.abs(pointer.startY - pointer2.startY);
        var x2 = Math.abs(pointer.endX - pointer2.endX);
        var y2 = Math.abs(pointer.endY - pointer2.endY);
        var z1 = Math.sqrt(x1 * x1 + y1 * y1);
        var z2 = Math.sqrt(x2 * x2 + y2 * y2);
        var ratio = (z2 - z1) / z1;

        if (Math.abs(ratio) > Math.abs(maxRatio)) {
          maxRatio = ratio;
        }
      });
    });
    return maxRatio;
  }
  /**
   * Get a pointer from an event object.
   * @param {Object} event - The target event object.
   * @param {boolean} endOnly - Indicates if only returns the end point coordinate or not.
   * @returns {Object} The result pointer contains start and/or end point coordinates.
   */

  function getPointer(_ref2, endOnly) {
    var pageX = _ref2.pageX,
        pageY = _ref2.pageY;
    var end = {
      endX: pageX,
      endY: pageY
    };
    return endOnly ? end : _objectSpread2({
      startX: pageX,
      startY: pageY
    }, end);
  }
  /**
   * Get the center point coordinate of a group of pointers.
   * @param {Object} pointers - The target pointers.
   * @returns {Object} The center point coordinate.
   */

  function getPointersCenter(pointers) {
    var pageX = 0;
    var pageY = 0;
    var count = 0;
    forEach(pointers, function (_ref3) {
      var startX = _ref3.startX,
          startY = _ref3.startY;
      pageX += startX;
      pageY += startY;
      count += 1;
    });
    pageX /= count;
    pageY /= count;
    return {
      pageX: pageX,
      pageY: pageY
    };
  }
  /**
   * Get the max sizes in a rectangle under the given aspect ratio.
   * @param {Object} data - The original sizes.
   * @param {string} [type='contain'] - The adjust type.
   * @returns {Object} The result sizes.
   */

  function getAdjustedSizes(_ref4) // or 'cover'
  {
    var aspectRatio = _ref4.aspectRatio,
        height = _ref4.height,
        width = _ref4.width;
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'contain';
    var isValidWidth = isPositiveNumber(width);
    var isValidHeight = isPositiveNumber(height);

    if (isValidWidth && isValidHeight) {
      var adjustedWidth = height * aspectRatio;

      if (type === 'contain' && adjustedWidth > width || type === 'cover' && adjustedWidth < width) {
        height = width / aspectRatio;
      } else {
        width = height * aspectRatio;
      }
    } else if (isValidWidth) {
      height = width / aspectRatio;
    } else if (isValidHeight) {
      width = height * aspectRatio;
    }

    return {
      width: width,
      height: height
    };
  }
  /**
   * Get the new sizes of a rectangle after rotated.
   * @param {Object} data - The original sizes.
   * @returns {Object} The result sizes.
   */

  function getRotatedSizes(_ref5) {
    var width = _ref5.width,
        height = _ref5.height,
        degree = _ref5.degree;
    degree = Math.abs(degree) % 180;

    if (degree === 90) {
      return {
        width: height,
        height: width
      };
    }

    var arc = degree % 90 * Math.PI / 180;
    var sinArc = Math.sin(arc);
    var cosArc = Math.cos(arc);
    var newWidth = width * cosArc + height * sinArc;
    var newHeight = width * sinArc + height * cosArc;
    return degree > 90 ? {
      width: newHeight,
      height: newWidth
    } : {
      width: newWidth,
      height: newHeight
    };
  }
  /**
   * Get a canvas which drew the given image.
   * @param {HTMLImageElement} image - The image for drawing.
   * @param {Object} imageData - The image data.
   * @param {Object} canvasData - The canvas data.
   * @param {Object} options - The options.
   * @returns {HTMLCanvasElement} The result canvas.
   */

  function getSourceCanvas(image, _ref6, _ref7, _ref8) {
    var imageAspectRatio = _ref6.aspectRatio,
        imageNaturalWidth = _ref6.naturalWidth,
        imageNaturalHeight = _ref6.naturalHeight,
        _ref6$rotate = _ref6.rotate,
        rotate = _ref6$rotate === void 0 ? 0 : _ref6$rotate,
        _ref6$scaleX = _ref6.scaleX,
        scaleX = _ref6$scaleX === void 0 ? 1 : _ref6$scaleX,
        _ref6$scaleY = _ref6.scaleY,
        scaleY = _ref6$scaleY === void 0 ? 1 : _ref6$scaleY;
    var aspectRatio = _ref7.aspectRatio,
        naturalWidth = _ref7.naturalWidth,
        naturalHeight = _ref7.naturalHeight;
    var _ref8$fillColor = _ref8.fillColor,
        fillColor = _ref8$fillColor === void 0 ? 'transparent' : _ref8$fillColor,
        _ref8$imageSmoothingE = _ref8.imageSmoothingEnabled,
        imageSmoothingEnabled = _ref8$imageSmoothingE === void 0 ? true : _ref8$imageSmoothingE,
        _ref8$imageSmoothingQ = _ref8.imageSmoothingQuality,
        imageSmoothingQuality = _ref8$imageSmoothingQ === void 0 ? 'low' : _ref8$imageSmoothingQ,
        _ref8$maxWidth = _ref8.maxWidth,
        maxWidth = _ref8$maxWidth === void 0 ? Infinity : _ref8$maxWidth,
        _ref8$maxHeight = _ref8.maxHeight,
        maxHeight = _ref8$maxHeight === void 0 ? Infinity : _ref8$maxHeight,
        _ref8$minWidth = _ref8.minWidth,
        minWidth = _ref8$minWidth === void 0 ? 0 : _ref8$minWidth,
        _ref8$minHeight = _ref8.minHeight,
        minHeight = _ref8$minHeight === void 0 ? 0 : _ref8$minHeight;
    var canvas = document.createElement('canvas');
    var context = canvas.getContext('2d');
    var maxSizes = getAdjustedSizes({
      aspectRatio: aspectRatio,
      width: maxWidth,
      height: maxHeight
    });
    var minSizes = getAdjustedSizes({
      aspectRatio: aspectRatio,
      width: minWidth,
      height: minHeight
    }, 'cover');
    var width = Math.min(maxSizes.width, Math.max(minSizes.width, naturalWidth));
    var height = Math.min(maxSizes.height, Math.max(minSizes.height, naturalHeight)); // Note: should always use image's natural sizes for drawing as
    // imageData.naturalWidth === canvasData.naturalHeight when rotate % 180 === 90

    var destMaxSizes = getAdjustedSizes({
      aspectRatio: imageAspectRatio,
      width: maxWidth,
      height: maxHeight
    });
    var destMinSizes = getAdjustedSizes({
      aspectRatio: imageAspectRatio,
      width: minWidth,
      height: minHeight
    }, 'cover');
    var destWidth = Math.min(destMaxSizes.width, Math.max(destMinSizes.width, imageNaturalWidth));
    var destHeight = Math.min(destMaxSizes.height, Math.max(destMinSizes.height, imageNaturalHeight));
    var params = [-destWidth / 2, -destHeight / 2, destWidth, destHeight];
    canvas.width = normalizeDecimalNumber(width);
    canvas.height = normalizeDecimalNumber(height);
    context.fillStyle = fillColor;
    context.fillRect(0, 0, width, height);
    context.save();
    context.translate(width / 2, height / 2);
    context.rotate(rotate * Math.PI / 180);
    context.scale(scaleX, scaleY);
    context.imageSmoothingEnabled = imageSmoothingEnabled;
    context.imageSmoothingQuality = imageSmoothingQuality;
    context.drawImage.apply(context, [image].concat(_toConsumableArray(params.map(function (param) {
      return Math.floor(normalizeDecimalNumber(param));
    }))));
    context.restore();
    return canvas;
  }
  var fromCharCode = String.fromCharCode;
  /**
   * Get string from char code in data view.
   * @param {DataView} dataView - The data view for read.
   * @param {number} start - The start index.
   * @param {number} length - The read length.
   * @returns {string} The read result.
   */

  function getStringFromCharCode(dataView, start, length) {
    var str = '';
    length += start;

    for (var i = start; i < length; i += 1) {
      str += fromCharCode(dataView.getUint8(i));
    }

    return str;
  }
  var REGEXP_DATA_URL_HEAD = /^data:.*,/;
  /**
   * Transform Data URL to array buffer.
   * @param {string} dataURL - The Data URL to transform.
   * @returns {ArrayBuffer} The result array buffer.
   */

  function dataURLToArrayBuffer(dataURL) {
    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');
    var binary = atob(base64);
    var arrayBuffer = new ArrayBuffer(binary.length);
    var uint8 = new Uint8Array(arrayBuffer);
    forEach(uint8, function (value, i) {
      uint8[i] = binary.charCodeAt(i);
    });
    return arrayBuffer;
  }
  /**
   * Transform array buffer to Data URL.
   * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.
   * @param {string} mimeType - The mime type of the Data URL.
   * @returns {string} The result Data URL.
   */

  function arrayBufferToDataURL(arrayBuffer, mimeType) {
    var chunks = []; // Chunk Typed Array for better performance (#435)

    var chunkSize = 8192;
    var uint8 = new Uint8Array(arrayBuffer);

    while (uint8.length > 0) {
      // XXX: Babel's `toConsumableArray` helper will throw error in IE or Safari 9
      // eslint-disable-next-line prefer-spread
      chunks.push(fromCharCode.apply(null, toArray(uint8.subarray(0, chunkSize))));
      uint8 = uint8.subarray(chunkSize);
    }

    return "data:".concat(mimeType, ";base64,").concat(btoa(chunks.join('')));
  }
  /**
   * Get orientation value from given array buffer.
   * @param {ArrayBuffer} arrayBuffer - The array buffer to read.
   * @returns {number} The read orientation value.
   */

  function resetAndGetOrientation(arrayBuffer) {
    var dataView = new DataView(arrayBuffer);
    var orientation; // Ignores range error when the image does not have correct Exif information

    try {
      var littleEndian;
      var app1Start;
      var ifdStart; // Only handle JPEG image (start by 0xFFD8)

      if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {
        var length = dataView.byteLength;
        var offset = 2;

        while (offset + 1 < length) {
          if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {
            app1Start = offset;
            break;
          }

          offset += 1;
        }
      }

      if (app1Start) {
        var exifIDCode = app1Start + 4;
        var tiffOffset = app1Start + 10;

        if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {
          var endianness = dataView.getUint16(tiffOffset);
          littleEndian = endianness === 0x4949;

          if (littleEndian || endianness === 0x4D4D
          /* bigEndian */
          ) {
              if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {
                var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);

                if (firstIFDOffset >= 0x00000008) {
                  ifdStart = tiffOffset + firstIFDOffset;
                }
              }
            }
        }
      }

      if (ifdStart) {
        var _length = dataView.getUint16(ifdStart, littleEndian);

        var _offset;

        var i;

        for (i = 0; i < _length; i += 1) {
          _offset = ifdStart + i * 12 + 2;

          if (dataView.getUint16(_offset, littleEndian) === 0x0112
          /* Orientation */
          ) {
              // 8 is the offset of the current tag's value
              _offset += 8; // Get the original orientation value

              orientation = dataView.getUint16(_offset, littleEndian); // Override the orientation with its default value

              dataView.setUint16(_offset, 1, littleEndian);
              break;
            }
        }
      }
    } catch (error) {
      orientation = 1;
    }

    return orientation;
  }
  /**
   * Parse Exif Orientation value.
   * @param {number} orientation - The orientation to parse.
   * @returns {Object} The parsed result.
   */

  function parseOrientation(orientation) {
    var rotate = 0;
    var scaleX = 1;
    var scaleY = 1;

    switch (orientation) {
      // Flip horizontal
      case 2:
        scaleX = -1;
        break;
      // Rotate left 180°

      case 3:
        rotate = -180;
        break;
      // Flip vertical

      case 4:
        scaleY = -1;
        break;
      // Flip vertical and rotate right 90°

      case 5:
        rotate = 90;
        scaleY = -1;
        break;
      // Rotate right 90°

      case 6:
        rotate = 90;
        break;
      // Flip horizontal and rotate right 90°

      case 7:
        rotate = 90;
        scaleX = -1;
        break;
      // Rotate left 90°

      case 8:
        rotate = -90;
        break;
    }

    return {
      rotate: rotate,
      scaleX: scaleX,
      scaleY: scaleY
    };
  }

  var render$1 = {
    render: function render() {
      this.initContainer();
      this.initCanvas();
      this.initCropBox();
      this.renderCanvas();

      if (this.cropped) {
        this.renderCropBox();
      }
    },
    initContainer: function initContainer() {
      var element = this.element,
          options = this.options,
          container = this.container,
          cropper = this.cropper;
      var minWidth = Number(options.minContainerWidth);
      var minHeight = Number(options.minContainerHeight);
      addClass$1(cropper, CLASS_HIDDEN);
      removeClass$1(element, CLASS_HIDDEN);
      var containerData = {
        width: Math.max(container.offsetWidth, minWidth >= 0 ? minWidth : MIN_CONTAINER_WIDTH),
        height: Math.max(container.offsetHeight, minHeight >= 0 ? minHeight : MIN_CONTAINER_HEIGHT)
      };
      this.containerData = containerData;
      setStyle(cropper, {
        width: containerData.width,
        height: containerData.height
      });
      addClass$1(element, CLASS_HIDDEN);
      removeClass$1(cropper, CLASS_HIDDEN);
    },
    // Canvas (image wrapper)
    initCanvas: function initCanvas() {
      var containerData = this.containerData,
          imageData = this.imageData;
      var viewMode = this.options.viewMode;
      var rotated = Math.abs(imageData.rotate) % 180 === 90;
      var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;
      var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;
      var aspectRatio = naturalWidth / naturalHeight;
      var canvasWidth = containerData.width;
      var canvasHeight = containerData.height;

      if (containerData.height * aspectRatio > containerData.width) {
        if (viewMode === 3) {
          canvasWidth = containerData.height * aspectRatio;
        } else {
          canvasHeight = containerData.width / aspectRatio;
        }
      } else if (viewMode === 3) {
        canvasHeight = containerData.width / aspectRatio;
      } else {
        canvasWidth = containerData.height * aspectRatio;
      }

      var canvasData = {
        aspectRatio: aspectRatio,
        naturalWidth: naturalWidth,
        naturalHeight: naturalHeight,
        width: canvasWidth,
        height: canvasHeight
      };
      this.canvasData = canvasData;
      this.limited = viewMode === 1 || viewMode === 2;
      this.limitCanvas(true, true);
      canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);
      canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);
      canvasData.left = (containerData.width - canvasData.width) / 2;
      canvasData.top = (containerData.height - canvasData.height) / 2;
      canvasData.oldLeft = canvasData.left;
      canvasData.oldTop = canvasData.top;
      this.initialCanvasData = assign({}, canvasData);
    },
    limitCanvas: function limitCanvas(sizeLimited, positionLimited) {
      var options = this.options,
          containerData = this.containerData,
          canvasData = this.canvasData,
          cropBoxData = this.cropBoxData;
      var viewMode = options.viewMode;
      var aspectRatio = canvasData.aspectRatio;
      var cropped = this.cropped && cropBoxData;

      if (sizeLimited) {
        var minCanvasWidth = Number(options.minCanvasWidth) || 0;
        var minCanvasHeight = Number(options.minCanvasHeight) || 0;

        if (viewMode > 1) {
          minCanvasWidth = Math.max(minCanvasWidth, containerData.width);
          minCanvasHeight = Math.max(minCanvasHeight, containerData.height);

          if (viewMode === 3) {
            if (minCanvasHeight * aspectRatio > minCanvasWidth) {
              minCanvasWidth = minCanvasHeight * aspectRatio;
            } else {
              minCanvasHeight = minCanvasWidth / aspectRatio;
            }
          }
        } else if (viewMode > 0) {
          if (minCanvasWidth) {
            minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);
          } else if (minCanvasHeight) {
            minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);
          } else if (cropped) {
            minCanvasWidth = cropBoxData.width;
            minCanvasHeight = cropBoxData.height;

            if (minCanvasHeight * aspectRatio > minCanvasWidth) {
              minCanvasWidth = minCanvasHeight * aspectRatio;
            } else {
              minCanvasHeight = minCanvasWidth / aspectRatio;
            }
          }
        }

        var _getAdjustedSizes = getAdjustedSizes({
          aspectRatio: aspectRatio,
          width: minCanvasWidth,
          height: minCanvasHeight
        });

        minCanvasWidth = _getAdjustedSizes.width;
        minCanvasHeight = _getAdjustedSizes.height;
        canvasData.minWidth = minCanvasWidth;
        canvasData.minHeight = minCanvasHeight;
        canvasData.maxWidth = Infinity;
        canvasData.maxHeight = Infinity;
      }

      if (positionLimited) {
        if (viewMode > (cropped ? 0 : 1)) {
          var newCanvasLeft = containerData.width - canvasData.width;
          var newCanvasTop = containerData.height - canvasData.height;
          canvasData.minLeft = Math.min(0, newCanvasLeft);
          canvasData.minTop = Math.min(0, newCanvasTop);
          canvasData.maxLeft = Math.max(0, newCanvasLeft);
          canvasData.maxTop = Math.max(0, newCanvasTop);

          if (cropped && this.limited) {
            canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));
            canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));
            canvasData.maxLeft = cropBoxData.left;
            canvasData.maxTop = cropBoxData.top;

            if (viewMode === 2) {
              if (canvasData.width >= containerData.width) {
                canvasData.minLeft = Math.min(0, newCanvasLeft);
                canvasData.maxLeft = Math.max(0, newCanvasLeft);
              }

              if (canvasData.height >= containerData.height) {
                canvasData.minTop = Math.min(0, newCanvasTop);
                canvasData.maxTop = Math.max(0, newCanvasTop);
              }
            }
          }
        } else {
          canvasData.minLeft = -canvasData.width;
          canvasData.minTop = -canvasData.height;
          canvasData.maxLeft = containerData.width;
          canvasData.maxTop = containerData.height;
        }
      }
    },
    renderCanvas: function renderCanvas(changed, transformed) {
      var canvasData = this.canvasData,
          imageData = this.imageData;

      if (transformed) {
        var _getRotatedSizes = getRotatedSizes({
          width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),
          height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),
          degree: imageData.rotate || 0
        }),
            naturalWidth = _getRotatedSizes.width,
            naturalHeight = _getRotatedSizes.height;

        var width = canvasData.width * (naturalWidth / canvasData.naturalWidth);
        var height = canvasData.height * (naturalHeight / canvasData.naturalHeight);
        canvasData.left -= (width - canvasData.width) / 2;
        canvasData.top -= (height - canvasData.height) / 2;
        canvasData.width = width;
        canvasData.height = height;
        canvasData.aspectRatio = naturalWidth / naturalHeight;
        canvasData.naturalWidth = naturalWidth;
        canvasData.naturalHeight = naturalHeight;
        this.limitCanvas(true, false);
      }

      if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {
        canvasData.left = canvasData.oldLeft;
      }

      if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {
        canvasData.top = canvasData.oldTop;
      }

      canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);
      canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);
      this.limitCanvas(false, true);
      canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);
      canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);
      canvasData.oldLeft = canvasData.left;
      canvasData.oldTop = canvasData.top;
      setStyle(this.canvas, assign({
        width: canvasData.width,
        height: canvasData.height
      }, getTransforms({
        translateX: canvasData.left,
        translateY: canvasData.top
      })));
      this.renderImage(changed);

      if (this.cropped && this.limited) {
        this.limitCropBox(true, true);
      }
    },
    renderImage: function renderImage(changed) {
      var canvasData = this.canvasData,
          imageData = this.imageData;
      var width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);
      var height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);
      assign(imageData, {
        width: width,
        height: height,
        left: (canvasData.width - width) / 2,
        top: (canvasData.height - height) / 2
      });
      setStyle(this.image, assign({
        width: imageData.width,
        height: imageData.height
      }, getTransforms(assign({
        translateX: imageData.left,
        translateY: imageData.top
      }, imageData))));

      if (changed) {
        this.output();
      }
    },
    initCropBox: function initCropBox() {
      var options = this.options,
          canvasData = this.canvasData;
      var aspectRatio = options.aspectRatio || options.initialAspectRatio;
      var autoCropArea = Number(options.autoCropArea) || 0.8;
      var cropBoxData = {
        width: canvasData.width,
        height: canvasData.height
      };

      if (aspectRatio) {
        if (canvasData.height * aspectRatio > canvasData.width) {
          cropBoxData.height = cropBoxData.width / aspectRatio;
        } else {
          cropBoxData.width = cropBoxData.height * aspectRatio;
        }
      }

      this.cropBoxData = cropBoxData;
      this.limitCropBox(true, true); // Initialize auto crop area

      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);
      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight); // The width/height of auto crop area must large than "minWidth/Height"

      cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);
      cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);
      cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;
      cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;
      cropBoxData.oldLeft = cropBoxData.left;
      cropBoxData.oldTop = cropBoxData.top;
      this.initialCropBoxData = assign({}, cropBoxData);
    },
    limitCropBox: function limitCropBox(sizeLimited, positionLimited) {
      var options = this.options,
          containerData = this.containerData,
          canvasData = this.canvasData,
          cropBoxData = this.cropBoxData,
          limited = this.limited;
      var aspectRatio = options.aspectRatio;

      if (sizeLimited) {
        var minCropBoxWidth = Number(options.minCropBoxWidth) || 0;
        var minCropBoxHeight = Number(options.minCropBoxHeight) || 0;
        var maxCropBoxWidth = limited ? Math.min(containerData.width, canvasData.width, canvasData.width + canvasData.left, containerData.width - canvasData.left) : containerData.width;
        var maxCropBoxHeight = limited ? Math.min(containerData.height, canvasData.height, canvasData.height + canvasData.top, containerData.height - canvasData.top) : containerData.height; // The min/maxCropBoxWidth/Height must be less than container's width/height

        minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);
        minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);

        if (aspectRatio) {
          if (minCropBoxWidth && minCropBoxHeight) {
            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {
              minCropBoxHeight = minCropBoxWidth / aspectRatio;
            } else {
              minCropBoxWidth = minCropBoxHeight * aspectRatio;
            }
          } else if (minCropBoxWidth) {
            minCropBoxHeight = minCropBoxWidth / aspectRatio;
          } else if (minCropBoxHeight) {
            minCropBoxWidth = minCropBoxHeight * aspectRatio;
          }

          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {
            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;
          } else {
            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;
          }
        } // The minWidth/Height must be less than maxWidth/Height


        cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);
        cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);
        cropBoxData.maxWidth = maxCropBoxWidth;
        cropBoxData.maxHeight = maxCropBoxHeight;
      }

      if (positionLimited) {
        if (limited) {
          cropBoxData.minLeft = Math.max(0, canvasData.left);
          cropBoxData.minTop = Math.max(0, canvasData.top);
          cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;
          cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;
        } else {
          cropBoxData.minLeft = 0;
          cropBoxData.minTop = 0;
          cropBoxData.maxLeft = containerData.width - cropBoxData.width;
          cropBoxData.maxTop = containerData.height - cropBoxData.height;
        }
      }
    },
    renderCropBox: function renderCropBox() {
      var options = this.options,
          containerData = this.containerData,
          cropBoxData = this.cropBoxData;

      if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {
        cropBoxData.left = cropBoxData.oldLeft;
      }

      if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {
        cropBoxData.top = cropBoxData.oldTop;
      }

      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);
      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);
      this.limitCropBox(false, true);
      cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);
      cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);
      cropBoxData.oldLeft = cropBoxData.left;
      cropBoxData.oldTop = cropBoxData.top;

      if (options.movable && options.cropBoxMovable) {
        // Turn to move the canvas when the crop box is equal to the container
        setData(this.face, DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? ACTION_MOVE : ACTION_ALL);
      }

      setStyle(this.cropBox, assign({
        width: cropBoxData.width,
        height: cropBoxData.height
      }, getTransforms({
        translateX: cropBoxData.left,
        translateY: cropBoxData.top
      })));

      if (this.cropped && this.limited) {
        this.limitCanvas(true, true);
      }

      if (!this.disabled) {
        this.output();
      }
    },
    output: function output() {
      this.preview();
      dispatchEvent(this.element, EVENT_CROP, this.getData());
    }
  };

  var preview = {
    initPreview: function initPreview() {
      var element = this.element,
          crossOrigin = this.crossOrigin;
      var preview = this.options.preview;
      var url = crossOrigin ? this.crossOriginUrl : this.url;
      var alt = element.alt || 'The image to preview';
      var image = document.createElement('img');

      if (crossOrigin) {
        image.crossOrigin = crossOrigin;
      }

      image.src = url;
      image.alt = alt;
      this.viewBox.appendChild(image);
      this.viewBoxImage = image;

      if (!preview) {
        return;
      }

      var previews = preview;

      if (typeof preview === 'string') {
        previews = element.ownerDocument.querySelectorAll(preview);
      } else if (preview.querySelector) {
        previews = [preview];
      }

      this.previews = previews;
      forEach(previews, function (el) {
        var img = document.createElement('img'); // Save the original size for recover

        setData(el, DATA_PREVIEW, {
          width: el.offsetWidth,
          height: el.offsetHeight,
          html: el.innerHTML
        });

        if (crossOrigin) {
          img.crossOrigin = crossOrigin;
        }

        img.src = url;
        img.alt = alt;
        /**
         * Override img element styles
         * Add `display:block` to avoid margin top issue
         * Add `height:auto` to override `height` attribute on IE8
         * (Occur only when margin-top <= -height)
         */

        img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;"';
        el.innerHTML = '';
        el.appendChild(img);
      });
    },
    resetPreview: function resetPreview() {
      forEach(this.previews, function (element) {
        var data = getData(element, DATA_PREVIEW);
        setStyle(element, {
          width: data.width,
          height: data.height
        });
        element.innerHTML = data.html;
        removeData(element, DATA_PREVIEW);
      });
    },
    preview: function preview() {
      var imageData = this.imageData,
          canvasData = this.canvasData,
          cropBoxData = this.cropBoxData;
      var cropBoxWidth = cropBoxData.width,
          cropBoxHeight = cropBoxData.height;
      var width = imageData.width,
          height = imageData.height;
      var left = cropBoxData.left - canvasData.left - imageData.left;
      var top = cropBoxData.top - canvasData.top - imageData.top;

      if (!this.cropped || this.disabled) {
        return;
      }

      setStyle(this.viewBoxImage, assign({
        width: width,
        height: height
      }, getTransforms(assign({
        translateX: -left,
        translateY: -top
      }, imageData))));
      forEach(this.previews, function (element) {
        var data = getData(element, DATA_PREVIEW);
        var originalWidth = data.width;
        var originalHeight = data.height;
        var newWidth = originalWidth;
        var newHeight = originalHeight;
        var ratio = 1;

        if (cropBoxWidth) {
          ratio = originalWidth / cropBoxWidth;
          newHeight = cropBoxHeight * ratio;
        }

        if (cropBoxHeight && newHeight > originalHeight) {
          ratio = originalHeight / cropBoxHeight;
          newWidth = cropBoxWidth * ratio;
          newHeight = originalHeight;
        }

        setStyle(element, {
          width: newWidth,
          height: newHeight
        });
        setStyle(element.getElementsByTagName('img')[0], assign({
          width: width * ratio,
          height: height * ratio
        }, getTransforms(assign({
          translateX: -left * ratio,
          translateY: -top * ratio
        }, imageData))));
      });
    }
  };

  var events = {
    bind: function bind() {
      var element = this.element,
          options = this.options,
          cropper = this.cropper;

      if (isFunction$1(options.cropstart)) {
        addListener(element, EVENT_CROP_START, options.cropstart);
      }

      if (isFunction$1(options.cropmove)) {
        addListener(element, EVENT_CROP_MOVE, options.cropmove);
      }

      if (isFunction$1(options.cropend)) {
        addListener(element, EVENT_CROP_END, options.cropend);
      }

      if (isFunction$1(options.crop)) {
        addListener(element, EVENT_CROP, options.crop);
      }

      if (isFunction$1(options.zoom)) {
        addListener(element, EVENT_ZOOM, options.zoom);
      }

      addListener(cropper, EVENT_POINTER_DOWN, this.onCropStart = this.cropStart.bind(this));

      if (options.zoomable && options.zoomOnWheel) {
        addListener(cropper, EVENT_WHEEL, this.onWheel = this.wheel.bind(this), {
          passive: false,
          capture: true
        });
      }

      if (options.toggleDragModeOnDblclick) {
        addListener(cropper, EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));
      }

      addListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove = this.cropMove.bind(this));
      addListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd = this.cropEnd.bind(this));

      if (options.responsive) {
        addListener(window, EVENT_RESIZE, this.onResize = this.resize.bind(this));
      }
    },
    unbind: function unbind() {
      var element = this.element,
          options = this.options,
          cropper = this.cropper;

      if (isFunction$1(options.cropstart)) {
        removeListener(element, EVENT_CROP_START, options.cropstart);
      }

      if (isFunction$1(options.cropmove)) {
        removeListener(element, EVENT_CROP_MOVE, options.cropmove);
      }

      if (isFunction$1(options.cropend)) {
        removeListener(element, EVENT_CROP_END, options.cropend);
      }

      if (isFunction$1(options.crop)) {
        removeListener(element, EVENT_CROP, options.crop);
      }

      if (isFunction$1(options.zoom)) {
        removeListener(element, EVENT_ZOOM, options.zoom);
      }

      removeListener(cropper, EVENT_POINTER_DOWN, this.onCropStart);

      if (options.zoomable && options.zoomOnWheel) {
        removeListener(cropper, EVENT_WHEEL, this.onWheel, {
          passive: false,
          capture: true
        });
      }

      if (options.toggleDragModeOnDblclick) {
        removeListener(cropper, EVENT_DBLCLICK, this.onDblclick);
      }

      removeListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove);
      removeListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd);

      if (options.responsive) {
        removeListener(window, EVENT_RESIZE, this.onResize);
      }
    }
  };

  var handlers = {
    resize: function resize() {
      if (this.disabled) {
        return;
      }

      var options = this.options,
          container = this.container,
          containerData = this.containerData;
      var ratio = container.offsetWidth / containerData.width; // Resize when width changed or height changed

      if (ratio !== 1 || container.offsetHeight !== containerData.height) {
        var canvasData;
        var cropBoxData;

        if (options.restore) {
          canvasData = this.getCanvasData();
          cropBoxData = this.getCropBoxData();
        }

        this.render();

        if (options.restore) {
          this.setCanvasData(forEach(canvasData, function (n, i) {
            canvasData[i] = n * ratio;
          }));
          this.setCropBoxData(forEach(cropBoxData, function (n, i) {
            cropBoxData[i] = n * ratio;
          }));
        }
      }
    },
    dblclick: function dblclick() {
      if (this.disabled || this.options.dragMode === DRAG_MODE_NONE) {
        return;
      }

      this.setDragMode(hasClass$1(this.dragBox, CLASS_CROP) ? DRAG_MODE_MOVE : DRAG_MODE_CROP);
    },
    wheel: function wheel(event) {
      var _this = this;

      var ratio = Number(this.options.wheelZoomRatio) || 0.1;
      var delta = 1;

      if (this.disabled) {
        return;
      }

      event.preventDefault(); // Limit wheel speed to prevent zoom too fast (#21)

      if (this.wheeling) {
        return;
      }

      this.wheeling = true;
      setTimeout(function () {
        _this.wheeling = false;
      }, 50);

      if (event.deltaY) {
        delta = event.deltaY > 0 ? 1 : -1;
      } else if (event.wheelDelta) {
        delta = -event.wheelDelta / 120;
      } else if (event.detail) {
        delta = event.detail > 0 ? 1 : -1;
      }

      this.zoom(-delta * ratio, event);
    },
    cropStart: function cropStart(event) {
      var buttons = event.buttons,
          button = event.button;

      if (this.disabled // Handle mouse event and pointer event and ignore touch event
      || (event.type === 'mousedown' || event.type === 'pointerdown' && event.pointerType === 'mouse') && ( // No primary button (Usually the left button)
      isNumber$1(buttons) && buttons !== 1 || isNumber$1(button) && button !== 0 // Open context menu
      || event.ctrlKey)) {
        return;
      }

      var options = this.options,
          pointers = this.pointers;
      var action;

      if (event.changedTouches) {
        // Handle touch event
        forEach(event.changedTouches, function (touch) {
          pointers[touch.identifier] = getPointer(touch);
        });
      } else {
        // Handle mouse event and pointer event
        pointers[event.pointerId || 0] = getPointer(event);
      }

      if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {
        action = ACTION_ZOOM;
      } else {
        action = getData(event.target, DATA_ACTION);
      }

      if (!REGEXP_ACTIONS.test(action)) {
        return;
      }

      if (dispatchEvent(this.element, EVENT_CROP_START, {
        originalEvent: event,
        action: action
      }) === false) {
        return;
      } // This line is required for preventing page zooming in iOS browsers


      event.preventDefault();
      this.action = action;
      this.cropping = false;

      if (action === ACTION_CROP) {
        this.cropping = true;
        addClass$1(this.dragBox, CLASS_MODAL);
      }
    },
    cropMove: function cropMove(event) {
      var action = this.action;

      if (this.disabled || !action) {
        return;
      }

      var pointers = this.pointers;
      event.preventDefault();

      if (dispatchEvent(this.element, EVENT_CROP_MOVE, {
        originalEvent: event,
        action: action
      }) === false) {
        return;
      }

      if (event.changedTouches) {
        forEach(event.changedTouches, function (touch) {
          // The first parameter should not be undefined (#432)
          assign(pointers[touch.identifier] || {}, getPointer(touch, true));
        });
      } else {
        assign(pointers[event.pointerId || 0] || {}, getPointer(event, true));
      }

      this.change(event);
    },
    cropEnd: function cropEnd(event) {
      if (this.disabled) {
        return;
      }

      var action = this.action,
          pointers = this.pointers;

      if (event.changedTouches) {
        forEach(event.changedTouches, function (touch) {
          delete pointers[touch.identifier];
        });
      } else {
        delete pointers[event.pointerId || 0];
      }

      if (!action) {
        return;
      }

      event.preventDefault();

      if (!Object.keys(pointers).length) {
        this.action = '';
      }

      if (this.cropping) {
        this.cropping = false;
        toggleClass(this.dragBox, CLASS_MODAL, this.cropped && this.options.modal);
      }

      dispatchEvent(this.element, EVENT_CROP_END, {
        originalEvent: event,
        action: action
      });
    }
  };

  var change = {
    change: function change(event) {
      var options = this.options,
          canvasData = this.canvasData,
          containerData = this.containerData,
          cropBoxData = this.cropBoxData,
          pointers = this.pointers;
      var action = this.action;
      var aspectRatio = options.aspectRatio;
      var left = cropBoxData.left,
          top = cropBoxData.top,
          width = cropBoxData.width,
          height = cropBoxData.height;
      var right = left + width;
      var bottom = top + height;
      var minLeft = 0;
      var minTop = 0;
      var maxWidth = containerData.width;
      var maxHeight = containerData.height;
      var renderable = true;
      var offset; // Locking aspect ratio in "free mode" by holding shift key

      if (!aspectRatio && event.shiftKey) {
        aspectRatio = width && height ? width / height : 1;
      }

      if (this.limited) {
        minLeft = cropBoxData.minLeft;
        minTop = cropBoxData.minTop;
        maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);
        maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);
      }

      var pointer = pointers[Object.keys(pointers)[0]];
      var range = {
        x: pointer.endX - pointer.startX,
        y: pointer.endY - pointer.startY
      };

      var check = function check(side) {
        switch (side) {
          case ACTION_EAST:
            if (right + range.x > maxWidth) {
              range.x = maxWidth - right;
            }

            break;

          case ACTION_WEST:
            if (left + range.x < minLeft) {
              range.x = minLeft - left;
            }

            break;

          case ACTION_NORTH:
            if (top + range.y < minTop) {
              range.y = minTop - top;
            }

            break;

          case ACTION_SOUTH:
            if (bottom + range.y > maxHeight) {
              range.y = maxHeight - bottom;
            }

            break;
        }
      };

      switch (action) {
        // Move crop box
        case ACTION_ALL:
          left += range.x;
          top += range.y;
          break;
        // Resize crop box

        case ACTION_EAST:
          if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {
            renderable = false;
            break;
          }

          check(ACTION_EAST);
          width += range.x;

          if (width < 0) {
            action = ACTION_WEST;
            width = -width;
            left -= width;
          }

          if (aspectRatio) {
            height = width / aspectRatio;
            top += (cropBoxData.height - height) / 2;
          }

          break;

        case ACTION_NORTH:
          if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {
            renderable = false;
            break;
          }

          check(ACTION_NORTH);
          height -= range.y;
          top += range.y;

          if (height < 0) {
            action = ACTION_SOUTH;
            height = -height;
            top -= height;
          }

          if (aspectRatio) {
            width = height * aspectRatio;
            left += (cropBoxData.width - width) / 2;
          }

          break;

        case ACTION_WEST:
          if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {
            renderable = false;
            break;
          }

          check(ACTION_WEST);
          width -= range.x;
          left += range.x;

          if (width < 0) {
            action = ACTION_EAST;
            width = -width;
            left -= width;
          }

          if (aspectRatio) {
            height = width / aspectRatio;
            top += (cropBoxData.height - height) / 2;
          }

          break;

        case ACTION_SOUTH:
          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {
            renderable = false;
            break;
          }

          check(ACTION_SOUTH);
          height += range.y;

          if (height < 0) {
            action = ACTION_NORTH;
            height = -height;
            top -= height;
          }

          if (aspectRatio) {
            width = height * aspectRatio;
            left += (cropBoxData.width - width) / 2;
          }

          break;

        case ACTION_NORTH_EAST:
          if (aspectRatio) {
            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {
              renderable = false;
              break;
            }

            check(ACTION_NORTH);
            height -= range.y;
            top += range.y;
            width = height * aspectRatio;
          } else {
            check(ACTION_NORTH);
            check(ACTION_EAST);

            if (range.x >= 0) {
              if (right < maxWidth) {
                width += range.x;
              } else if (range.y <= 0 && top <= minTop) {
                renderable = false;
              }
            } else {
              width += range.x;
            }

            if (range.y <= 0) {
              if (top > minTop) {
                height -= range.y;
                top += range.y;
              }
            } else {
              height -= range.y;
              top += range.y;
            }
          }

          if (width < 0 && height < 0) {
            action = ACTION_SOUTH_WEST;
            height = -height;
            width = -width;
            top -= height;
            left -= width;
          } else if (width < 0) {
            action = ACTION_NORTH_WEST;
            width = -width;
            left -= width;
          } else if (height < 0) {
            action = ACTION_SOUTH_EAST;
            height = -height;
            top -= height;
          }

          break;

        case ACTION_NORTH_WEST:
          if (aspectRatio) {
            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {
              renderable = false;
              break;
            }

            check(ACTION_NORTH);
            height -= range.y;
            top += range.y;
            width = height * aspectRatio;
            left += cropBoxData.width - width;
          } else {
            check(ACTION_NORTH);
            check(ACTION_WEST);

            if (range.x <= 0) {
              if (left > minLeft) {
                width -= range.x;
                left += range.x;
              } else if (range.y <= 0 && top <= minTop) {
                renderable = false;
              }
            } else {
              width -= range.x;
              left += range.x;
            }

            if (range.y <= 0) {
              if (top > minTop) {
                height -= range.y;
                top += range.y;
              }
            } else {
              height -= range.y;
              top += range.y;
            }
          }

          if (width < 0 && height < 0) {
            action = ACTION_SOUTH_EAST;
            height = -height;
            width = -width;
            top -= height;
            left -= width;
          } else if (width < 0) {
            action = ACTION_NORTH_EAST;
            width = -width;
            left -= width;
          } else if (height < 0) {
            action = ACTION_SOUTH_WEST;
            height = -height;
            top -= height;
          }

          break;

        case ACTION_SOUTH_WEST:
          if (aspectRatio) {
            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {
              renderable = false;
              break;
            }

            check(ACTION_WEST);
            width -= range.x;
            left += range.x;
            height = width / aspectRatio;
          } else {
            check(ACTION_SOUTH);
            check(ACTION_WEST);

            if (range.x <= 0) {
              if (left > minLeft) {
                width -= range.x;
                left += range.x;
              } else if (range.y >= 0 && bottom >= maxHeight) {
                renderable = false;
              }
            } else {
              width -= range.x;
              left += range.x;
            }

            if (range.y >= 0) {
              if (bottom < maxHeight) {
                height += range.y;
              }
            } else {
              height += range.y;
            }
          }

          if (width < 0 && height < 0) {
            action = ACTION_NORTH_EAST;
            height = -height;
            width = -width;
            top -= height;
            left -= width;
          } else if (width < 0) {
            action = ACTION_SOUTH_EAST;
            width = -width;
            left -= width;
          } else if (height < 0) {
            action = ACTION_NORTH_WEST;
            height = -height;
            top -= height;
          }

          break;

        case ACTION_SOUTH_EAST:
          if (aspectRatio) {
            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {
              renderable = false;
              break;
            }

            check(ACTION_EAST);
            width += range.x;
            height = width / aspectRatio;
          } else {
            check(ACTION_SOUTH);
            check(ACTION_EAST);

            if (range.x >= 0) {
              if (right < maxWidth) {
                width += range.x;
              } else if (range.y >= 0 && bottom >= maxHeight) {
                renderable = false;
              }
            } else {
              width += range.x;
            }

            if (range.y >= 0) {
              if (bottom < maxHeight) {
                height += range.y;
              }
            } else {
              height += range.y;
            }
          }

          if (width < 0 && height < 0) {
            action = ACTION_NORTH_WEST;
            height = -height;
            width = -width;
            top -= height;
            left -= width;
          } else if (width < 0) {
            action = ACTION_SOUTH_WEST;
            width = -width;
            left -= width;
          } else if (height < 0) {
            action = ACTION_NORTH_EAST;
            height = -height;
            top -= height;
          }

          break;
        // Move canvas

        case ACTION_MOVE:
          this.move(range.x, range.y);
          renderable = false;
          break;
        // Zoom canvas

        case ACTION_ZOOM:
          this.zoom(getMaxZoomRatio(pointers), event);
          renderable = false;
          break;
        // Create crop box

        case ACTION_CROP:
          if (!range.x || !range.y) {
            renderable = false;
            break;
          }

          offset = getOffset(this.cropper);
          left = pointer.startX - offset.left;
          top = pointer.startY - offset.top;
          width = cropBoxData.minWidth;
          height = cropBoxData.minHeight;

          if (range.x > 0) {
            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;
          } else if (range.x < 0) {
            left -= width;
            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;
          }

          if (range.y < 0) {
            top -= height;
          } // Show the crop box if is hidden


          if (!this.cropped) {
            removeClass$1(this.cropBox, CLASS_HIDDEN);
            this.cropped = true;

            if (this.limited) {
              this.limitCropBox(true, true);
            }
          }

          break;
      }

      if (renderable) {
        cropBoxData.width = width;
        cropBoxData.height = height;
        cropBoxData.left = left;
        cropBoxData.top = top;
        this.action = action;
        this.renderCropBox();
      } // Override


      forEach(pointers, function (p) {
        p.startX = p.endX;
        p.startY = p.endY;
      });
    }
  };

  var methods = {
    // Show the crop box manually
    crop: function crop() {
      if (this.ready && !this.cropped && !this.disabled) {
        this.cropped = true;
        this.limitCropBox(true, true);

        if (this.options.modal) {
          addClass$1(this.dragBox, CLASS_MODAL);
        }

        removeClass$1(this.cropBox, CLASS_HIDDEN);
        this.setCropBoxData(this.initialCropBoxData);
      }

      return this;
    },
    // Reset the image and crop box to their initial states
    reset: function reset() {
      if (this.ready && !this.disabled) {
        this.imageData = assign({}, this.initialImageData);
        this.canvasData = assign({}, this.initialCanvasData);
        this.cropBoxData = assign({}, this.initialCropBoxData);
        this.renderCanvas();

        if (this.cropped) {
          this.renderCropBox();
        }
      }

      return this;
    },
    // Clear the crop box
    clear: function clear() {
      if (this.cropped && !this.disabled) {
        assign(this.cropBoxData, {
          left: 0,
          top: 0,
          width: 0,
          height: 0
        });
        this.cropped = false;
        this.renderCropBox();
        this.limitCanvas(true, true); // Render canvas after crop box rendered

        this.renderCanvas();
        removeClass$1(this.dragBox, CLASS_MODAL);
        addClass$1(this.cropBox, CLASS_HIDDEN);
      }

      return this;
    },

    /**
     * Replace the image's src and rebuild the cropper
     * @param {string} url - The new URL.
     * @param {boolean} [hasSameSize] - Indicate if the new image has the same size as the old one.
     * @returns {Cropper} this
     */
    replace: function replace(url) {
      var hasSameSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!this.disabled && url) {
        if (this.isImg) {
          this.element.src = url;
        }

        if (hasSameSize) {
          this.url = url;
          this.image.src = url;

          if (this.ready) {
            this.viewBoxImage.src = url;
            forEach(this.previews, function (element) {
              element.getElementsByTagName('img')[0].src = url;
            });
          }
        } else {
          if (this.isImg) {
            this.replaced = true;
          }

          this.options.data = null;
          this.uncreate();
          this.load(url);
        }
      }

      return this;
    },
    // Enable (unfreeze) the cropper
    enable: function enable() {
      if (this.ready && this.disabled) {
        this.disabled = false;
        removeClass$1(this.cropper, CLASS_DISABLED);
      }

      return this;
    },
    // Disable (freeze) the cropper
    disable: function disable() {
      if (this.ready && !this.disabled) {
        this.disabled = true;
        addClass$1(this.cropper, CLASS_DISABLED);
      }

      return this;
    },

    /**
     * Destroy the cropper and remove the instance from the image
     * @returns {Cropper} this
     */
    destroy: function destroy() {
      var element = this.element;

      if (!element[NAMESPACE]) {
        return this;
      }

      element[NAMESPACE] = undefined;

      if (this.isImg && this.replaced) {
        element.src = this.originalUrl;
      }

      this.uncreate();
      return this;
    },

    /**
     * Move the canvas with relative offsets
     * @param {number} offsetX - The relative offset distance on the x-axis.
     * @param {number} [offsetY=offsetX] - The relative offset distance on the y-axis.
     * @returns {Cropper} this
     */
    move: function move(offsetX) {
      var offsetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : offsetX;
      var _this$canvasData = this.canvasData,
          left = _this$canvasData.left,
          top = _this$canvasData.top;
      return this.moveTo(isUndefined$1(offsetX) ? offsetX : left + Number(offsetX), isUndefined$1(offsetY) ? offsetY : top + Number(offsetY));
    },

    /**
     * Move the canvas to an absolute point
     * @param {number} x - The x-axis coordinate.
     * @param {number} [y=x] - The y-axis coordinate.
     * @returns {Cropper} this
     */
    moveTo: function moveTo(x) {
      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;
      var canvasData = this.canvasData;
      var changed = false;
      x = Number(x);
      y = Number(y);

      if (this.ready && !this.disabled && this.options.movable) {
        if (isNumber$1(x)) {
          canvasData.left = x;
          changed = true;
        }

        if (isNumber$1(y)) {
          canvasData.top = y;
          changed = true;
        }

        if (changed) {
          this.renderCanvas(true);
        }
      }

      return this;
    },

    /**
     * Zoom the canvas with a relative ratio
     * @param {number} ratio - The target ratio.
     * @param {Event} _originalEvent - The original event if any.
     * @returns {Cropper} this
     */
    zoom: function zoom(ratio, _originalEvent) {
      var canvasData = this.canvasData;
      ratio = Number(ratio);

      if (ratio < 0) {
        ratio = 1 / (1 - ratio);
      } else {
        ratio = 1 + ratio;
      }

      return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);
    },

    /**
     * Zoom the canvas to an absolute ratio
     * @param {number} ratio - The target ratio.
     * @param {Object} pivot - The zoom pivot point coordinate.
     * @param {Event} _originalEvent - The original event if any.
     * @returns {Cropper} this
     */
    zoomTo: function zoomTo(ratio, pivot, _originalEvent) {
      var options = this.options,
          canvasData = this.canvasData;
      var width = canvasData.width,
          height = canvasData.height,
          naturalWidth = canvasData.naturalWidth,
          naturalHeight = canvasData.naturalHeight;
      ratio = Number(ratio);

      if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {
        var newWidth = naturalWidth * ratio;
        var newHeight = naturalHeight * ratio;

        if (dispatchEvent(this.element, EVENT_ZOOM, {
          ratio: ratio,
          oldRatio: width / naturalWidth,
          originalEvent: _originalEvent
        }) === false) {
          return this;
        }

        if (_originalEvent) {
          var pointers = this.pointers;
          var offset = getOffset(this.cropper);
          var center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {
            pageX: _originalEvent.pageX,
            pageY: _originalEvent.pageY
          }; // Zoom from the triggering point of the event

          canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);
          canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);
        } else if (isPlainObject(pivot) && isNumber$1(pivot.x) && isNumber$1(pivot.y)) {
          canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);
          canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);
        } else {
          // Zoom from the center of the canvas
          canvasData.left -= (newWidth - width) / 2;
          canvasData.top -= (newHeight - height) / 2;
        }

        canvasData.width = newWidth;
        canvasData.height = newHeight;
        this.renderCanvas(true);
      }

      return this;
    },

    /**
     * Rotate the canvas with a relative degree
     * @param {number} degree - The rotate degree.
     * @returns {Cropper} this
     */
    rotate: function rotate(degree) {
      return this.rotateTo((this.imageData.rotate || 0) + Number(degree));
    },

    /**
     * Rotate the canvas to an absolute degree
     * @param {number} degree - The rotate degree.
     * @returns {Cropper} this
     */
    rotateTo: function rotateTo(degree) {
      degree = Number(degree);

      if (isNumber$1(degree) && this.ready && !this.disabled && this.options.rotatable) {
        this.imageData.rotate = degree % 360;
        this.renderCanvas(true, true);
      }

      return this;
    },

    /**
     * Scale the image on the x-axis.
     * @param {number} scaleX - The scale ratio on the x-axis.
     * @returns {Cropper} this
     */
    scaleX: function scaleX(_scaleX) {
      var scaleY = this.imageData.scaleY;
      return this.scale(_scaleX, isNumber$1(scaleY) ? scaleY : 1);
    },

    /**
     * Scale the image on the y-axis.
     * @param {number} scaleY - The scale ratio on the y-axis.
     * @returns {Cropper} this
     */
    scaleY: function scaleY(_scaleY) {
      var scaleX = this.imageData.scaleX;
      return this.scale(isNumber$1(scaleX) ? scaleX : 1, _scaleY);
    },

    /**
     * Scale the image
     * @param {number} scaleX - The scale ratio on the x-axis.
     * @param {number} [scaleY=scaleX] - The scale ratio on the y-axis.
     * @returns {Cropper} this
     */
    scale: function scale(scaleX) {
      var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;
      var imageData = this.imageData;
      var transformed = false;
      scaleX = Number(scaleX);
      scaleY = Number(scaleY);

      if (this.ready && !this.disabled && this.options.scalable) {
        if (isNumber$1(scaleX)) {
          imageData.scaleX = scaleX;
          transformed = true;
        }

        if (isNumber$1(scaleY)) {
          imageData.scaleY = scaleY;
          transformed = true;
        }

        if (transformed) {
          this.renderCanvas(true, true);
        }
      }

      return this;
    },

    /**
     * Get the cropped area position and size data (base on the original image)
     * @param {boolean} [rounded=false] - Indicate if round the data values or not.
     * @returns {Object} The result cropped data.
     */
    getData: function getData() {
      var rounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var options = this.options,
          imageData = this.imageData,
          canvasData = this.canvasData,
          cropBoxData = this.cropBoxData;
      var data;

      if (this.ready && this.cropped) {
        data = {
          x: cropBoxData.left - canvasData.left,
          y: cropBoxData.top - canvasData.top,
          width: cropBoxData.width,
          height: cropBoxData.height
        };
        var ratio = imageData.width / imageData.naturalWidth;
        forEach(data, function (n, i) {
          data[i] = n / ratio;
        });

        if (rounded) {
          // In case rounding off leads to extra 1px in right or bottom border
          // we should round the top-left corner and the dimension (#343).
          var bottom = Math.round(data.y + data.height);
          var right = Math.round(data.x + data.width);
          data.x = Math.round(data.x);
          data.y = Math.round(data.y);
          data.width = right - data.x;
          data.height = bottom - data.y;
        }
      } else {
        data = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
      }

      if (options.rotatable) {
        data.rotate = imageData.rotate || 0;
      }

      if (options.scalable) {
        data.scaleX = imageData.scaleX || 1;
        data.scaleY = imageData.scaleY || 1;
      }

      return data;
    },

    /**
     * Set the cropped area position and size with new data
     * @param {Object} data - The new data.
     * @returns {Cropper} this
     */
    setData: function setData(data) {
      var options = this.options,
          imageData = this.imageData,
          canvasData = this.canvasData;
      var cropBoxData = {};

      if (this.ready && !this.disabled && isPlainObject(data)) {
        var transformed = false;

        if (options.rotatable) {
          if (isNumber$1(data.rotate) && data.rotate !== imageData.rotate) {
            imageData.rotate = data.rotate;
            transformed = true;
          }
        }

        if (options.scalable) {
          if (isNumber$1(data.scaleX) && data.scaleX !== imageData.scaleX) {
            imageData.scaleX = data.scaleX;
            transformed = true;
          }

          if (isNumber$1(data.scaleY) && data.scaleY !== imageData.scaleY) {
            imageData.scaleY = data.scaleY;
            transformed = true;
          }
        }

        if (transformed) {
          this.renderCanvas(true, true);
        }

        var ratio = imageData.width / imageData.naturalWidth;

        if (isNumber$1(data.x)) {
          cropBoxData.left = data.x * ratio + canvasData.left;
        }

        if (isNumber$1(data.y)) {
          cropBoxData.top = data.y * ratio + canvasData.top;
        }

        if (isNumber$1(data.width)) {
          cropBoxData.width = data.width * ratio;
        }

        if (isNumber$1(data.height)) {
          cropBoxData.height = data.height * ratio;
        }

        this.setCropBoxData(cropBoxData);
      }

      return this;
    },

    /**
     * Get the container size data.
     * @returns {Object} The result container data.
     */
    getContainerData: function getContainerData() {
      return this.ready ? assign({}, this.containerData) : {};
    },

    /**
     * Get the image position and size data.
     * @returns {Object} The result image data.
     */
    getImageData: function getImageData() {
      return this.sized ? assign({}, this.imageData) : {};
    },

    /**
     * Get the canvas position and size data.
     * @returns {Object} The result canvas data.
     */
    getCanvasData: function getCanvasData() {
      var canvasData = this.canvasData;
      var data = {};

      if (this.ready) {
        forEach(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {
          data[n] = canvasData[n];
        });
      }

      return data;
    },

    /**
     * Set the canvas position and size with new data.
     * @param {Object} data - The new canvas data.
     * @returns {Cropper} this
     */
    setCanvasData: function setCanvasData(data) {
      var canvasData = this.canvasData;
      var aspectRatio = canvasData.aspectRatio;

      if (this.ready && !this.disabled && isPlainObject(data)) {
        if (isNumber$1(data.left)) {
          canvasData.left = data.left;
        }

        if (isNumber$1(data.top)) {
          canvasData.top = data.top;
        }

        if (isNumber$1(data.width)) {
          canvasData.width = data.width;
          canvasData.height = data.width / aspectRatio;
        } else if (isNumber$1(data.height)) {
          canvasData.height = data.height;
          canvasData.width = data.height * aspectRatio;
        }

        this.renderCanvas(true);
      }

      return this;
    },

    /**
     * Get the crop box position and size data.
     * @returns {Object} The result crop box data.
     */
    getCropBoxData: function getCropBoxData() {
      var cropBoxData = this.cropBoxData;
      var data;

      if (this.ready && this.cropped) {
        data = {
          left: cropBoxData.left,
          top: cropBoxData.top,
          width: cropBoxData.width,
          height: cropBoxData.height
        };
      }

      return data || {};
    },

    /**
     * Set the crop box position and size with new data.
     * @param {Object} data - The new crop box data.
     * @returns {Cropper} this
     */
    setCropBoxData: function setCropBoxData(data) {
      var cropBoxData = this.cropBoxData;
      var aspectRatio = this.options.aspectRatio;
      var widthChanged;
      var heightChanged;

      if (this.ready && this.cropped && !this.disabled && isPlainObject(data)) {
        if (isNumber$1(data.left)) {
          cropBoxData.left = data.left;
        }

        if (isNumber$1(data.top)) {
          cropBoxData.top = data.top;
        }

        if (isNumber$1(data.width) && data.width !== cropBoxData.width) {
          widthChanged = true;
          cropBoxData.width = data.width;
        }

        if (isNumber$1(data.height) && data.height !== cropBoxData.height) {
          heightChanged = true;
          cropBoxData.height = data.height;
        }

        if (aspectRatio) {
          if (widthChanged) {
            cropBoxData.height = cropBoxData.width / aspectRatio;
          } else if (heightChanged) {
            cropBoxData.width = cropBoxData.height * aspectRatio;
          }
        }

        this.renderCropBox();
      }

      return this;
    },

    /**
     * Get a canvas drawn the cropped image.
     * @param {Object} [options={}] - The config options.
     * @returns {HTMLCanvasElement} - The result canvas.
     */
    getCroppedCanvas: function getCroppedCanvas() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (!this.ready || !window.HTMLCanvasElement) {
        return null;
      }

      var canvasData = this.canvasData;
      var source = getSourceCanvas(this.image, this.imageData, canvasData, options); // Returns the source canvas if it is not cropped.

      if (!this.cropped) {
        return source;
      }

      var _this$getData = this.getData(),
          initialX = _this$getData.x,
          initialY = _this$getData.y,
          initialWidth = _this$getData.width,
          initialHeight = _this$getData.height;

      var ratio = source.width / Math.floor(canvasData.naturalWidth);

      if (ratio !== 1) {
        initialX *= ratio;
        initialY *= ratio;
        initialWidth *= ratio;
        initialHeight *= ratio;
      }

      var aspectRatio = initialWidth / initialHeight;
      var maxSizes = getAdjustedSizes({
        aspectRatio: aspectRatio,
        width: options.maxWidth || Infinity,
        height: options.maxHeight || Infinity
      });
      var minSizes = getAdjustedSizes({
        aspectRatio: aspectRatio,
        width: options.minWidth || 0,
        height: options.minHeight || 0
      }, 'cover');

      var _getAdjustedSizes = getAdjustedSizes({
        aspectRatio: aspectRatio,
        width: options.width || (ratio !== 1 ? source.width : initialWidth),
        height: options.height || (ratio !== 1 ? source.height : initialHeight)
      }),
          width = _getAdjustedSizes.width,
          height = _getAdjustedSizes.height;

      width = Math.min(maxSizes.width, Math.max(minSizes.width, width));
      height = Math.min(maxSizes.height, Math.max(minSizes.height, height));
      var canvas = document.createElement('canvas');
      var context = canvas.getContext('2d');
      canvas.width = normalizeDecimalNumber(width);
      canvas.height = normalizeDecimalNumber(height);
      context.fillStyle = options.fillColor || 'transparent';
      context.fillRect(0, 0, width, height);
      var _options$imageSmoothi = options.imageSmoothingEnabled,
          imageSmoothingEnabled = _options$imageSmoothi === void 0 ? true : _options$imageSmoothi,
          imageSmoothingQuality = options.imageSmoothingQuality;
      context.imageSmoothingEnabled = imageSmoothingEnabled;

      if (imageSmoothingQuality) {
        context.imageSmoothingQuality = imageSmoothingQuality;
      } // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage


      var sourceWidth = source.width;
      var sourceHeight = source.height; // Source canvas parameters

      var srcX = initialX;
      var srcY = initialY;
      var srcWidth;
      var srcHeight; // Destination canvas parameters

      var dstX;
      var dstY;
      var dstWidth;
      var dstHeight;

      if (srcX <= -initialWidth || srcX > sourceWidth) {
        srcX = 0;
        srcWidth = 0;
        dstX = 0;
        dstWidth = 0;
      } else if (srcX <= 0) {
        dstX = -srcX;
        srcX = 0;
        srcWidth = Math.min(sourceWidth, initialWidth + srcX);
        dstWidth = srcWidth;
      } else if (srcX <= sourceWidth) {
        dstX = 0;
        srcWidth = Math.min(initialWidth, sourceWidth - srcX);
        dstWidth = srcWidth;
      }

      if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {
        srcY = 0;
        srcHeight = 0;
        dstY = 0;
        dstHeight = 0;
      } else if (srcY <= 0) {
        dstY = -srcY;
        srcY = 0;
        srcHeight = Math.min(sourceHeight, initialHeight + srcY);
        dstHeight = srcHeight;
      } else if (srcY <= sourceHeight) {
        dstY = 0;
        srcHeight = Math.min(initialHeight, sourceHeight - srcY);
        dstHeight = srcHeight;
      }

      var params = [srcX, srcY, srcWidth, srcHeight]; // Avoid "IndexSizeError"

      if (dstWidth > 0 && dstHeight > 0) {
        var scale = width / initialWidth;
        params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);
      } // All the numerical parameters should be integer for `drawImage`
      // https://github.com/fengyuanchen/cropper/issues/476


      context.drawImage.apply(context, [source].concat(_toConsumableArray(params.map(function (param) {
        return Math.floor(normalizeDecimalNumber(param));
      }))));
      return canvas;
    },

    /**
     * Change the aspect ratio of the crop box.
     * @param {number} aspectRatio - The new aspect ratio.
     * @returns {Cropper} this
     */
    setAspectRatio: function setAspectRatio(aspectRatio) {
      var options = this.options;

      if (!this.disabled && !isUndefined$1(aspectRatio)) {
        // 0 -> NaN
        options.aspectRatio = Math.max(0, aspectRatio) || NaN;

        if (this.ready) {
          this.initCropBox();

          if (this.cropped) {
            this.renderCropBox();
          }
        }
      }

      return this;
    },

    /**
     * Change the drag mode.
     * @param {string} mode - The new drag mode.
     * @returns {Cropper} this
     */
    setDragMode: function setDragMode(mode) {
      var options = this.options,
          dragBox = this.dragBox,
          face = this.face;

      if (this.ready && !this.disabled) {
        var croppable = mode === DRAG_MODE_CROP;
        var movable = options.movable && mode === DRAG_MODE_MOVE;
        mode = croppable || movable ? mode : DRAG_MODE_NONE;
        options.dragMode = mode;
        setData(dragBox, DATA_ACTION, mode);
        toggleClass(dragBox, CLASS_CROP, croppable);
        toggleClass(dragBox, CLASS_MOVE, movable);

        if (!options.cropBoxMovable) {
          // Sync drag mode to crop box when it is not movable
          setData(face, DATA_ACTION, mode);
          toggleClass(face, CLASS_CROP, croppable);
          toggleClass(face, CLASS_MOVE, movable);
        }
      }

      return this;
    }
  };

  var AnotherCropper = WINDOW.Cropper;

  var Cropper = /*#__PURE__*/function () {
    /**
     * Create a new Cropper.
     * @param {Element} element - The target element for cropping.
     * @param {Object} [options={}] - The configuration options.
     */
    function Cropper(element) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Cropper);

      if (!element || !REGEXP_TAG_NAME.test(element.tagName)) {
        throw new Error('The first argument is required and must be an <img> or <canvas> element.');
      }

      this.element = element;
      this.options = assign({}, DEFAULTS, isPlainObject(options) && options);
      this.cropped = false;
      this.disabled = false;
      this.pointers = {};
      this.ready = false;
      this.reloading = false;
      this.replaced = false;
      this.sized = false;
      this.sizing = false;
      this.init();
    }

    _createClass(Cropper, [{
      key: "init",
      value: function init() {
        var element = this.element;
        var tagName = element.tagName.toLowerCase();
        var url;

        if (element[NAMESPACE]) {
          return;
        }

        element[NAMESPACE] = this;

        if (tagName === 'img') {
          this.isImg = true; // e.g.: "img/picture.jpg"

          url = element.getAttribute('src') || '';
          this.originalUrl = url; // Stop when it's a blank image

          if (!url) {
            return;
          } // e.g.: "https://example.com/img/picture.jpg"


          url = element.src;
        } else if (tagName === 'canvas' && window.HTMLCanvasElement) {
          url = element.toDataURL();
        }

        this.load(url);
      }
    }, {
      key: "load",
      value: function load(url) {
        var _this = this;

        if (!url) {
          return;
        }

        this.url = url;
        this.imageData = {};
        var element = this.element,
            options = this.options;

        if (!options.rotatable && !options.scalable) {
          options.checkOrientation = false;
        } // Only IE10+ supports Typed Arrays


        if (!options.checkOrientation || !window.ArrayBuffer) {
          this.clone();
          return;
        } // Detect the mime type of the image directly if it is a Data URL


        if (REGEXP_DATA_URL.test(url)) {
          // Read ArrayBuffer from Data URL of JPEG images directly for better performance
          if (REGEXP_DATA_URL_JPEG.test(url)) {
            this.read(dataURLToArrayBuffer(url));
          } else {
            // Only a JPEG image may contains Exif Orientation information,
            // the rest types of Data URLs are not necessary to check orientation at all.
            this.clone();
          }

          return;
        } // 1. Detect the mime type of the image by a XMLHttpRequest.
        // 2. Load the image as ArrayBuffer for reading orientation if its a JPEG image.


        var xhr = new XMLHttpRequest();
        var clone = this.clone.bind(this);
        this.reloading = true;
        this.xhr = xhr; // 1. Cross origin requests are only supported for protocol schemes:
        // http, https, data, chrome, chrome-extension.
        // 2. Access to XMLHttpRequest from a Data URL will be blocked by CORS policy
        // in some browsers as IE11 and Safari.

        xhr.onabort = clone;
        xhr.onerror = clone;
        xhr.ontimeout = clone;

        xhr.onprogress = function () {
          // Abort the request directly if it not a JPEG image for better performance
          if (xhr.getResponseHeader('content-type') !== MIME_TYPE_JPEG) {
            xhr.abort();
          }
        };

        xhr.onload = function () {
          _this.read(xhr.response);
        };

        xhr.onloadend = function () {
          _this.reloading = false;
          _this.xhr = null;
        }; // Bust cache when there is a "crossOrigin" property to avoid browser cache error


        if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {
          url = addTimestamp(url);
        } // The third parameter is required for avoiding side-effect (#682)


        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.withCredentials = element.crossOrigin === 'use-credentials';
        xhr.send();
      }
    }, {
      key: "read",
      value: function read(arrayBuffer) {
        var options = this.options,
            imageData = this.imageData; // Reset the orientation value to its default value 1
        // as some iOS browsers will render image with its orientation

        var orientation = resetAndGetOrientation(arrayBuffer);
        var rotate = 0;
        var scaleX = 1;
        var scaleY = 1;

        if (orientation > 1) {
          // Generate a new URL which has the default orientation value
          this.url = arrayBufferToDataURL(arrayBuffer, MIME_TYPE_JPEG);

          var _parseOrientation = parseOrientation(orientation);

          rotate = _parseOrientation.rotate;
          scaleX = _parseOrientation.scaleX;
          scaleY = _parseOrientation.scaleY;
        }

        if (options.rotatable) {
          imageData.rotate = rotate;
        }

        if (options.scalable) {
          imageData.scaleX = scaleX;
          imageData.scaleY = scaleY;
        }

        this.clone();
      }
    }, {
      key: "clone",
      value: function clone() {
        var element = this.element,
            url = this.url;
        var crossOrigin = element.crossOrigin;
        var crossOriginUrl = url;

        if (this.options.checkCrossOrigin && isCrossOriginURL(url)) {
          if (!crossOrigin) {
            crossOrigin = 'anonymous';
          } // Bust cache when there is not a "crossOrigin" property (#519)


          crossOriginUrl = addTimestamp(url);
        }

        this.crossOrigin = crossOrigin;
        this.crossOriginUrl = crossOriginUrl;
        var image = document.createElement('img');

        if (crossOrigin) {
          image.crossOrigin = crossOrigin;
        }

        image.src = crossOriginUrl || url;
        image.alt = element.alt || 'The image to crop';
        this.image = image;
        image.onload = this.start.bind(this);
        image.onerror = this.stop.bind(this);
        addClass$1(image, CLASS_HIDE);
        element.parentNode.insertBefore(image, element.nextSibling);
      }
    }, {
      key: "start",
      value: function start() {
        var _this2 = this;

        var image = this.image;
        image.onload = null;
        image.onerror = null;
        this.sizing = true; // Match all browsers that use WebKit as the layout engine in iOS devices,
        // such as Safari for iOS, Chrome for iOS, and in-app browsers.

        var isIOSWebKit = WINDOW.navigator && /(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(WINDOW.navigator.userAgent);

        var done = function done(naturalWidth, naturalHeight) {
          assign(_this2.imageData, {
            naturalWidth: naturalWidth,
            naturalHeight: naturalHeight,
            aspectRatio: naturalWidth / naturalHeight
          });
          _this2.initialImageData = assign({}, _this2.imageData);
          _this2.sizing = false;
          _this2.sized = true;

          _this2.build();
        }; // Most modern browsers (excepts iOS WebKit)


        if (image.naturalWidth && !isIOSWebKit) {
          done(image.naturalWidth, image.naturalHeight);
          return;
        }

        var sizingImage = document.createElement('img');
        var body = document.body || document.documentElement;
        this.sizingImage = sizingImage;

        sizingImage.onload = function () {
          done(sizingImage.width, sizingImage.height);

          if (!isIOSWebKit) {
            body.removeChild(sizingImage);
          }
        };

        sizingImage.src = image.src; // iOS WebKit will convert the image automatically
        // with its orientation once append it into DOM (#279)

        if (!isIOSWebKit) {
          sizingImage.style.cssText = 'left:0;' + 'max-height:none!important;' + 'max-width:none!important;' + 'min-height:0!important;' + 'min-width:0!important;' + 'opacity:0;' + 'position:absolute;' + 'top:0;' + 'z-index:-1;';
          body.appendChild(sizingImage);
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        var image = this.image;
        image.onload = null;
        image.onerror = null;
        image.parentNode.removeChild(image);
        this.image = null;
      }
    }, {
      key: "build",
      value: function build() {
        if (!this.sized || this.ready) {
          return;
        }

        var element = this.element,
            options = this.options,
            image = this.image; // Create cropper elements

        var container = element.parentNode;
        var template = document.createElement('div');
        template.innerHTML = TEMPLATE;
        var cropper = template.querySelector(".".concat(NAMESPACE, "-container"));
        var canvas = cropper.querySelector(".".concat(NAMESPACE, "-canvas"));
        var dragBox = cropper.querySelector(".".concat(NAMESPACE, "-drag-box"));
        var cropBox = cropper.querySelector(".".concat(NAMESPACE, "-crop-box"));
        var face = cropBox.querySelector(".".concat(NAMESPACE, "-face"));
        this.container = container;
        this.cropper = cropper;
        this.canvas = canvas;
        this.dragBox = dragBox;
        this.cropBox = cropBox;
        this.viewBox = cropper.querySelector(".".concat(NAMESPACE, "-view-box"));
        this.face = face;
        canvas.appendChild(image); // Hide the original image

        addClass$1(element, CLASS_HIDDEN); // Inserts the cropper after to the current image

        container.insertBefore(cropper, element.nextSibling); // Show the image if is hidden

        if (!this.isImg) {
          removeClass$1(image, CLASS_HIDE);
        }

        this.initPreview();
        this.bind();
        options.initialAspectRatio = Math.max(0, options.initialAspectRatio) || NaN;
        options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;
        options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;
        addClass$1(cropBox, CLASS_HIDDEN);

        if (!options.guides) {
          addClass$1(cropBox.getElementsByClassName("".concat(NAMESPACE, "-dashed")), CLASS_HIDDEN);
        }

        if (!options.center) {
          addClass$1(cropBox.getElementsByClassName("".concat(NAMESPACE, "-center")), CLASS_HIDDEN);
        }

        if (options.background) {
          addClass$1(cropper, "".concat(NAMESPACE, "-bg"));
        }

        if (!options.highlight) {
          addClass$1(face, CLASS_INVISIBLE);
        }

        if (options.cropBoxMovable) {
          addClass$1(face, CLASS_MOVE);
          setData(face, DATA_ACTION, ACTION_ALL);
        }

        if (!options.cropBoxResizable) {
          addClass$1(cropBox.getElementsByClassName("".concat(NAMESPACE, "-line")), CLASS_HIDDEN);
          addClass$1(cropBox.getElementsByClassName("".concat(NAMESPACE, "-point")), CLASS_HIDDEN);
        }

        this.render();
        this.ready = true;
        this.setDragMode(options.dragMode);

        if (options.autoCrop) {
          this.crop();
        }

        this.setData(options.data);

        if (isFunction$1(options.ready)) {
          addListener(element, EVENT_READY, options.ready, {
            once: true
          });
        }

        dispatchEvent(element, EVENT_READY);
      }
    }, {
      key: "unbuild",
      value: function unbuild() {
        if (!this.ready) {
          return;
        }

        this.ready = false;
        this.unbind();
        this.resetPreview();
        this.cropper.parentNode.removeChild(this.cropper);
        removeClass$1(this.element, CLASS_HIDDEN);
      }
    }, {
      key: "uncreate",
      value: function uncreate() {
        if (this.ready) {
          this.unbuild();
          this.ready = false;
          this.cropped = false;
        } else if (this.sizing) {
          this.sizingImage.onload = null;
          this.sizing = false;
          this.sized = false;
        } else if (this.reloading) {
          this.xhr.onabort = null;
          this.xhr.abort();
        } else if (this.image) {
          this.stop();
        }
      }
      /**
       * Get the no conflict cropper class.
       * @returns {Cropper} The cropper class.
       */

    }], [{
      key: "noConflict",
      value: function noConflict() {
        window.Cropper = AnotherCropper;
        return Cropper;
      }
      /**
       * Change the default options.
       * @param {Object} options - The new default options.
       */

    }, {
      key: "setDefaults",
      value: function setDefaults(options) {
        assign(DEFAULTS, isPlainObject(options) && options);
      }
    }]);

    return Cropper;
  }();

  assign(Cropper.prototype, render$1, preview, events, handlers, change, methods);

  /*
  Copyright (c) 2019 Daybrush
  name: framework-utils
  license: MIT
  author: Daybrush
  repository: git+https://github.com/daybrush/framework-utils.git
  version: 0.3.4
  */
  function prefixNames(prefix) {
    var classNames = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      classNames[_i - 1] = arguments[_i];
    }

    return classNames.map(function (className) {
      return className.split(" ").map(function (name) {
        return name ? "" + prefix + name : "";
      }).join(" ");
    }).join(" ");
  }
  function prefixCSS(prefix, css) {
    return css.replace(/([^}{]*){/mg, function (_, selector) {
      return selector.replace(/\.([^{,\s\d.]+)/g, "." + prefix + "$1") + "{";
    });
  }
  /* react */

  function ref(target, name) {
    return function (e) {
      e && (target[name] = e);
    };
  }
  function refs(target, name, i) {
    return function (e) {
      e && (target[name][i] = e);
    };
  }
  /* Class Decorator */

  function Properties(properties, action) {
    return function (component) {
      var prototype = component.prototype;
      properties.forEach(function (property) {
        action(prototype, property);
      });
    };
  }
  /* Property Decorator */

  function withMethods(methods, duplicate) {
    if (duplicate === void 0) {
      duplicate = {};
    }

    return function (prototype, propertyName) {
      methods.forEach(function (name) {
        var methodName = duplicate[name] || name;

        if (prototype[methodName]) {
          return;
        }

        prototype[methodName] = function () {
          var _a;

          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          var result = (_a = this[propertyName])[name].apply(_a, args);

          if (result === this[propertyName]) {
            return this;
          } else {
            return result;
          }
        };
      });
    };
  }

  /*
  Copyright (c) 2019-present NAVER Corp.
  name: @egjs/list-differ
  license: MIT
  author: NAVER Corp.
  repository: https://github.com/naver/egjs-list-differ
  version: 1.0.0
  */
  /*
  egjs-list-differ
  Copyright (c) 2019-present NAVER Corp.
  MIT license
  */
  var PolyMap =
  /*#__PURE__*/
  function () {
    function PolyMap() {
      this.keys = [];
      this.values = [];
    }

    var __proto = PolyMap.prototype;

    __proto.get = function (key) {
      return this.values[this.keys.indexOf(key)];
    };

    __proto.set = function (key, value) {
      var keys = this.keys;
      var values = this.values;
      var prevIndex = keys.indexOf(key);
      var index = prevIndex === -1 ? keys.length : prevIndex;
      keys[index] = key;
      values[index] = value;
    };

    return PolyMap;
  }();

  /*
  egjs-list-differ
  Copyright (c) 2019-present NAVER Corp.
  MIT license
  */
  var HashMap =
  /*#__PURE__*/
  function () {
    function HashMap() {
      this.object = {};
    }

    var __proto = HashMap.prototype;

    __proto.get = function (key) {
      return this.object[key];
    };

    __proto.set = function (key, value) {
      this.object[key] = value;
    };

    return HashMap;
  }();

  /*
  egjs-list-differ
  Copyright (c) 2019-present NAVER Corp.
  MIT license
  */
  var SUPPORT_MAP = typeof Map === "function";

  /*
  egjs-list-differ
  Copyright (c) 2019-present NAVER Corp.
  MIT license
  */
  var Link =
  /*#__PURE__*/
  function () {
    function Link() {}

    var __proto = Link.prototype;

    __proto.connect = function (prevLink, nextLink) {
      this.prev = prevLink;
      this.next = nextLink;
      prevLink && (prevLink.next = this);
      nextLink && (nextLink.prev = this);
    };

    __proto.disconnect = function () {
      // In double linked list, diconnect the interconnected relationship.
      var prevLink = this.prev;
      var nextLink = this.next;
      prevLink && (prevLink.next = nextLink);
      nextLink && (nextLink.prev = prevLink);
    };

    __proto.getIndex = function () {
      var link = this;
      var index = -1;

      while (link) {
        link = link.prev;
        ++index;
      }

      return index;
    };

    return Link;
  }();

  /*
  egjs-list-differ
  Copyright (c) 2019-present NAVER Corp.
  MIT license
  */

  function orderChanged(changed, fixed) {
    // It is roughly in the order of these examples.
    // 4, 6, 0, 2, 1, 3, 5, 7
    var fromLinks = []; // 0, 1, 2, 3, 4, 5, 6, 7

    var toLinks = [];
    changed.forEach(function (_a) {
      var from = _a[0],
          to = _a[1];
      var link = new Link();
      fromLinks[from] = link;
      toLinks[to] = link;
    }); // `fromLinks` are connected to each other by double linked list.

    fromLinks.forEach(function (link, i) {
      link.connect(fromLinks[i - 1]);
    });
    return changed.filter(function (_, i) {
      return !fixed[i];
    }).map(function (_a, i) {
      var from = _a[0],
          to = _a[1];

      if (from === to) {
        return [0, 0];
      }

      var fromLink = fromLinks[from];
      var toLink = toLinks[to - 1];
      var fromIndex = fromLink.getIndex(); // Disconnect the link connected to `fromLink`.

      fromLink.disconnect(); // Connect `fromLink` to the right of `toLink`.

      if (!toLink) {
        fromLink.connect(undefined, fromLinks[0]);
      } else {
        fromLink.connect(toLink, toLink.next);
      }

      var toIndex = fromLink.getIndex();
      return [fromIndex, toIndex];
    });
  }

  var Result =
  /*#__PURE__*/
  function () {
    function Result(prevList, list, added, removed, changed, maintained, changedBeforeAdded, fixed) {
      this.prevList = prevList;
      this.list = list;
      this.added = added;
      this.removed = removed;
      this.changed = changed;
      this.maintained = maintained;
      this.changedBeforeAdded = changedBeforeAdded;
      this.fixed = fixed;
    }

    var __proto = Result.prototype;
    Object.defineProperty(__proto, "ordered", {
      get: function () {
        if (!this.cacheOrdered) {
          this.caculateOrdered();
        }

        return this.cacheOrdered;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(__proto, "pureChanged", {
      get: function () {
        if (!this.cachePureChanged) {
          this.caculateOrdered();
        }

        return this.cachePureChanged;
      },
      enumerable: true,
      configurable: true
    });

    __proto.caculateOrdered = function () {
      var ordered = orderChanged(this.changedBeforeAdded, this.fixed);
      var changed = this.changed;
      var pureChanged = [];
      this.cacheOrdered = ordered.filter(function (_a, i) {
        var from = _a[0],
            to = _a[1];
        var _b = changed[i],
            fromBefore = _b[0],
            toBefore = _b[1];

        if (from !== to) {
          pureChanged.push([fromBefore, toBefore]);
          return true;
        }
      });
      this.cachePureChanged = pureChanged;
    };

    return Result;
  }();

  /**
   *
   * @memberof eg.ListDiffer
   * @static
   * @function
   * @param - Previous List <ko> 이전 목록 </ko>
   * @param - List to Update <ko> 업데이트 할 목록 </ko>
   * @param - This callback function returns the key of the item. <ko> 아이템의 키를 반환하는 콜백 함수입니다.</ko>
   * @return - Returns the diff between `prevList` and `list` <ko> `prevList`와 `list`의 다른 점을 반환한다.</ko>
   * @example
   * import { diff } from "@egjs/list-differ";
   * // script => eg.ListDiffer.diff
   * const result = diff([0, 1, 2, 3, 4, 5], [7, 8, 0, 4, 3, 6, 2, 1], e => e);
   * // List before update
   * // [1, 2, 3, 4, 5]
   * console.log(result.prevList);
   * // Updated list
   * // [4, 3, 6, 2, 1]
   * console.log(result.list);
   * // Index array of values added to `list`
   * // [0, 1, 5]
   * console.log(result.added);
   * // Index array of values removed in `prevList`
   * // [5]
   * console.log(result.removed);
   * // An array of index pairs of `prevList` and `list` with different indexes from `prevList` and `list`
   * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]
   * console.log(result.changed);
   * // The subset of `changed` and an array of index pairs that moved data directly. Indicate an array of absolute index pairs of `ordered`.(Formatted by: Array<[index of prevList, index of list]>)
   * // [[4, 3], [3, 4], [2, 6]]
   * console.log(result.pureChanged);
   * // An array of index pairs to be `ordered` that can synchronize `list` before adding data. (Formatted by: Array<[prevIndex, nextIndex]>)
   * // [[4, 1], [4, 2], [4, 3]]
   * console.log(result.ordered);
   * // An array of index pairs of `prevList` and `list` that have not been added/removed so data is preserved
   * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]
   * console.log(result.maintained);
   */

  function diff$1(prevList, list, findKeyCallback) {
    var mapClass = SUPPORT_MAP ? Map : findKeyCallback ? HashMap : PolyMap;

    var callback = findKeyCallback || function (e) {
      return e;
    };

    var added = [];
    var removed = [];
    var maintained = [];
    var prevKeys = prevList.map(callback);
    var keys = list.map(callback);
    var prevKeyMap = new mapClass();
    var keyMap = new mapClass();
    var changedBeforeAdded = [];
    var fixed = [];
    var removedMap = {};
    var changed = [];
    var addedCount = 0;
    var removedCount = 0; // Add prevKeys and keys to the hashmap.

    prevKeys.forEach(function (key, prevListIndex) {
      prevKeyMap.set(key, prevListIndex);
    });
    keys.forEach(function (key, listIndex) {
      keyMap.set(key, listIndex);
    }); // Compare `prevKeys` and `keys` and add them to `removed` if they are not in `keys`.

    prevKeys.forEach(function (key, prevListIndex) {
      var listIndex = keyMap.get(key); // In prevList, but not in list, it is removed.

      if (typeof listIndex === "undefined") {
        ++removedCount;
        removed.push(prevListIndex);
      } else {
        removedMap[listIndex] = removedCount;
      }
    }); // Compare `prevKeys` and `keys` and add them to `added` if they are not in `prevKeys`.

    keys.forEach(function (key, listIndex) {
      var prevListIndex = prevKeyMap.get(key); // In list, but not in prevList, it is added.

      if (typeof prevListIndex === "undefined") {
        added.push(listIndex);
        ++addedCount;
      } else {
        maintained.push([prevListIndex, listIndex]);
        removedCount = removedMap[listIndex] || 0;
        changedBeforeAdded.push([prevListIndex - removedCount, listIndex - addedCount]);
        fixed.push(listIndex === prevListIndex);

        if (prevListIndex !== listIndex) {
          changed.push([prevListIndex, listIndex]);
        }
      }
    }); // Sort by ascending order of 'to(list's index).

    removed.reverse();
    return new Result(prevList, list, added, removed, changed, maintained, changedBeforeAdded, fixed);
  }

  /**
   * A module that checks diff when values are added, removed, or changed in an array.
   * @ko 배열 또는 오브젝트에서 값이 추가되거나 삭제되거나 순서가 변경사항을 체크하는 모듈입니다.
   * @memberof eg
   */

  var ListDiffer =
  /*#__PURE__*/
  function () {
    /**
     * @param - Initializing Data Array. <ko> 초기 설정할 데이터 배열.</ko>
     * @param - This callback function returns the key of the item. <ko> 아이템의 키를 반환하는 콜백 함수입니다.</ko>
     * @example
     * import ListDiffer from "@egjs/list-differ";
     * // script => eg.ListDiffer
     * const differ = new ListDiffer([0, 1, 2, 3, 4, 5], e => e);
     * const result = differ.update([7, 8, 0, 4, 3, 6, 2, 1]);
     * // List before update
     * // [1, 2, 3, 4, 5]
     * console.log(result.prevList);
     * // Updated list
     * // [4, 3, 6, 2, 1]
     * console.log(result.list);
     * // Index array of values added to `list`.
     * // [0, 1, 5]
     * console.log(result.added);
     * // Index array of values removed in `prevList`.
     * // [5]
     * console.log(result.removed);
     * // An array of index pairs of `prevList` and `list` with different indexes from `prevList` and `list`.
     * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]
     * console.log(result.changed);
     * // The subset of `changed` and an array of index pairs that moved data directly. Indicate an array of absolute index pairs of `ordered`.(Formatted by: Array<[index of prevList, index of list]>)
     * // [[4, 3], [3, 4], [2, 6]]
     * console.log(result.pureChanged);
     * // An array of index pairs to be `ordered` that can synchronize `list` before adding data. (Formatted by: Array<[prevIndex, nextIndex]>)
     * // [[4, 1], [4, 2], [4, 3]]
     * console.log(result.ordered);
     * // An array of index pairs of `prevList` and `list` that have not been added/removed so data is preserved.
     * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]
     * console.log(result.maintained);
     */
    function ListDiffer(list, findKeyCallback) {
      if (list === void 0) {
        list = [];
      }

      this.findKeyCallback = findKeyCallback;
      this.list = [].slice.call(list);
    }
    /**
     * Update list.
     * @ko 리스트를 업데이트를 합니다.
     * @param - List to update <ko> 업데이트할 리스트 </ko>
     * @return - Returns the results of an update from `prevList` to `list`.<ko> `prevList`에서 `list`로 업데이트한 결과를 반환한다. </ko>
     */


    var __proto = ListDiffer.prototype;

    __proto.update = function (list) {
      var newData = [].slice.call(list);
      var result = diff$1(this.list, newData, this.findKeyCallback);
      this.list = newData;
      return result;
    };

    return ListDiffer;
  }();

  /*
  Copyright (c) 2018 Daybrush
  @name: @daybrush/utils
  license: MIT
  author: Daybrush
  repository: https://github.com/daybrush/utils
  @version 1.4.0
  */
  /**
  * get string "function"
  * @memberof Consts
  * @example
  import {FUNCTION} from "@daybrush/utils";

  console.log(FUNCTION); // "function"
  */

  var FUNCTION = "function";
  /**
  * get string "object"
  * @memberof Consts
  * @example
  import {OBJECT} from "@daybrush/utils";

  console.log(OBJECT); // "object"
  */

  var OBJECT = "object";
  /**
  * get string "string"
  * @memberof Consts
  * @example
  import {STRING} from "@daybrush/utils";

  console.log(STRING); // "string"
  */

  var STRING = "string";
  /**
  * get string "number"
  * @memberof Consts
  * @example
  import {NUMBER} from "@daybrush/utils";

  console.log(NUMBER); // "number"
  */

  var NUMBER = "number";
  /**
  * get string "undefined"
  * @memberof Consts
  * @example
  import {UNDEFINED} from "@daybrush/utils";

  console.log(UNDEFINED); // "undefined"
  */

  var UNDEFINED = "undefined";
  var OPEN_CLOSED_CHARACTER = ["\"", "'", "\\\"", "\\'"];
  var TINY_NUM$1 = 0.0000001;
  var DEFAULT_UNIT_PRESETS = {
    "cm": function (pos) {
      return pos * 96 / 2.54;
    },
    "mm": function (pos) {
      return pos * 96 / 254;
    },
    "in": function (pos) {
      return pos * 96;
    },
    "pt": function (pos) {
      return pos * 96 / 72;
    },
    "pc": function (pos) {
      return pos * 96 / 6;
    },
    "%": function (pos, size) {
      return pos * size / 100;
    },
    "vw": function (pos, size) {
      if (size === void 0) {
        size = window.innerWidth;
      }

      return pos / 100 * size;
    },
    "vh": function (pos, size) {
      if (size === void 0) {
        size = window.innerHeight;
      }

      return pos / 100 * size;
    },
    "vmax": function (pos, size) {
      if (size === void 0) {
        size = Math.max(window.innerWidth, window.innerHeight);
      }

      return pos / 100 * size;
    },
    "vmin": function (pos, size) {
      if (size === void 0) {
        size = Math.min(window.innerWidth, window.innerHeight);
      }

      return pos / 100 * size;
    }
  };

  /**
  * @namespace
  * @name Utils
  */

  /**
   * Returns the inner product of two numbers(`a1`, `a2`) by two criteria(`b1`, `b2`).
   * @memberof Utils
   * @param - The first number
   * @param - The second number
   * @param - The first number to base on the inner product
   * @param - The second number to base on the inner product
   * @return - Returns the inner product
  import { dot } from "@daybrush/utils";

  console.log(dot(0, 15, 2, 3)); // 6
  console.log(dot(5, 15, 2, 3)); // 9
  console.log(dot(5, 15, 1, 1)); // 10
   */

  function dot(a1, a2, b1, b2) {
    return (a1 * b2 + a2 * b1) / (b1 + b2);
  }
  /**
  * Check the type that the value is undefined.
  * @memberof Utils
  * @param {string} value - Value to check the type
  * @return {boolean} true if the type is correct, false otherwise
  * @example
  import {isUndefined} from "@daybrush/utils";

  console.log(isUndefined(undefined)); // true
  console.log(isUndefined("")); // false
  console.log(isUndefined(1)); // false
  console.log(isUndefined(null)); // false
  */

  function isUndefined(value) {
    return typeof value === UNDEFINED;
  }
  /**
  * Check the type that the value is object.
  * @memberof Utils
  * @param {string} value - Value to check the type
  * @return {} true if the type is correct, false otherwise
  * @example
  import {isObject} from "@daybrush/utils";

  console.log(isObject({})); // true
  console.log(isObject(undefined)); // false
  console.log(isObject("")); // false
  console.log(isObject(null)); // false
  */

  function isObject(value) {
    return value && typeof value === OBJECT;
  }
  /**
  * Check the type that the value is isArray.
  * @memberof Utils
  * @param {string} value - Value to check the type
  * @return {} true if the type is correct, false otherwise
  * @example
  import {isArray} from "@daybrush/utils";

  console.log(isArray([])); // true
  console.log(isArray({})); // false
  console.log(isArray(undefined)); // false
  console.log(isArray(null)); // false
  */

  function isArray(value) {
    return Array.isArray(value);
  }
  /**
  * Check the type that the value is string.
  * @memberof Utils
  * @param {string} value - Value to check the type
  * @return {} true if the type is correct, false otherwise
  * @example
  import {isString} from "@daybrush/utils";

  console.log(isString("1234")); // true
  console.log(isString(undefined)); // false
  console.log(isString(1)); // false
  console.log(isString(null)); // false
  */

  function isString(value) {
    return typeof value === STRING;
  }
  function isNumber(value) {
    return typeof value === NUMBER;
  }
  /**
  * Check the type that the value is function.
  * @memberof Utils
  * @param {string} value - Value to check the type
  * @return {} true if the type is correct, false otherwise
  * @example
  import {isFunction} from "@daybrush/utils";

  console.log(isFunction(function a() {})); // true
  console.log(isFunction(() => {})); // true
  console.log(isFunction("1234")); // false
  console.log(isFunction(1)); // false
  console.log(isFunction(null)); // false
  */

  function isFunction(value) {
    return typeof value === FUNCTION;
  }

  function findClosed(closedCharacter, texts, index, length) {
    for (var i = index; i < length; ++i) {
      var character = texts[i].trim();

      if (character === closedCharacter) {
        return i;
      }

      var nextIndex = i;

      if (character === "(") {
        nextIndex = findClosed(")", texts, i + 1, length);
      } else if (OPEN_CLOSED_CHARACTER.indexOf(character) > -1) {
        nextIndex = findClosed(character, texts, i + 1, length);
      }

      if (nextIndex === -1) {
        break;
      }

      i = nextIndex;
    }

    return -1;
  }

  function splitText(text, separator) {
    var regexText = "(\\s*" + (separator || ",") + "\\s*|\\(|\\)|\"|'|\\\\\"|\\\\'|\\s+)";
    var regex = new RegExp(regexText, "g");
    var texts = text.split(regex).filter(Boolean);
    var length = texts.length;
    var values = [];
    var tempValues = [];

    for (var i = 0; i < length; ++i) {
      var character = texts[i].trim();
      var nextIndex = i;

      if (character === "(") {
        nextIndex = findClosed(")", texts, i + 1, length);
      } else if (character === ")") {
        throw new Error("invalid format");
      } else if (OPEN_CLOSED_CHARACTER.indexOf(character) > -1) {
        nextIndex = findClosed(character, texts, i + 1, length);
      } else if (character === separator) {
        if (tempValues.length) {
          values.push(tempValues.join(""));
          tempValues = [];
        }

        continue;
      }

      if (nextIndex === -1) {
        nextIndex = length - 1;
      }

      tempValues.push(texts.slice(i, nextIndex + 1).join(""));
      i = nextIndex;
    }

    if (tempValues.length) {
      values.push(tempValues.join(""));
    }

    return values;
  }
  /**
  * divide text by space.
  * @memberof Utils
  * @param {string} text - text to divide
  * @return {Array} divided texts
  * @example
  import {spliceSpace} from "@daybrush/utils";

  console.log(splitSpace("a b c d e f g"));
  // ["a", "b", "c", "d", "e", "f", "g"]
  console.log(splitSpace("'a,b' c 'd,e' f g"));
  // ["'a,b'", "c", "'d,e'", "f", "g"]
  */

  function splitSpace(text) {
    // divide comma(,)
    return splitText(text, "");
  }
  /**
  * divide text by comma.
  * @memberof Utils
  * @param {string} text - text to divide
  * @return {Array} divided texts
  * @example
  import {splitComma} from "@daybrush/utils";

  console.log(splitComma("a,b,c,d,e,f,g"));
  // ["a", "b", "c", "d", "e", "f", "g"]
  console.log(splitComma("'a,b',c,'d,e',f,g"));
  // ["'a,b'", "c", "'d,e'", "f", "g"]
  */

  function splitComma(text) {
    // divide comma(,)
    // "[^"]*"|'[^']*'
    return splitText(text, ",");
  }
  /**
  * divide text by bracket "(", ")".
  * @memberof Utils
  * @param {string} text - text to divide
  * @return {object} divided texts
  * @example
  import {splitBracket} from "@daybrush/utils";

  console.log(splitBracket("a(1, 2)"));
  // {prefix: "a", value: "1, 2", suffix: ""}
  console.log(splitBracket("a(1, 2)b"));
  // {prefix: "a", value: "1, 2", suffix: "b"}
  */

  function splitBracket(text) {
    var matches = /([^(]*)\(([\s\S]*)\)([\s\S]*)/g.exec(text);

    if (!matches || matches.length < 4) {
      return {};
    } else {
      return {
        prefix: matches[1],
        value: matches[2],
        suffix: matches[3]
      };
    }
  }
  /**
  * divide text by number and unit.
  * @memberof Utils
  * @param {string} text - text to divide
  * @return {} divided texts
  * @example
  import {splitUnit} from "@daybrush/utils";

  console.log(splitUnit("10px"));
  // {prefix: "", value: 10, unit: "px"}
  console.log(splitUnit("-10px"));
  // {prefix: "", value: -10, unit: "px"}
  console.log(splitUnit("a10%"));
  // {prefix: "a", value: 10, unit: "%"}
  */

  function splitUnit(text) {
    var matches = /^([^\d|e|\-|\+]*)((?:\d|\.|-|e-|e\+)+)(\S*)$/g.exec(text);

    if (!matches) {
      return {
        prefix: "",
        unit: "",
        value: NaN
      };
    }

    var prefix = matches[1];
    var value = matches[2];
    var unit = matches[3];
    return {
      prefix: prefix,
      unit: unit,
      value: parseFloat(value)
    };
  }
  /**
  * transform strings to camel-case
  * @memberof Utils
  * @param {String} text - string
  * @return {String} camel-case string
  * @example
  import {camelize} from "@daybrush/utils";

  console.log(camelize("transform-origin")); // transformOrigin
  console.log(camelize("abcd_efg")); // abcdEfg
  console.log(camelize("abcd efg")); // abcdEfg
  */

  function camelize(str) {
    return str.replace(/[\s-_]([a-z])/g, function (all, letter) {
      return letter.toUpperCase();
    });
  }
  /**
  * transform a camelized string into a lowercased string.
  * @memberof Utils
  * @param {string} text - a camel-cased string
  * @param {string} [separator="-"] - a separator
  * @return {string}  a lowercased string
  * @example
  import {decamelize} from "@daybrush/utils";

  console.log(decamelize("transformOrigin")); // transform-origin
  console.log(decamelize("abcdEfg", "_")); // abcd_efg
  */

  function decamelize(str, separator) {
    if (separator === void 0) {
      separator = "-";
    }

    return str.replace(/([a-z])([A-Z])/g, function (all, letter, letter2) {
      return "" + letter + separator + letter2.toLowerCase();
    });
  }
  /**
  * Date.now() method
  * @memberof CrossBrowser
  * @return {number} milliseconds
  * @example
  import {now} from "@daybrush/utils";

  console.log(now()); // 12121324241(milliseconds)
  */

  function now() {
    return Date.now ? Date.now() : new Date().getTime();
  }
  /**
  * Returns the index of the first element in the array that satisfies the provided testing function.
  * @function
  * @memberof CrossBrowser
  * @param - The array `findIndex` was called upon.
  * @param - A function to execute on each value in the array until the function returns true, indicating that the satisfying element was found.
  * @param - Returns defaultIndex if not found by the function.
  * @example
  import { findIndex } from "@daybrush/utils";

  findIndex([{a: 1}, {a: 2}, {a: 3}, {a: 4}], ({ a }) => a === 2); // 1
  */

  function findIndex(arr, callback, defaultIndex) {
    if (defaultIndex === void 0) {
      defaultIndex = -1;
    }

    var length = arr.length;

    for (var i = 0; i < length; ++i) {
      if (callback(arr[i], i, arr)) {
        return i;
      }
    }

    return defaultIndex;
  }
  /**
  * Returns the value of the first element in the array that satisfies the provided testing function.
  * @function
  * @memberof CrossBrowser
  * @param - The array `find` was called upon.
  * @param - A function to execute on each value in the array,
  * @param - Returns defalutValue if not found by the function.
  * @example
  import { find } from "@daybrush/utils";

  find([{a: 1}, {a: 2}, {a: 3}, {a: 4}], ({ a }) => a === 2); // {a: 2}
  */

  function find$1(arr, callback, defalutValue) {
    var index = findIndex(arr, callback);
    return index > -1 ? arr[index] : defalutValue;
  }
  /**
  * @function
  * @memberof Utils
  */

  function getKeys(obj) {
    if (Object.keys) {
      return Object.keys(obj);
    }

    var keys = [];

    for (var name in keys) {
      keys.push(name);
    }

    return keys;
  }
  /**
  * convert unit size to px size
  * @function
  * @memberof Utils
  */

  function convertUnitSize(pos, size) {
    var _a = splitUnit(pos),
        value = _a.value,
        unit = _a.unit;

    if (isObject(size)) {
      var sizeFunction = size[unit];

      if (sizeFunction) {
        if (isFunction(sizeFunction)) {
          return sizeFunction(value);
        } else if (DEFAULT_UNIT_PRESETS[unit]) {
          return DEFAULT_UNIT_PRESETS[unit](value, sizeFunction);
        }
      }
    } else if (unit === "%") {
      return value * size / 100;
    }

    if (DEFAULT_UNIT_PRESETS[unit]) {
      return DEFAULT_UNIT_PRESETS[unit](value);
    }

    return value;
  }
  /**
  * calculate between min, max
  * @function
  * @memberof Utils
  */

  function between(value, min, max) {
    return Math.max(min, Math.min(value, max));
  }
  /**
  * throttle number
  * @function
  * @memberof Utils
  */

  function throttle$1(num, unit) {
    if (!unit) {
      return num;
    }

    return Math.round(num / unit) * unit;
  }
  function checkBoundSize(targetSize, compareSize, isMax) {
    return [[throttle$1(compareSize[0], TINY_NUM$1), throttle$1(compareSize[0] * targetSize[1] / targetSize[0], TINY_NUM$1)], [throttle$1(compareSize[1] * targetSize[0] / targetSize[1], TINY_NUM$1), throttle$1(compareSize[1], TINY_NUM$1)]].filter(function (size) {
      return size.every(function (value, i) {
        return isMax ? value <= compareSize[i] : value >= compareSize[i];
      });
    })[0] || targetSize;
  }
  /**
  * calculate bound size
  * @function
  * @memberof Utils
  */

  function calculateBoundSize(size, minSize, maxSize, keepRatio) {
    if (!keepRatio) {
      return size.map(function (value, i) {
        return between(value, minSize[i], maxSize[i]);
      });
    }

    var width = size[0],
        height = size[1]; // width : height = minWidth : minHeight;

    var _a = checkBoundSize(size, minSize, false),
        minWidth = _a[0],
        minHeight = _a[1];

    var _b = checkBoundSize(size, maxSize, true),
        maxWidth = _b[0],
        maxHeight = _b[1];

    if (width < minWidth || height < minHeight) {
      width = minWidth;
      height = minHeight;
    } else if (width > maxWidth || height > maxHeight) {
      width = maxWidth;
      height = maxHeight;
    }

    return [width, height];
  }
  /**
  * Add all the numbers.
  * @function
  * @memberof Utils
  */

  function sum(nums) {
    var length = nums.length;
    var total = 0;

    for (var i = length - 1; i >= 0; --i) {
      total += nums[i];
    }

    return total;
  }
  /**
  * Average all numbers.
  * @function
  * @memberof Utils
  */

  function average(nums) {
    var length = nums.length;
    var total = 0;

    for (var i = length - 1; i >= 0; --i) {
      total += nums[i];
    }

    return length ? total / length : 0;
  }
  /**
  * Get the angle of two points. (0 <= rad < 359)
  * @function
  * @memberof Utils
  */

  function getRad$1(pos1, pos2) {
    var distX = pos2[0] - pos1[0];
    var distY = pos2[1] - pos1[1];
    var rad = Math.atan2(distY, distX);
    return rad >= 0 ? rad : rad + Math.PI * 2;
  }
  /**
  * Get the average point of all points.
  * @function
  * @memberof Utils
  */

  function getCenterPoint(points) {
    return [0, 1].map(function (i) {
      return average(points.map(function (pos) {
        return pos[i];
      }));
    });
  }
  /**
  * Gets the direction of the shape.
  * @function
  * @memberof Utils
  */

  function getShapeDirection(points) {
    var center = getCenterPoint(points);
    var pos1Rad = getRad$1(center, points[0]);
    var pos2Rad = getRad$1(center, points[1]);
    return pos1Rad < pos2Rad && pos2Rad - pos1Rad < Math.PI || pos1Rad > pos2Rad && pos2Rad - pos1Rad < -Math.PI ? 1 : -1;
  }
  /**
  * Get the distance between two points.
  * @function
  * @memberof Utils
  */

  function getDist$2(a, b) {
    return Math.sqrt(Math.pow((b ? b[0] : 0) - a[0], 2) + Math.pow((b ? b[1] : 0) - a[1], 2));
  }
  /**
  * Checks if the specified class value exists in the element's class attribute.
  * @memberof DOM
  * @param element - target
  * @param className - the class name to search
  * @return {boolean} return false if the class is not found.
  * @example
  import {hasClass} from "@daybrush/utils";

  console.log(hasClass(element, "start")); // true or false
  */

  function hasClass(element, className) {
    if (element.classList) {
      return element.classList.contains(className);
    }

    return !!element.className.match(new RegExp("(\\s|^)" + className + "(\\s|$)"));
  }
  /**
  * Add the specified class value. If these classe already exist in the element's class attribute they are ignored.
  * @memberof DOM
  * @param element - target
  * @param className - the class name to add
  * @example
  import {addClass} from "@daybrush/utils";

  addClass(element, "start");
  */

  function addClass(element, className) {
    if (element.classList) {
      element.classList.add(className);
    } else {
      element.className += " " + className;
    }
  }
  /**
  * Removes the specified class value.
  * @memberof DOM
  * @param element - target
  * @param className - the class name to remove
  * @example
  import {removeClass} from "@daybrush/utils";

  removeClass(element, "start");
  */

  function removeClass(element, className) {
    if (element.classList) {
      element.classList.remove(className);
    } else {
      var reg = new RegExp("(\\s|^)" + className + "(\\s|$)");
      element.className = element.className.replace(reg, " ");
    }
  }
  /**
  * Sets up a function that will be called whenever the specified event is delivered to the target
  * @memberof DOM
  * @param - event target
  * @param - A case-sensitive string representing the event type to listen for.
  * @param - The object which receives a notification (an object that implements the Event interface) when an event of the specified type occurs
  * @param - An options object that specifies characteristics about the event listener. The available options are:
  * @example
  import {addEvent} from "@daybrush/utils";

  addEvent(el, "click", e => {
    console.log(e);
  });
  */

  function addEvent(el, type, listener, options) {
    el.addEventListener(type, listener, options);
  }
  /**
  * removes from the EventTarget an event listener previously registered with EventTarget.addEventListener()
  * @memberof DOM
  * @param - event target
  * @param - A case-sensitive string representing the event type to listen for.
  * @param - The EventListener function of the event handler to remove from the event target.
  * @example
  import {addEvent, removeEvent} from "@daybrush/utils";
  const listener = e => {
    console.log(e);
  };
  addEvent(el, "click", listener);
  removeEvent(el, "click", listener);
  */

  function removeEvent(el, type, listener) {
    el.removeEventListener(type, listener);
  }

  /*
  Copyright (c) Daybrush
  name: react-simple-compat
  license: MIT
  author: Daybrush
  repository: git+https://github.com/daybrush/react-simple-compat.git
  version: 1.1.0
  */

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */

  /* global Reflect, Promise */
  var extendStatics$6 = function (d, b) {
    extendStatics$6 = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics$6(d, b);
  };

  function __extends$6(d, b) {
    extendStatics$6(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  var __assign$6 = function () {
    __assign$6 = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];

        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }

      return t;
    };

    return __assign$6.apply(this, arguments);
  };
  function __rest$2(s, e) {
    var t = {};

    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  }
  function __spreadArrays$4() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

    return r;
  }

  function isDiff(a, b) {
    if (a === b) {
      return false;
    }

    for (var i in a) {
      if (!(i in b)) {
        return true;
      }
    }

    for (var i in b) {
      if (a[i] !== b[i]) {
        return true;
      }
    }

    return false;
  }

  function diffObject(a, b) {
    var keys1 = Object.keys(a);
    var keys2 = Object.keys(b);
    var result = diff$1(keys1, keys2, function (key) {
      return key;
    });
    var added = {};
    var removed = {};
    var changed = {};
    result.added.forEach(function (index) {
      var name = keys2[index];
      added[name] = b[name];
    });
    result.removed.forEach(function (index) {
      var name = keys1[index];
      removed[name] = a[name];
    });
    result.maintained.forEach(function (_a) {
      var index = _a[0];
      var name = keys1[index];
      var values = [a[name], b[name]];

      if (a[name] !== b[name]) {
        changed[name] = values;
      }
    });
    return {
      added: added,
      removed: removed,
      changed: changed
    };
  }

  function executeHooks(hooks) {
    hooks.forEach(function (hook) {
      hook();
    });
  }

  function fillKeys(keys) {
    var index = 0;
    return keys.map(function (key) {
      return key == null ? "$compat" + ++index : "" + key;
    });
  }

  function createProvider(el, key, index, container) {
    if (isString(el) || isNumber(el)) {
      return new TextProvider("text_" + el, key, index, container, null, {});
    }

    var providerClass = typeof el.type === "string" ? ElementProvider : el.type.prototype.render ? ComponentProvider : FunctionProvider;
    return new providerClass(el.type, key, index, container, el.ref, el.props);
  }

  function flat$1(arr) {
    var arr2 = [];
    arr.forEach(function (el) {
      arr2 = arr2.concat(isArray(el) ? flat$1(el) : el);
    });
    return arr2;
  }

  function getAttributes(props) {
    var className = props.className,
        otherProps = __rest$2(props, ["className"]);

    if (className != null) {
      otherProps.class = className;
    }

    delete otherProps.style;
    delete otherProps.children;
    return otherProps;
  }

  function fillProps(props, defaultProps) {
    if (!defaultProps) {
      return props;
    }

    for (var name in defaultProps) {
      if (isUndefined(props[name])) {
        props[name] = defaultProps[name];
      }
    }

    return props;
  }

  function createElement(type, props) {
    var children = [];

    for (var _i = 2; _i < arguments.length; _i++) {
      children[_i - 2] = arguments[_i];
    }

    var _a = props || {},
        key = _a.key,
        ref = _a.ref,
        otherProps = __rest$2(_a, ["key", "ref"]);

    return {
      type: type,
      key: key,
      ref: ref,
      props: __assign$6(__assign$6({}, otherProps), {
        children: flat$1(children).filter(function (child) {
          return child != null && child !== false;
        })
      })
    };
  }

  var Provider =
  /*#__PURE__*/
  function () {
    function Provider(type, key, index, container, ref, props) {
      if (props === void 0) {
        props = {};
      }

      this.type = type;
      this.key = key;
      this.index = index;
      this.container = container;
      this.ref = ref;
      this.props = props;
      this._providers = [];
    }

    var __proto = Provider.prototype;

    __proto._should = function (nextProps, nextState) {
      return true;
    };

    __proto._update = function (hooks, nextElement, nextState, isForceUpdate) {
      if (this.base && !isString(nextElement) && !isForceUpdate && !this._should(nextElement.props, nextState)) {
        return false;
      }

      this.original = nextElement;

      this._setState(nextState); // render


      var prevProps = this.props;

      if (!isString(nextElement)) {
        this.props = nextElement.props;
        this.ref = nextElement.ref;
      }

      this._render(hooks, this.base ? prevProps : {}, nextState);

      return true;
    };

    __proto._mounted = function () {
      var ref = this.ref;
      ref && ref(this.base);
    };

    __proto._setState = function (nextstate) {
      return;
    };

    __proto._updated = function () {
      var ref = this.ref;
      ref && ref(this.base);
    };

    __proto._destroy = function () {
      var ref = this.ref;
      ref && ref(null);
    };

    return Provider;
  }();

  function diffAttributes(attrs1, attrs2, el) {
    var _a = diffObject(attrs1, attrs2),
        added = _a.added,
        removed = _a.removed,
        changed = _a.changed;

    for (var name in added) {
      el.setAttribute(name, added[name]);
    }

    for (var name in changed) {
      el.setAttribute(name, changed[name][1]);
    }

    for (var name in removed) {
      el.removeAttribute(name);
    }
  }

  function diffEvents(events1, events2, provier) {
    var _a = diffObject(events1, events2),
        added = _a.added,
        removed = _a.removed,
        changed = _a.changed;

    for (var name in removed) {
      provier.removeEventListener(name);
    }

    for (var name in added) {
      provier.addEventListener(name, added[name]);
    }

    for (var name in changed) {
      provier.removeEventListener(name);
      provier.addEventListener(name, changed[name][1]);
    }

    for (var name in removed) {
      provier.removeEventListener(name);
    }
  }

  function diffStyle(style1, style2, el) {
    var style = el.style;

    var _a = diffObject(style1, style2),
        added = _a.added,
        removed = _a.removed,
        changed = _a.changed;

    for (var beforeName in added) {
      var name = decamelize(beforeName, "-");

      if (style.setProperty) {
        style.setProperty(name, added[beforeName]);
      } else {
        style[name] = added[beforeName];
      }
    }

    for (var beforeName in changed) {
      var name = decamelize(beforeName, "-");

      if (style.setProperty) {
        style.setProperty(name, changed[beforeName][1]);
      } else {
        style[name] = changed[beforeName][1];
      }
    }

    for (var beforeName in removed) {
      var name = decamelize(beforeName, "-");

      if (style.removeProperty) {
        style.removeProperty(name);
      } else {
        style[name] = "";
      }
    }
  }

  function splitProps(props) {
    var attributes = {};
    var events = {};

    for (var name in props) {
      if (name.indexOf("on") === 0) {
        events[name.replace("on", "").toLowerCase()] = props[name];
      } else {
        attributes[name] = props[name];
      }
    }

    return {
      attributes: attributes,
      events: events
    };
  }

  var TextProvider =
  /*#__PURE__*/
  function (_super) {
    __extends$6(TextProvider, _super);

    function TextProvider() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    var __proto = TextProvider.prototype;

    __proto._render = function (hooks) {
      var _this = this;

      var isMount = !this.base;

      if (isMount) {
        this.base = document.createTextNode(this.type.replace("text_", ""));
      }

      hooks.push(function () {
        if (isMount) {
          _this._mounted();
        } else {
          _this._updated();
        }
      });
      return true;
    };

    __proto._unmount = function () {
      this.base.parentNode.removeChild(this.base);
    };

    return TextProvider;
  }(Provider);

  var ElementProvider =
  /*#__PURE__*/
  function (_super) {
    __extends$6(ElementProvider, _super);

    function ElementProvider() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.events = {};
      return _this;
    }

    var __proto = ElementProvider.prototype;

    __proto.addEventListener = function (name, callback) {
      var events = this.events;

      events[name] = function (e) {
        e.nativeEvent = e;
        callback(e);
      };

      this.base.addEventListener(name, events[name]);
    };

    __proto.removeEventListener = function (name) {
      var events = this.events;
      this.base.removeEventListener(name, events[name]);
      delete events[name];
    };

    __proto._should = function (nextProps) {
      return isDiff(this.props, nextProps);
    };

    __proto._render = function (hooks, prevProps) {
      var _this = this;

      var isMount = !this.base;

      if (isMount) {
        this.base = this.props.portalContainer || document.createElement(this.type);
      }

      renderProviders(this, this._providers, this.props.children, hooks, null);
      var base = this.base;

      var _a = splitProps(prevProps),
          prevAttributes = _a.attributes,
          prevEvents = _a.events;

      var _b = splitProps(this.props),
          nextAttributes = _b.attributes,
          nextEvents = _b.events;

      diffAttributes(getAttributes(prevAttributes), getAttributes(nextAttributes), base);
      diffEvents(prevEvents, nextEvents, this);
      diffStyle(prevProps.style || {}, this.props.style || {}, base);
      hooks.push(function () {
        if (isMount) {
          _this._mounted();
        } else {
          _this._updated();
        }
      });
      return true;
    };

    __proto._unmount = function () {
      var events = this.events;
      var base = this.base;

      for (var name in events) {
        base.removeEventListener(name, events[name]);
      }

      this._providers.forEach(function (provider) {
        provider._unmount();
      });

      this.events = {};

      if (!this.props.portalContainer) {
        base.parentNode.removeChild(base);
      }
    };

    return ElementProvider;
  }(Provider);

  function findContainerNode(provider) {
    if (!provider) {
      return null;
    }

    var base = provider.base;

    if (base instanceof Node) {
      return base;
    }

    return findContainerNode(provider.container);
  }

  function findDOMNode(comp) {
    if (!comp) {
      return null;
    }

    if (comp instanceof Node) {
      return comp;
    }

    var providers = comp._provider._providers;

    if (!providers.length) {
      return null;
    }

    return findDOMNode(providers[0].base);
  }

  var FunctionProvider =
  /*#__PURE__*/
  function (_super) {
    __extends$6(FunctionProvider, _super);

    function FunctionProvider() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    var __proto = FunctionProvider.prototype;

    __proto._render = function (hooks) {
      var template = this.type(this.props);
      renderProviders(this, this._providers, template ? [template] : [], hooks);
      return true;
    };

    __proto._unmount = function () {
      this._providers.forEach(function (provider) {
        provider._unmount();
      });
    };

    return FunctionProvider;
  }(Provider);

  var ContainerProvider =
  /*#__PURE__*/
  function (_super) {
    __extends$6(ContainerProvider, _super);

    function ContainerProvider(base) {
      var _this = _super.call(this, "container", "container", 0, null) || this;

      _this.base = base;
      return _this;
    }

    var __proto = ContainerProvider.prototype;

    __proto._render = function () {
      return true;
    };

    __proto._unmount = function () {
      return;
    };

    return ContainerProvider;
  }(Provider);

  var ComponentProvider =
  /*#__PURE__*/
  function (_super) {
    __extends$6(ComponentProvider, _super);

    function ComponentProvider(type, key, index, container, ref, props) {
      if (props === void 0) {
        props = {};
      }

      return _super.call(this, type, key, index, container, ref, fillProps(props, type.defaultProps)) || this;
    }

    var __proto = ComponentProvider.prototype;

    __proto._should = function (nextProps, nextState) {
      return this.base.shouldComponentUpdate(fillProps(nextProps, this.type.defaultProps), nextState || this.base.state);
    };

    __proto._render = function (hooks, prevProps, nextState) {
      var _this = this;

      this.props = fillProps(this.props, this.type.defaultProps);
      var isMount = !this.base;

      if (isMount) {
        this.base = new this.type(this.props);
        this.base._provider = this;
      } else {
        this.base.props = this.props;
      }

      var base = this.base;
      var prevState = base.state;
      var template = base.render();

      if (template && template.props && !template.props.children.length) {
        template.props.children = this.props.children;
      }

      renderProviders(this, this._providers, template ? [template] : [], hooks, nextState, null);
      hooks.push(function () {
        if (isMount) {
          _this._mounted();

          base.componentDidMount();
        } else {
          _this._updated();

          base.componentDidUpdate(prevProps, prevState);
        }
      });
    };

    __proto._setState = function (nextState) {
      if (!nextState) {
        return;
      }

      var base = this.base;
      base.state = nextState;
    };

    __proto._unmount = function () {
      this._providers.forEach(function (provider) {
        provider._unmount();
      });

      this.base.componentWillUnmount();
    };

    return ComponentProvider;
  }(Provider);

  var Component =
  /*#__PURE__*/
  function () {
    function Component(props) {
      if (props === void 0) {
        props = {};
      }

      this.props = props;
      this.state = {};
    }

    var __proto = Component.prototype;

    __proto.shouldComponentUpdate = function (props, state) {
      return true;
    };

    __proto.render = function () {
      return null;
    };

    __proto.setState = function (state, callback, isForceUpdate) {
      var hooks = [];
      var provider = this._provider;
      var isUpdate = renderProviders(provider.container, [provider], [provider.original], hooks, __assign$6(__assign$6({}, this.state), state), isForceUpdate);

      if (isUpdate) {
        if (callback) {
          hooks.push(callback);
        }

        executeHooks(hooks);
      }
    };

    __proto.forceUpdate = function (callback) {
      this.setState(this.state, callback, true);
    };

    __proto.componentDidMount = function () {};

    __proto.componentDidUpdate = function (prevProps, prevState) {};

    __proto.componentWillUnmount = function () {};

    return Component;
  }();

  var PureComponent =
  /*#__PURE__*/
  function (_super) {
    __extends$6(PureComponent, _super);

    function PureComponent() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    var __proto = PureComponent.prototype;

    __proto.shouldComponentUpdate = function (props, state) {
      return isDiff(this.props, props) || isDiff(this.state, state);
    };

    return PureComponent;
  }(Component);

  var _Portal =
  /*#__PURE__*/
  function (_super) {
    __extends$6(_Portal, _super);

    function _Portal() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    var __proto = _Portal.prototype;

    __proto.componentDidMount = function () {
      var _a = this.props,
          element = _a.element,
          container = _a.container;
      this._portalProvider = new ContainerProvider(container);
      renderProvider(element, container, this._portalProvider);
    };

    __proto.componentDidUpdate = function () {
      var _a = this.props,
          element = _a.element,
          container = _a.container;
      renderProvider(element, container, this._portalProvider);
    };

    __proto.componentWillUnmount = function () {
      var container = this.props.container;
      renderProvider(null, container, this._portalProvider);
      this._portalProvider = null;
    };

    return _Portal;
  }(PureComponent);

  function updateProvider(provider, children, nextState) {
    var hooks = [];
    renderProviders(provider, provider._providers, children, hooks, nextState);
    executeHooks(hooks);
  }

  function getNextSibiling(provider, childProvider) {
    var childProviders = provider._providers;
    var length = childProviders.length;

    for (var i = childProvider.index + 1; i < length; ++i) {
      var el = findDOMNode(childProviders[i].base);

      if (el) {
        return el;
      }
    }

    return null;
  }

  function diffProviders(containerProvider, providers, children) {
    var childrenKeys = children.map(function (p) {
      return isString(p) ? null : p.key;
    });
    var keys1 = fillKeys(providers.map(function (p) {
      return p.key;
    }));
    var keys2 = fillKeys(childrenKeys);
    var result = diff$1(keys1, keys2, function (key) {
      return key;
    });
    result.removed.forEach(function (index) {
      providers.splice(index, 1)[0]._unmount();
    });
    result.ordered.forEach(function (_a) {
      var from = _a[0],
          to = _a[1];
      var childrenProvider = providers.splice(from, 1)[0];
      providers.splice(to, 0, childrenProvider);
      var el = findDOMNode(childrenProvider.base);
      var next = findDOMNode(providers[to + 1] && providers[to + 1].base);

      if (el) {
        el.parentNode.insertBefore(el, next);
      }
    });
    result.added.forEach(function (index) {
      providers.splice(index, 0, createProvider(children[index], childrenKeys[index], index, containerProvider));
    });
    var changed = result.maintained.filter(function (_a) {
      _a[0];
          var to = _a[1];
      var el = children[to];
      var childProvider = providers[to];
      var type = isString(el) ? "text_" + el : el.type;

      if (type !== childProvider.type) {
        childProvider._unmount();

        providers.splice(to, 1, createProvider(el, childrenKeys[to], to, containerProvider));
        return true;
      }

      childProvider.index = to;
      return false;
    });
    return __spreadArrays$4(result.added, changed.map(function (_a) {
      _a[0];
          var to = _a[1];
      return to;
    }));
  }

  function renderProviders(containerProvider, providers, children, updatedHooks, nextState, isForceUpdate) {
    var result = diffProviders(containerProvider, providers, children);
    var updated = providers.filter(function (childProvider, i) {
      return childProvider._update(updatedHooks, children[i], nextState, isForceUpdate);
    });
    var containerNode = findContainerNode(containerProvider);

    if (containerNode) {
      result.reverse().forEach(function (index) {
        var childProvider = providers[index];
        var el = findDOMNode(childProvider.base);

        if (!el) {
          return;
        }

        if (containerNode !== el && !el.parentNode) {
          var nextElement = getNextSibiling(containerProvider, childProvider);
          containerNode.insertBefore(el, nextElement);
        }
      });
    }

    return updated.length > 0;
  }

  function renderProvider(element, container, provider) {
    if (provider === void 0) {
      provider = container.__REACT_COMPAT__;
    }

    var isProvider = !!provider;

    if (!provider) {
      provider = new ContainerProvider(container);
    }

    updateProvider(provider, element ? [element] : []);

    if (!isProvider) {
      container.__REACT_COMPAT__ = provider;
    }

    return provider;
  }

  function render(element, container, callback) {
    var provider = container.__REACT_COMPAT__;

    if (element && !provider) {
      container.innerHTML = "";
    }

    renderProvider(element, container, provider);
    callback && callback();
  }
  function createPortal(el, container) {
    return createElement(_Portal, {
      element: el,
      container: container
    });
  }
  var version = "simple-1.1.0";

  /*
  Copyright (c) 2015 NAVER Corp.
  name: @egjs/agent
  license: MIT
  author: NAVER Corp.
  repository: git+https://github.com/naver/agent.git
  version: 2.3.0
  */
  function some(arr, callback) {
    var length = arr.length;

    for (var i = 0; i < length; ++i) {
      if (callback(arr[i], i)) {
        return true;
      }
    }

    return false;
  }
  function find(arr, callback) {
    var length = arr.length;

    for (var i = 0; i < length; ++i) {
      if (callback(arr[i], i)) {
        return arr[i];
      }
    }

    return null;
  }
  function getUserAgent(agent) {
    var userAgent = agent;

    if (typeof userAgent === "undefined") {
      if (typeof navigator === "undefined" || !navigator) {
        return "";
      }

      userAgent = navigator.userAgent || "";
    }

    return userAgent.toLowerCase();
  }
  function execRegExp(pattern, text) {
    try {
      return new RegExp(pattern, "g").exec(text);
    } catch (e) {
      return null;
    }
  }
  function hasUserAgentData() {
    if (typeof navigator === "undefined" || !navigator || !navigator.userAgentData) {
      return false;
    }

    var userAgentData = navigator.userAgentData;
    var brands = userAgentData.brands || userAgentData.uaList;
    return !!(brands && brands.length);
  }
  function findVersion(versionTest, userAgent) {
    var result = execRegExp("(" + versionTest + ")((?:\\/|\\s|:)([0-9|\\.|_]+))", userAgent);
    return result ? result[3] : "";
  }
  function convertVersion(text) {
    return text.replace(/_/g, ".");
  }
  function findPreset(presets, userAgent) {
    var userPreset = null;
    var version = "-1";
    some(presets, function (preset) {
      var result = execRegExp("(" + preset.test + ")((?:\\/|\\s|:)([0-9|\\.|_]+))?", userAgent);

      if (!result || preset.brand) {
        return false;
      }

      userPreset = preset;
      version = result[3] || "-1";

      if (preset.versionAlias) {
        version = preset.versionAlias;
      } else if (preset.versionTest) {
        version = findVersion(preset.versionTest.toLowerCase(), userAgent) || version;
      }

      version = convertVersion(version);
      return true;
    });
    return {
      preset: userPreset,
      version: version
    };
  }
  function findPresetBrand(presets, brands) {
    var brandInfo = {
      brand: "",
      version: "-1"
    };
    some(presets, function (preset) {
      var result = findBrand(brands, preset);

      if (!result) {
        return false;
      }

      brandInfo.brand = preset.id;
      brandInfo.version = preset.versionAlias || result.version;
      return brandInfo.version !== "-1";
    });
    return brandInfo;
  }
  function findBrand(brands, preset) {
    return find(brands, function (_a) {
      var brand = _a.brand;
      return execRegExp("" + preset.test, brand.toLowerCase());
    });
  }

  var BROWSER_PRESETS = [{
    test: "phantomjs",
    id: "phantomjs"
  }, {
    test: "whale",
    id: "whale"
  }, {
    test: "edgios|edge|edg",
    id: "edge"
  }, {
    test: "msie|trident|windows phone",
    id: "ie",
    versionTest: "iemobile|msie|rv"
  }, {
    test: "miuibrowser",
    id: "miui browser"
  }, {
    test: "samsungbrowser",
    id: "samsung internet"
  }, {
    test: "samsung",
    id: "samsung internet",
    versionTest: "version"
  }, {
    test: "chrome|crios",
    id: "chrome"
  }, {
    test: "firefox|fxios",
    id: "firefox"
  }, {
    test: "android",
    id: "android browser",
    versionTest: "version"
  }, {
    test: "safari|iphone|ipad|ipod",
    id: "safari",
    versionTest: "version"
  }]; // chromium's engine(blink) is based on applewebkit 537.36.

  var CHROMIUM_PRESETS = [{
    test: "(?=.*applewebkit/(53[0-7]|5[0-2]|[0-4]))(?=.*\\schrome)",
    id: "chrome",
    versionTest: "chrome"
  }, {
    test: "chromium",
    id: "chrome"
  }, {
    test: "whale",
    id: "chrome",
    versionAlias: "-1",
    brand: true
  }];
  var WEBKIT_PRESETS = [{
    test: "applewebkit",
    id: "webkit",
    versionTest: "applewebkit|safari"
  }];
  var WEBVIEW_PRESETS = [{
    test: "(?=(iphone|ipad))(?!(.*version))",
    id: "webview"
  }, {
    test: "(?=(android|iphone|ipad))(?=.*(naver|daum|; wv))",
    id: "webview"
  }, {
    // test webview
    test: "webview",
    id: "webview"
  }];
  var OS_PRESETS = [{
    test: "windows phone",
    id: "windows phone"
  }, {
    test: "windows 2000",
    id: "window",
    versionAlias: "5.0"
  }, {
    test: "windows nt",
    id: "window"
  }, {
    test: "iphone|ipad|ipod",
    id: "ios",
    versionTest: "iphone os|cpu os"
  }, {
    test: "mac os x",
    id: "mac"
  }, {
    test: "android",
    id: "android"
  }, {
    test: "tizen",
    id: "tizen"
  }, {
    test: "webos|web0s",
    id: "webos"
  }];

  function parseUserAgentData(osData) {
    var userAgentData = navigator.userAgentData;
    var brands = (userAgentData.uaList || userAgentData.brands).slice();
    var isMobile = userAgentData.mobile || false;
    var firstBrand = brands[0];
    var browser = {
      name: firstBrand.brand,
      version: firstBrand.version,
      majorVersion: -1,
      webkit: false,
      webkitVersion: "-1",
      chromium: false,
      chromiumVersion: "-1",
      webview: !!findPresetBrand(WEBVIEW_PRESETS, brands).brand
    };
    var os = {
      name: "unknown",
      version: "-1",
      majorVersion: -1
    };
    browser.webkit = !browser.chromium && some(WEBKIT_PRESETS, function (preset) {
      return findBrand(brands, preset);
    });
    var chromiumBrand = findPresetBrand(CHROMIUM_PRESETS, brands);
    browser.chromium = !!chromiumBrand.brand;
    browser.chromiumVersion = chromiumBrand.version;

    if (!browser.chromium) {
      var webkitBrand = findPresetBrand(WEBKIT_PRESETS, brands);
      browser.webkit = !!webkitBrand.brand;
      browser.webkitVersion = webkitBrand.version;
    }

    if (osData) {
      var platform_1 = osData.platform.toLowerCase();
      var result = find(OS_PRESETS, function (preset) {
        return new RegExp("" + preset.test, "g").exec(platform_1);
      });
      os.name = result ? result.id : platform_1;
      os.version = osData.platformVersion;
    }

    var browserBrand = findPresetBrand(BROWSER_PRESETS, brands);

    if (browserBrand.brand) {
      browser.name = browserBrand.brand;
      browser.version = osData ? osData.uaFullVersion : browserBrand.version;
    }

    if (navigator.platform === "Linux armv8l") {
      os.name = "android";
    } else if (browser.webkit) {
      os.name = isMobile ? "ios" : "mac";
    }

    if (os.name === "ios" && browser.webview) {
      browser.version = "-1";
    }

    os.version = convertVersion(os.version);
    browser.version = convertVersion(browser.version);
    os.majorVersion = parseInt(os.version, 10);
    browser.majorVersion = parseInt(browser.version, 10);
    return {
      browser: browser,
      os: os,
      isMobile: isMobile,
      isHints: true
    };
  }

  function parseUserAgent(userAgent) {
    var nextAgent = getUserAgent(userAgent);
    var isMobile = !!/mobi/g.exec(nextAgent);
    var browser = {
      name: "unknown",
      version: "-1",
      majorVersion: -1,
      webview: !!findPreset(WEBVIEW_PRESETS, nextAgent).preset,
      chromium: false,
      chromiumVersion: "-1",
      webkit: false,
      webkitVersion: "-1"
    };
    var os = {
      name: "unknown",
      version: "-1",
      majorVersion: -1
    };

    var _a = findPreset(BROWSER_PRESETS, nextAgent),
        browserPreset = _a.preset,
        browserVersion = _a.version;

    var _b = findPreset(OS_PRESETS, nextAgent),
        osPreset = _b.preset,
        osVersion = _b.version;

    var chromiumPreset = findPreset(CHROMIUM_PRESETS, nextAgent);
    browser.chromium = !!chromiumPreset.preset;
    browser.chromiumVersion = chromiumPreset.version;

    if (!browser.chromium) {
      var webkitPreset = findPreset(WEBKIT_PRESETS, nextAgent);
      browser.webkit = !!webkitPreset.preset;
      browser.webkitVersion = webkitPreset.version;
    }

    if (osPreset) {
      os.name = osPreset.id;
      os.version = osVersion;
      os.majorVersion = parseInt(osVersion, 10);
    }

    if (browserPreset) {
      browser.name = browserPreset.id;
      browser.version = browserVersion;

      if (browser.webview && os.name === "ios" && browser.name !== "safari") {
        browser.webview = false;
      }
    }

    browser.majorVersion = parseInt(browser.version, 10);
    return {
      browser: browser,
      os: os,
      isMobile: isMobile,
      isHints: false
    };
  }
  /**
   * Extracts browser and operating system information from the user agent string.
   * @ko 유저 에이전트 문자열에서 브라우저와 운영체제 정보를 추출한다.
   * @function eg.agent#agent
   * @param - user agent string to parse <ko>파싱할 유저에이전트 문자열</ko>
   * @return - agent Info <ko> 에이전트 정보 </ko>
   * @example
  import agent from "@egjs/agent";
  // eg.agent();
  const { os, browser, isMobile } = agent();
   */

  function agent$1(userAgent) {
    if (typeof userAgent === "undefined" && hasUserAgentData()) {
      return parseUserAgentData();
    } else {
      return parseUserAgent(userAgent);
    }
  }

  /*
  Copyright (c) 2020 Daybrush
  name: @scena/matrix
  license: MIT
  author: Daybrush
  repository: git+https://github.com/daybrush/matrix
  version: 1.1.1
  */

  function add(matrix, inverseMatrix, startIndex, fromIndex, n, k) {
    for (var i = 0; i < n; ++i) {
      var x = startIndex + i * n;
      var fromX = fromIndex + i * n;
      matrix[x] += matrix[fromX] * k;
      inverseMatrix[x] += inverseMatrix[fromX] * k;
    }
  }

  function swap(matrix, inverseMatrix, startIndex, fromIndex, n) {
    for (var i = 0; i < n; ++i) {
      var x = startIndex + i * n;
      var fromX = fromIndex + i * n;
      var v = matrix[x];
      var iv = inverseMatrix[x];
      matrix[x] = matrix[fromX];
      matrix[fromX] = v;
      inverseMatrix[x] = inverseMatrix[fromX];
      inverseMatrix[fromX] = iv;
    }
  }

  function divide(matrix, inverseMatrix, startIndex, n, k) {
    for (var i = 0; i < n; ++i) {
      var x = startIndex + i * n;
      matrix[x] /= k;
      inverseMatrix[x] /= k;
    }
  }
  /**
   *
   * @namespace Matrix
   */

  /**
   * @memberof Matrix
   */


  function ignoreDimension(matrix, m, n) {
    if (n === void 0) {
      n = Math.sqrt(matrix.length);
    }

    var newMatrix = matrix.slice();

    for (var i = 0; i < n; ++i) {
      newMatrix[i * n + m - 1] = 0;
      newMatrix[(m - 1) * n + i] = 0;
    }

    newMatrix[(m - 1) * (n + 1)] = 1;
    return newMatrix;
  }
  /**
   * @memberof Matrix
   */

  function invert(matrix, n) {
    if (n === void 0) {
      n = Math.sqrt(matrix.length);
    }

    var newMatrix = matrix.slice();
    var inverseMatrix = createIdentityMatrix(n);

    for (var i = 0; i < n; ++i) {
      // diagonal
      var identityIndex = n * i + i;

      if (!throttle$1(newMatrix[identityIndex], TINY_NUM$1)) {
        // newMatrix[identityIndex] = 0;
        for (var j = i + 1; j < n; ++j) {
          if (newMatrix[n * i + j]) {
            swap(newMatrix, inverseMatrix, i, j, n);
            break;
          }
        }
      }

      if (!throttle$1(newMatrix[identityIndex], TINY_NUM$1)) {
        // no inverse matrix
        return [];
      }

      divide(newMatrix, inverseMatrix, i, n, newMatrix[identityIndex]);

      for (var j = 0; j < n; ++j) {
        var targetStartIndex = j;
        var targetIndex = j + i * n;
        var target = newMatrix[targetIndex];

        if (!throttle$1(target, TINY_NUM$1) || i === j) {
          continue;
        }

        add(newMatrix, inverseMatrix, targetStartIndex, i, n, -target);
      }
    }

    return inverseMatrix;
  }
  /**
   * @memberof Matrix
   */

  function transpose(matrix, n) {
    if (n === void 0) {
      n = Math.sqrt(matrix.length);
    }

    var newMatrix = [];

    for (var i = 0; i < n; ++i) {
      for (var j = 0; j < n; ++j) {
        newMatrix[j * n + i] = matrix[n * i + j];
      }
    }

    return newMatrix;
  }
  /**
   * @memberof Matrix
   */

  function getOrigin(matrix, n) {
    if (n === void 0) {
      n = Math.sqrt(matrix.length);
    }

    var originMatrix = [];
    var w = matrix[n * n - 1];

    for (var i = 0; i < n - 1; ++i) {
      originMatrix[i] = matrix[n * (n - 1) + i] / w;
    }

    originMatrix[n - 1] = 0;
    return originMatrix;
  }
  /**
   * @memberof Matrix
   */

  function fromTranslation(pos, n) {
    var newMatrix = createIdentityMatrix(n);

    for (var i = 0; i < n - 1; ++i) {
      newMatrix[n * (n - 1) + i] = pos[i] || 0;
    }

    return newMatrix;
  }
  /**
   * @memberof Matrix
   */

  function convertPositionMatrix(matrix, n) {
    var newMatrix = matrix.slice();

    for (var i = matrix.length; i < n - 1; ++i) {
      newMatrix[i] = 0;
    }

    newMatrix[n - 1] = 1;
    return newMatrix;
  }
  /**
   * @memberof Matrix
   */

  function convertDimension(matrix, n, m) {
    if (n === void 0) {
      n = Math.sqrt(matrix.length);
    } // n < m


    if (n === m) {
      return matrix;
    }

    var newMatrix = createIdentityMatrix(m);
    var length = Math.min(n, m);

    for (var i = 0; i < length - 1; ++i) {
      for (var j = 0; j < length - 1; ++j) {
        newMatrix[i * m + j] = matrix[i * n + j];
      }

      newMatrix[(i + 1) * m - 1] = matrix[(i + 1) * n - 1];
      newMatrix[(m - 1) * m + i] = matrix[(n - 1) * n + i];
    }

    newMatrix[m * m - 1] = matrix[n * n - 1];
    return newMatrix;
  }
  /**
   * @memberof Matrix
   */

  function multiplies(n) {
    var matrixes = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      matrixes[_i - 1] = arguments[_i];
    }

    var m = createIdentityMatrix(n);
    matrixes.forEach(function (matrix) {
      m = multiply(m, matrix, n);
    });
    return m;
  }
  /**
   * @memberof Matrix
   */

  function multiply(matrix, matrix2, n) {
    if (n === void 0) {
      n = Math.sqrt(matrix.length);
    }

    var newMatrix = []; // 1 y: n
    // 1 x: m
    // 2 x: m
    // 2 y: k
    // n * m X m * k

    var m = matrix.length / n;
    var k = matrix2.length / m;

    if (!m) {
      return matrix2;
    } else if (!k) {
      return matrix;
    }

    for (var i = 0; i < n; ++i) {
      for (var j = 0; j < k; ++j) {
        newMatrix[j * n + i] = 0;

        for (var l = 0; l < m; ++l) {
          // m1 x: m(l), y: n(i)
          // m2 x: k(j):  y: m(l)
          // nw x: n(i), y: k(j)
          newMatrix[j * n + i] += matrix[l * n + i] * matrix2[j * m + l];
        }
      }
    } // n * k


    return newMatrix;
  }
  /**
   * @memberof Matrix
   */

  function plus(pos1, pos2) {
    var length = Math.min(pos1.length, pos2.length);
    var nextPos = pos1.slice();

    for (var i = 0; i < length; ++i) {
      nextPos[i] = nextPos[i] + pos2[i];
    }

    return nextPos;
  }
  /**
   * @memberof Matrix
   */

  function minus(pos1, pos2) {
    var length = Math.min(pos1.length, pos2.length);
    var nextPos = pos1.slice();

    for (var i = 0; i < length; ++i) {
      nextPos[i] = nextPos[i] - pos2[i];
    }

    return nextPos;
  }
  /**
   * @memberof Matrix
   */

  function convertCSStoMatrix(a, is2d) {
    if (is2d === void 0) {
      is2d = a.length === 6;
    }

    if (is2d) {
      return [a[0], a[1], 0, a[2], a[3], 0, a[4], a[5], 1];
    }

    return a;
  }
  /**
   * @memberof Matrix
   */

  function convertMatrixtoCSS(a, is2d) {
    if (is2d === void 0) {
      is2d = a.length === 9;
    }

    if (is2d) {
      return [a[0], a[1], a[3], a[4], a[6], a[7]];
    }

    return a;
  }
  /**
   * @memberof Matrix
   */

  function calculate(matrix, matrix2, n) {
    if (n === void 0) {
      n = matrix2.length;
    }

    var result = multiply(matrix, matrix2, n);
    var k = result[n - 1];
    return result.map(function (v) {
      return v / k;
    });
  }
  /**
   * @memberof Matrix
   */

  function rotateX3d(matrix, rad) {
    return multiply(matrix, [1, 0, 0, 0, 0, Math.cos(rad), Math.sin(rad), 0, 0, -Math.sin(rad), Math.cos(rad), 0, 0, 0, 0, 1], 4);
  }
  /**
   * @memberof Matrix
   */

  function rotateY3d(matrix, rad) {
    return multiply(matrix, [Math.cos(rad), 0, -Math.sin(rad), 0, 0, 1, 0, 0, Math.sin(rad), 0, Math.cos(rad), 0, 0, 0, 0, 1], 4);
  }
  /**
   * @memberof Matrix
   */

  function rotateZ3d(matrix, rad) {
    return multiply(matrix, createRotateMatrix(rad, 4));
  }
  /**
   * @memberof Matrix
   */

  function scale3d(matrix, _a) {
    var _b = _a[0],
        sx = _b === void 0 ? 1 : _b,
        _c = _a[1],
        sy = _c === void 0 ? 1 : _c,
        _d = _a[2],
        sz = _d === void 0 ? 1 : _d;
    return multiply(matrix, [sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1], 4);
  }
  /**
   * @memberof Matrix
   */

  function rotate(pos, rad) {
    return calculate(createRotateMatrix(rad, 3), convertPositionMatrix(pos, 3));
  }
  /**
   * @memberof Matrix
   */

  function translate3d(matrix, _a) {
    var _b = _a[0],
        tx = _b === void 0 ? 0 : _b,
        _c = _a[1],
        ty = _c === void 0 ? 0 : _c,
        _d = _a[2],
        tz = _d === void 0 ? 0 : _d;
    return multiply(matrix, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1], 4);
  }
  /**
   * @memberof Matrix
   */

  function matrix3d(matrix1, matrix2) {
    return multiply(matrix1, matrix2, 4);
  }
  /**
   * @memberof Matrix
   */

  function createRotateMatrix(rad, n) {
    var cos = Math.cos(rad);
    var sin = Math.sin(rad);
    var m = createIdentityMatrix(n); // cos -sin
    // sin cos

    m[0] = cos;
    m[1] = sin;
    m[n] = -sin;
    m[n + 1] = cos;
    return m;
  }
  /**
   * @memberof Matrix
   */

  function createIdentityMatrix(n) {
    var length = n * n;
    var matrix = [];

    for (var i = 0; i < length; ++i) {
      matrix[i] = i % (n + 1) ? 0 : 1;
    }

    return matrix;
  }
  /**
   * @memberof Matrix
   */

  function createScaleMatrix(scale, n) {
    var m = createIdentityMatrix(n);
    var length = Math.min(scale.length, n - 1);

    for (var i = 0; i < length; ++i) {
      m[(n + 1) * i] = scale[i];
    }

    return m;
  }
  /**
   * @memberof Matrix
   */

  function createOriginMatrix(origin, n) {
    var m = createIdentityMatrix(n);
    var length = Math.min(origin.length, n - 1);

    for (var i = 0; i < length; ++i) {
      m[n * (n - 1) + i] = origin[i];
    }

    return m;
  }
  /**
   * @memberof Matrix
   */

  function createWarpMatrix(pos0, pos1, pos2, pos3, nextPos0, nextPos1, nextPos2, nextPos3) {
    var x0 = pos0[0],
        y0 = pos0[1];
    var x1 = pos1[0],
        y1 = pos1[1];
    var x2 = pos2[0],
        y2 = pos2[1];
    var x3 = pos3[0],
        y3 = pos3[1];
    var u0 = nextPos0[0],
        v0 = nextPos0[1];
    var u1 = nextPos1[0],
        v1 = nextPos1[1];
    var u2 = nextPos2[0],
        v2 = nextPos2[1];
    var u3 = nextPos3[0],
        v3 = nextPos3[1];
    var matrix = [x0, 0, x1, 0, x2, 0, x3, 0, y0, 0, y1, 0, y2, 0, y3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, x0, 0, x1, 0, x2, 0, x3, 0, y0, 0, y1, 0, y2, 0, y3, 0, 1, 0, 1, 0, 1, 0, 1, -u0 * x0, -v0 * x0, -u1 * x1, -v1 * x1, -u2 * x2, -v2 * x2, -u3 * x3, -v3 * x3, -u0 * y0, -v0 * y0, -u1 * y1, -v1 * y1, -u2 * y2, -v2 * y2, -u3 * y3, -v3 * y3];
    var inverseMatrix = invert(matrix, 8);

    if (!inverseMatrix.length) {
      return [];
    }

    var h = multiply(inverseMatrix, [u0, v0, u1, v1, u2, v2, u3, v3], 8);
    h[8] = 1;
    return convertDimension(transpose(h), 3, 4);
  }

  /*
  Copyright (c) 2019 Daybrush
  name: css-to-mat
  license: MIT
  author: Daybrush
  repository: git+https://github.com/daybrush/css-to-mat.git
  version: 1.0.3
  */

  function createMatrix() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  }
  function parseMat(transform) {
    return toMat(parse(transform));
  }
  function toMat(matrixInfos) {
    var target = createMatrix();
    matrixInfos.forEach(function (info) {
      var matrixFunction = info.matrixFunction,
          functionValue = info.functionValue;

      if (!matrixFunction) {
        return;
      }

      target = matrixFunction(target, functionValue);
    });
    return target;
  }
  function parse(transform) {
    var transforms = isArray(transform) ? transform : splitSpace(transform);
    return transforms.map(function (t) {
      var _a = splitBracket(t),
          name = _a.prefix,
          value = _a.value;

      var matrixFunction = null;
      var functionName = name;
      var functionValue = "";

      if (name === "translate" || name === "translateX" || name === "translate3d") {
        var _b = splitComma(value).map(function (v) {
          return parseFloat(v);
        }),
            posX = _b[0],
            _c = _b[1],
            posY = _c === void 0 ? 0 : _c,
            _d = _b[2],
            posZ = _d === void 0 ? 0 : _d;

        matrixFunction = translate3d;
        functionValue = [posX, posY, posZ];
      } else if (name === "translateY") {
        var posY = parseFloat(value);
        matrixFunction = translate3d;
        functionValue = [0, posY, 0];
      } else if (name === "translateZ") {
        var posZ = parseFloat(value);
        matrixFunction = translate3d;
        functionValue = [0, 0, posZ];
      } else if (name === "scale" || name === "scale3d") {
        var _e = splitComma(value).map(function (v) {
          return parseFloat(v);
        }),
            sx = _e[0],
            _f = _e[1],
            sy = _f === void 0 ? sx : _f,
            _g = _e[2],
            sz = _g === void 0 ? 1 : _g;

        matrixFunction = scale3d;
        functionValue = [sx, sy, sz];
      } else if (name === "scaleX") {
        var sx = parseFloat(value);
        matrixFunction = scale3d;
        functionValue = [sx, 1, 1];
      } else if (name === "scaleY") {
        var sy = parseFloat(value);
        matrixFunction = scale3d;
        functionValue = [1, sy, 1];
      } else if (name === "scaleZ") {
        var sz = parseFloat(value);
        matrixFunction = scale3d;
        functionValue = [1, 1, sz];
      } else if (name === "rotate" || name === "rotateZ" || name === "rotateX" || name === "rotateY") {
        var _h = splitUnit(value),
            unit = _h.unit,
            unitValue = _h.value;

        var rad = unit === "rad" ? unitValue : unitValue * Math.PI / 180;

        if (name === "rotate" || name === "rotateZ") {
          functionName = "rotateZ";
          matrixFunction = rotateZ3d;
        } else if (name === "rotateX") {
          matrixFunction = rotateX3d;
        } else if (name === "rotateY") {
          matrixFunction = rotateY3d;
        }

        functionValue = rad;
      } else if (name === "matrix3d") {
        matrixFunction = matrix3d;
        functionValue = splitComma(value).map(function (v) {
          return parseFloat(v);
        });
      } else if (name === "matrix") {
        var m = splitComma(value).map(function (v) {
          return parseFloat(v);
        });
        matrixFunction = matrix3d;
        functionValue = [m[0], m[1], 0, 0, m[2], m[3], 0, 0, 0, 0, 1, 0, m[4], m[5], 0, 1];
      } else {
        functionName = "";
      }

      return {
        name: name,
        functionName: functionName,
        value: value,
        matrixFunction: matrixFunction,
        functionValue: functionValue
      };
    });
  }

  /*
  Copyright (c) 2020 Daybrush
  name: overlap-area
  license: MIT
  author: Daybrush
  repository: git+https://github.com/daybrush/overlap-area.git
  version: 1.0.0
  */

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  function __spreadArrays$3() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

    return r;
  }

  /**
   * @namespace OverlapArea
   */

  /**
   * Gets the size of a shape (polygon) made of points.
   * @memberof OverlapArea
   */

  function getAreaSize(points) {
    if (points.length < 3) {
      return 0;
    }

    return Math.abs(sum(points.map(function (point, i) {
      var nextPoint = points[i + 1] || points[0];
      return point[0] * nextPoint[1] - nextPoint[0] * point[1];
    }))) / 2;
  }
  /**
   * Get points that fit the rect,
   * @memberof OverlapArea
   */

  function fitPoints(points, rect) {
    var width = rect.width,
        height = rect.height,
        left = rect.left,
        top = rect.top;

    var _a = getMinMaxs(points),
        minX = _a.minX,
        minY = _a.minY,
        maxX = _a.maxX,
        maxY = _a.maxY;

    var ratioX = width / (maxX - minX);
    var ratioY = height / (maxY - minY);
    return points.map(function (point) {
      return [left + (point[0] - minX) * ratioX, top + (point[1] - minY) * ratioY];
    });
  }
  /**
   * Get the minimum and maximum points of the points.
   * @memberof OverlapArea
   */

  function getMinMaxs(points) {
    var xs = points.map(function (point) {
      return point[0];
    });
    var ys = points.map(function (point) {
      return point[1];
    });
    return {
      minX: Math.min.apply(Math, xs),
      minY: Math.min.apply(Math, ys),
      maxX: Math.max.apply(Math, xs),
      maxY: Math.max.apply(Math, ys)
    };
  }
  /**
   * Whether the point is in shape
   * @param - point pos
   * @param - shape points
   * @param - whether to check except line
   * @memberof OverlapArea
   */

  function isInside(pos, points, excludeLine) {
    var x = pos[0],
        y = pos[1];

    var _a = getMinMaxs(points),
        minX = _a.minX,
        minY = _a.minY,
        maxX = _a.maxX,
        maxY = _a.maxY;

    var xLine = [[minX, y], [maxX, y]];
    var yLine = [[x, minY], [x, maxY]];
    var xLinearConstants = getLinearConstants(xLine[0], xLine[1]);
    var yLinearConstants = getLinearConstants(yLine[0], yLine[1]);
    var lines = convertLines(points);
    var intersectionXPoints = [];
    var intersectionYPoints = [];
    lines.forEach(function (line) {
      var linearConstants = getLinearConstants(line[0], line[1]);
      var xPoints = getPointsOnLines(getIntersectionPointsByConstants(xLinearConstants, linearConstants), [xLine, line]);
      var yPoints = getPointsOnLines(getIntersectionPointsByConstants(yLinearConstants, linearConstants), [yLine, line]);

      if (xPoints.length === 1 ? line[0][1] !== y : true) {
        intersectionXPoints.push.apply(intersectionXPoints, xPoints);
      }

      if (yPoints.length === 1 ? line[0][0] !== x : true) {
        intersectionYPoints.push.apply(intersectionYPoints, yPoints);
      }

      if (!linearConstants[0]) {
        intersectionXPoints.push.apply(intersectionXPoints, xPoints);
      }

      if (!linearConstants[1]) {
        intersectionYPoints.push.apply(intersectionYPoints, yPoints);
      }
    });

    if (!excludeLine) {
      if (findIndex(intersectionXPoints, function (p) {
        return p[0] === x;
      }) > -1 || findIndex(intersectionYPoints, function (p) {
        return p[1] === y;
      }) > -1) {
        return true;
      }
    }

    if (intersectionXPoints.filter(function (p) {
      return p[0] > x;
    }).length % 2 && intersectionYPoints.filter(function (p) {
      return p[1] > y;
    }).length % 2) {
      return true;
    }

    return false;
  }
  /**
   * Get the coefficient of the linear function. [a, b, c] (ax + by + c = 0)
   * @return [a, b, c]
   * @memberof OverlapArea
   */

  function getLinearConstants(point1, point2) {
    var x1 = point1[0],
        y1 = point1[1];
    var x2 = point2[0],
        y2 = point2[1]; // ax + by + c = 0

    if (x1 === x2 && y1 === y2) {
      return [0, 0, 0];
    }

    if (x1 === x2) {
      // x = x1
      return [1, 0, -x1];
    } else if (y1 === y2) {
      // y = y1
      return [0, 1, -y1];
    } else {
      // x1 + a * y1 + b = 0
      // x2 + a * y2 + b = 0
      // (x1 -x2) + (y1 - y2) * a = 0
      // a = (x2 - x1) / (y1 - y2)
      // x1 + (x2 - x1) / (y1 - y2)
      var a_1 = (x2 - x1) / (y1 - y2);
      var b_1 = -x1 - a_1 * y1;
      return [1, a_1, b_1];
    }
  }
  /**
   * Get intersection points with linear functions.
   * @memberof OverlapArea
   */

  function getIntersectionPointsByConstants(linearConstants1, linearConstants2) {
    var a1 = linearConstants1[0],
        b1 = linearConstants1[1],
        c1 = linearConstants1[2];
    var a2 = linearConstants2[0],
        b2 = linearConstants2[1],
        c2 = linearConstants2[2];
    var isZeroA = a1 === 0 && a2 === 0;
    var isZeroB = b1 === 0 && b2 === 0;

    if (isZeroA && isZeroB) {
      return [];
    } else if (isZeroA) {
      // b1 * y + c1 = 0
      // b2 * y + c2 = 0
      var y1 = -c1 / b1;
      var y2 = -c2 / b2;

      if (y1 !== y2) {
        return [];
      } else {
        return [[-Infinity, y1], [Infinity, y1]];
      }
    } else if (isZeroB) {
      // a1 * x + c1 = 0
      // a2 * x + c2 = 0
      var x1 = -c1 / a1;
      var x2 = -c2 / a2;

      if (x1 !== x2) {
        return [];
      } else {
        return [[x1, -Infinity], [x1, Infinity]];
      }
    } else if (a1 === 0) {
      // b1 * y + c1 = 0
      // y = - c1 / b1;
      // a2 * x + b2 * y + c2 = 0
      var y = -c1 / b1;
      var x = -(b2 * y + c2) / a2;
      return [[x, y]];
    } else if (a2 === 0) {
      // b2 * y + c2 = 0
      // y = - c2 / b2;
      // a1 * x + b1 * y + c1 = 0
      var y = -c2 / b2;
      var x = -(b1 * y + c1) / a1;
      return [[x, y]];
    } else if (b1 === 0) {
      // a1 * x + c1 = 0
      // x = - c1 / a1;
      // a2 * x + b2 * y + c2 = 0
      var x = -c1 / a1;
      var y = -(a2 * x + c2) / b2;
      return [[x, y]];
    } else if (b2 === 0) {
      // a2 * x + c2 = 0
      // x = - c2 / a2;
      // a1 * x + b1 * y + c1 = 0
      var x = -c2 / a2;
      var y = -(a1 * x + c1) / b1;
      return [[x, y]];
    } else {
      // a1 * x + b1 * y + c1 = 0
      // a2 * x + b2 * y + c2 = 0
      // b2 * a1 * x + b2 * b1 * y + b2 * c1 = 0
      // b1 * a2 * x + b1 * b2 * y + b1 * c2 = 0
      // (b2 * a1 - b1 * a2)  * x = (b1 * c2 - b2 * c1)
      var x = (b1 * c2 - b2 * c1) / (b2 * a1 - b1 * a2);
      var y = -(a1 * x + c1) / b1;
      return [[x, y]];
    }
  }
  /**
   * Get the points on the lines (between two points).
   * @memberof OverlapArea
   */

  function getPointsOnLines(points, lines) {
    var minMaxs = lines.map(function (line) {
      return [0, 1].map(function (order) {
        return [Math.min(line[0][order], line[1][order]), Math.max(line[0][order], line[1][order])];
      });
    });

    if (points.length === 2) {
      var _a = points[0],
          x = _a[0],
          y = _a[1];

      if (x === points[1][0]) {
        /// Math.max(minY1, minY2)
        var top = Math.max.apply(Math, minMaxs.map(function (minMax) {
          return minMax[1][0];
        })); /// Math.min(maxY1, miax2)

        var bottom = Math.min.apply(Math, minMaxs.map(function (minMax) {
          return minMax[1][1];
        }));

        if (top > bottom) {
          return [];
        }

        return [[x, top], [x, bottom]];
      } else if (y === points[1][1]) {
        /// Math.max(minY1, minY2)
        var left = Math.max.apply(Math, minMaxs.map(function (minMax) {
          return minMax[0][0];
        })); /// Math.min(maxY1, miax2)

        var right = Math.min.apply(Math, minMaxs.map(function (minMax) {
          return minMax[0][1];
        }));

        if (left > right) {
          return [];
        }

        return [[left, y], [right, y]];
      }
    }

    return points.filter(function (point) {
      return minMaxs.every(function (minMax) {
        return minMax[0][0] <= point[0] && point[0] <= minMax[0][1] && minMax[1][0] <= point[1] && point[1] <= minMax[1][1];
      });
    });
  }
  /**
  * Convert two points into lines.
  * @function
  * @memberof OverlapArea
  */

  function convertLines(points) {
    return __spreadArrays$3(points.slice(1), [points[0]]).map(function (point, i) {
      return [points[i], point];
    });
  }
  /**
  * Get the points of the overlapped part of two shapes.
  * @function
  * @memberof OverlapArea
  */

  function getOverlapPoints(points1, points2) {
    var targetPoints1 = points1.slice();
    var targetPoints2 = points2.slice();

    if (getShapeDirection(targetPoints1) === -1) {
      targetPoints1.reverse();
    }

    if (getShapeDirection(targetPoints2) === -1) {
      targetPoints2.reverse();
    }

    var lines1 = convertLines(targetPoints1);
    var lines2 = convertLines(targetPoints2);
    var linearConstantss1 = lines1.map(function (line1) {
      return getLinearConstants(line1[0], line1[1]);
    });
    var linearConstantss2 = lines2.map(function (line2) {
      return getLinearConstants(line2[0], line2[1]);
    });
    var overlapInfos = [];
    linearConstantss1.forEach(function (linearConstants1, i) {
      var line1 = lines1[i];
      var linePointInfos = [];
      linearConstantss2.forEach(function (linearConstants2, j) {
        var intersectionPoints = getIntersectionPointsByConstants(linearConstants1, linearConstants2);
        var points = getPointsOnLines(intersectionPoints, [line1, lines2[j]]);
        linePointInfos.push.apply(linePointInfos, points.map(function (pos) {
          return {
            index1: i,
            index2: j,
            pos: pos
          };
        }));
      });
      linePointInfos.sort(function (a, b) {
        return getDist$2(line1[0], a.pos) - getDist$2(line1[0], b.pos);
      });
      overlapInfos.push.apply(overlapInfos, linePointInfos);

      if (isInside(line1[1], targetPoints2)) {
        overlapInfos.push({
          index1: i,
          index2: -1,
          pos: line1[1]
        });
      }
    });
    lines2.forEach(function (line2, i) {
      if (isInside(line2[1], targetPoints1)) {
        var isNext_1 = false;
        var index = findIndex(overlapInfos, function (_a) {
          var index2 = _a.index2;

          if (index2 === i) {
            isNext_1 = true;
            return false;
          }

          if (isNext_1) {
            return true;
          }

          return false;
        });

        if (index === -1) {
          isNext_1 = false;
          index = findIndex(overlapInfos, function (_a) {
            var index1 = _a.index1,
                index2 = _a.index2;

            if (index1 === -1 && index2 + 1 === i) {
              isNext_1 = true;
              return false;
            }

            if (isNext_1) {
              return true;
            }

            return false;
          });
        }

        if (index === -1) {
          overlapInfos.push({
            index1: -1,
            index2: i,
            pos: line2[1]
          });
        } else {
          overlapInfos.splice(index, 0, {
            index1: -1,
            index2: i,
            pos: line2[1]
          });
        }
      }
    }); // console.log(overlapInfos);

    var overlapPoints = overlapInfos.map(function (_a) {
      var pos = _a.pos;
      return pos;
    });
    var pointMap = {};
    return overlapPoints.filter(function (point) {
      var key = point[0] + "x" + point[1];

      if (pointMap[key]) {
        return false;
      }

      pointMap[key] = true;
      return true;
    });
  }
  /**
  * Gets the size of the overlapped part of two shapes.
  * @function
  * @memberof OverlapArea
  */

  function getOverlapSize(points1, points2) {
    var points = getOverlapPoints(points1, points2);
    return getAreaSize(points);
  }

  /*
  Copyright (c) 2019-present NAVER Corp.
  name: @egjs/children-differ
  license: MIT
  author: NAVER Corp.
  repository: https://github.com/naver/egjs-children-differ
  version: 1.0.1
  */

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */

  /* global Reflect, Promise */
  var extendStatics$5 = function (d, b) {
    extendStatics$5 = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics$5(d, b);
  };

  function __extends$5(d, b) {
    extendStatics$5(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  /*
  egjs-children-differ
  Copyright (c) 2019-present NAVER Corp.
  MIT license
  */
  var findKeyCallback = typeof Map === "function" ? undefined : function () {
    var childrenCount = 0;
    return function (el) {
      return el.__DIFF_KEY__ || (el.__DIFF_KEY__ = ++childrenCount);
    };
  }();

  /**
   * A module that checks diff when child are added, removed, or changed .
   * @ko 자식 노드들에서 자식 노드가 추가되거나 삭제되거나 순서가 변경된 사항을 체크하는 모듈입니다.
   * @memberof eg
   * @extends eg.ListDiffer
   */

  var ChildrenDiffer =
  /*#__PURE__*/
  function (_super) {
    __extends$5(ChildrenDiffer, _super);
    /**
     * @param - Initializing Children <ko> 초기 설정할 자식 노드들</ko>
     */


    function ChildrenDiffer(list) {
      if (list === void 0) {
        list = [];
      }

      return _super.call(this, list, findKeyCallback) || this;
    }

    return ChildrenDiffer;
  }(ListDiffer);

  /*
  egjs-children-differ
  Copyright (c) 2019-present NAVER Corp.
  MIT license
  */
  /**
   *
   * @memberof eg.ChildrenDiffer
   * @static
   * @function
   * @param - Previous List <ko> 이전 목록 </ko>
   * @param - List to Update <ko> 업데이트 할 목록 </ko>
   * @return - Returns the diff between `prevList` and `list` <ko> `prevList`와 `list`의 다른 점을 반환한다.</ko>
   * @example
   * import { diff } from "@egjs/children-differ";
   * // script => eg.ChildrenDiffer.diff
   * const result = diff([0, 1, 2, 3, 4, 5], [7, 8, 0, 4, 3, 6, 2, 1]);
   * // List before update
   * // [1, 2, 3, 4, 5]
   * console.log(result.prevList);
   * // Updated list
   * // [4, 3, 6, 2, 1]
   * console.log(result.list);
   * // Index array of values added to `list`
   * // [0, 1, 5]
   * console.log(result.added);
   * // Index array of values removed in `prevList`
   * // [5]
   * console.log(result.removed);
   * // An array of index pairs of `prevList` and `list` with different indexes from `prevList` and `list`
   * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]
   * console.log(result.changed);
   * // The subset of `changed` and an array of index pairs that moved data directly. Indicate an array of absolute index pairs of `ordered`.(Formatted by: Array<[index of prevList, index of list]>)
   * // [[4, 3], [3, 4], [2, 6]]
   * console.log(result.pureChanged);
   * // An array of index pairs to be `ordered` that can synchronize `list` before adding data. (Formatted by: Array<[prevIndex, nextIndex]>)
   * // [[4, 1], [4, 2], [4, 3]]
   * console.log(result.ordered);
   * // An array of index pairs of `prevList` and `list` that have not been added/removed so data is preserved
   * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]
   * console.log(result.maintained);
   */

  function diff(prevList, list) {
    return diff$1(prevList, list, findKeyCallback);
  }

  /*
  Copyright (c) 2019 Daybrush
  name: @scena/event-emitter
  license: MIT
  author: Daybrush
  repository: git+https://github.com/daybrush/gesture.git
  version: 1.0.5
  */

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __assign$5 = function () {
    __assign$5 = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];

        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }

      return t;
    };

    return __assign$5.apply(this, arguments);
  };
  function __spreadArrays$2() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

    return r;
  }

  /**
   * Implement EventEmitter on object or component.
   */

  var EventEmitter$1 =
  /*#__PURE__*/
  function () {
    function EventEmitter() {
      this._events = {};
    }
    /**
     * Add a listener to the registered event.
     * @param - Name of the event to be added
     * @param - listener function of the event to be added
     * @example
     * import EventEmitter from "@scena/event-emitter";
     * cosnt emitter = new EventEmitter();
     *
     * // Add listener in "a" event
     * emitter.on("a", () => {
     * });
     * // Add listeners
     * emitter.on({
     *  a: () => {},
     *  b: () => {},
     * });
     */


    var __proto = EventEmitter.prototype;

    __proto.on = function (eventName, listener) {
      if (isObject(eventName)) {
        for (var name in eventName) {
          this.on(name, eventName[name]);
        }
      } else {
        this._addEvent(eventName, listener, {});
      }

      return this;
    };
    /**
     * Remove listeners registered in the event target.
     * @param - Name of the event to be removed
     * @param - listener function of the event to be removed
     * @example
     * import EventEmitter from "@scena/event-emitter";
     * cosnt emitter = new EventEmitter();
     *
     * // Remove all listeners.
     * emitter.off();
     *
     * // Remove all listeners in "A" event.
     * emitter.off("a");
     *
     *
     * // Remove "listener" listener in "a" event.
     * emitter.off("a", listener);
     */


    __proto.off = function (eventName, listener) {
      if (!eventName) {
        this._events = {};
      } else if (isObject(eventName)) {
        for (var name in eventName) {
          this.off(name);
        }
      } else if (!listener) {
        this._events[eventName] = [];
      } else {
        var events = this._events[eventName];

        if (events) {
          var index = findIndex(events, function (e) {
            return e.listener === listener;
          });

          if (index > -1) {
            events.splice(index, 1);
          }
        }
      }

      return this;
    };
    /**
     * Add a disposable listener and Use promise to the registered event.
     * @param - Name of the event to be added
     * @param - disposable listener function of the event to be added
     * @example
     * import EventEmitter from "@scena/event-emitter";
     * cosnt emitter = new EventEmitter();
     *
     * // Add a disposable listener in "a" event
     * emitter.once("a", () => {
     * });
     *
     * // Use Promise
     * emitter.once("a").then(e => {
     * });
     */


    __proto.once = function (eventName, listener) {
      var _this = this;

      if (listener) {
        this._addEvent(eventName, listener, {
          once: true
        });
      }

      return new Promise(function (resolve) {
        _this._addEvent(eventName, resolve, {
          once: true
        });
      });
    };
    /**
     * Fires an event to call listeners.
     * @param - Event name
     * @param - Event parameter
     * @return If false, stop the event.
     * @example
     *
     * import EventEmitter from "@scena/event-emitter";
     *
     *
     * const emitter = new EventEmitter();
     *
     * emitter.on("a", e => {
     * });
     *
     *
     * emitter.emit("a", {
     *   a: 1,
     * });
     */


    __proto.emit = function (eventName, param) {
      var _this = this;

      if (param === void 0) {
        param = {};
      }

      var events = this._events[eventName];

      if (!eventName || !events) {
        return true;
      }

      var isStop = false;
      param.eventType = eventName;

      param.stop = function () {
        isStop = true;
      };

      param.currentTarget = this;

      __spreadArrays$2(events).forEach(function (info) {
        info.listener(param);

        if (info.once) {
          _this.off(eventName, info.listener);
        }
      });

      return !isStop;
    };
    /**
     * Fires an event to call listeners.
     * @param - Event name
     * @param - Event parameter
     * @return If false, stop the event.
     * @example
     *
     * import EventEmitter from "@scena/event-emitter";
     *
     *
     * const emitter = new EventEmitter();
     *
     * emitter.on("a", e => {
     * });
     *
     *
     * emitter.emit("a", {
     *   a: 1,
     * });
     */

    /**
    * Fires an event to call listeners.
    * @param - Event name
    * @param - Event parameter
    * @return If false, stop the event.
    * @example
    *
    * import EventEmitter from "@scena/event-emitter";
    *
    *
    * const emitter = new EventEmitter();
    *
    * emitter.on("a", e => {
    * });
    *
    * // emit
    * emitter.trigger("a", {
    *   a: 1,
    * });
    */


    __proto.trigger = function (eventName, param) {
      if (param === void 0) {
        param = {};
      }

      return this.emit(eventName, param);
    };

    __proto._addEvent = function (eventName, listener, options) {
      var events = this._events;
      events[eventName] = events[eventName] || [];
      var listeners = events[eventName];
      listeners.push(__assign$5({
        listener: listener
      }, options));
    };

    return EventEmitter;
  }();

  /*
  Copyright (c) 2019 Daybrush
  name: @scena/dragscroll
  license: MIT
  author: Daybrush
  repository: git+https://github.com/daybrush/dragscroll.git
  version: 1.0.1
  */

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */

  /* global Reflect, Promise */
  var extendStatics$4 = function (d, b) {
    extendStatics$4 = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics$4(d, b);
  };

  function __extends$4(d, b) {
    extendStatics$4(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  function getDefaultScrollPosition$1(e) {
    var container = e.container;
    return [container.scrollLeft, container.scrollTop];
  }

  var DragScroll =
  /*#__PURE__*/
  function (_super) {
    __extends$4(DragScroll, _super);

    function DragScroll() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.startRect = null;
      _this.startPos = [];
      _this.prevTime = 0;
      _this.timer = 0;
      return _this;
    }

    var __proto = DragScroll.prototype;

    __proto.dragStart = function (e, options) {
      var container = options.container;
      var top = 0;
      var left = 0;
      var width = 0;
      var height = 0;

      if (container === document.body) {
        width = window.innerWidth;
        height = window.innerHeight;
      } else {
        var rect = container.getBoundingClientRect();
        top = rect.top;
        left = rect.left;
        width = rect.width;
        height = rect.height;
      }

      this.startPos = [e.clientX, e.clientY];
      this.startRect = {
        top: top,
        left: left,
        width: width,
        height: height
      };
    };

    __proto.drag = function (e, options) {
      var _this = this;

      var clientX = e.clientX,
          clientY = e.clientY;
      var container = options.container,
          _a = options.threshold,
          threshold = _a === void 0 ? 0 : _a,
          _b = options.throttleTime,
          throttleTime = _b === void 0 ? 0 : _b,
          _c = options.getScrollPosition,
          getScrollPosition = _c === void 0 ? getDefaultScrollPosition$1 : _c;

      var _d = this,
          startRect = _d.startRect,
          startPos = _d.startPos;

      var nowTime = now();
      var distTime = Math.max(throttleTime + this.prevTime - nowTime, 0);
      var direction = [0, 0];

      if (startRect.top > clientY - threshold) {
        if (startPos[1] > startRect.top || clientY < startPos[1]) {
          direction[1] = -1;
        }
      } else if (startRect.top + startRect.height < clientY + threshold) {
        if (startPos[1] < startRect.top + startRect.height || clientY > startPos[1]) {
          direction[1] = 1;
        }
      }

      if (startRect.left > clientX - threshold) {
        if (startPos[0] > startRect.left || clientX < startPos[0]) {
          direction[0] = -1;
        }
      } else if (startRect.left + startRect.width < clientX + threshold) {
        if (startPos[0] < startRect.left + startRect.width || clientX > startPos[0]) {
          direction[0] = 1;
        }
      }

      clearTimeout(this.timer);

      if (!direction[0] && !direction[1]) {
        return false;
      }

      if (distTime > 0) {
        this.timer = window.setTimeout(function () {
          _this.drag(e, options);
        }, distTime);
        return false;
      }

      this.prevTime = nowTime;
      var prevPos = getScrollPosition({
        container: container,
        direction: direction
      });
      this.trigger("scroll", {
        container: container,
        direction: direction,
        inputEvent: e
      });
      var nextPos = getScrollPosition({
        container: container,
        direction: direction
      });
      var offsetX = nextPos[0] - prevPos[0];
      var offsetY = nextPos[1] - prevPos[1];

      if (!offsetX && !offsetY) {
        return false;
      }

      this.trigger("move", {
        offsetX: direction[0] ? offsetX : 0,
        offsetY: direction[1] ? offsetY : 0,
        inputEvent: e
      });

      if (throttleTime) {
        this.timer = window.setTimeout(function () {
          _this.drag(e, options);
        }, throttleTime);
      }

      return true;
    };

    __proto.dragEnd = function () {
      clearTimeout(this.timer);
    };

    return DragScroll;
  }(EventEmitter$1);

  /*
  Copyright (c) 2019 Daybrush
  name: gesto
  license: MIT
  author: Daybrush
  repository: git+https://github.com/daybrush/gesture.git
  version: 1.3.0
  */

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */

  /* global Reflect, Promise */
  var extendStatics$3 = function (d, b) {
    extendStatics$3 = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics$3(d, b);
  };

  function __extends$3(d, b) {
    extendStatics$3(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  var __assign$4 = function () {
    __assign$4 = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];

        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }

      return t;
    };

    return __assign$4.apply(this, arguments);
  };

  function getRad(pos1, pos2) {
    var distX = pos2[0] - pos1[0];
    var distY = pos2[1] - pos1[1];
    var rad = Math.atan2(distY, distX);
    return rad >= 0 ? rad : rad + Math.PI * 2;
  }
  function getRotatiion(touches) {
    return getRad([touches[0].clientX, touches[0].clientY], [touches[1].clientX, touches[1].clientY]) / Math.PI * 180;
  }
  function isMultiTouch(e) {
    return e.touches && e.touches.length >= 2;
  }
  function getEventClients(e) {
    if (e.touches) {
      return getClients(e.touches);
    } else {
      return [getClient(e)];
    }
  }
  function getPosition(clients, prevClients, startClients) {
    var length = startClients.length;

    var _a = getAverageClient(clients, length),
        clientX = _a.clientX,
        clientY = _a.clientY,
        originalClientX = _a.originalClientX,
        originalClientY = _a.originalClientY;

    var _b = getAverageClient(prevClients, length),
        prevX = _b.clientX,
        prevY = _b.clientY;

    var _c = getAverageClient(startClients, length),
        startX = _c.clientX,
        startY = _c.clientY;

    var deltaX = clientX - prevX;
    var deltaY = clientY - prevY;
    var distX = clientX - startX;
    var distY = clientY - startY;
    return {
      clientX: originalClientX,
      clientY: originalClientY,
      deltaX: deltaX,
      deltaY: deltaY,
      distX: distX,
      distY: distY
    };
  }
  function getDist$1(clients) {
    return Math.sqrt(Math.pow(clients[0].clientX - clients[1].clientX, 2) + Math.pow(clients[0].clientY - clients[1].clientY, 2));
  }
  function getClients(touches) {
    var length = Math.min(touches.length, 2);
    var clients = [];

    for (var i = 0; i < length; ++i) {
      clients.push(getClient(touches[i]));
    }

    return clients;
  }
  function getClient(e) {
    return {
      clientX: e.clientX,
      clientY: e.clientY
    };
  }
  function getAverageClient(clients, length) {
    if (length === void 0) {
      length = clients.length;
    }

    var sumClient = {
      clientX: 0,
      clientY: 0,
      originalClientX: 0,
      originalClientY: 0
    };

    for (var i = 0; i < length; ++i) {
      var client = clients[i];
      sumClient.originalClientX += "originalClientX" in client ? client.originalClientX : client.clientX;
      sumClient.originalClientY += "originalClientY" in client ? client.originalClientY : client.clientY;
      sumClient.clientX += client.clientX;
      sumClient.clientY += client.clientY;
    }

    if (!length) {
      return sumClient;
    }

    return {
      clientX: sumClient.clientX / length,
      clientY: sumClient.clientY / length,
      originalClientX: sumClient.originalClientX / length,
      originalClientY: sumClient.originalClientY / length
    };
  }

  var ClientStore =
  /*#__PURE__*/
  function () {
    function ClientStore(clients) {
      this.prevClients = [];
      this.startClients = [];
      this.movement = 0;
      this.length = 0;
      this.startClients = clients;
      this.prevClients = clients;
      this.length = clients.length;
    }

    var __proto = ClientStore.prototype;

    __proto.addClients = function (clients) {
      if (clients === void 0) {
        clients = this.prevClients;
      }

      var position = this.getPosition(clients);
      var deltaX = position.deltaX,
          deltaY = position.deltaY;
      this.movement += Math.sqrt(deltaX * deltaX + deltaY * deltaY);
      this.prevClients = clients;
      return position;
    };

    __proto.getAngle = function (clients) {
      if (clients === void 0) {
        clients = this.prevClients;
      }

      return getRotatiion(clients);
    };

    __proto.getRotation = function (clients) {
      if (clients === void 0) {
        clients = this.prevClients;
      }

      return getRotatiion(clients) - getRotatiion(this.startClients);
    };

    __proto.getPosition = function (clients) {
      return getPosition(clients || this.prevClients, this.prevClients, this.startClients);
    };

    __proto.getPositions = function (clients) {
      if (clients === void 0) {
        clients = this.prevClients;
      }

      var prevClients = this.prevClients;
      return this.startClients.map(function (startClient, i) {
        return getPosition([clients[i]], [prevClients[i]], [startClient]);
      });
    };

    __proto.getMovement = function (clients) {
      var movement = this.movement;

      if (!clients) {
        return movement;
      }

      var currentClient = getAverageClient(clients, this.length);
      var prevClient = getAverageClient(this.prevClients, this.length);
      var deltaX = currentClient.clientX - prevClient.clientX;
      var deltaY = currentClient.clientY - prevClient.clientY;
      return Math.sqrt(deltaX * deltaX + deltaY * deltaY) + movement;
    };

    __proto.getDistance = function (clients) {
      if (clients === void 0) {
        clients = this.prevClients;
      }

      return getDist$1(clients);
    };

    __proto.getScale = function (clients) {
      if (clients === void 0) {
        clients = this.prevClients;
      }

      return getDist$1(clients) / getDist$1(this.startClients);
    };

    __proto.move = function (deltaX, deltaY) {
      this.startClients.forEach(function (client) {
        client.clientX -= deltaX;
        client.clientY -= deltaY;
      });
      this.prevClients.forEach(function (client) {
        client.clientX -= deltaX;
        client.clientY -= deltaY;
      });
    };

    return ClientStore;
  }();

  var INPUT_TAGNAMES = ["textarea", "input"];
  /**
   * You can set up drag, pinch events in any browser.
   */

  var Gesto =
  /*#__PURE__*/
  function (_super) {
    __extends$3(Gesto, _super);
    /**
     *
     */


    function Gesto(targets, options) {
      if (options === void 0) {
        options = {};
      }

      var _this = _super.call(this) || this;

      _this.options = {};
      _this.flag = false;
      _this.pinchFlag = false;
      _this.datas = {};
      _this.isDrag = false;
      _this.isPinch = false;
      _this.isMouse = false;
      _this.isTouch = false;
      _this.clientStores = [];
      _this.targets = [];
      _this.prevTime = 0;
      _this.doubleFlag = false;

      _this.onDragStart = function (e, isTrusted) {
        if (isTrusted === void 0) {
          isTrusted = true;
        }

        if (!_this.flag && e.cancelable === false) {
          return;
        }

        var _a = _this.options,
            container = _a.container,
            pinchOutside = _a.pinchOutside,
            preventRightClick = _a.preventRightClick,
            preventDefault = _a.preventDefault,
            checkInput = _a.checkInput;
        var isTouch = _this.isTouch;
        var isDragStart = !_this.flag;

        if (isDragStart) {
          var activeElement = document.activeElement;
          var target = e.target;
          var tagName = target.tagName.toLowerCase();
          var hasInput = INPUT_TAGNAMES.indexOf(tagName) > -1;
          var hasContentEditable = target.isContentEditable;

          if (hasInput || hasContentEditable) {
            if (checkInput || activeElement === target) {
              // force false or already focused.
              return false;
            }

            if (activeElement && hasContentEditable && activeElement.isContentEditable && activeElement.contains(target)) {
              return false;
            }
          } else if ((preventDefault || e.type === "touchstart") && activeElement) {
            var activeTagName = activeElement.tagName;

            if (activeElement.isContentEditable || INPUT_TAGNAMES.indexOf(activeTagName) > -1) {
              activeElement.blur();
            }
          }

          _this.clientStores = [new ClientStore(getEventClients(e))];
          _this.flag = true;
          _this.isDrag = false;
          _this.datas = {};

          if (preventRightClick && (e.which === 3 || e.button === 2)) {
            _this.initDrag();

            return false;
          }

          _this.doubleFlag = now() - _this.prevTime < 200;

          var result = _this.emit("dragStart", __assign$4({
            datas: _this.datas,
            inputEvent: e,
            isTrusted: isTrusted,
            isDouble: _this.doubleFlag
          }, _this.getCurrentStore().getPosition()));

          if (result === false) {
            _this.initDrag();
          }

          _this.flag && preventDefault && e.preventDefault();
        }

        if (!_this.flag) {
          return false;
        }

        var timer = 0;

        if (isDragStart && isTouch && pinchOutside) {
          timer = setTimeout(function () {
            addEvent(container, "touchstart", _this.onDragStart, {
              passive: false
            });
          });
        }

        if (!isDragStart && isTouch && pinchOutside) {
          removeEvent(container, "touchstart", _this.onDragStart);
        }

        if (_this.flag && isMultiTouch(e)) {
          clearTimeout(timer);

          if (isDragStart && e.touches.length !== e.changedTouches.length) {
            return;
          }

          if (!_this.pinchFlag) {
            _this.onPinchStart(e);
          }
        }
      };

      _this.onDrag = function (e, isScroll) {
        if (!_this.flag) {
          return;
        }

        var clients = getEventClients(e);

        var result = _this.moveClients(clients, e, false);

        if (_this.pinchFlag || result.deltaX || result.deltaY) {
          _this.emit("drag", __assign$4({}, result, {
            isScroll: !!isScroll,
            inputEvent: e
          }));
        }

        if (_this.pinchFlag) {
          _this.onPinch(e, clients);
        }

        _this.getCurrentStore().addClients(clients);
      };

      _this.onDragEnd = function (e) {
        if (!_this.flag) {
          return;
        }

        var _a = _this.options,
            pinchOutside = _a.pinchOutside,
            container = _a.container;

        if (_this.isTouch && pinchOutside) {
          removeEvent(container, "touchstart", _this.onDragStart);
        }

        _this.flag = false;

        var position = _this.getCurrentStore().getPosition();

        var currentTime = now();
        var isDouble = !_this.isDrag && _this.doubleFlag;
        _this.prevTime = _this.isDrag || isDouble ? 0 : currentTime;

        _this.emit("dragEnd", __assign$4({
          datas: _this.datas,
          isDouble: isDouble,
          isDrag: _this.isDrag,
          inputEvent: e
        }, position));

        if (_this.pinchFlag) {
          _this.onPinchEnd(e);
        }

        _this.clientStores = [];
      };

      _this.onBlur = function () {
        _this.onDragEnd();
      };

      var elements = [].concat(targets);
      _this.options = __assign$4({
        checkInput: false,
        container: elements.length > 1 ? window : elements[0],
        preventRightClick: true,
        preventDefault: true,
        checkWindowBlur: false,
        pinchThreshold: 0,
        events: ["touch", "mouse"]
      }, options);
      var _a = _this.options,
          container = _a.container,
          events = _a.events,
          checkWindowBlur = _a.checkWindowBlur;
      _this.isTouch = events.indexOf("touch") > -1;
      _this.isMouse = events.indexOf("mouse") > -1;
      _this.targets = elements;

      if (_this.isMouse) {
        elements.forEach(function (el) {
          addEvent(el, "mousedown", _this.onDragStart);
        });
        addEvent(container, "mousemove", _this.onDrag);
        addEvent(container, "mouseup", _this.onDragEnd);
        addEvent(container, "contextmenu", _this.onDragEnd);
      }

      if (checkWindowBlur) {
        addEvent(window, "blur", _this.onBlur);
      }

      if (_this.isTouch) {
        var passive_1 = {
          passive: false
        };
        elements.forEach(function (el) {
          addEvent(el, "touchstart", _this.onDragStart, passive_1);
        });
        addEvent(container, "touchmove", _this.onDrag, passive_1);
        addEvent(container, "touchend", _this.onDragEnd, passive_1);
        addEvent(container, "touchcancel", _this.onDragEnd, passive_1);
      }

      return _this;
    }
    /**
     * The total moved distance
     */


    var __proto = Gesto.prototype;

    __proto.getMovement = function (clients) {
      return this.getCurrentStore().getMovement(clients) + this.clientStores.slice(1).reduce(function (prev, cur) {
        return prev + cur.movement;
      }, 0);
    };
    /**
     * Whether to drag
     */


    __proto.isDragging = function () {
      return this.isDrag;
    };
    /**
     * Whether to start drag
     */


    __proto.isFlag = function () {
      return this.flag;
    };
    /**
     * Whether to start pinch
     */


    __proto.isPinchFlag = function () {
      return this.pinchFlag;
    };
    /**
    * Whether to start double click
    */


    __proto.isDoubleFlag = function () {
      return this.doubleFlag;
    };
    /**
     * Whether to pinch
     */


    __proto.isPinching = function () {
      return this.isPinch;
    };
    /**
     * If a scroll event occurs, it is corrected by the scroll distance.
     */


    __proto.scrollBy = function (deltaX, deltaY, e, isCallDrag) {
      if (isCallDrag === void 0) {
        isCallDrag = true;
      }

      if (!this.flag) {
        return;
      }

      this.clientStores[0].move(deltaX, deltaY);
      isCallDrag && this.onDrag(e, true);
    };
    /**
     * Create a virtual drag event.
     */


    __proto.move = function (_a, inputEvent) {
      var deltaX = _a[0],
          deltaY = _a[1];
      var store = this.getCurrentStore();
      var nextClients = store.prevClients;
      return this.moveClients(nextClients.map(function (_a) {
        var clientX = _a.clientX,
            clientY = _a.clientY;
        return {
          clientX: clientX + deltaX,
          clientY: clientY + deltaY,
          originalClientX: clientX,
          originalClientY: clientY
        };
      }), inputEvent, true);
    };
    /**
     * The dragStart event is triggered by an external event.
     */


    __proto.triggerDragStart = function (e) {
      this.onDragStart(e, false);
    };
    /**
     * Set the event data while dragging.
     */


    __proto.setEventDatas = function (datas) {
      var currentDatas = this.datas;

      for (var name in datas) {
        currentDatas[name] = datas[name];
      }

      return this;
    };
    /**
     * Set the event data while dragging.
     */


    __proto.getEventDatas = function () {
      return this.datas;
    };
    /**
     * Unset Gesto
     */


    __proto.unset = function () {
      var _this = this;

      var targets = this.targets;
      var container = this.options.container;
      this.off();
      removeEvent(window, "blur", this.onBlur);

      if (this.isMouse) {
        targets.forEach(function (target) {
          removeEvent(target, "mousedown", _this.onDragStart);
        });
        removeEvent(container, "mousemove", this.onDrag);
        removeEvent(container, "mouseup", this.onDragEnd);
        removeEvent(container, "contextmenu", this.onDragEnd);
      }

      if (this.isTouch) {
        targets.forEach(function (target) {
          removeEvent(target, "touchstart", _this.onDragStart);
        });
        removeEvent(container, "touchstart", this.onDragStart);
        removeEvent(container, "touchmove", this.onDrag);
        removeEvent(container, "touchend", this.onDragEnd);
        removeEvent(container, "touchcancel", this.onDragEnd);
      }
    };

    __proto.onPinchStart = function (e) {
      var pinchThreshold = this.options.pinchThreshold;

      if (this.isDrag && this.getMovement() > pinchThreshold) {
        return;
      }

      var store = new ClientStore(getEventClients(e));
      this.pinchFlag = true;
      this.clientStores.splice(0, 0, store);
      var result = this.emit("pinchStart", __assign$4({
        datas: this.datas,
        angle: store.getAngle(),
        touches: this.getCurrentStore().getPositions()
      }, store.getPosition(), {
        inputEvent: e
      }));

      if (result === false) {
        this.pinchFlag = false;
      }
    };

    __proto.onPinch = function (e, clients) {
      if (!this.flag || !this.pinchFlag || clients.length < 2) {
        return;
      }

      var store = this.getCurrentStore();
      this.isPinch = true;
      this.emit("pinch", __assign$4({
        datas: this.datas,
        movement: this.getMovement(clients),
        angle: store.getAngle(clients),
        rotation: store.getRotation(clients),
        touches: store.getPositions(clients),
        scale: store.getScale(clients),
        distance: store.getDistance(clients)
      }, store.getPosition(clients), {
        inputEvent: e
      }));
    };

    __proto.onPinchEnd = function (e) {
      if (!this.pinchFlag) {
        return;
      }

      var isPinch = this.isPinch;
      this.isPinch = false;
      this.pinchFlag = false;
      var store = this.getCurrentStore();
      this.emit("pinchEnd", __assign$4({
        datas: this.datas,
        isPinch: isPinch,
        touches: store.getPositions()
      }, store.getPosition(), {
        inputEvent: e
      }));
      this.isPinch = false;
      this.pinchFlag = false;
    };

    __proto.initDrag = function () {
      this.clientStores = [];
      this.pinchFlag = false;
      this.doubleFlag = false;
      this.prevTime = 0;
      this.flag = false;
    };

    __proto.getCurrentStore = function () {
      return this.clientStores[0];
    };

    __proto.moveClients = function (clients, inputEvent, isAdd) {
      var store = this.getCurrentStore();
      var position = store[isAdd ? "addClients" : "getPosition"](clients);
      this.isDrag = true;
      return __assign$4({
        datas: this.datas
      }, position, {
        movement: this.getMovement(clients),
        isDrag: this.isDrag,
        isPinch: this.isPinch,
        isScroll: false,
        inputEvent: inputEvent
      });
    };

    return Gesto;
  }(EventEmitter$1);

  /*
  Copyright (c) 2019 Daybrush
  name: css-styled
  license: MIT
  author: Daybrush
  repository: git+https://github.com/daybrush/css-styled.git
  version: 1.0.0
  */

  function hash(str) {
    var hash = 5381,
        i    = str.length;

    while(i) {
      hash = (hash * 33) ^ str.charCodeAt(--i);
    }

    /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
     * integers. Since we want the results to be always positive, convert the
     * signed int to an unsigned by doing an unsigned bitshift. */
    return hash >>> 0;
  }

  var stringHash = hash;

  function getHash(str) {
    return stringHash(str).toString(36);
  }
  function getShadowRoot(parentElement) {
    if (parentElement && parentElement.getRootNode) {
      var rootNode = parentElement.getRootNode();

      if (rootNode.nodeType === 11) {
        return rootNode;
      }
    }

    return;
  }
  function replaceStyle(className, css, options) {
    if (options.original) {
      return css;
    }

    return css.replace(/([^};{\s}][^};{]*|^\s*){/mg, function (_, selector) {
      var trimmedSelector = selector.trim();
      return (trimmedSelector ? splitComma(trimmedSelector) : [""]).map(function (subSelector) {
        var trimmedSubSelector = subSelector.trim();

        if (trimmedSubSelector.indexOf("@") === 0) {
          return trimmedSubSelector;
        } else if (trimmedSubSelector.indexOf(":global") > -1) {
          return trimmedSubSelector.replace(/\:global/g, "");
        } else if (trimmedSubSelector.indexOf(":host") > -1) {
          return "" + trimmedSubSelector.replace(/\:host/g, "." + className);
        } else if (trimmedSubSelector) {
          return "." + className + " " + trimmedSubSelector;
        } else {
          return "." + className;
        }
      }).join(", ") + " {";
    });
  }
  function injectStyle(className, css, options, shadowRoot) {
    var style = document.createElement("style");
    style.setAttribute("type", "text/css");
    style.setAttribute("data-styled-id", className);

    if (options.nonce) {
      style.setAttribute("nonce", options.nonce);
    }

    style.innerHTML = replaceStyle(className, css, options);
    (shadowRoot || document.head || document.body).appendChild(style);
    return style;
  }

  /**
   * Create an styled object that can be defined and inserted into the css.
   * @param - css styles
   */

  function styled$1(css) {
    var injectClassName = "rCS" + getHash(css);
    var injectCount = 0;
    var injectElement;
    return {
      className: injectClassName,
      inject: function (el, options) {
        if (options === void 0) {
          options = {};
        }

        var shadowRoot = getShadowRoot(el);
        var firstMount = injectCount === 0;
        var styleElement;

        if (shadowRoot || firstMount) {
          styleElement = injectStyle(injectClassName, css, options, shadowRoot);
        }

        if (firstMount) {
          injectElement = styleElement;
        }

        if (!shadowRoot) {
          ++injectCount;
        }

        return {
          destroy: function () {
            if (shadowRoot) {
              el.removeChild(styleElement);
              styleElement = null;
            } else {
              if (injectCount > 0) {
                --injectCount;
              }

              if (injectCount === 0 && injectElement) {
                injectElement.parentNode.removeChild(injectElement);
                injectElement = null;
              }
            }
          }
        };
      }
    };
  }

  /*
  Copyright (c) Daybrush
  name: react-compat-css-styled
  license: MIT
  author: Daybrush
  repository: git+https://github.com/daybrush/css-styled.git
  version: 1.0.6
  */

  /*
  Copyright (c) 2019 Daybrush
  name: react-css-styled
  license: MIT
  author: Daybrush
  repository: https://github.com/daybrush/css-styled/tree/master/packages/react-css-styled
  version: 1.0.2
  */

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */

  /* global Reflect, Promise */
  var extendStatics$2 = function (d, b) {
    extendStatics$2 = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics$2(d, b);
  };

  function __extends$2(d, b) {
    extendStatics$2(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  var __assign$3 = function () {
    __assign$3 = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];

        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }

      return t;
    };

    return __assign$3.apply(this, arguments);
  };
  function __rest$1(s, e) {
    var t = {};

    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  }

  var StyledElement =
  /*#__PURE__*/
  function (_super) {
    __extends$2(StyledElement, _super);

    function StyledElement() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.injectResult = null;
      _this.tag = "div";
      return _this;
    }

    var __proto = StyledElement.prototype;

    __proto.render = function () {
      var _a = this.props,
          _b = _a.className,
          className = _b === void 0 ? "" : _b;
          _a.cspNonce;
          var portalContainer = _a.portalContainer,
          attributes = __rest$1(_a, ["className", "cspNonce", "portalContainer"]);

      var cssId = this.injector.className;
      var Tag = this.tag;
      var portalAttributes = {};

      if ((version ).indexOf("simple") > -1 && portalContainer) {
        portalAttributes = {
          portalContainer: portalContainer
        };
      }

      return createElement(Tag, __assign$3({
        "ref": ref(this, "element"),
        "data-styled-id": cssId,
        "className": className + " " + cssId
      }, portalAttributes, attributes));
    };

    __proto.componentDidMount = function () {
      this.injectResult = this.injector.inject(this.element, {
        nonce: this.props.cspNonce
      });
    };

    __proto.componentWillUnmount = function () {
      this.injectResult.destroy();
      this.injectResult = null;
    };

    __proto.getElement = function () {
      return this.element;
    };

    return StyledElement;
  }(Component);

  function styled(tag, css) {
    var injector = styled$1(css);
    return (
      /*#__PURE__*/
      function (_super) {
        __extends$2(Styled, _super);

        function Styled() {
          var _this = _super !== null && _super.apply(this, arguments) || this;

          _this.injector = injector;
          _this.tag = tag;
          return _this;
        }

        return Styled;
      }(StyledElement)
    );
  }

  /*
  Copyright (c) 2019 Daybrush
  name: react-compat-moveable
  license: MIT
  author: Daybrush
  repository: https://github.com/daybrush/moveable/blob/master/packages/react-compat-moveable
  version: 0.12.5
  */

  /*
  Copyright (c) 2019 Daybrush
  name: react-moveable
  license: MIT
  author: Daybrush
  repository: https://github.com/daybrush/moveable/blob/master/packages/react-moveable
  version: 0.27.5
  */

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  /* global Reflect, Promise */
  var extendStatics$1 = function (d, b) {
    extendStatics$1 = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics$1(d, b);
  };

  function __extends$1(d, b) {
    extendStatics$1(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  var __assign$2 = function () {
    __assign$2 = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];

        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }

      return t;
    };

    return __assign$2.apply(this, arguments);
  };
  function __rest(s, e) {
    var t = {};

    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  }
  function __decorate$1(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }
  function __spreadArrays$1() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

    return r;
  }

  function getSVGCursor(scale, degree) {
    return "data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"" + 32 * scale + "px\" height=\"" + 32 * scale + "px\" viewBox=\"0 0 32 32\" ><path d=\"M 16,5 L 12,10 L 14.5,10 L 14.5,22 L 12,22 L 16,27 L 20,22 L 17.5,22 L 17.5,10 L 20, 10 L 16,5 Z\" stroke-linejoin=\"round\" stroke-width=\"1.2\" fill=\"black\" stroke=\"white\" style=\"transform:rotate(" + degree + "deg);transform-origin: 16px 16px\"></path></svg>";
  }

  function getCursorCSS(degree) {
    var x1 = getSVGCursor(1, degree);
    var x2 = getSVGCursor(2, degree);
    var degree45 = Math.round(degree / 45) * 45 % 180;
    var defaultCursor = "ns-resize";

    if (degree45 === 135) {
      defaultCursor = "nwse-resize";
    } else if (degree45 === 45) {
      defaultCursor = "nesw-resize";
    } else if (degree45 === 90) {
      defaultCursor = "ew-resize";
    } // tslint:disable-next-line: max-line-length


    return "cursor:" + defaultCursor + ";cursor: url('" + x1 + "') 16 16, " + defaultCursor + ";cursor: -webkit-image-set(url('" + x1 + "') 1x, url('" + x2 + "') 2x) 16 16, " + defaultCursor + ";";
  }

  var agent = agent$1();
  var IS_WEBKIT = agent.browser.webkit;
  var IS_WEBKIT605 = IS_WEBKIT && function () {
    var res = /applewebkit\/([^\s]+)/g.exec(navigator.userAgent.toLowerCase());
    return res ? parseFloat(res[1]) < 605 : false;
  }();
  var PREFIX = "moveable-";
  var MOVEABLE_CSS = "\n{\n\tposition: absolute;\n\twidth: 1px;\n\theight: 1px;\n\tleft: 0;\n\ttop: 0;\n    z-index: 3000;\n    --moveable-color: #4af;\n    --zoom: 1;\n    --zoompx: 1px;\n    will-change: transform;\n}\n.control-box {\n    z-index: 0;\n}\n.line, .control {\n    position: absolute;\n\tleft: 0;\n    top: 0;\n    will-change: transform;\n}\n.control {\n\twidth: 14px;\n\theight: 14px;\n\tborder-radius: 50%;\n\tborder: 2px solid #fff;\n\tbox-sizing: border-box;\n    background: #4af;\n    background: var(--moveable-color);\n\tmargin-top: -7px;\n    margin-left: -7px;\n    border: 2px solid #fff;\n    z-index: 10;\n}\n.padding {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    width: 100px;\n    height: 100px;\n    transform-origin: 0 0;\n}\n.line {\n\twidth: 1px;\n    height: 1px;\n    background: #4af;\n    background: var(--moveable-color);\n\ttransform-origin: 0px 50%;\n}\n.line.dashed {\n    box-sizing: border-box;\n    background: transparent;\n}\n.line.dashed.horizontal {\n    border-top: 1px dashed #4af;\n    border-top-color: #4af;\n    border-top-color: var(--moveable-color);\n}\n.line.dashed.vertical {\n    border-left: 1px dashed #4af;\n    border-left-color: #4af;\n    border-left-color: var(--moveable-color);\n}\n.line.vertical {\n    transform: translateX(-50%);\n}\n.line.horizontal {\n    transform: translateY(-50%);\n}\n.line.vertical.bold {\n    width: 2px;\n}\n.line.horizontal.bold {\n    height: 2px;\n}\n\n.control.origin {\n\tborder-color: #f55;\n\tbackground: #fff;\n\twidth: 12px;\n\theight: 12px;\n\tmargin-top: -6px;\n    margin-left: -6px;\n\tpointer-events: none;\n}\n" + [0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165].map(function (degree) {
    return "\n.direction[data-rotation=\"" + degree + "\"] {\n\t" + getCursorCSS(degree) + "\n}\n";
  }).join("\n") + "\n.group {\n    z-index: -1;\n}\n.area {\n    position: absolute;\n}\n.area-pieces {\n    position: absolute;\n    top: 0;\n    left: 0;\n    display: none;\n}\n.area.avoid, .area.pass {\n    pointer-events: none;\n}\n.area.avoid+.area-pieces {\n    display: block;\n}\n.area-piece {\n    position: absolute;\n}\n\n" + (IS_WEBKIT605 ? ":global svg *:before {\n\tcontent:\"\";\n\ttransform-origin: inherit;\n}" : "") + "\n";
  var NEARBY_POS = [[0, 1, 2], [1, 0, 3], [2, 0, 3], [3, 1, 2]];
  var TINY_NUM = 0.0000001;
  var MIN_SCALE = 0.000000001;
  var MAX_NUM = Math.pow(10, 10);
  var MIN_NUM = -MAX_NUM;
  var DIRECTIONS = ["n", "w", "s", "e", "nw", "ne", "sw", "se"];
  var DIRECTION_INDEXES = {
    n: [0, 1],
    s: [2, 3],
    w: [2, 0],
    e: [1, 3],
    nw: [0],
    ne: [1],
    sw: [2],
    se: [3]
  };
  var DIRECTION_ROTATIONS = {
    n: 0,
    s: 180,
    w: 270,
    e: 90,
    nw: 315,
    ne: 45,
    sw: 225,
    se: 135
  };
  var MOVEABLE_METHODS = ["isMoveableElement", "updateRect", "updateTarget", "destroy", "dragStart", "isInside", "hitTest", "setState", "getRect", "request", "isDragging", "getManager"];

  function multiply2(pos1, pos2) {
    return [pos1[0] * pos2[0], pos1[1] * pos2[1]];
  }
  function prefix() {
    var classNames = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      classNames[_i] = arguments[_i];
    }

    return prefixNames.apply(void 0, __spreadArrays$1([PREFIX], classNames));
  }
  function getTransformMatrix(transform) {
    if (!transform || transform === "none") {
      return [1, 0, 0, 1, 0, 0];
    }

    if (isObject(transform)) {
      return transform;
    }

    var value = splitBracket(transform).value;
    return value.split(/s*,\s*/g).map(function (v) {
      return parseFloat(v);
    });
  }
  function getAbsoluteMatrix(matrix, n, origin) {
    return multiplies(n, createOriginMatrix(origin, n), matrix, createOriginMatrix(origin.map(function (a) {
      return -a;
    }), n));
  }
  function measureSVGSize(el, unit, isHorizontal) {
    if (unit === "%") {
      var viewBox = getSVGViewBox(el.ownerSVGElement);
      return viewBox[isHorizontal ? "width" : "height"] / 100;
    }

    return 1;
  }
  function getBeforeTransformOrigin(el) {
    var relativeOrigin = getTransformOrigin(getComputedStyle$1(el, ":before"));
    return relativeOrigin.map(function (o, i) {
      var _a = splitUnit(o),
          value = _a.value,
          unit = _a.unit;

      return value * measureSVGSize(el, unit, i === 0);
    });
  }
  function getTransformOrigin(style) {
    var transformOrigin = style.transformOrigin;
    return transformOrigin ? transformOrigin.split(" ") : ["0", "0"];
  }
  function getOffsetInfo(el, lastParent, isParent) {
    var body = document.body;
    var target = !el || isParent ? el : el.parentElement;
    var isEnd = el === lastParent || target === lastParent;
    var position = "relative";

    while (target && target !== body) {
      if (lastParent === target) {
        isEnd = true;
      }

      var style = getComputedStyle$1(target);
      var transform = style.transform;
      position = style.position;

      if (target.tagName.toLowerCase() === "svg" || position !== "static" || transform && transform !== "none") {
        break;
      }

      target = target.parentElement;
      position = "relative";
    }

    return {
      isStatic: position === "static",
      isEnd: isEnd || !target || target === body,
      offsetParent: target || body
    };
  }
  function getOffsetPosInfo(el, container, style, isFixed) {
    var _a;

    var tagName = el.tagName.toLowerCase();
    var offsetLeft = el.offsetLeft;
    var offsetTop = el.offsetTop;

    if (isFixed) {
      var containerClientRect = (container || document.documentElement).getBoundingClientRect();
      offsetLeft -= containerClientRect.left;
      offsetTop -= containerClientRect.top;
    } // svg


    var isSVG = isUndefined(offsetLeft);
    var hasOffset = !isSVG;
    var origin;
    var targetOrigin; // inner svg element

    if (!hasOffset && tagName !== "svg") {
      origin = IS_WEBKIT605 ? getBeforeTransformOrigin(el) : getTransformOrigin(style).map(function (pos) {
        return parseFloat(pos);
      });
      targetOrigin = origin.slice();
      hasOffset = true;
      _a = getSVGGraphicsOffset(el, origin), offsetLeft = _a[0], offsetTop = _a[1], origin[0] = _a[2], origin[1] = _a[3];
    } else {
      origin = getTransformOrigin(style).map(function (pos) {
        return parseFloat(pos);
      });
      targetOrigin = origin.slice();
    }

    return {
      tagName: tagName,
      isSVG: isSVG,
      hasOffset: hasOffset,
      offset: [offsetLeft || 0, offsetTop || 0],
      origin: origin,
      targetOrigin: targetOrigin
    };
  }
  function getBodyOffset(el, isSVG, style) {
    if (style === void 0) {
      style = window.getComputedStyle(el);
    }

    var bodyStyle = window.getComputedStyle(document.body);
    var bodyPosition = bodyStyle.position;

    if (!isSVG && (!bodyPosition || bodyPosition === "static")) {
      return [0, 0];
    }

    var marginLeft = parseInt(bodyStyle.marginLeft, 10);
    var marginTop = parseInt(bodyStyle.marginTop, 10);

    if (style.position === "absolute") {
      if (style.top !== "auto" || style.bottom !== "auto") {
        marginTop = 0;
      }

      if (style.left !== "auto" || style.right !== "auto") {
        marginLeft = 0;
      }
    }

    return [marginLeft, marginTop];
  }
  function getMatrixStackInfo(target, container) {
    var el = target;
    var matrixes = [];
    var isEnd = false;
    var is3d = false;
    var n = 3;
    var transformOrigin;
    var targetTransformOrigin;
    var targetMatrix;
    var offsetContainer = getOffsetInfo(container, container, true).offsetParent; // if (prevMatrix) {
    //     isEnd = target === container;
    //     if (prevMatrix.length > 10) {
    //         is3d = true;
    //         n = 4;
    //     }
    //     container = target.parentElement;
    // }

    while (el && !isEnd) {
      var style = getComputedStyle$1(el);
      var position = style.position;
      var isFixed = position === "fixed";
      var matrix = convertCSStoMatrix(getTransformMatrix(style.transform)); // convert 3 to 4

      var length = matrix.length;

      if (!is3d && length === 16) {
        is3d = true;
        n = 4;
        var matrixesLength = matrixes.length;

        for (var i = 0; i < matrixesLength; ++i) {
          matrixes[i] = convertDimension(matrixes[i], 3, 4);
        }
      }

      if (is3d && length === 9) {
        matrix = convertDimension(matrix, 3, 4);
      }

      var _a = getOffsetPosInfo(el, container, style, isFixed),
          tagName = _a.tagName,
          hasOffset = _a.hasOffset,
          isSVG = _a.isSVG,
          origin = _a.origin,
          targetOrigin = _a.targetOrigin,
          offsetPos = _a.offset;

      var offsetLeft = offsetPos[0],
          offsetTop = offsetPos[1];

      if (tagName === "svg" && targetMatrix) {
        matrixes.push( // scale matrix for svg's SVGElements.
        getSVGMatrix(el, n), createIdentityMatrix(n));
      } else if (tagName === "g" && target !== el) {
        offsetLeft = 0;
        offsetTop = 0;
      }

      var _b = getOffsetInfo(el, container),
          offsetParent = _b.offsetParent,
          isOffsetEnd = _b.isEnd,
          isStatic = _b.isStatic;

      if (IS_WEBKIT && hasOffset && !isSVG && isStatic && (position === "relative" || position === "static")) {
        offsetLeft -= offsetParent.offsetLeft;
        offsetTop -= offsetParent.offsetTop;
        isEnd = isEnd || isOffsetEnd;
      }

      var parentClientLeft = 0;
      var parentClientTop = 0;

      if (hasOffset && offsetContainer !== offsetParent) {
        // border
        parentClientLeft = offsetParent.clientLeft;
        parentClientTop = offsetParent.clientTop;
      }

      if (hasOffset && offsetParent === document.body) {
        var margin = getBodyOffset(el, false, style);
        offsetLeft += margin[0];
        offsetTop += margin[1];
      }

      matrixes.push( // absolute matrix
      getAbsoluteMatrix(matrix, n, origin), // offset matrix (offsetPos + clientPos(border))
      createOriginMatrix(hasOffset ? [offsetLeft - el.scrollLeft + parentClientLeft, offsetTop - el.scrollTop + parentClientTop] : [el, origin], n));

      if (!targetMatrix) {
        targetMatrix = matrix;
      }

      if (!transformOrigin) {
        transformOrigin = origin;
      }

      if (!targetTransformOrigin) {
        targetTransformOrigin = targetOrigin;
      }

      if (isEnd || isFixed) {
        break;
      } else {
        el = offsetParent;
        isEnd = isOffsetEnd;
      }
    }

    if (!targetMatrix) {
      targetMatrix = createIdentityMatrix(n);
    }

    if (!transformOrigin) {
      transformOrigin = [0, 0];
    }

    if (!targetTransformOrigin) {
      targetTransformOrigin = [0, 0];
    }

    return {
      offsetContainer: offsetContainer,
      matrixes: matrixes,
      targetMatrix: targetMatrix,
      transformOrigin: transformOrigin,
      targetOrigin: targetTransformOrigin,
      is3d: is3d
    };
  }
  function calculateElementInfo(target, container, rootContainer, isAbsolute3d) {
    var _a;

    if (rootContainer === void 0) {
      rootContainer = container;
    } // const prevMatrix = state ? state.beforeMatrix : undefined;
    // const prevRootMatrix = state ? state.rootMatrix : undefined;
    // const prevN = state ? (state.is3d ? 4 : 3) : undefined;


    var width = 0;
    var height = 0;
    var rotation = 0;
    var allResult = {};

    if (target) {
      var style = getComputedStyle$1(target);
      width = target.offsetWidth;
      height = target.offsetHeight;

      if (isUndefined(width)) {
        _a = getSize(target, style, true), width = _a[0], height = _a[1];
      }
    }

    if (target) {
      var result = calculateMatrixStack(target, container, rootContainer, isAbsolute3d);
      var position = calculateMoveablePosition(result.allMatrix, result.transformOrigin, width, height);
      allResult = __assign$2(__assign$2({}, result), position);
      var rotationPosition = calculateMoveablePosition(result.allMatrix, [50, 50], 100, 100);
      rotation = getRotationRad([rotationPosition.pos1, rotationPosition.pos2], rotationPosition.direction);
    }

    var n = isAbsolute3d ? 4 : 3;
    return __assign$2({
      width: width,
      height: height,
      rotation: rotation,
      // rootMatrix: number[];
      // beforeMatrix: number[];
      // offsetMatrix: number[];
      // allMatrix: number[];
      // targetMatrix: number[];
      // targetTransform: string;
      // transformOrigin: number[];
      // targetOrigin: number[];
      // is3d: boolean;
      rootMatrix: createIdentityMatrix(n),
      beforeMatrix: createIdentityMatrix(n),
      offsetMatrix: createIdentityMatrix(n),
      allMatrix: createIdentityMatrix(n),
      targetMatrix: createIdentityMatrix(n),
      targetTransform: "",
      transformOrigin: [0, 0],
      targetOrigin: [0, 0],
      is3d: !!isAbsolute3d,
      // left: number;
      // top: number;
      // right: number;
      // bottom: number;
      // origin: number[];
      // pos1: number[];
      // pos2: number[];
      // pos3: number[];
      // pos4: number[];
      // direction: 1 | -1;
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      origin: [0, 0],
      pos1: [0, 0],
      pos2: [0, 0],
      pos3: [0, 0],
      pos4: [0, 0],
      direction: 1
    }, allResult);
  }
  function calculateMatrixStack(target, container, rootContainer, isAbsolute3d) {
    if (rootContainer === void 0) {
      rootContainer = container;
    }

    var _a = getMatrixStackInfo(target, container),
        matrixes = _a.matrixes,
        is3d = _a.is3d,
        prevTargetMatrix = _a.targetMatrix,
        transformOrigin = _a.transformOrigin,
        targetOrigin = _a.targetOrigin,
        offsetContainer = _a.offsetContainer; // prevMatrix


    var _b = getMatrixStackInfo(offsetContainer, rootContainer),
        rootMatrixes = _b.matrixes,
        isRoot3d = _b.is3d; // prevRootMatrix
    // if (rootContainer === document.body) {
    //     console.log(offsetContainer, rootContainer, rootMatrixes);
    // }


    var isNext3d = isAbsolute3d || isRoot3d || is3d;
    var n = isNext3d ? 4 : 3;
    var isSVGGraphicElement = target.tagName.toLowerCase() !== "svg" && "ownerSVGElement" in target;
    var originalContainer = container || document.body;
    var targetMatrix = prevTargetMatrix; // let allMatrix = prevMatrix ? convertDimension(prevMatrix, prevN!, n) : createIdentityMatrix(n);
    // let rootMatrix = prevRootMatrix ? convertDimension(prevRootMatrix, prevN!, n) : createIdentityMatrix(n);
    // let beforeMatrix = prevMatrix ? convertDimension(prevMatrix, prevN!, n) : createIdentityMatrix(n);

    var allMatrix = createIdentityMatrix(n);
    var rootMatrix = createIdentityMatrix(n);
    var beforeMatrix = createIdentityMatrix(n);
    var offsetMatrix = createIdentityMatrix(n);
    var length = matrixes.length;
    var endContainer = getOffsetInfo(originalContainer, originalContainer, true).offsetParent;
    rootMatrixes.reverse();
    matrixes.reverse();

    if (!is3d && isNext3d) {
      targetMatrix = convertDimension(targetMatrix, 3, 4);
      matrixes.forEach(function (matrix, i) {
        matrixes[i] = convertDimension(matrix, 3, 4);
      });
    }

    if (!isRoot3d && isNext3d) {
      rootMatrixes.forEach(function (matrix, i) {
        rootMatrixes[i] = convertDimension(matrix, 3, 4);
      });
    } // rootMatrix = (...) -> container -> offset -> absolute -> offset -> absolute(targetMatrix)
    // beforeMatrix = (... -> container -> offset -> absolute) -> offset -> absolute(targetMatrix)
    // offsetMatrix = (... -> container -> offset -> absolute -> offset) -> absolute(targetMatrix)
    // if (!prevRootMatrix) {


    rootMatrixes.forEach(function (matrix) {
      rootMatrix = multiply(rootMatrix, matrix, n);
    }); // }

    matrixes.forEach(function (matrix, i) {
      var _a;

      if (length - 2 === i) {
        // length - 3
        beforeMatrix = allMatrix.slice();
      }

      if (length - 1 === i) {
        // length - 2
        offsetMatrix = allMatrix.slice();
      } // calculate for SVGElement


      if (isObject(matrix[n * (n - 1)])) {
        _a = getSVGOffset(matrix[n * (n - 1)], endContainer, n, matrix[n * (n - 1) + 1], allMatrix, matrixes[i + 1]), matrix[n * (n - 1)] = _a[0], matrix[n * (n - 1) + 1] = _a[1];
      }

      allMatrix = multiply(allMatrix, matrix, n);
    });
    var isMatrix3d = !isSVGGraphicElement && is3d;

    if (!targetMatrix) {
      targetMatrix = createIdentityMatrix(isMatrix3d ? 4 : 3);
    }

    var targetTransform = makeMatrixCSS(isSVGGraphicElement && targetMatrix.length === 16 ? convertDimension(targetMatrix, 4, 3) : targetMatrix, isMatrix3d);
    rootMatrix = ignoreDimension(rootMatrix, n, n);
    return {
      rootMatrix: rootMatrix,
      beforeMatrix: beforeMatrix,
      offsetMatrix: offsetMatrix,
      allMatrix: allMatrix,
      targetMatrix: targetMatrix,
      targetTransform: targetTransform,
      transformOrigin: transformOrigin,
      targetOrigin: targetOrigin,
      is3d: isNext3d
    };
  }
  function makeMatrixCSS(matrix, is3d) {
    if (is3d === void 0) {
      is3d = matrix.length > 9;
    }

    return (is3d ? "matrix3d" : "matrix") + "(" + convertMatrixtoCSS(matrix, !is3d).join(",") + ")";
  }
  function getSVGViewBox(el) {
    var clientWidth = el.clientWidth;
    var clientHeight = el.clientHeight;

    if (!el) {
      return {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        clientWidth: clientWidth,
        clientHeight: clientHeight
      };
    }

    var viewBox = el.viewBox;
    var baseVal = viewBox && viewBox.baseVal || {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    };
    return {
      x: baseVal.x,
      y: baseVal.y,
      width: baseVal.width || clientWidth,
      height: baseVal.height || clientHeight,
      clientWidth: clientWidth,
      clientHeight: clientHeight
    };
  }
  function getSVGMatrix(el, n) {
    var _a = getSVGViewBox(el),
        viewBoxWidth = _a.width,
        viewBoxHeight = _a.height,
        clientWidth = _a.clientWidth,
        clientHeight = _a.clientHeight;

    var scaleX = clientWidth / viewBoxWidth;
    var scaleY = clientHeight / viewBoxHeight;
    var preserveAspectRatio = el.preserveAspectRatio.baseVal; // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio

    var align = preserveAspectRatio.align; // 1 : meet 2: slice

    var meetOrSlice = preserveAspectRatio.meetOrSlice;
    var svgOrigin = [0, 0];
    var scale = [scaleX, scaleY];
    var translate = [0, 0];

    if (align !== 1) {
      var xAlign = (align - 2) % 3;
      var yAlign = Math.floor((align - 2) / 3);
      svgOrigin[0] = viewBoxWidth * xAlign / 2;
      svgOrigin[1] = viewBoxHeight * yAlign / 2;
      var scaleDimension = meetOrSlice === 2 ? Math.max(scaleY, scaleX) : Math.min(scaleX, scaleY);
      scale[0] = scaleDimension;
      scale[1] = scaleDimension;
      translate[0] = (clientWidth - viewBoxWidth) / 2 * xAlign;
      translate[1] = (clientHeight - viewBoxHeight) / 2 * yAlign;
    }

    var scaleMatrix = createScaleMatrix(scale, n);
    scaleMatrix[n * (n - 1)] = translate[0], scaleMatrix[n * (n - 1) + 1] = translate[1];
    return getAbsoluteMatrix(scaleMatrix, n, svgOrigin);
  }
  function getSVGGraphicsOffset(el, origin) {
    if (!el.getBBox) {
      return [0, 0];
    }

    var bbox = el.getBBox();
    var viewBox = getSVGViewBox(el.ownerSVGElement);
    var left = bbox.x - viewBox.x;
    var top = bbox.y - viewBox.y;
    return [left, top, origin[0] - left, origin[1] - top];
  }
  function calculatePosition(matrix, pos, n) {
    return calculate(matrix, convertPositionMatrix(pos, n), n);
  }
  function calculatePoses(matrix, width, height, n) {
    return [[0, 0], [width, 0], [0, height], [width, height]].map(function (pos) {
      return calculatePosition(matrix, pos, n);
    });
  }
  function getRect(poses) {
    var posesX = poses.map(function (pos) {
      return pos[0];
    });
    var posesY = poses.map(function (pos) {
      return pos[1];
    });
    var left = Math.min.apply(Math, posesX);
    var top = Math.min.apply(Math, posesY);
    var right = Math.max.apply(Math, posesX);
    var bottom = Math.max.apply(Math, posesY);
    var rectWidth = right - left;
    var rectHeight = bottom - top;
    return {
      left: left,
      top: top,
      right: right,
      bottom: bottom,
      width: rectWidth,
      height: rectHeight
    };
  }
  function calculateRect(matrix, width, height, n) {
    var poses = calculatePoses(matrix, width, height, n);
    return getRect(poses);
  }
  function getSVGOffset(el, container, n, origin, beforeMatrix, absoluteMatrix) {
    var _a;

    var _b = getSize(el, undefined, true),
        width = _b[0],
        height = _b[1];

    var containerClientRect = container.getBoundingClientRect();
    var margin = [0, 0];

    if (container === document.body) {
      margin = getBodyOffset(el, true);
    }

    var rect = el.getBoundingClientRect();
    var rectLeft = rect.left - containerClientRect.left + container.scrollLeft - (container.clientLeft || 0) + margin[0];
    var rectTop = rect.top - containerClientRect.top + container.scrollTop - (container.clientTop || 0) + margin[1];
    var rectWidth = rect.width;
    var rectHeight = rect.height;
    var mat = multiplies(n, beforeMatrix, absoluteMatrix);

    var _c = calculateRect(mat, width, height, n),
        prevLeft = _c.left,
        prevTop = _c.top,
        prevWidth = _c.width,
        prevHeight = _c.height;

    var posOrigin = calculatePosition(mat, origin, n);
    var prevOrigin = minus(posOrigin, [prevLeft, prevTop]);
    var rectOrigin = [rectLeft + prevOrigin[0] * rectWidth / prevWidth, rectTop + prevOrigin[1] * rectHeight / prevHeight];
    var offset = [0, 0];
    var count = 0;

    while (++count < 10) {
      var inverseBeforeMatrix = invert(beforeMatrix, n);
      _a = minus(calculatePosition(inverseBeforeMatrix, rectOrigin, n), calculatePosition(inverseBeforeMatrix, posOrigin, n)), offset[0] = _a[0], offset[1] = _a[1];
      var mat2 = multiplies(n, beforeMatrix, createOriginMatrix(offset, n), absoluteMatrix);

      var _d = calculateRect(mat2, width, height, n),
          nextLeft = _d.left,
          nextTop = _d.top;

      var distLeft = nextLeft - rectLeft;
      var distTop = nextTop - rectTop;

      if (Math.abs(distLeft) < 2 && Math.abs(distTop) < 2) {
        break;
      }

      rectOrigin[0] -= distLeft;
      rectOrigin[1] -= distTop;
    }

    return offset.map(function (p) {
      return Math.round(p);
    });
  }
  function calculateMoveablePosition(matrix, origin, width, height) {
    var is3d = matrix.length === 16;
    var n = is3d ? 4 : 3;
    var poses = calculatePoses(matrix, width, height, n);
    var _a = poses[0],
        x1 = _a[0],
        y1 = _a[1],
        _b = poses[1],
        x2 = _b[0],
        y2 = _b[1],
        _c = poses[2],
        x3 = _c[0],
        y3 = _c[1],
        _d = poses[3],
        x4 = _d[0],
        y4 = _d[1];

    var _e = calculatePosition(matrix, origin, n),
        originX = _e[0],
        originY = _e[1];

    var left = Math.min(x1, x2, x3, x4);
    var top = Math.min(y1, y2, y3, y4);
    var right = Math.max(x1, x2, x3, x4);
    var bottom = Math.max(y1, y2, y3, y4);
    x1 = x1 - left || 0;
    x2 = x2 - left || 0;
    x3 = x3 - left || 0;
    x4 = x4 - left || 0;
    y1 = y1 - top || 0;
    y2 = y2 - top || 0;
    y3 = y3 - top || 0;
    y4 = y4 - top || 0;
    originX = originX - left || 0;
    originY = originY - top || 0;
    var direction = getShapeDirection(poses);
    return {
      left: left,
      top: top,
      right: right,
      bottom: bottom,
      origin: [originX, originY],
      pos1: [x1, y1],
      pos2: [x2, y2],
      pos3: [x3, y3],
      pos4: [x4, y4],
      direction: direction
    };
  }
  function getDistSize(vec) {
    return Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1]);
  }
  function getDiagonalSize(pos1, pos2) {
    return getDistSize([pos2[0] - pos1[0], pos2[1] - pos1[1]]);
  }
  function getLineStyle(pos1, pos2, zoom, rad) {
    if (zoom === void 0) {
      zoom = 1;
    }

    if (rad === void 0) {
      rad = getRad$1(pos1, pos2);
    }

    var width = getDiagonalSize(pos1, pos2);
    return {
      transform: "translateY(-50%) translate(" + pos1[0] + "px, " + pos1[1] + "px) rotate(" + rad + "rad) scaleY(" + zoom + ")",
      width: width + "px"
    };
  }
  function getControlTransform(rotation, zoom) {
    var poses = [];

    for (var _i = 2; _i < arguments.length; _i++) {
      poses[_i - 2] = arguments[_i];
    }

    var length = poses.length;
    var x = poses.reduce(function (prev, pos) {
      return prev + pos[0];
    }, 0) / length;
    var y = poses.reduce(function (prev, pos) {
      return prev + pos[1];
    }, 0) / length;
    return {
      transform: "translateZ(0px) translate(" + x + "px, " + y + "px) rotate(" + rotation + "rad) scale(" + zoom + ")"
    };
  }
  function getCSSSize(target) {
    var style = window.getComputedStyle(target);
    return [parseFloat(style.width), parseFloat(style.height)];
  }
  function getSize(target, style, isOffset, isBoxSizing) {
    if (style === void 0) {
      style = window.getComputedStyle(target);
    }

    if (isBoxSizing === void 0) {
      isBoxSizing = isOffset || style.boxSizing === "border-box";
    }

    var width = target.offsetWidth;
    var height = target.offsetHeight;
    var hasOffset = !isUndefined(width);

    if ((isOffset || isBoxSizing) && hasOffset) {
      return [width, height];
    }

    if (!hasOffset && target.tagName.toLowerCase() !== "svg") {
      var bbox = target.getBBox();
      return [bbox.width, bbox.height];
    }

    width = target.clientWidth;
    height = target.clientHeight;

    if (isOffset || isBoxSizing) {
      var borderLeft = parseFloat(style.borderLeftWidth) || 0;
      var borderRight = parseFloat(style.borderRightWidth) || 0;
      var borderTop = parseFloat(style.borderTopWidth) || 0;
      var borderBottom = parseFloat(style.borderBottomWidth) || 0;
      return [width + borderLeft + borderRight, height + borderTop + borderBottom];
    } else {
      var paddingLeft = parseFloat(style.paddingLeft) || 0;
      var paddingRight = parseFloat(style.paddingRight) || 0;
      var paddingTop = parseFloat(style.paddingTop) || 0;
      var paddingBottom = parseFloat(style.paddingBottom) || 0;
      return [width - paddingLeft - paddingRight, height - paddingTop - paddingBottom];
    }
  }
  function getRotationRad(poses, direction) {
    return getRad$1(direction > 0 ? poses[0] : poses[1], direction > 0 ? poses[1] : poses[0]);
  }
  function getTargetInfo(moveableElement, target, container, parentContainer, rootContainer) {
    var beforeDirection = 1;
    var beforeOrigin = [0, 0];
    var targetClientRect = resetClientRect();
    var containerClientRect = resetClientRect();
    var moveableClientRect = resetClientRect();
    var result = calculateElementInfo(target, container, rootContainer, false);

    if (target) {
      var n = result.is3d ? 4 : 3;
      var beforePosition = calculateMoveablePosition(result.offsetMatrix, plus(result.transformOrigin, getOrigin(result.targetMatrix, n)), result.width, result.height);
      beforeDirection = beforePosition.direction;
      beforeOrigin = plus(beforePosition.origin, [beforePosition.left - result.left, beforePosition.top - result.top]);
      targetClientRect = getClientRect(target);
      containerClientRect = getClientRect(getOffsetInfo(parentContainer, parentContainer, true).offsetParent || document.body, true);

      if (moveableElement) {
        moveableClientRect = getClientRect(moveableElement);
      }
    }

    return __assign$2({
      targetClientRect: targetClientRect,
      containerClientRect: containerClientRect,
      moveableClientRect: moveableClientRect,
      beforeDirection: beforeDirection,
      beforeOrigin: beforeOrigin,
      originalBeforeOrigin: beforeOrigin,
      target: target
    }, result);
  }
  function resetClientRect() {
    return {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0,
      width: 0,
      height: 0,
      clientLeft: 0,
      clientTop: 0,
      clientWidth: 0,
      clientHeight: 0,
      scrollWidth: 0,
      scrollHeight: 0
    };
  }
  function getClientRect(el, isExtends) {
    var left = 0;
    var top = 0;
    var width = 0;
    var height = 0;

    if (el === document.body || el === document.documentElement) {
      width = window.innerWidth;
      height = window.innerHeight;
      left = -(document.documentElement.scrollLeft || document.body.scrollLeft);
      top = -(document.documentElement.scrollTop || document.body.scrollTop);
    } else {
      var clientRect = el.getBoundingClientRect();
      left = clientRect.left;
      top = clientRect.top;
      width = clientRect.width;
      height = clientRect.height;
    }

    var rect = {
      left: left,
      right: left + width,
      top: top,
      bottom: top + height,
      width: width,
      height: height
    };

    if (isExtends) {
      rect.clientLeft = el.clientLeft;
      rect.clientTop = el.clientTop;
      rect.clientWidth = el.clientWidth;
      rect.clientHeight = el.clientHeight;
      rect.scrollWidth = el.scrollWidth;
      rect.scrollHeight = el.scrollHeight;
      rect.overflow = getComputedStyle$1(el).overflow !== "visible";
    }

    return rect;
  }
  function getDirection(target) {
    if (!target) {
      return;
    }

    var direciton = target.getAttribute("data-direction");

    if (!direciton) {
      return;
    }

    var dir = [0, 0];
    direciton.indexOf("w") > -1 && (dir[0] = -1);
    direciton.indexOf("e") > -1 && (dir[0] = 1);
    direciton.indexOf("n") > -1 && (dir[1] = -1);
    direciton.indexOf("s") > -1 && (dir[1] = 1);
    return dir;
  }
  function getAbsolutePoses(poses, dist) {
    return [plus(dist, poses[0]), plus(dist, poses[1]), plus(dist, poses[2]), plus(dist, poses[3])];
  }
  function getAbsolutePosesByState(_a) {
    var left = _a.left,
        top = _a.top,
        pos1 = _a.pos1,
        pos2 = _a.pos2,
        pos3 = _a.pos3,
        pos4 = _a.pos4;
    return getAbsolutePoses([pos1, pos2, pos3, pos4], [left, top]);
  }
  function roundSign(num) {
    return Math.round(num % 1 === -0.5 ? num - 1 : num);
  }
  function throttle(num, unit) {
    if (!unit) {
      return num;
    }

    return Math.round(num / unit) * unit;
  }
  function throttleArray(nums, unit) {
    nums.forEach(function (_, i) {
      nums[i] = throttle(nums[i], unit);
    });
    return nums;
  }
  function unset(self, name) {
    if (self[name]) {
      self[name].unset();
      self[name] = null;
    }
  }
  function fillParams(moveable, e, params) {
    var datas = e.datas;

    if (!datas.datas) {
      datas.datas = {};
    }

    var nextParams = __assign$2(__assign$2({}, params), {
      target: moveable.state.target,
      clientX: e.clientX,
      clientY: e.clientY,
      inputEvent: e.inputEvent,
      currentTarget: moveable,
      moveable: moveable,
      datas: datas.datas
    });

    if (datas.isStartEvent) {
      datas.lastEvent = nextParams;
    } else {
      datas.isStartEvent = true;
    }

    return nextParams;
  }
  function fillEndParams(moveable, e, params) {
    var datas = e.datas;
    var isDrag = "isDrag" in params ? params.isDrag : e.isDrag;

    if (!datas.datas) {
      datas.datas = {};
    }

    return __assign$2(__assign$2({
      isDrag: isDrag
    }, params), {
      moveable: moveable,
      target: moveable.state.target,
      clientX: e.clientX,
      clientY: e.clientY,
      inputEvent: e.inputEvent,
      currentTarget: moveable,
      lastEvent: datas.lastEvent,
      isDouble: e.isDouble,
      datas: datas.datas
    });
  }
  function triggerEvent(moveable, name, params, isManager) {
    return moveable.triggerEvent(name, params, isManager);
  }
  function getComputedStyle$1(el, pseudoElt) {
    return window.getComputedStyle(el, pseudoElt);
  }
  function filterAbles(ables, methods, triggerAblesSimultaneously) {
    var enabledAbles = {};
    var ableGroups = {};
    return ables.filter(function (able) {
      var name = able.name;

      if (enabledAbles[name] || !methods.some(function (method) {
        return able[method];
      })) {
        return false;
      }

      if (!triggerAblesSimultaneously && able.ableGroup) {
        if (ableGroups[able.ableGroup]) {
          return false;
        }

        ableGroups[able.ableGroup] = true;
      }

      enabledAbles[name] = true;
      return true;
    });
  }
  function equals(a1, a2) {
    return a1 === a2 || a1 == null && a2 == null;
  }
  function selectValue() {
    var values = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }

    var length = values.length - 1;

    for (var i = 0; i < length; ++i) {
      var value = values[i];

      if (!isUndefined(value)) {
        return value;
      }
    }

    return values[length];
  }
  function groupBy(arr, func) {
    var groups = [];
    var groupKeys = [];
    arr.forEach(function (el, index) {
      var groupKey = func(el, index, arr);
      var keyIndex = groupKeys.indexOf(groupKey);
      var group = groups[keyIndex] || [];

      if (keyIndex === -1) {
        groupKeys.push(groupKey);
        groups.push(group);
      }

      group.push(el);
    });
    return groups;
  }
  function groupByMap(arr, func) {
    var groups = [];
    var groupKeys = {};
    arr.forEach(function (el, index) {
      var groupKey = func(el, index, arr);
      var group = groupKeys[groupKey];

      if (!group) {
        group = [];
        groupKeys[groupKey] = group;
        groups.push(group);
      }

      group.push(el);
    });
    return groups;
  }
  function flat(arr) {
    return arr.reduce(function (prev, cur) {
      return prev.concat(cur);
    }, []);
  }
  function maxOffset() {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    args.sort(function (a, b) {
      return Math.abs(b) - Math.abs(a);
    });
    return args[0];
  }
  function minOffset() {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    args.sort(function (a, b) {
      return Math.abs(a) - Math.abs(b);
    });
    return args[0];
  }
  function calculateInversePosition(matrix, pos, n) {
    return calculate(invert(matrix, n), convertPositionMatrix(pos, n), n);
  }
  function convertDragDist(state, e) {
    var _a;

    var is3d = state.is3d,
        rootMatrix = state.rootMatrix;
    var n = is3d ? 4 : 3;
    _a = calculateInversePosition(rootMatrix, [e.distX, e.distY], n), e.distX = _a[0], e.distY = _a[1];
    return e;
  }
  function calculatePadding(matrix, pos, transformOrigin, origin, n) {
    return minus(calculatePosition(matrix, plus(transformOrigin, pos), n), origin);
  }
  function convertCSSSize(value, size, isRelative) {
    return isRelative ? value / size * 100 + "%" : value + "px";
  }
  function moveControlPos(controlPoses, index, dist, isRect) {
    var _a = controlPoses[index],
        direction = _a.direction,
        sub = _a.sub;
    var dists = controlPoses.map(function () {
      return [0, 0];
    });
    var directions = direction ? direction.split("") : [];

    if (isRect && index < 8) {
      var verticalDirection_1 = directions.filter(function (dir) {
        return dir === "w" || dir === "e";
      })[0];
      var horizontalDirection_1 = directions.filter(function (dir) {
        return dir === "n" || dir === "s";
      })[0];
      dists[index] = dist;
      controlPoses.forEach(function (controlPose, i) {
        var controlDir = controlPose.direction;

        if (!controlDir) {
          return;
        }

        if (controlDir.indexOf(verticalDirection_1) > -1) {
          dists[i][0] = dist[0];
        }

        if (controlDir.indexOf(horizontalDirection_1) > -1) {
          dists[i][1] = dist[1];
        }
      });

      if (verticalDirection_1) {
        dists[1][0] = dist[0] / 2;
        dists[5][0] = dist[0] / 2;
      }

      if (horizontalDirection_1) {
        dists[3][1] = dist[1] / 2;
        dists[7][1] = dist[1] / 2;
      }
    } else if (direction && !sub) {
      directions.forEach(function (dir) {
        var isVertical = dir === "n" || dir === "s";
        controlPoses.forEach(function (controlPose, i) {
          var dirDir = controlPose.direction,
              dirHorizontal = controlPose.horizontal,
              dirVertical = controlPose.vertical;

          if (!dirDir || dirDir.indexOf(dir) === -1) {
            return;
          }

          dists[i] = [isVertical || !dirHorizontal ? 0 : dist[0], !isVertical || !dirVertical ? 0 : dist[1]];
        });
      });
    } else {
      dists[index] = dist;
    }

    return dists;
  }
  function getTinyDist(v) {
    return Math.abs(v) <= TINY_NUM ? 0 : v;
  }
  function directionCondition(e) {
    if (e.isRequest) {
      if (e.requestAble === "resizable" || e.requestAble === "scalable") {
        return e.parentDirection;
      } else {
        return false;
      }
    }

    return hasClass(e.inputEvent.target, prefix("direction"));
  }
  function invertObject(obj) {
    var nextObj = {};

    for (var name in obj) {
      nextObj[obj[name]] = name;
    }

    return nextObj;
  }
  function getTransform(transforms, index) {
    var beforeFunctionTexts = transforms.slice(0, index < 0 ? undefined : index);
    var beforeFunctionTexts2 = transforms.slice(0, index < 0 ? undefined : index + 1);
    var targetFunctionText = transforms[index] || "";
    var afterFunctionTexts = index < 0 ? [] : transforms.slice(index);
    var afterFunctionTexts2 = index < 0 ? [] : transforms.slice(index + 1);
    var beforeFunctions = parse(beforeFunctionTexts);
    var beforeFunctions2 = parse(beforeFunctionTexts2);
    var targetFunctions = parse([targetFunctionText]);
    var afterFunctions = parse(afterFunctionTexts);
    var afterFunctions2 = parse(afterFunctionTexts2);
    var beforeFunctionMatrix = toMat(beforeFunctions);
    var beforeFunctionMatrix2 = toMat(beforeFunctions2);
    var afterFunctionMatrix = toMat(afterFunctions);
    var afterFunctionMatrix2 = toMat(afterFunctions2);
    var allFunctionMatrix = multiply(beforeFunctionMatrix, afterFunctionMatrix, 4);
    return {
      transforms: transforms,
      beforeFunctionMatrix: beforeFunctionMatrix,
      beforeFunctionMatrix2: beforeFunctionMatrix2,
      targetFunctionMatrix: toMat(targetFunctions),
      afterFunctionMatrix: afterFunctionMatrix,
      afterFunctionMatrix2: afterFunctionMatrix2,
      allFunctionMatrix: allFunctionMatrix,
      beforeFunctions: beforeFunctions,
      beforeFunctions2: beforeFunctions2,
      targetFunction: targetFunctions[0],
      afterFunctions: afterFunctions,
      afterFunctions2: afterFunctions2,
      beforeFunctionTexts: beforeFunctionTexts,
      beforeFunctionTexts2: beforeFunctionTexts2,
      targetFunctionText: targetFunctionText,
      afterFunctionTexts: afterFunctionTexts,
      afterFunctionTexts2: afterFunctionTexts2
    };
  }
  function isArrayFormat(arr) {
    if (!arr || !isObject(arr)) {
      return false;
    }

    return isArray(arr) || "length" in arr;
  }
  function getRefTarget(target, isSelector) {
    if (!target) {
      return null;
    }

    if (isString(target)) {
      if (isSelector) {
        return document.querySelector(target);
      }

      return target;
    }

    if (isFunction(target)) {
      return target();
    }

    if ("current" in target) {
      return target.current;
    }

    return target;
  }
  function getRefTargets(targets, isSelector) {
    if (!targets) {
      return [];
    }

    var userTargets = isArrayFormat(targets) ? [].slice.call(targets) : [targets];
    return userTargets.reduce(function (prev, target) {
      if (isString(target) && isSelector) {
        return __spreadArrays$1(prev, [].slice.call(document.querySelectorAll(target)));
      }

      prev.push(getRefTarget(target, isSelector));
      return prev;
    }, []);
  }
  function getElementTargets(targets, selectorMap) {
    var elementTargets = [];
    targets.forEach(function (target) {
      if (!target) {
        return;
      }

      if (isString(target)) {
        if (selectorMap[target]) {
          elementTargets.push.apply(elementTargets, selectorMap[target]);
        }

        return;
      }

      elementTargets.push(target);
    });
    return elementTargets;
  }
  function getAbsoluteRotation(pos1, pos2, direction) {
    var deg = getRad$1(pos1, pos2) / Math.PI * 180;
    deg = direction >= 0 ? deg : 180 - deg;
    deg = deg >= 0 ? deg : 360 + deg;
    return deg;
  }
  function renderGuideline(info, React) {
    var _a;

    var direction = info.direction,
        classNames = info.classNames,
        size = info.size,
        pos = info.pos,
        zoom = info.zoom,
        key = info.key;
    var isHorizontal = direction === "horizontal";
    var scaleDirection = isHorizontal ? "Y" : "X"; // const scaleDirection2 = isHorizontal ? "Y" : "X";

    return React.createElement("div", {
      key: key,
      className: classNames.join(" "),
      style: (_a = {}, _a[isHorizontal ? "width" : "height"] = "" + size, _a.transform = "translate(" + pos[0] + ", " + pos[1] + ") translate" + scaleDirection + "(-50%) scale" + scaleDirection + "(" + zoom + ")", _a)
    });
  }
  function renderInnerGuideline(info, React) {
    return renderGuideline(__assign$2(__assign$2({}, info), {
      classNames: __spreadArrays$1([prefix("line", "guideline", info.direction)], info.classNames).filter(function (className) {
        return className;
      }),
      size: info.size || info.sizeValue + "px",
      pos: info.pos || info.posValue.map(function (v) {
        return v + "px";
      })
    }), React);
  }

  /**
   * @namespace Moveable.Pinchable
   * @description Whether or not target can be pinched with draggable, resizable, scalable, rotatable (default: false)
   */

  var Pinchable = {
    name: "pinchable",
    updateRect: true,
    props: {
      pinchable: Boolean
    },
    events: {
      onPinchStart: "pinchStart",
      onPinch: "pinch",
      onPinchEnd: "pinchEnd",
      onPinchGroupStart: "pinchGroupStart",
      onPinchGroup: "pinchGroup",
      onPinchGroupEnd: "pinchGroupEnd"
    },
    dragStart: function () {
      return true;
    },
    pinchStart: function (moveable, e) {
      var datas = e.datas,
          targets = e.targets,
          angle = e.angle,
          originalDatas = e.originalDatas;
      var _a = moveable.props,
          pinchable = _a.pinchable,
          ables = _a.ables;

      if (!pinchable) {
        return false;
      }

      var eventName = "onPinch" + (targets ? "Group" : "") + "Start";
      var controlEventName = "drag" + (targets ? "Group" : "") + "ControlStart";
      var pinchAbles = (pinchable === true ? moveable.controlAbles : ables.filter(function (able) {
        return pinchable.indexOf(able.name) > -1;
      })).filter(function (able) {
        return able.canPinch && able[controlEventName];
      });
      var params = fillParams(moveable, e, {});

      if (targets) {
        params.targets = targets;
      }

      var result = triggerEvent(moveable, eventName, params);
      datas.isPinch = result !== false;
      datas.ables = pinchAbles;
      var isPinch = datas.isPinch;

      if (!isPinch) {
        return false;
      }

      pinchAbles.forEach(function (able) {
        originalDatas[able.name] = originalDatas[able.name] || {};

        if (!able[controlEventName]) {
          return;
        }

        var ableEvent = __assign$2(__assign$2({}, e), {
          datas: originalDatas[able.name],
          parentRotate: angle,
          isPinch: true
        });

        able[controlEventName](moveable, ableEvent);
      });
      moveable.state.snapRenderInfo = {
        request: e.isRequest,
        direction: [0, 0]
      };
      return isPinch;
    },
    pinch: function (moveable, e) {
      var datas = e.datas,
          pinchScale = e.scale,
          distance = e.distance,
          originalDatas = e.originalDatas,
          inputEvent = e.inputEvent,
          targets = e.targets,
          angle = e.angle;

      if (!datas.isPinch) {
        return;
      }

      var parentDistance = distance * (1 - 1 / pinchScale);
      var params = fillParams(moveable, e, {});

      if (targets) {
        params.targets = targets;
      }

      var eventName = "onPinch" + (targets ? "Group" : "");
      triggerEvent(moveable, eventName, params);
      var ables = datas.ables;
      var controlEventName = "drag" + (targets ? "Group" : "") + "Control";
      ables.forEach(function (able) {
        if (!able[controlEventName]) {
          return;
        }

        able[controlEventName](moveable, __assign$2(__assign$2({}, e), {
          datas: originalDatas[able.name],
          inputEvent: inputEvent,
          parentDistance: parentDistance,
          parentRotate: angle,
          isPinch: true
        }));
      });
      return params;
    },
    pinchEnd: function (moveable, e) {
      var datas = e.datas,
          isPinch = e.isPinch,
          inputEvent = e.inputEvent,
          targets = e.targets,
          originalDatas = e.originalDatas;

      if (!datas.isPinch) {
        return;
      }

      var eventName = "onPinch" + (targets ? "Group" : "") + "End";
      var params = fillEndParams(moveable, e, {
        isDrag: isPinch
      });

      if (targets) {
        params.targets = targets;
      }

      triggerEvent(moveable, eventName, params);
      var ables = datas.ables;
      var controlEventName = "drag" + (targets ? "Group" : "") + "ControlEnd";
      ables.forEach(function (able) {
        if (!able[controlEventName]) {
          return;
        }

        able[controlEventName](moveable, __assign$2(__assign$2({}, e), {
          isDrag: isPinch,
          datas: originalDatas[able.name],
          inputEvent: inputEvent,
          isPinch: true
        }));
      });
      return isPinch;
    },
    pinchGroupStart: function (moveable, e) {
      return this.pinchStart(moveable, __assign$2(__assign$2({}, e), {
        targets: moveable.props.targets
      }));
    },
    pinchGroup: function (moveable, e) {
      return this.pinch(moveable, __assign$2(__assign$2({}, e), {
        targets: moveable.props.targets
      }));
    },
    pinchGroupEnd: function (moveable, e) {
      return this.pinchEnd(moveable, __assign$2(__assign$2({}, e), {
        targets: moveable.props.targets
      }));
    }
  };
  /**
   * Whether or not target can be pinched with draggable, resizable, scalable, rotatable (default: false)
   * @name Moveable.Pinchable#pinchable
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.pinchable = true;
   */

  /**
   * When the pinch starts, the pinchStart event is called with part of scaleStart, rotateStart, resizeStart
   * @memberof Moveable.Pinchable
   * @event pinchStart
   * @param {Moveable.Pinchable.OnPinchStart} - Parameters for the pinchStart event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     rotatable: true,
   *     scalable: true,
   *     pinchable: true, // ["rotatable", "scalable"]
   * });
   * moveable.on("pinchStart", ({ target }) => {
   *     console.log(target);
   * });
   * moveable.on("rotateStart", ({ target }) => {
   *     console.log(target);
   * });
   * moveable.on("scaleStart", ({ target }) => {
   *     console.log(target);
   * });
   */

  /**
   * When pinching, the pinch event is called with part of scale, rotate, resize
   * @memberof Moveable.Pinchable
   * @event pinch
   * @param {Moveable.Pinchable.OnPinch} - Parameters for the pinch event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     rotatable: true,
   *     scalable: true,
   *     pinchable: true, // ["rotatable", "scalable"]
   * });
   * moveable.on("pinch", ({ target }) => {
   *     console.log(target);
   * });
   * moveable.on("rotate", ({ target }) => {
   *     console.log(target);
   * });
   * moveable.on("scale", ({ target }) => {
   *     console.log(target);
   * });
   */

  /**
   * When the pinch finishes, the pinchEnd event is called.
   * @memberof Moveable.Pinchable
   * @event pinchEnd
   * @param {Moveable.Pinchable.OnPinchEnd} - Parameters for the pinchEnd event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     rotatable: true,
   *     scalable: true,
   *     pinchable: true, // ["rotatable", "scalable"]
   * });
   * moveable.on("pinchEnd", ({ target }) => {
   *     console.log(target);
   * });
   * moveable.on("rotateEnd", ({ target }) => {
   *     console.log(target);
   * });
   * moveable.on("scaleEnd", ({ target }) => {
   *     console.log(target);
   * });
   */

  /**
   * When the group pinch starts, the `pinchGroupStart` event is called.
   * @memberof Moveable.Pinchable
   * @event pinchGroupStart
   * @param {Moveable.Pinchable.OnPinchGroupStart} - Parameters for the `pinchGroupStart` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: [].slice.call(document.querySelectorAll(".target")),
   *     pinchable: true
   * });
   * moveable.on("pinchGroupStart", ({ targets }) => {
   *     console.log("onPinchGroupStart", targets);
   * });
   */

  /**
   * When the group pinch, the `pinchGroup` event is called.
   * @memberof Moveable.Pinchable
   * @event pinchGroup
   * @param {Moveable.Pinchable.OnPinchGroup} - Parameters for the `pinchGroup` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: [].slice.call(document.querySelectorAll(".target")),
   *     pinchable: true
   * });
   * moveable.on("pinchGroup", ({ targets, events }) => {
   *     console.log("onPinchGroup", targets);
   * });
   */

  /**
   * When the group pinch finishes, the `pinchGroupEnd` event is called.
   * @memberof Moveable.Pinchable
   * @event pinchGroupEnd
   * @param {Moveable.Pinchable.OnPinchGroupEnd} - Parameters for the `pinchGroupEnd` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: [].slice.call(document.querySelectorAll(".target")),
   *     pinchable: true
   * });
   * moveable.on("pinchGroupEnd", ({ targets, isDrag }) => {
   *     console.log("onPinchGroupEnd", targets, isDrag);
   * });
   */

  function setCustomDrag(e, state, delta, isPinch, isConvert) {
    var result = state.gesto.move(delta, e.inputEvent);
    var datas = result.originalDatas || result.datas;
    var draggableDatas = datas.draggable || (datas.draggable = {});
    return __assign$2(__assign$2({}, isConvert ? convertDragDist(state, result) : result), {
      isDrag: true,
      isPinch: !!isPinch,
      parentEvent: true,
      datas: draggableDatas,
      originalDatas: e.originalDatas
    });
  }

  var CustomGesto =
  /*#__PURE__*/
  function () {
    function CustomGesto() {
      this.prevX = 0;
      this.prevY = 0;
      this.startX = 0;
      this.startY = 0;
      this.isDrag = false;
      this.isFlag = false;
      this.datas = {
        draggable: {}
      };
    }

    var __proto = CustomGesto.prototype;

    __proto.dragStart = function (client, e) {
      this.isDrag = false;
      this.isFlag = false;
      var originalDatas = e.originalDatas;
      this.datas = originalDatas;

      if (!originalDatas.draggable) {
        originalDatas.draggable = {};
      }

      return __assign$2(__assign$2({}, this.move(client, e.inputEvent)), {
        type: "dragstart"
      });
    };

    __proto.drag = function (client, inputEvent) {
      return this.move([client[0] - this.prevX, client[1] - this.prevY], inputEvent);
    };

    __proto.move = function (delta, inputEvent) {
      var clientX;
      var clientY;

      if (!this.isFlag) {
        this.prevX = delta[0];
        this.prevY = delta[1];
        this.startX = delta[0];
        this.startY = delta[1];
        clientX = delta[0];
        clientY = delta[1];
        this.isFlag = true;
      } else {
        clientX = this.prevX + delta[0];
        clientY = this.prevY + delta[1];
        this.isDrag = true;
      }

      this.prevX = clientX;
      this.prevY = clientY;
      return {
        type: "drag",
        clientX: clientX,
        clientY: clientY,
        inputEvent: inputEvent,
        isDrag: this.isDrag,
        distX: clientX - this.startX,
        distY: clientY - this.startY,
        deltaX: delta[0],
        deltaY: delta[1],
        datas: this.datas.draggable,
        originalDatas: this.datas,
        parentEvent: true,
        parentGesto: this
      };
    };

    return CustomGesto;
  }();

  function fillChildEvents(moveable, name, e) {
    var datas = e.originalDatas;
    datas.groupable = datas.groupable || {};
    var groupableDatas = datas.groupable;
    groupableDatas.childDatas = groupableDatas.childDatas || [];
    var childDatas = groupableDatas.childDatas;
    return moveable.moveables.map(function (_, i) {
      childDatas[i] = childDatas[i] || {};
      childDatas[i][name] = childDatas[i][name] || {};
      return __assign$2(__assign$2({}, e), {
        datas: childDatas[i][name],
        originalDatas: childDatas[i]
      });
    });
  }
  function triggerChildGesto(moveable, able, type, delta, e, isConvert) {
    var isStart = !!type.match(/Start$/g);
    var isEnd = !!type.match(/End$/g);
    var isPinch = e.isPinch;
    var datas = e.datas;
    var events = fillChildEvents(moveable, able.name, e);
    var moveables = moveable.moveables;
    var childs = events.map(function (ev, i) {
      var childMoveable = moveables[i];
      var childEvent = ev;

      if (isStart) {
        childEvent = new CustomGesto().dragStart(delta, ev);
      } else {
        if (!childMoveable.state.gesto) {
          childMoveable.state.gesto = datas.childGestos[i];
        }

        childEvent = setCustomDrag(ev, childMoveable.state, delta, isPinch, isConvert);
      }

      var result = able[type](childMoveable, __assign$2(__assign$2({}, childEvent), {
        parentFlag: true
      }));

      if (isEnd) {
        childMoveable.state.gesto = null;
      }

      return result;
    });

    if (isStart) {
      datas.childGestos = moveables.map(function (child) {
        return child.state.gesto;
      });
    }

    return childs;
  }
  function triggerChildAble(moveable, able, type, e, eachEvent, callback) {
    if (eachEvent === void 0) {
      eachEvent = function (_, ev) {
        return ev;
      };
    }

    var isEnd = !!type.match(/End$/g);
    var events = fillChildEvents(moveable, able.name, e);
    var moveables = moveable.moveables;
    var childs = events.map(function (ev, i) {
      var childMoveable = moveables[i];
      var childEvent = ev;
      childEvent = eachEvent(childMoveable, ev);
      var result = able[type](childMoveable, __assign$2(__assign$2({}, childEvent), {
        parentFlag: true
      }));
      result && callback && callback(childMoveable, ev, result, i);

      if (isEnd) {
        childMoveable.state.gesto = null;
      }

      return result;
    });
    return childs;
  }

  function calculatePointerDist(moveable, e) {
    var clientX = e.clientX,
        clientY = e.clientY,
        datas = e.datas;
    var _a = moveable.state,
        moveableClientRect = _a.moveableClientRect,
        rootMatrix = _a.rootMatrix,
        is3d = _a.is3d,
        pos1 = _a.pos1;
    var left = moveableClientRect.left,
        top = moveableClientRect.top;
    var n = is3d ? 4 : 3;

    var _b = minus(calculateInversePosition(rootMatrix, [clientX - left, clientY - top], n), pos1),
        posX = _b[0],
        posY = _b[1];

    var _c = getDragDist({
      datas: datas,
      distX: posX,
      distY: posY
    }),
        distX = _c[0],
        distY = _c[1];

    return [distX, distY];
  }
  function setDragStart(moveable, _a) {
    var datas = _a.datas;
    var _b = moveable.state,
        allMatrix = _b.allMatrix,
        beforeMatrix = _b.beforeMatrix,
        is3d = _b.is3d,
        left = _b.left,
        top = _b.top,
        origin = _b.origin,
        offsetMatrix = _b.offsetMatrix,
        targetMatrix = _b.targetMatrix,
        transformOrigin = _b.transformOrigin;
    var n = is3d ? 4 : 3;
    datas.is3d = is3d;
    datas.matrix = allMatrix;
    datas.targetMatrix = targetMatrix;
    datas.beforeMatrix = beforeMatrix;
    datas.offsetMatrix = offsetMatrix;
    datas.transformOrigin = transformOrigin;
    datas.inverseMatrix = invert(allMatrix, n);
    datas.inverseBeforeMatrix = invert(beforeMatrix, n);
    datas.absoluteOrigin = convertPositionMatrix(plus([left, top], origin), n);
    datas.startDragBeforeDist = calculate(datas.inverseBeforeMatrix, datas.absoluteOrigin, n);
    datas.startDragDist = calculate(datas.inverseMatrix, datas.absoluteOrigin, n);
  }
  function getTransformDirection(e) {
    return calculateMoveablePosition(e.datas.beforeTransform, [50, 50], 100, 100).direction;
  }
  function resolveTransformEvent(event, functionName) {
    var datas = event.datas,
        originalDatas = event.originalDatas.beforeRenderable;
    var index = datas.transformIndex;
    var nextTransforms = originalDatas.nextTransforms;
    var nextTransformAppendedIndexes = originalDatas.nextTransformAppendedIndexes;
    var nextIndex = index === -1 ? nextTransforms.length : index + nextTransformAppendedIndexes.filter(function (i) {
      return i < index;
    }).length;
    var result = getTransform(nextTransforms, nextIndex);
    var targetFunction = result.targetFunction;
    var matFunctionName = functionName === "rotate" ? "rotateZ" : functionName;
    datas.beforeFunctionTexts = result.beforeFunctionTexts;
    datas.afterFunctionTexts = result.afterFunctionTexts;
    datas.beforeTransform = result.beforeFunctionMatrix;
    datas.beforeTransform2 = result.beforeFunctionMatrix2;
    datas.targetTansform = result.targetFunctionMatrix;
    datas.afterTransform = result.afterFunctionMatrix;
    datas.afterTransform2 = result.afterFunctionMatrix2;
    datas.targetAllTransform = result.allFunctionMatrix;

    if (targetFunction.functionName === matFunctionName) {
      datas.afterFunctionTexts.splice(0, 1);
      datas.isAppendTransform = false;
    } else {
      datas.isAppendTransform = true;
      originalDatas.nextTransformAppendedIndexes = __spreadArrays$1(nextTransformAppendedIndexes, [nextIndex]);
    }
  }
  function convertTransformFormat(datas, value, dist) {
    return datas.beforeFunctionTexts.join(" ") + " " + (datas.isAppendTransform ? dist : value) + " " + datas.afterFunctionTexts.join(" ");
  }
  function getTransformDist(_a) {
    var datas = _a.datas,
        distX = _a.distX,
        distY = _a.distY;

    var _b = getBeforeDragDist({
      datas: datas,
      distX: distX,
      distY: distY
    }),
        bx = _b[0],
        by = _b[1]; // B * [tx, ty] * A = [bx, by] * targetMatrix;
    // [tx, ty] = B-1 * [bx, by] * targetMatrix * A-1 * [0, 0];


    var res = getTransfromMatrix(datas, fromTranslation([bx, by], 4));
    return calculate(res, convertPositionMatrix([0, 0, 0], 4), 4);
  }
  function getTransfromMatrix(datas, targetMatrix, isAfter) {
    var beforeTransform = datas.beforeTransform,
        afterTransform = datas.afterTransform,
        beforeTransform2 = datas.beforeTransform2,
        afterTransform2 = datas.afterTransform2,
        targetAllTransform = datas.targetAllTransform; // B * afterTargetMatrix * A = (targetMatrix * targetAllTransform)
    // afterTargetMatrix = B-1 * targetMatrix * targetAllTransform * A-1
    // nextTargetMatrix = (targetMatrix * targetAllTransform)

    var nextTargetMatrix = isAfter ? multiply(targetAllTransform, targetMatrix, 4) : multiply(targetMatrix, targetAllTransform, 4); // res1 = B-1 * nextTargetMatrix

    var res1 = multiply(invert(isAfter ? beforeTransform2 : beforeTransform, 4), nextTargetMatrix, 4); // res3 = res2 * A-1

    var afterTargetMatrix = multiply(res1, invert(isAfter ? afterTransform2 : afterTransform, 4), 4);
    return afterTargetMatrix;
  }
  function getBeforeDragDist(_a) {
    var datas = _a.datas,
        distX = _a.distX,
        distY = _a.distY; // TT = BT

    var inverseBeforeMatrix = datas.inverseBeforeMatrix,
        is3d = datas.is3d,
        startDragBeforeDist = datas.startDragBeforeDist,
        absoluteOrigin = datas.absoluteOrigin;
    var n = is3d ? 4 : 3; // ABS_ORIGIN * [distX, distY] = BM * (ORIGIN + [tx, ty])
    // BM -1 * ABS_ORIGIN * [distX, distY] - ORIGIN = [tx, ty]

    return minus(calculate(inverseBeforeMatrix, plus(absoluteOrigin, [distX, distY]), n), startDragBeforeDist);
  }
  function getDragDist(_a, isBefore) {
    var datas = _a.datas,
        distX = _a.distX,
        distY = _a.distY;
    var inverseBeforeMatrix = datas.inverseBeforeMatrix,
        inverseMatrix = datas.inverseMatrix,
        is3d = datas.is3d,
        startDragBeforeDist = datas.startDragBeforeDist,
        startDragDist = datas.startDragDist,
        absoluteOrigin = datas.absoluteOrigin;
    var n = is3d ? 4 : 3;
    return minus(calculate(isBefore ? inverseBeforeMatrix : inverseMatrix, plus(absoluteOrigin, [distX, distY]), n), isBefore ? startDragBeforeDist : startDragDist);
  }
  function getInverseDragDist(_a, isBefore) {
    var datas = _a.datas,
        distX = _a.distX,
        distY = _a.distY;
    var beforeMatrix = datas.beforeMatrix,
        matrix = datas.matrix,
        is3d = datas.is3d,
        startDragBeforeDist = datas.startDragBeforeDist,
        startDragDist = datas.startDragDist,
        absoluteOrigin = datas.absoluteOrigin;
    var n = is3d ? 4 : 3;
    return minus(calculate(isBefore ? beforeMatrix : matrix, plus(isBefore ? startDragBeforeDist : startDragDist, [distX, distY]), n), absoluteOrigin);
  }
  function calculateTransformOrigin(transformOrigin, width, height, prevWidth, prevHeight, prevOrigin) {
    if (prevWidth === void 0) {
      prevWidth = width;
    }

    if (prevHeight === void 0) {
      prevHeight = height;
    }

    if (prevOrigin === void 0) {
      prevOrigin = [0, 0];
    }

    if (!transformOrigin) {
      return prevOrigin;
    }

    return transformOrigin.map(function (pos, i) {
      var _a = splitUnit(pos),
          value = _a.value,
          unit = _a.unit;

      var prevSize = i ? prevHeight : prevWidth;
      var size = i ? height : width;

      if (pos === "%" || isNaN(value)) {
        // no value but %
        var measureRatio = prevSize ? prevOrigin[i] / prevSize : 0;
        return size * measureRatio;
      } else if (unit !== "%") {
        return value;
      }

      return size * value / 100;
    });
  }
  function getPosIndexesByDirection(direction) {
    var indexes = [];

    if (direction[1] >= 0) {
      if (direction[0] >= 0) {
        indexes.push(3);
      }

      if (direction[0] <= 0) {
        indexes.push(2);
      }
    }

    if (direction[1] <= 0) {
      if (direction[0] >= 0) {
        indexes.push(1);
      }

      if (direction[0] <= 0) {
        indexes.push(0);
      }
    }

    return indexes;
  }
  function getPosesByDirection(poses, direction) {
    /*
    [-1, -1](pos1)       [0, -1](pos1,pos2)       [1, -1](pos2)
    [-1, 0](pos1, pos3)                           [1, 0](pos2, pos4)
    [-1, 1](pos3)        [0, 1](pos3, pos4)       [1, 1](pos4)
    */
    return getPosIndexesByDirection(direction).map(function (index) {
      return poses[index];
    });
  }
  function getPosByDirection(poses, direction) {
    /*
    [-1, -1](pos1)       [0, -1](pos1,pos2)       [1, -1](pos2)
    [-1, 0](pos1, pos3)                           [1, 0](pos2, pos4)
    [-1, 1](pos3)        [0, 1](pos3, pos4)       [1, 1](pos4)
    */
    var nextPoses = getPosesByDirection(poses, direction);
    return [average(nextPoses.map(function (pos) {
      return pos[0];
    })), average(nextPoses.map(function (pos) {
      return pos[1];
    }))];
  }
  function getPosByReverseDirection(poses, direction) {
    /*
    [-1, -1](pos4)       [0, -1](pos3,pos4)       [1, -1](pos3)
    [-1, 0](pos2, pos4)                           [1, 0](pos3, pos1)
    [-1, 1](pos2)        [0, 1](pos1, pos2)       [1, 1](pos1)
    */
    return getPosByDirection(poses, direction.map(function (dir) {
      return -dir;
    }));
  }

  function getDist(startPos, matrix, width, height, n, fixedDirection) {
    var poses = calculatePoses(matrix, width, height, n);
    var fixedPos = getPosByDirection(poses, fixedDirection);
    var distX = startPos[0] - fixedPos[0];
    var distY = startPos[1] - fixedPos[1];
    return [distX, distY];
  }

  function getNextMatrix(offsetMatrix, targetMatrix, origin, n) {
    return multiply(offsetMatrix, getAbsoluteMatrix(targetMatrix, n, origin), n);
  }
  function getNextTransformMatrix(state, datas, transform) {
    var transformOrigin = state.transformOrigin,
        offsetMatrix = state.offsetMatrix,
        is3d = state.is3d;
    var beforeTransform = datas.beforeTransform,
        afterTransform = datas.afterTransform;
    var n = is3d ? 4 : 3;
    var targetTransform = parseMat([transform]);
    return getNextMatrix(offsetMatrix, convertDimension(multiply(multiply(beforeTransform, targetTransform, 4), afterTransform, 4), 4, n), transformOrigin, n);
  }
  function scaleMatrix(state, scale) {
    var transformOrigin = state.transformOrigin,
        offsetMatrix = state.offsetMatrix,
        is3d = state.is3d,
        targetMatrix = state.targetMatrix;
    var n = is3d ? 4 : 3;
    return getNextMatrix(offsetMatrix, multiply(targetMatrix, createScaleMatrix(scale, n), n), transformOrigin, n);
  }
  function fillTransformStartEvent(e) {
    var originalDatas = e.originalDatas.beforeRenderable;
    return {
      setTransform: function (transform, index) {
        if (index === void 0) {
          index = -1;
        }

        originalDatas.startTransforms = isArray(transform) ? transform : splitSpace(transform);
        setTransformIndex(e, index);
      },
      setTransformIndex: function (index) {
        setTransformIndex(e, index);
      }
    };
  }
  function setDefaultTransformIndex(e) {
    setTransformIndex(e, -1);
  }
  function setTransformIndex(e, index) {
    var originalDatas = e.originalDatas.beforeRenderable;
    var datas = e.datas;
    datas.transformIndex = index;

    if (index === -1) {
      return;
    }

    var transform = originalDatas.startTransforms[index];

    if (!transform) {
      return;
    }

    var info = parse([transform]);
    datas.startValue = info[0].functionValue;
  }
  function fillOriginalTransform(e, transform) {
    var originalDatas = e.originalDatas.beforeRenderable;
    originalDatas.nextTransforms = splitSpace(transform);
  }
  function fillTransformEvent(moveable, nextTransform, delta, isPinch, e) {
    fillOriginalTransform(e, nextTransform);
    return {
      transform: nextTransform,
      drag: Draggable.drag(moveable, setCustomDrag(e, moveable.state, delta, isPinch, false))
    };
  }
  function getTranslateDist(moveable, transform, fixedDirection, fixedPosition, datas) {
    var state = moveable.state;
    var left = state.left,
        top = state.top;
    var groupable = moveable.props.groupable;
    var nextMatrix = getNextTransformMatrix(moveable.state, datas, transform);
    var groupLeft = groupable ? left : 0;
    var groupTop = groupable ? top : 0;
    var nextFixedPosition = getDirectionOffset(moveable, fixedDirection, nextMatrix);
    var dist = minus(fixedPosition, nextFixedPosition);
    return minus(dist, [groupLeft, groupTop]);
  }
  function getScaleDist(moveable, scaleDist, fixedDirection, fixedPosition, datas) {
    return getTranslateDist(moveable, "scale(" + scaleDist.join(", ") + ")", fixedDirection, fixedPosition, datas);
  }
  function getOriginDirection(moveable) {
    var _a = moveable.state,
        width = _a.width,
        height = _a.height,
        transformOrigin = _a.transformOrigin;
    return [-1 + transformOrigin[0] / (width / 2), -1 + transformOrigin[1] / (height / 2)];
  }
  function getDirectionOffset(moveable, direction, nextMatrix) {
    if (nextMatrix === void 0) {
      nextMatrix = moveable.state.allMatrix;
    }

    var _a = moveable.state,
        width = _a.width,
        height = _a.height,
        is3d = _a.is3d;
    var n = is3d ? 4 : 3;
    var nextFixedOffset = [width / 2 * (1 + direction[0]), height / 2 * (1 + direction[1])];
    return calculatePosition(nextMatrix, nextFixedOffset, n);
  }
  function getRotateDist(moveable, rotateDist, fixedPosition, datas) {
    var fixedDirection = getOriginDirection(moveable);
    return getTranslateDist(moveable, "rotate(" + rotateDist + "deg)", fixedDirection, fixedPosition, datas);
  }
  function getResizeDist(moveable, width, height, fixedDirection, fixedPosition, transformOrigin) {
    var groupable = moveable.props.groupable;
    var _a = moveable.state,
        prevOrigin = _a.transformOrigin,
        targetMatrix = _a.targetMatrix,
        offsetMatrix = _a.offsetMatrix,
        is3d = _a.is3d,
        prevWidth = _a.width,
        prevHeight = _a.height,
        left = _a.left,
        top = _a.top;
    var n = is3d ? 4 : 3;
    var nextOrigin = calculateTransformOrigin(transformOrigin, width, height, prevWidth, prevHeight, prevOrigin);
    var groupLeft = groupable ? left : 0;
    var groupTop = groupable ? top : 0;
    var nextMatrix = getNextMatrix(offsetMatrix, targetMatrix, nextOrigin, n);
    var dist = getDist(fixedPosition, nextMatrix, width, height, n, fixedDirection);
    return minus(dist, [groupLeft, groupTop]);
  }
  function getAbsolutePosition(moveable, direction) {
    return getPosByDirection(getAbsolutePosesByState(moveable.state), direction);
  }

  function calculateContainerPos(rootMatrix, containerRect, n) {
    var clientPos = calculatePosition(rootMatrix, [containerRect.clientLeft, containerRect.clientTop], n);
    return [containerRect.left + clientPos[0], containerRect.top + clientPos[1]];
  }
  function getGapGuidelines(guidelines, type, snapThreshold, index, _a, _b) {
    var start = _a[0],
        end = _a[1];
    var otherStart = _b[0],
        otherEnd = _b[1];
    var totalGuidelines = [];
    var otherIndex = index ? 0 : 1;
    var otherType = type === "vertical" ? "horizontal" : "vertical";
    var elementGuidelines = groupBy(guidelines.filter(function (_a) {
      var guidelineType = _a.type;
      return guidelineType === type;
    }), function (_a) {
      var element = _a.element;
      return element;
    }).map(function (group) {
      return group[0];
    }).filter(function (_a) {
      var pos = _a.pos,
          sizes = _a.sizes;
      return pos[otherIndex] <= otherEnd && otherStart <= pos[otherIndex] + sizes[otherIndex];
    });
    elementGuidelines.forEach(function (guideline1) {
      var elementStart = guideline1.pos[index];
      var elementEnd = elementStart + guideline1.sizes[index];
      elementGuidelines.forEach(function (guideline2) {
        var guideline2Pos = guideline2.pos,
            guideline2Sizes = guideline2.sizes,
            guideline2Element = guideline2.element,
            guidline2ClassName = guideline2.className;
        var targetStart = guideline2Pos[index];
        var targetEnd = targetStart + guideline2Sizes[index];
        var pos = 0;
        var gap = 0;
        var canSnap = true;

        if (elementEnd <= targetStart) {
          // gap -
          gap = elementEnd - targetStart;
          pos = targetEnd - gap;

          if (start < pos - snapThreshold) {
            canSnap = false;
          } // element target moveable

        } else if (targetEnd <= elementStart) {
          // gap +
          gap = elementStart - targetEnd;
          pos = targetStart - gap;

          if (end > pos + snapThreshold) {
            canSnap = false;
          } // moveable target element

        } else {
          return;
        }

        if (canSnap) {
          totalGuidelines.push({
            pos: otherType === "vertical" ? [pos, guideline2Pos[1]] : [guideline2Pos[0], pos],
            element: guideline2Element,
            sizes: guideline2Sizes,
            size: 0,
            type: otherType,
            gap: gap,
            className: guidline2ClassName,
            gapGuidelines: elementGuidelines
          });
        }

        if (elementEnd <= start && end <= targetStart) {
          // elementEnd   moveable   target
          var centerPos = (targetStart + elementEnd - (end - start)) / 2;

          if (throttle(start - (centerPos - snapThreshold), 0.1) >= 0) {
            totalGuidelines.push({
              pos: otherType === "vertical" ? [centerPos, guideline2Pos[1]] : [guideline2Pos[0], centerPos],
              className: guidline2ClassName,
              element: guideline2Element,
              sizes: guideline2Sizes,
              size: 0,
              type: otherType,
              gap: elementEnd - start,
              gapGuidelines: elementGuidelines
            });
          }
        }
      });
    });
    return totalGuidelines;
  }
  function addGuidelines(totalGuidelines, width, height, horizontalGuidelines, verticalGuidelines, clientLeft, clientTop) {
    if (clientLeft === void 0) {
      clientLeft = 0;
    }

    if (clientTop === void 0) {
      clientTop = 0;
    }

    horizontalGuidelines && horizontalGuidelines.forEach(function (pos) {
      totalGuidelines.push({
        type: "horizontal",
        pos: [0, throttle(pos - clientTop, 0.1)],
        size: width
      });
    });
    verticalGuidelines && verticalGuidelines.forEach(function (pos) {
      totalGuidelines.push({
        type: "vertical",
        pos: [throttle(pos - clientLeft, 0.1), 0],
        size: height
      });
    });
    return totalGuidelines;
  }
  function caculateElementGuidelines(moveable, values) {
    var guidelines = [];

    if (!values.length) {
      return guidelines;
    }

    var state = moveable.state;
    var snapCenter = moveable.props.snapCenter;
    var containerClientRect = state.containerClientRect,
        _a = state.targetClientRect,
        clientTop = _a.top,
        clientLeft = _a.left,
        rootMatrix = state.rootMatrix,
        is3d = state.is3d;
    var n = is3d ? 4 : 3;

    var _b = calculateContainerPos(rootMatrix, containerClientRect, n),
        containerLeft = _b[0],
        containerTop = _b[1];

    var poses = getAbsolutePosesByState(state);

    var _c = getMinMaxs(poses),
        targetLeft = _c.minX,
        targetTop = _c.minY;

    var _d = minus([targetLeft, targetTop], calculateInversePosition(rootMatrix, [clientLeft - containerLeft, clientTop - containerTop], n)).map(function (pos) {
      return roundSign(pos);
    }),
        distLeft = _d[0],
        distTop = _d[1];

    values.forEach(function (value) {
      var element = value.element,
          topValue = value.top,
          leftValue = value.left,
          rightValue = value.right,
          bottomValue = value.bottom,
          className = value.className;
      var rect = element.getBoundingClientRect();
      var left = rect.left - containerLeft;
      var top = rect.top - containerTop;
      var bottom = top + rect.height;
      var right = left + rect.width;

      var _a = calculateInversePosition(rootMatrix, [left, top], n),
          elementLeft = _a[0],
          elementTop = _a[1];

      var _b = calculateInversePosition(rootMatrix, [right, bottom], n),
          elementRight = _b[0],
          elementBottom = _b[1];

      var width = elementRight - elementLeft;
      var height = elementBottom - elementTop;
      var sizes = [width, height]; //top

      if (topValue !== false) {
        guidelines.push({
          type: "vertical",
          element: element,
          pos: [throttle(elementLeft + distLeft, 0.1), elementTop],
          size: height,
          sizes: sizes,
          className: className
        });
      } // bottom


      if (bottomValue !== false) {
        guidelines.push({
          type: "vertical",
          element: element,
          pos: [throttle(elementRight + distLeft, 0.1), elementTop],
          size: height,
          sizes: sizes,
          className: className
        });
      } // left


      if (leftValue !== false) {
        guidelines.push({
          type: "horizontal",
          element: element,
          pos: [elementLeft, throttle(elementTop + distTop, 0.1)],
          size: width,
          sizes: sizes,
          className: className
        });
      } // right


      if (rightValue !== false) {
        guidelines.push({
          type: "horizontal",
          element: element,
          pos: [elementLeft, throttle(elementBottom + distTop, 0.1)],
          size: width,
          sizes: sizes,
          className: className
        });
      }

      if (snapCenter) {
        guidelines.push({
          type: "vertical",
          element: element,
          pos: [throttle((elementLeft + elementRight) / 2 + distLeft, 0.1), elementTop],
          size: height,
          sizes: sizes,
          center: true,
          className: className
        });
        guidelines.push({
          type: "horizontal",
          element: element,
          pos: [elementLeft, throttle((elementTop + elementBottom) / 2 + distTop, 0.1)],
          size: width,
          sizes: sizes,
          center: true,
          className: className
        });
      }
    });
    return guidelines;
  }
  function getElementGuidelines(moveable, isRefresh, prevGuidelines) {
    if (prevGuidelines === void 0) {
      prevGuidelines = [];
    }

    var guidelines = [];
    var state = moveable.state;

    if (isRefresh && state.guidelines && state.guidelines.length) {
      return guidelines;
    }

    var _a = moveable.props.elementGuidelines,
        elementGuidelines = _a === void 0 ? [] : _a;

    if (!elementGuidelines.length) {
      return guidelines;
    }

    var prevValues = state.elementGuidelineValues || [];
    var nextValues = elementGuidelines.map(function (el) {
      if ("parentElement" in el) {
        return {
          element: el
        };
      }

      return el;
    });
    state.elementGuidelineValues = nextValues;

    var _b = diff(prevValues.map(function (v) {
      return v.element;
    }), nextValues.map(function (v) {
      return v.element;
    })),
        added = _b.added,
        removed = _b.removed;

    var removedElements = removed.map(function (index) {
      return prevValues[index].element;
    });
    var addedGuidelines = caculateElementGuidelines(moveable, added.map(function (index) {
      return nextValues[index];
    }).filter(function (value) {
      return value.refresh && isRefresh || !value.refresh && !isRefresh;
    }));
    return __spreadArrays$1(prevGuidelines.filter(function (guideline) {
      return removedElements.indexOf(guideline.element) === -1;
    }), addedGuidelines);
  }
  function getTotalGuidelines(moveable) {
    var _a = moveable.state,
        staticGuidelines = _a.staticGuidelines,
        _b = _a.containerClientRect,
        containerHeight = _b.scrollHeight,
        containerWidth = _b.scrollWidth,
        containerClientHeight = _b.clientHeight,
        containerClientWidth = _b.clientWidth,
        overflow = _b.overflow,
        clientLeft = _b.clientLeft,
        clientTop = _b.clientTop;
    var props = moveable.props;
    var _c = props.snapHorizontal,
        snapHorizontal = _c === void 0 ? true : _c,
        _d = props.snapVertical,
        snapVertical = _d === void 0 ? true : _d,
        _e = props.snapGap,
        snapGap = _e === void 0 ? true : _e,
        verticalGuidelines = props.verticalGuidelines,
        horizontalGuidelines = props.horizontalGuidelines,
        _f = props.snapThreshold,
        snapThreshold = _f === void 0 ? 5 : _f;

    var totalGuidelines = __spreadArrays$1(staticGuidelines, getElementGuidelines(moveable, true));

    if (snapGap) {
      var _g = getRect(getAbsolutePosesByState(moveable.state)),
          top = _g.top,
          left = _g.left,
          bottom = _g.bottom,
          right = _g.right;

      var elementGuidelines = staticGuidelines.filter(function (_a) {
        var element = _a.element;
        return element;
      });
      totalGuidelines.push.apply(totalGuidelines, __spreadArrays$1(getGapGuidelines(elementGuidelines, "horizontal", snapThreshold, 0, [left, right], [top, bottom]), getGapGuidelines(elementGuidelines, "vertical", snapThreshold, 1, [top, bottom], [left, right])));
    }

    addGuidelines(totalGuidelines, overflow ? containerWidth : containerClientWidth, overflow ? containerHeight : containerClientHeight, snapHorizontal && horizontalGuidelines, snapVertical && verticalGuidelines, clientLeft, clientTop);
    return totalGuidelines;
  }
  function checkMoveableSnapPoses(moveable, posesX, posesY, snapCenter, customSnapThreshold) {
    var props = moveable.props;
    var _a = props.snapElement,
        snapElement = _a === void 0 ? true : _a;
    var snapThreshold = selectValue(customSnapThreshold, props.snapThreshold, 5);
    return checkSnapPoses(moveable.state.guidelines, posesX, posesY, {
      snapThreshold: snapThreshold,
      snapCenter: snapCenter,
      snapElement: snapElement
    });
  }
  function checkSnapPoses(guidelines, posesX, posesY, options) {
    return {
      vertical: checkSnap(guidelines, "vertical", posesX, options),
      horizontal: checkSnap(guidelines, "horizontal", posesY, options)
    };
  }
  function checkSnapKeepRatio(moveable, startPos, endPos) {
    var endX = endPos[0],
        endY = endPos[1];
    var startX = startPos[0],
        startY = startPos[1];

    var _a = minus(endPos, startPos),
        dx = _a[0],
        dy = _a[1];

    var isBottom = dy > 0;
    var isRight = dx > 0;
    dx = getTinyDist(dx);
    dy = getTinyDist(dy);
    var verticalInfo = {
      isSnap: false,
      offset: 0,
      pos: 0
    };
    var horizontalInfo = {
      isSnap: false,
      offset: 0,
      pos: 0
    };

    if (dx === 0 && dy === 0) {
      return {
        vertical: verticalInfo,
        horizontal: horizontalInfo
      };
    }

    var _b = checkMoveableSnapPoses(moveable, dx ? [endX] : [], dy ? [endY] : []),
        verticalSnapInfo = _b.vertical,
        horizontalSnapInfo = _b.horizontal;

    verticalSnapInfo.posInfos.filter(function (_a) {
      var pos = _a.pos;
      return isRight ? pos >= startX : pos <= startX;
    });
    horizontalSnapInfo.posInfos.filter(function (_a) {
      var pos = _a.pos;
      return isBottom ? pos >= startY : pos <= startY;
    });
    verticalSnapInfo.isSnap = verticalSnapInfo.posInfos.length > 0;
    horizontalSnapInfo.isSnap = horizontalSnapInfo.posInfos.length > 0;

    var _c = getNearestSnapGuidelineInfo(verticalSnapInfo),
        isVerticalSnap = _c.isSnap,
        verticalGuideline = _c.guideline;

    var _d = getNearestSnapGuidelineInfo(horizontalSnapInfo),
        isHorizontalSnap = _d.isSnap,
        horizontalGuideline = _d.guideline;

    var horizontalPos = isHorizontalSnap ? horizontalGuideline.pos[1] : 0;
    var verticalPos = isVerticalSnap ? verticalGuideline.pos[0] : 0;

    if (dx === 0) {
      if (isHorizontalSnap) {
        horizontalInfo.isSnap = true;
        horizontalInfo.pos = horizontalGuideline.pos[1];
        horizontalInfo.offset = endY - horizontalInfo.pos;
      }
    } else if (dy === 0) {
      if (isVerticalSnap) {
        verticalInfo.isSnap = true;
        verticalInfo.pos = verticalPos;
        verticalInfo.offset = endX - verticalPos;
      }
    } else {
      // y - y1 = a * (x - x1)
      var a = dy / dx;
      var b = endPos[1] - a * endX;
      var y = 0;
      var x = 0;
      var isSnap = false;

      if (isVerticalSnap) {
        x = verticalPos;
        y = a * x + b;
        isSnap = true;
      } else if (isHorizontalSnap) {
        y = horizontalPos;
        x = (y - b) / a;
        isSnap = true;
      }

      if (isSnap) {
        verticalInfo.isSnap = true;
        verticalInfo.pos = x;
        verticalInfo.offset = endX - x;
        horizontalInfo.isSnap = true;
        horizontalInfo.pos = y;
        horizontalInfo.offset = endY - y;
      }
    }

    return {
      vertical: verticalInfo,
      horizontal: horizontalInfo
    };
  }
  function checkSnaps(moveable, rect, isCenter, customSnapThreshold) {
    var snapCenter = moveable.props.snapCenter;
    var isSnapCenter = snapCenter && isCenter;
    var verticalNames = ["left", "right"];
    var horizontalNames = ["top", "bottom"];

    if (isSnapCenter) {
      verticalNames.push("center");
      horizontalNames.push("middle");
    }

    verticalNames = verticalNames.filter(function (name) {
      return name in rect;
    });
    horizontalNames = horizontalNames.filter(function (name) {
      return name in rect;
    });
    return checkMoveableSnapPoses(moveable, verticalNames.map(function (name) {
      return rect[name];
    }), horizontalNames.map(function (name) {
      return rect[name];
    }), isSnapCenter, customSnapThreshold);
  }
  function getNearestSnapGuidelineInfo(snapInfo) {
    var isSnap = snapInfo.isSnap;

    if (!isSnap) {
      return {
        isSnap: false,
        offset: 0,
        dist: -1,
        pos: 0,
        guideline: null
      };
    }

    var posInfo = snapInfo.posInfos[0];
    var guidelineInfo = posInfo.guidelineInfos[0];
    var offset = guidelineInfo.offset;
    var dist = guidelineInfo.dist;
    var guideline = guidelineInfo.guideline;
    return {
      isSnap: isSnap,
      offset: offset,
      dist: dist,
      pos: posInfo.pos,
      guideline: guideline
    };
  }

  function checkSnap(guidelines, targetType, targetPoses, _a) {
    var _b = _a === void 0 ? {} : _a,
        _c = _b.snapThreshold,
        snapThreshold = _c === void 0 ? 5 : _c,
        snapElement = _b.snapElement,
        snapCenter = _b.snapCenter;

    if (!guidelines || !guidelines.length) {
      return {
        isSnap: false,
        index: -1,
        posInfos: []
      };
    }

    var isVertical = targetType === "vertical";
    var posType = isVertical ? 0 : 1;
    var snapPosInfos = targetPoses.map(function (targetPos, index) {
      var guidelineInfos = guidelines.map(function (guideline) {
        var pos = guideline.pos;
        var offset = targetPos - pos[posType];
        return {
          offset: offset,
          dist: Math.abs(offset),
          guideline: guideline
        };
      }).filter(function (_a) {
        var guideline = _a.guideline,
            dist = _a.dist;
        var type = guideline.type,
            center = guideline.center,
            element = guideline.element;

        if (!snapElement && element || !snapCenter && center || type !== targetType || dist > snapThreshold) {
          return false;
        }

        return true;
      }).sort(function (a, b) {
        return a.dist - b.dist;
      });
      return {
        pos: targetPos,
        index: index,
        guidelineInfos: guidelineInfos
      };
    }).filter(function (snapPosInfo) {
      return snapPosInfo.guidelineInfos.length > 0;
    }).sort(function (a, b) {
      return a.guidelineInfos[0].dist - b.guidelineInfos[0].dist;
    });
    var isSnap = snapPosInfos.length > 0;
    return {
      isSnap: isSnap,
      index: isSnap ? snapPosInfos[0].index : -1,
      posInfos: snapPosInfos
    };
  }

  function getSnapInfosByDirection(moveable, poses, snapDirection) {
    var nextPoses = [];

    if (snapDirection[0] && snapDirection[1]) {
      nextPoses = [snapDirection, [-snapDirection[0], snapDirection[1]], [snapDirection[0], -snapDirection[1]]].map(function (direction) {
        return getPosByDirection(poses, direction);
      });
    } else if (!snapDirection[0] && !snapDirection[1]) {
      var alignPoses = [poses[0], poses[1], poses[3], poses[2], poses[0]];

      for (var i = 0; i < 4; ++i) {
        nextPoses.push(alignPoses[i]);
        nextPoses.push([(alignPoses[i][0] + alignPoses[i + 1][0]) / 2, (alignPoses[i][1] + alignPoses[i + 1][1]) / 2]);
      }
    } else {
      if (moveable.props.keepRatio) {
        nextPoses = [[-1, -1], [-1, 1], [1, -1], [1, 1], snapDirection].map(function (dir) {
          return getPosByDirection(poses, dir);
        });
      } else {
        nextPoses = getPosesByDirection(poses, snapDirection);

        if (nextPoses.length > 1) {
          nextPoses.push([(nextPoses[0][0] + nextPoses[1][0]) / 2, (nextPoses[0][1] + nextPoses[1][1]) / 2]);
        }
      }
    }

    return checkMoveableSnapPoses(moveable, nextPoses.map(function (pos) {
      return pos[0];
    }), nextPoses.map(function (pos) {
      return pos[1];
    }), true, 1);
  }
  function checkSnapBoundPriority(a, b) {
    var aDist = Math.abs(a.offset);
    var bDist = Math.abs(b.offset);

    if (a.isBound && b.isBound) {
      return bDist - aDist;
    } else if (a.isBound) {
      return -1;
    } else if (b.isBound) {
      return 1;
    } else if (a.isSnap && b.isSnap) {
      return bDist - aDist;
    } else if (a.isSnap) {
      return -1;
    } else if (b.isSnap) {
      return 1;
    } else if (aDist < TINY_NUM) {
      return 1;
    } else if (bDist < TINY_NUM) {
      return -1;
    }

    return aDist - bDist;
  }
  function getNearOffsetInfo(offsets, index) {
    return offsets.slice().sort(function (a, b) {
      var aSign = a.sign[index];
      var bSign = b.sign[index];
      var aOffset = a.offset[index];
      var bOffset = b.offset[index]; // -1 The positions of a and b do not change.
      // 1 The positions of a and b are reversed.

      if (!aSign) {
        return 1;
      } else if (!bSign) {
        return -1;
      }

      return checkSnapBoundPriority({
        isBound: a.isBound,
        isSnap: a.isSnap,
        offset: aOffset
      }, {
        isBound: b.isBound,
        isSnap: b.isSnap,
        offset: bOffset
      });
    })[0];
  }

  function isStartLine(dot, line) {
    // l    o     => true
    // o    l    => false
    var cx = average([line[0][0], line[1][0]]);
    var cy = average([line[0][1], line[1][1]]);
    return {
      vertical: cx <= dot[0],
      horizontal: cy <= dot[1]
    };
  }

  function hitTestLine(dot, _a) {
    var pos1 = _a[0],
        pos2 = _a[1];
    var dx = pos2[0] - pos1[0];
    var dy = pos2[1] - pos1[1];

    if (Math.abs(dx) < TINY_NUM) {
      dx = 0;
    }

    if (Math.abs(dy) < TINY_NUM) {
      dy = 0;
    }

    var test1;
    var test2;

    if (!dx) {
      test1 = pos1[0];
      test2 = dot[0];
    } else if (!dy) {
      test1 = pos1[1];
      test2 = dot[1];
    } else {
      var a = dy / dx; // y = a * (x - pos1) + pos1

      test1 = a * (dot[0] - pos1[0]) + pos1[1];
      test2 = dot[1];
    }

    return test1 - test2;
  }

  function isSameStartLine(dots, line, error) {
    if (error === void 0) {
      error = TINY_NUM;
    }

    var centerSign = hitTestLine(dots[0], line) <= 0;
    return dots.slice(1).every(function (dot) {
      var value = hitTestLine(dot, line);
      var sign = value <= 0;
      return sign === centerSign || Math.abs(value) <= error;
    });
  }

  function checkInnerBoundDot(pos, start, end, isStart, threshold) {
    if (threshold === void 0) {
      threshold = 0;
    }

    if (isStart && start - threshold <= pos || !isStart && pos <= end + threshold) {
      // false 402 565 602 => 37 ([0, 37])
      // true 400 524.9712603540036 600 => 124 ([124, 0])
      // true 400 410 600 => 10 ([10, 0])
      return {
        isBound: true,
        offset: isStart ? start - pos : end - pos
      };
    }

    return {
      isBound: false,
      offset: 0
    };
  }

  function checkInnerBound(moveable, line, center) {
    var bounds = moveable.props.innerBounds;

    if (!bounds) {
      return {
        isAllBound: false,
        isBound: false,
        isVerticalBound: false,
        isHorizontalBound: false,
        offset: [0, 0]
      };
    }

    var left = bounds.left,
        top = bounds.top,
        width = bounds.width,
        height = bounds.height;
    var leftLine = [[left, top], [left, top + height]];
    var topLine = [[left, top], [left + width, top]];
    var rightLine = [[left + width, top], [left + width, top + height]];
    var bottomLine = [[left, top + height], [left + width, top + height]];

    var _a = isStartLine(center, line),
        isHorizontalStart = _a.horizontal,
        isVerticalStart = _a.vertical;

    if (isSameStartLine([center, [left, top], [left + width, top], [left, top + height], [left + width, top + height]], line)) {
      return {
        isAllBound: false,
        isBound: false,
        isVerticalBound: false,
        isHorizontalBound: false,
        offset: [0, 0]
      };
    } // test vertical


    var topBoundInfo = checkLineBoundCollision(line, topLine, isVerticalStart);
    var bottomBoundInfo = checkLineBoundCollision(line, bottomLine, isVerticalStart); // test horizontal

    var leftBoundInfo = checkLineBoundCollision(line, leftLine, isHorizontalStart);
    var rightBoundInfo = checkLineBoundCollision(line, rightLine, isHorizontalStart);
    var isAllVerticalBound = topBoundInfo.isBound && bottomBoundInfo.isBound;
    var isVerticalBound = topBoundInfo.isBound || bottomBoundInfo.isBound;
    var isAllHorizontalBound = leftBoundInfo.isBound && rightBoundInfo.isBound;
    var isHorizontalBound = leftBoundInfo.isBound || rightBoundInfo.isBound;
    var verticalOffset = maxOffset(topBoundInfo.offset, bottomBoundInfo.offset);
    var horizontalOffset = maxOffset(leftBoundInfo.offset, rightBoundInfo.offset);
    var offset = [0, 0];
    var isBound = false;
    var isAllBound = false;

    if (Math.abs(horizontalOffset) < Math.abs(verticalOffset)) {
      offset = [verticalOffset, 0];
      isBound = isVerticalBound;
      isAllBound = isAllVerticalBound;
    } else {
      offset = [0, horizontalOffset];
      isBound = isHorizontalBound;
      isAllBound = isAllHorizontalBound;
    }

    return {
      isAllBound: isAllBound,
      isVerticalBound: isVerticalBound,
      isHorizontalBound: isHorizontalBound,
      isBound: isBound,
      offset: offset
    };
  }

  function checkLineBoundCollision(line, boundLine, isStart, threshold, isRender) {
    var dot1 = line[0];
    var dot2 = line[1];
    var boundDot1 = boundLine[0];
    var boundDot2 = boundLine[1];
    var dy1 = getTinyDist(dot2[1] - dot1[1]);
    var dx1 = getTinyDist(dot2[0] - dot1[0]);
    var dy2 = getTinyDist(boundDot2[1] - boundDot1[1]);
    var dx2 = getTinyDist(boundDot2[0] - boundDot1[0]); // dx2 or dy2 is zero

    if (!dx2) {
      // vertical
      if (isRender && !dy1) {
        // 90deg
        return {
          isBound: false,
          offset: 0
        };
      } else if (dx1) {
        // const y = dy1 ? dy1 / dx1 * (boundDot1[0] - dot1[0]) + dot1[1] : dot1[1];
        var y = dy1 / dx1 * (boundDot1[0] - dot1[0]) + dot1[1]; // boundDot1[1] <= y  <= boundDot2[1]

        return checkInnerBoundDot(y, boundDot1[1], boundDot2[1], isStart, threshold);
      } else {
        var offset = boundDot1[0] - dot1[0];
        var isBound = Math.abs(offset) <= (threshold || 0);
        return {
          isBound: isBound,
          offset: isBound ? offset : 0
        };
      }
    } else if (!dy2) {
      // horizontal
      if (isRender && !dx1) {
        // 90deg
        return {
          isBound: false,
          offset: 0
        };
      } else if (dy1) {
        // y = a * (x - x1) + y1
        // x = (y - y1) / a + x1
        // const a = dy1 / dx1;
        // const x = dx1 ? (boundDot1[1] - dot1[1]) / a + dot1[0] : dot1[0];
        var x = (boundDot1[1] - dot1[1]) / (dy1 / dx1) + dot1[0]; // boundDot1[0] <= x && x <= boundDot2[0]

        return checkInnerBoundDot(x, boundDot1[0], boundDot2[0], isStart, threshold);
      } else {
        var offset = boundDot1[1] - dot1[1];
        var isBound = Math.abs(offset) <= (threshold || 0);
        return {
          isBound: isBound,
          offset: isBound ? offset : 0
        };
      }
    }

    return {
      isBound: false,
      offset: 0
    };
  }

  function getInnerBoundInfo(moveable, lines, center, datas) {
    return lines.map(function (_a) {
      var multiple = _a[0],
          pos1 = _a[1],
          pos2 = _a[2];

      var _b = checkInnerBound(moveable, [pos1, pos2], center),
          isBound = _b.isBound,
          offset = _b.offset,
          isVerticalBound = _b.isVerticalBound,
          isHorizontalBound = _b.isHorizontalBound;

      var sizeOffset = getDragDist({
        datas: datas,
        distX: offset[0],
        distY: offset[1]
      }).map(function (size, i) {
        return size * (multiple[i] ? 2 / multiple[i] : 0);
      });
      return {
        sign: multiple,
        isBound: isBound,
        isVerticalBound: isVerticalBound,
        isHorizontalBound: isHorizontalBound,
        isSnap: false,
        offset: sizeOffset
      };
    });
  }
  function getInnerBoundDragInfo(moveable, poses, datas) {
    var _a;

    var lines = getCheckInnerBoundLines(poses, [0, 0], false).map(function (_a) {
      var sign = _a[0],
          pos1 = _a[1],
          pos2 = _a[2];
      return [sign.map(function (dir) {
        return Math.abs(dir) * 2;
      }), pos1, pos2];
    });
    var innerBoundInfo = getInnerBoundInfo(moveable, lines, getPosByDirection(poses, [0, 0]), datas);
    var widthOffsetInfo = getNearOffsetInfo(innerBoundInfo, 0);
    var heightOffsetInfo = getNearOffsetInfo(innerBoundInfo, 1);
    var verticalOffset = 0;
    var horizontalOffset = 0;
    var isVerticalBound = widthOffsetInfo.isVerticalBound || heightOffsetInfo.isVerticalBound;
    var isHorizontalBound = widthOffsetInfo.isHorizontalBound || heightOffsetInfo.isHorizontalBound;

    if (isVerticalBound || isHorizontalBound) {
      _a = getInverseDragDist({
        datas: datas,
        distX: -widthOffsetInfo.offset[0],
        distY: -heightOffsetInfo.offset[1]
      }), verticalOffset = _a[0], horizontalOffset = _a[1];
    }

    return {
      vertical: {
        isBound: isVerticalBound,
        offset: verticalOffset
      },
      horizontal: {
        isBound: isHorizontalBound,
        offset: horizontalOffset
      }
    };
  }
  function getCheckSnapLineDirections(direction, keepRatio) {
    var lineDirections = [];
    var x = direction[0];
    var y = direction[1];

    if (x && y) {
      lineDirections.push([[0, y * 2], direction, [-x, y]], [[x * 2, 0], direction, [x, -y]]);
    } else if (x) {
      // vertcal
      lineDirections.push([[x * 2, 0], [x, 1], [x, -1]]);

      if (keepRatio) {
        lineDirections.push([[0, -1], [x, -1], [-x, -1]], [[0, 1], [x, 1], [-x, 1]]);
      }
    } else if (y) {
      // horizontal
      lineDirections.push([[0, y * 2], [1, y], [-1, y]]);

      if (keepRatio) {
        lineDirections.push([[-1, 0], [-1, y], [-1, -y]], [[1, 0], [1, y], [1, -y]]);
      }
    } else {
      // [0, 0] to all direction
      lineDirections.push([[-1, 0], [-1, -1], [-1, 1]], [[1, 0], [1, -1], [1, 1]], [[0, -1], [-1, -1], [1, -1]], [[0, 1], [-1, 1], [1, 1]]);
    }

    return lineDirections;
  }
  function getCheckInnerBoundLines(poses, direction, keepRatio) {
    return getCheckSnapLineDirections(direction, keepRatio).map(function (_a) {
      var sign = _a[0],
          dir1 = _a[1],
          dir2 = _a[2];
      return [sign, getPosByDirection(poses, dir1), getPosByDirection(poses, dir2)];
    });
  }

  function isBoundRotate(relativePoses, boundDots, center, rad) {
    var nextPoses = rad ? relativePoses.map(function (pos) {
      return rotate(pos, rad);
    }) : relativePoses;

    var dots = __spreadArrays$1([center], boundDots);

    return [[nextPoses[0], nextPoses[1]], [nextPoses[1], nextPoses[3]], [nextPoses[3], nextPoses[2]], [nextPoses[2], nextPoses[0]]].some(function (line) {
      return !isSameStartLine(dots, line);
    });
  }

  function getDistPointLine(_a) {
    // x = 0, y = 0
    // d = (ax + by + c) / root(a2 + b2)
    var pos1 = _a[0],
        pos2 = _a[1];
    var dx = pos2[0] - pos1[0];
    var dy = pos2[1] - pos1[1];

    if (!dx) {
      return Math.abs(pos1[0]);
    }

    if (!dy) {
      return Math.abs(pos1[1]);
    } // y - y1 = a(x - x1)
    // 0 = ax -y + -a * x1 + y1


    var a = dy / dx;
    return Math.abs((-a * pos1[0] + pos1[1]) / Math.sqrt(Math.pow(a, 2) + 1));
  }

  function solveReverseLine(_a) {
    var pos1 = _a[0],
        pos2 = _a[1];
    var dx = pos2[0] - pos1[0];
    var dy = pos2[1] - pos1[1];

    if (!dx) {
      return [pos1[0], 0];
    }

    if (!dy) {
      return [0, pos1[1]];
    }

    var a = dy / dx; // y - y1 = a (x  - x1)
    // y = ax - a * x1 + y1

    var b = -a * pos1[0] + pos1[1]; // y = ax + b = -1/a x
    // x = -b / (a + 1 / a)
    // y = b / (1 + 1 / a^2)

    return [-b / (a + 1 / a), b / (a * a + 1)];
  }

  function checkRotateInnerBounds(moveable, prevPoses, nextPoses, origin, rotation) {
    var bounds = moveable.props.innerBounds;
    var rad = rotation * Math.PI / 180;

    if (!bounds) {
      return [];
    }

    var left = bounds.left,
        top = bounds.top,
        width = bounds.width,
        height = bounds.height;
    var relativeLeft = left - origin[0];
    var relativeRight = left + width - origin[0];
    var relativeTop = top - origin[1];
    var relativeBottom = top + height - origin[1];
    var dots = [[relativeLeft, relativeTop], [relativeRight, relativeTop], [relativeLeft, relativeBottom], [relativeRight, relativeBottom]];
    var center = getPosByDirection(nextPoses, [0, 0]);

    if (!isBoundRotate(nextPoses, dots, center, 0)) {
      return [];
    }

    var result = [];
    var dotInfos = dots.map(function (dot) {
      return [getDistSize(dot), getRad$1([0, 0], dot)];
    });
    [[nextPoses[0], nextPoses[1]], [nextPoses[1], nextPoses[3]], [nextPoses[3], nextPoses[2]], [nextPoses[2], nextPoses[0]]].forEach(function (line) {
      var lineRad = getRad$1([0, 0], solveReverseLine(line));
      var lineDist = getDistPointLine(line);
      result.push.apply(result, dotInfos.filter(function (_a) {
        var dotDist = _a[0];
        return dotDist && lineDist <= dotDist;
      }).map(function (_a) {
        var dotDist = _a[0],
            dotRad = _a[1];
        var distRad = Math.acos(dotDist ? lineDist / dotDist : 0);
        var nextRad1 = dotRad + distRad;
        var nextRad2 = dotRad - distRad;
        return [rad + nextRad1 - lineRad, rad + nextRad2 - lineRad];
      }).reduce(function (prev, cur) {
        prev.push.apply(prev, cur);
        return prev;
      }, []).filter(function (nextRad) {
        return !isBoundRotate(prevPoses, dots, center, nextRad);
      }).map(function (nextRad) {
        return throttle(nextRad * 180 / Math.PI, TINY_NUM);
      }));
    });
    return result;
  }
  function checkInnerBoundPoses(moveable) {
    var innerBounds = moveable.props.innerBounds;

    if (!innerBounds) {
      return {
        vertical: [],
        horizontal: []
      };
    }

    var _a = moveable.getRect(),
        pos1 = _a.pos1,
        pos2 = _a.pos2,
        pos3 = _a.pos3,
        pos4 = _a.pos4;

    var poses = [pos1, pos2, pos3, pos4];
    var center = getPosByDirection(poses, [0, 0]);
    var left = innerBounds.left,
        top = innerBounds.top,
        width = innerBounds.width,
        height = innerBounds.height;
    var leftLine = [[left, top], [left, top + height]];
    var topLine = [[left, top], [left + width, top]];
    var rightLine = [[left + width, top], [left + width, top + height]];
    var bottomLine = [[left, top + height], [left + width, top + height]];
    var lines = [[pos1, pos2], [pos2, pos4], [pos4, pos3], [pos3, pos1]];
    var horizontalPoses = [];
    var verticalPoses = [];
    var boundMap = {
      top: false,
      bottom: false,
      left: false,
      right: false
    };
    lines.forEach(function (line) {
      var _a = isStartLine(center, line),
          isHorizontalStart = _a.horizontal,
          isVerticalStart = _a.vertical; // test vertical


      var topBoundInfo = checkLineBoundCollision(line, topLine, isVerticalStart, 1, true);
      var bottomBoundInfo = checkLineBoundCollision(line, bottomLine, isVerticalStart, 1, true); // test horizontal

      var leftBoundInfo = checkLineBoundCollision(line, leftLine, isHorizontalStart, 1, true);
      var rightBoundInfo = checkLineBoundCollision(line, rightLine, isHorizontalStart, 1, true);

      if (topBoundInfo.isBound && !boundMap.top) {
        horizontalPoses.push(top);
        boundMap.top = true;
      }

      if (bottomBoundInfo.isBound && !boundMap.bottom) {
        horizontalPoses.push(top + height);
        boundMap.bottom = true;
      }

      if (leftBoundInfo.isBound && !boundMap.left) {
        verticalPoses.push(left);
        boundMap.left = true;
      }

      if (rightBoundInfo.isBound && !boundMap.right) {
        verticalPoses.push(left + width);
        boundMap.right = true;
      }
    });
    return {
      horizontal: horizontalPoses,
      vertical: verticalPoses
    };
  }

  function checkBoundPoses(bounds, verticalPoses, horizontalPoses) {
    var _a = bounds || {},
        _b = _a.left,
        left = _b === void 0 ? -Infinity : _b,
        _c = _a.top,
        top = _c === void 0 ? -Infinity : _c,
        _d = _a.right,
        right = _d === void 0 ? Infinity : _d,
        _e = _a.bottom,
        bottom = _e === void 0 ? Infinity : _e;

    var nextBounds = {
      left: left,
      top: top,
      right: right,
      bottom: bottom
    };
    return {
      vertical: checkBounds(nextBounds, verticalPoses, true),
      horizontal: checkBounds(nextBounds, horizontalPoses, false)
    };
  }
  function checkBoundKeepRatio(moveable, startPos, endPos) {
    var _a = moveable.props.bounds || {},
        _b = _a.left,
        left = _b === void 0 ? -Infinity : _b,
        _c = _a.top,
        top = _c === void 0 ? -Infinity : _c,
        _d = _a.right,
        right = _d === void 0 ? Infinity : _d,
        _e = _a.bottom,
        bottom = _e === void 0 ? Infinity : _e;

    var endX = endPos[0],
        endY = endPos[1];

    var _f = minus(endPos, startPos),
        dx = _f[0],
        dy = _f[1];

    if (Math.abs(dx) < TINY_NUM) {
      dx = 0;
    }

    if (Math.abs(dy) < TINY_NUM) {
      dy = 0;
    }

    var isBottom = dy > 0;
    var isRight = dx > 0;
    var verticalInfo = {
      isBound: false,
      offset: 0,
      pos: 0
    };
    var horizontalInfo = {
      isBound: false,
      offset: 0,
      pos: 0
    };

    if (dx === 0 && dy === 0) {
      return {
        vertical: verticalInfo,
        horizontal: horizontalInfo
      };
    } else if (dx === 0) {
      if (isBottom) {
        if (bottom < endY) {
          horizontalInfo.pos = bottom;
          horizontalInfo.offset = endY - bottom;
        }
      } else {
        if (top > endY) {
          horizontalInfo.pos = top;
          horizontalInfo.offset = endY - top;
        }
      }
    } else if (dy === 0) {
      if (isRight) {
        if (right < endX) {
          verticalInfo.pos = right;
          verticalInfo.offset = endX - right;
        }
      } else {
        if (left > endX) {
          verticalInfo.pos = left;
          verticalInfo.offset = endX - left;
        }
      }
    } else {
      // y - y1 = a * (x - x1)
      var a = dy / dx;
      var b = endPos[1] - a * endX;
      var y = 0;
      var x = 0;
      var isBound = false;

      if (isRight && right <= endX) {
        y = a * right + b;
        x = right;
        isBound = true;
      } else if (!isRight && endX <= left) {
        y = a * left + b;
        x = left;
        isBound = true;
      }

      if (isBound) {
        if (y < top || y > bottom) {
          isBound = false;
        }
      }

      if (!isBound) {
        if (isBottom && bottom <= endY) {
          y = bottom;
          x = (y - b) / a;
          isBound = true;
        } else if (!isBottom && endY <= top) {
          y = top;
          x = (y - b) / a;
          isBound = true;
        }
      }

      if (isBound) {
        verticalInfo.isBound = true;
        verticalInfo.pos = x;
        verticalInfo.offset = endX - x;
        horizontalInfo.isBound = true;
        horizontalInfo.pos = y;
        horizontalInfo.offset = endY - y;
      }
    }

    return {
      vertical: verticalInfo,
      horizontal: horizontalInfo
    };
  }

  function checkBounds(bounds, poses, isVertical) {
    // 0   [100 - 200]  300
    var startBoundPos = bounds[isVertical ? "left" : "top"];
    var endBoundPos = bounds[isVertical ? "right" : "bottom"]; // 450

    var minPos = Math.min.apply(Math, poses);
    var maxPos = Math.max.apply(Math, poses);
    var boundInfos = [];

    if (startBoundPos + 1 > minPos) {
      boundInfos.push({
        isBound: true,
        offset: minPos - startBoundPos,
        pos: startBoundPos
      });
    }

    if (endBoundPos - 1 < maxPos) {
      boundInfos.push({
        isBound: true,
        offset: maxPos - endBoundPos,
        pos: endBoundPos
      });
    }

    if (!boundInfos.length) {
      boundInfos.push({
        isBound: false,
        offset: 0,
        pos: 0
      });
    }

    return boundInfos.sort(function (a, b) {
      return Math.abs(b.offset) - Math.abs(a.offset);
    });
  }

  function isBoundRotate$1(relativePoses, boundRect, rad) {
    var nextPoses = rad ? relativePoses.map(function (pos) {
      return rotate(pos, rad);
    }) : relativePoses;
    return nextPoses.some(function (pos) {
      return pos[0] < boundRect.left && Math.abs(pos[0] - boundRect.left) > 0.1 || pos[0] > boundRect.right && Math.abs(pos[0] - boundRect.right) > 0.1 || pos[1] < boundRect.top && Math.abs(pos[1] - boundRect.top) > 0.1 || pos[1] > boundRect.bottom && Math.abs(pos[1] - boundRect.bottom) > 0.1;
    });
  }
  function boundRotate(vec, boundPos, index) {
    var r = getDistSize(vec);
    var nextPos = Math.sqrt(r * r - boundPos * boundPos) || 0;
    return [nextPos, -nextPos].sort(function (a, b) {
      return Math.abs(a - vec[index ? 0 : 1]) - Math.abs(b - vec[index ? 0 : 1]);
    }).map(function (pos) {
      return getRad$1([0, 0], index ? [pos, boundPos] : [boundPos, pos]);
    });
  }
  function checkRotateBounds(moveable, prevPoses, nextPoses, origin, rotation) {
    var bounds = moveable.props.bounds;
    var rad = rotation * Math.PI / 180;

    if (!bounds) {
      return [];
    }

    var _a = bounds.left,
        left = _a === void 0 ? -Infinity : _a,
        _b = bounds.top,
        top = _b === void 0 ? -Infinity : _b,
        _c = bounds.right,
        right = _c === void 0 ? Infinity : _c,
        _d = bounds.bottom,
        bottom = _d === void 0 ? Infinity : _d;
    var relativeLeft = left - origin[0];
    var relativeRight = right - origin[0];
    var relativeTop = top - origin[1];
    var relativeBottom = bottom - origin[1];
    var boundRect = {
      left: relativeLeft,
      top: relativeTop,
      right: relativeRight,
      bottom: relativeBottom
    };

    if (!isBoundRotate$1(nextPoses, boundRect, 0)) {
      return [];
    }

    var result = [];
    [[relativeLeft, 0], [relativeRight, 0], [relativeTop, 1], [relativeBottom, 1]].forEach(function (_a) {
      var boundPos = _a[0],
          index = _a[1];
      nextPoses.forEach(function (nextPos) {
        var relativeRad1 = getRad$1([0, 0], nextPos);
        result.push.apply(result, boundRotate(nextPos, boundPos, index).map(function (relativeRad2) {
          return rad + relativeRad2 - relativeRad1;
        }).filter(function (nextRad) {
          return !isBoundRotate$1(prevPoses, boundRect, nextRad);
        }).map(function (nextRad) {
          return throttle(nextRad * 180 / Math.PI, TINY_NUM);
        }));
      });
    });
    return result;
  }

  var DIRECTION_NAMES = {
    horizontal: ["left", "top", "width", "Y", "X"],
    vertical: ["top", "left", "height", "X", "Y"]
  };
  function snapStart(moveable) {
    var state = moveable.state;

    if (state.guidelines && state.guidelines.length) {
      return;
    }

    state.elementGuidelineValues = [];
    state.staticGuidelines = getElementGuidelines(moveable, false);
    state.guidelines = getTotalGuidelines(moveable);
    state.enableSnap = true;
  }
  function hasGuidelines(moveable, ableName) {
    var _a = moveable.props,
        snappable = _a.snappable,
        bounds = _a.bounds,
        innerBounds = _a.innerBounds,
        verticalGuidelines = _a.verticalGuidelines,
        horizontalGuidelines = _a.horizontalGuidelines,
        _b = moveable.state,
        guidelines = _b.guidelines,
        enableSnap = _b.enableSnap;

    if (!snappable || !enableSnap || ableName && snappable !== true && snappable.indexOf(ableName) < 0) {
      return false;
    }

    if (bounds || innerBounds || guidelines && guidelines.length || verticalGuidelines && verticalGuidelines.length || horizontalGuidelines && horizontalGuidelines.length) {
      return true;
    }

    return false;
  }

  function solveNextOffset(pos1, pos2, offset, isVertical, datas) {
    var sizeOffset = solveEquation(pos1, pos2, offset, isVertical);

    if (!sizeOffset) {
      return [0, 0];
    }

    var _a = getDragDist({
      datas: datas,
      distX: sizeOffset[0],
      distY: sizeOffset[1]
    }),
        widthOffset = _a[0],
        heightOffset = _a[1];

    return [widthOffset, heightOffset];
  }

  function getNextFixedPoses(matrix, width, height, fixedPos, direction, is3d) {
    var nextPoses = calculatePoses(matrix, width, height, is3d ? 4 : 3);
    var nextPos = getPosByReverseDirection(nextPoses, direction);
    return getAbsolutePoses(nextPoses, minus(fixedPos, nextPos));
  }

  function getSnapBoundOffset(boundInfo, snapInfo) {
    if (boundInfo.isBound) {
      return boundInfo.offset;
    } else if (snapInfo.isSnap) {
      return snapInfo.offset;
    }

    return 0;
  }

  function getSnapBound(boundInfo, snapInfo) {
    if (boundInfo.isBound) {
      return boundInfo.offset;
    } else if (snapInfo.isSnap) {
      return getNearestSnapGuidelineInfo(snapInfo).offset;
    }

    return 0;
  }

  function checkSnapBoundsKeepRatio(moveable, startPos, endPos, isRequest) {
    var _a = checkBoundKeepRatio(moveable, startPos, endPos),
        horizontalBoundInfo = _a.horizontal,
        verticalBoundInfo = _a.vertical;

    var _b = isRequest ? {
      horizontal: {
        isSnap: false
      },
      vertical: {
        isSnap: false
      }
    } : checkSnapKeepRatio(moveable, startPos, endPos),
        horizontalSnapInfo = _b.horizontal,
        verticalSnapInfo = _b.vertical;

    var horizontalOffset = getSnapBoundOffset(horizontalBoundInfo, horizontalSnapInfo);
    var verticalOffset = getSnapBoundOffset(verticalBoundInfo, verticalSnapInfo);
    var horizontalDist = Math.abs(horizontalOffset);
    var verticalDist = Math.abs(verticalOffset);
    return {
      horizontal: {
        isBound: horizontalBoundInfo.isBound,
        isSnap: horizontalSnapInfo.isSnap,
        offset: horizontalOffset,
        dist: horizontalDist
      },
      vertical: {
        isBound: verticalBoundInfo.isBound,
        isSnap: verticalSnapInfo.isSnap,
        offset: verticalOffset,
        dist: verticalDist
      }
    };
  }
  function checkMoveableSnapBounds(moveable, isRequest, poses, boundPoses) {
    if (boundPoses === void 0) {
      boundPoses = poses;
    }

    var _a = checkBoundPoses(moveable.props.bounds, boundPoses.map(function (pos) {
      return pos[0];
    }), boundPoses.map(function (pos) {
      return pos[1];
    })),
        horizontalBoundInfos = _a.horizontal,
        verticalBoundInfos = _a.vertical;

    var _b = isRequest ? {
      horizontal: {
        isSnap: false,
        index: -1
      },
      vertical: {
        isSnap: false,
        index: -1
      }
    } : checkMoveableSnapPoses(moveable, poses.map(function (pos) {
      return pos[0];
    }), poses.map(function (pos) {
      return pos[1];
    }), moveable.props.snapCenter),
        horizontalSnapInfo = _b.horizontal,
        verticalSnapInfo = _b.vertical;

    var horizontalOffset = getSnapBound(horizontalBoundInfos[0], horizontalSnapInfo);
    var verticalOffset = getSnapBound(verticalBoundInfos[0], verticalSnapInfo);
    var horizontalDist = Math.abs(horizontalOffset);
    var verticalDist = Math.abs(verticalOffset);
    return {
      horizontal: {
        isBound: horizontalBoundInfos[0].isBound,
        isSnap: horizontalSnapInfo.isSnap,
        snapIndex: horizontalSnapInfo.index,
        offset: horizontalOffset,
        dist: horizontalDist,
        bounds: horizontalBoundInfos,
        snap: horizontalSnapInfo
      },
      vertical: {
        isBound: verticalBoundInfos[0].isBound,
        isSnap: verticalSnapInfo.isSnap,
        snapIndex: verticalSnapInfo.index,
        offset: verticalOffset,
        dist: verticalDist,
        bounds: verticalBoundInfos,
        snap: verticalSnapInfo
      }
    };
  }
  function checkSnapBounds(guideines, bounds, posesX, posesY, options) {
    if (options === void 0) {
      options = {};
    }

    var _a = checkBoundPoses(bounds, posesX, posesY),
        horizontalBoundInfos = _a.horizontal,
        verticalBoundInfos = _a.vertical;

    var _b = options.isRequest ? {
      horizontal: {
        isSnap: false,
        index: -1
      },
      vertical: {
        isSnap: false,
        index: -1
      }
    } : checkSnapPoses(guideines, posesX, posesY, options),
        horizontalSnapInfo = _b.horizontal,
        verticalSnapInfo = _b.vertical;

    var horizontalOffset = getSnapBound(horizontalBoundInfos[0], horizontalSnapInfo);
    var verticalOffset = getSnapBound(verticalBoundInfos[0], verticalSnapInfo);
    var horizontalDist = Math.abs(horizontalOffset);
    var verticalDist = Math.abs(verticalOffset);
    return {
      horizontal: {
        isBound: horizontalBoundInfos[0].isBound,
        isSnap: horizontalSnapInfo.isSnap,
        snapIndex: horizontalSnapInfo.index,
        offset: horizontalOffset,
        dist: horizontalDist,
        bounds: horizontalBoundInfos,
        snap: horizontalSnapInfo
      },
      vertical: {
        isBound: verticalBoundInfos[0].isBound,
        isSnap: verticalSnapInfo.isSnap,
        snapIndex: verticalSnapInfo.index,
        offset: verticalOffset,
        dist: verticalDist,
        bounds: verticalBoundInfos,
        snap: verticalSnapInfo
      }
    };
  }
  function normalized(value) {
    return value ? value / Math.abs(value) : 0;
  }
  function checkMaxBounds(moveable, poses, direction, fixedPosition, datas) {
    var fixedDirection = [-direction[0], -direction[1]];
    var _a = moveable.state,
        width = _a.width,
        height = _a.height;
    var bounds = moveable.props.bounds;
    var maxWidth = Infinity;
    var maxHeight = Infinity;

    if (bounds) {
      var directions = [[direction[0], -direction[1]], [-direction[0], direction[1]]];
      var _b = bounds.left,
          left_1 = _b === void 0 ? -Infinity : _b,
          _c = bounds.top,
          top_1 = _c === void 0 ? -Infinity : _c,
          _d = bounds.right,
          right_1 = _d === void 0 ? Infinity : _d,
          _e = bounds.bottom,
          bottom_1 = _e === void 0 ? Infinity : _e;
      directions.forEach(function (otherDirection) {
        var isCheckVertical = otherDirection[0] !== fixedDirection[0];
        var isCheckHorizontal = otherDirection[1] !== fixedDirection[1];
        var otherPos = getPosByDirection(poses, otherDirection);
        var verticalDirection = normalized(otherDirection[1] - fixedDirection[1]);
        var horizontalDirection = normalized(otherDirection[0] - fixedDirection[0]);
        var deg = getRad$1(fixedPosition, otherPos) * 360 / Math.PI;

        if (isCheckHorizontal) {
          var nextOtherPos = otherPos.slice();

          if (Math.abs(deg - 360) < 2 || Math.abs(deg - 180) < 2) {
            nextOtherPos[1] = fixedPosition[1];
          }

          var _a = solveNextOffset(fixedPosition, nextOtherPos, (fixedPosition[1] < otherPos[1] ? bottom_1 : top_1) - otherPos[1], false, datas),
              heightOffset = _a[1];

          if (!isNaN(heightOffset)) {
            maxHeight = height + verticalDirection * heightOffset;
          }
        }

        if (isCheckVertical) {
          var nextOtherPos = otherPos.slice();

          if (Math.abs(deg - 90) < 2 || Math.abs(deg - 270) < 2) {
            nextOtherPos[0] = fixedPosition[0];
          }

          var widthOffset = solveNextOffset(fixedPosition, nextOtherPos, (fixedPosition[0] < otherPos[0] ? right_1 : left_1) - otherPos[0], true, datas)[0];

          if (!isNaN(widthOffset)) {
            maxWidth = width + horizontalDirection * widthOffset;
          }
        }
      });
    }

    return {
      maxWidth: maxWidth,
      maxHeight: maxHeight
    };
  }

  function checkSnapRightLine(startPos, endPos, snapBoundInfo, keepRatio) {
    var rad = getRad$1(startPos, endPos) / Math.PI * 180;
    var _a = snapBoundInfo.vertical,
        isVerticalBound = _a.isBound,
        isVerticalSnap = _a.isSnap,
        verticalDist = _a.dist,
        _b = snapBoundInfo.horizontal,
        isHorizontalBound = _b.isBound,
        isHorizontalSnap = _b.isSnap,
        horizontalDist = _b.dist;
    var rad180 = rad % 180;
    var isHorizontalLine = rad180 < 3 || rad180 > 177;
    var isVerticalLine = rad180 > 87 && rad180 < 93;

    if (horizontalDist < verticalDist) {
      if (isVerticalBound || isVerticalSnap && !isVerticalLine && (!keepRatio || !isHorizontalLine)) {
        return "vertical";
      }
    }

    if (isHorizontalBound || isHorizontalSnap && !isHorizontalLine && (!keepRatio || !isVerticalLine)) {
      return "horizontal";
    }

    return "";
  }

  function getSnapBoundInfo(moveable, poses, directions, keepRatio, isRequest, datas) {
    return directions.map(function (_a) {
      var startDirection = _a[0],
          endDirection = _a[1];
      var otherStartPos = getPosByDirection(poses, startDirection);
      var otherEndPos = getPosByDirection(poses, endDirection);
      var snapBoundInfo = keepRatio ? checkSnapBoundsKeepRatio(moveable, otherStartPos, otherEndPos, isRequest) : checkMoveableSnapBounds(moveable, isRequest, [otherEndPos]);
      var _b = snapBoundInfo.horizontal,
          // dist: otherHorizontalDist,
      otherHorizontalOffset = _b.offset,
          isOtherHorizontalBound = _b.isBound,
          isOtherHorizontalSnap = _b.isSnap,
          _c = snapBoundInfo.vertical,
          // dist: otherVerticalDist,
      otherVerticalOffset = _c.offset,
          isOtherVerticalBound = _c.isBound,
          isOtherVerticalSnap = _c.isSnap;
      var multiple = minus(endDirection, startDirection);

      if (!otherVerticalOffset && !otherHorizontalOffset) {
        return {
          isBound: isOtherVerticalBound || isOtherHorizontalBound,
          isSnap: isOtherVerticalSnap || isOtherHorizontalSnap,
          sign: multiple,
          offset: [0, 0]
        };
      }

      var snapLine = checkSnapRightLine(otherStartPos, otherEndPos, snapBoundInfo, keepRatio);

      if (!snapLine) {
        return {
          sign: multiple,
          isBound: false,
          isSnap: false,
          offset: [0, 0]
        };
      }

      var isVertical = snapLine === "vertical";
      var sizeOffset = solveNextOffset(otherStartPos, otherEndPos, -(isVertical ? otherVerticalOffset : otherHorizontalOffset), isVertical, datas).map(function (size, i) {
        return size * (multiple[i] ? 2 / multiple[i] : 0);
      });
      return {
        sign: multiple,
        isBound: isVertical ? isOtherVerticalBound : isOtherHorizontalBound,
        isSnap: isVertical ? isOtherVerticalSnap : isOtherHorizontalSnap,
        offset: sizeOffset
      };
    });
  }

  function getCheckSnapDirections(direction, keepRatio) {
    var directions = [];
    var fixedDirection = [-direction[0], -direction[1]];

    if (direction[0] && direction[1]) {
      directions.push([fixedDirection, [direction[0], -direction[1]]], [fixedDirection, [-direction[0], direction[1]]]);

      if (keepRatio) {
        // pass two direction condition
        directions.push([fixedDirection, direction]);
      }
    } else if (direction[0]) {
      // vertcal
      if (keepRatio) {
        directions.push([fixedDirection, [fixedDirection[0], -1]], [fixedDirection, [fixedDirection[0], 1]], [fixedDirection, [direction[0], -1]], [fixedDirection, direction], [fixedDirection, [direction[0], 1]]);
      } else {
        directions.push([[fixedDirection[0], -1], [direction[0], -1]], [[fixedDirection[0], 0], [direction[0], 0]], [[fixedDirection[0], 1], [direction[0], 1]]);
      }
    } else if (direction[1]) {
      // horizontal
      if (keepRatio) {
        directions.push([fixedDirection, [-1, fixedDirection[1]]], [fixedDirection, [1, fixedDirection[1]]], [fixedDirection, [-1, direction[1]]], [fixedDirection, [1, direction[1]]], [fixedDirection, direction]);
      } else {
        directions.push([[-1, fixedDirection[1]], [-1, direction[1]]], [[0, fixedDirection[1]], [0, direction[1]]], [[1, fixedDirection[1]], [1, direction[1]]]);
      }
    } else {
      // [0, 0] to all direction
      directions.push([fixedDirection, [1, 0]], [fixedDirection, [-1, 0]], [fixedDirection, [0, -1]], [fixedDirection, [0, 1]], [[1, 0], [1, -1]], [[1, 0], [1, 1]], [[0, 1], [1, 1]], [[0, 1], [-1, 1]], [[-1, 0], [-1, -1]], [[-1, 0], [-1, 1]], [[0, -1], [1, -1]], [[0, -1], [-1, -1]]);
    }

    return directions;
  }
  function getSizeOffsetInfo(moveable, poses, direction, keepRatio, isRequest, datas) {
    var directions = getCheckSnapDirections(direction, keepRatio);
    var lines = getCheckInnerBoundLines(poses, direction, keepRatio);

    var offsets = __spreadArrays$1(getSnapBoundInfo(moveable, poses, directions, keepRatio, isRequest, datas), getInnerBoundInfo(moveable, lines, getPosByDirection(poses, [0, 0]), datas));

    var widthOffsetInfo = getNearOffsetInfo(offsets, 0);
    var heightOffsetInfo = getNearOffsetInfo(offsets, 1);
    return {
      width: {
        isBound: widthOffsetInfo.isBound,
        offset: widthOffsetInfo.offset[0]
      },
      height: {
        isBound: heightOffsetInfo.isBound,
        offset: heightOffsetInfo.offset[1]
      }
    };
  }
  function recheckSizeByTwoDirection(moveable, poses, width, height, maxWidth, maxHeight, direction, isRequest, datas) {
    var snapPos = getPosByDirection(poses, direction);

    var _a = checkMoveableSnapBounds(moveable, isRequest, [snapPos]),
        horizontalOffset = _a.horizontal.offset,
        verticalOffset = _a.vertical.offset;

    if (verticalOffset || horizontalOffset) {
      var _b = getDragDist({
        datas: datas,
        distX: -verticalOffset,
        distY: -horizontalOffset
      }),
          nextWidthOffset = _b[0],
          nextHeightOffset = _b[1];

      var nextWidth = Math.min(maxWidth || Infinity, width + direction[0] * nextWidthOffset);
      var nextHeight = Math.min(maxHeight || Infinity, height + direction[1] * nextHeightOffset);
      return [nextWidth - width, nextHeight - height];
    }

    return [0, 0];
  }
  function checkSizeDist(moveable, getNextPoses, width, height, direction, fixedPosition, isRequest, datas) {
    var poses = getAbsolutePosesByState(moveable.state);
    var keepRatio = moveable.props.keepRatio;
    var widthOffset = 0;
    var heightOffset = 0;

    for (var i = 0; i < 2; ++i) {
      var nextPoses = getNextPoses(widthOffset, heightOffset);

      var _a = getSizeOffsetInfo(moveable, nextPoses, direction, keepRatio, isRequest, datas),
          widthOffsetInfo = _a.width,
          heightOffsetInfo = _a.height;

      var isWidthBound = widthOffsetInfo.isBound;
      var isHeightBound = heightOffsetInfo.isBound;
      var nextWidthOffset = widthOffsetInfo.offset;
      var nextHeightOffset = heightOffsetInfo.offset;

      if (i === 1) {
        if (!isWidthBound) {
          nextWidthOffset = 0;
        }

        if (!isHeightBound) {
          nextHeightOffset = 0;
        }
      }

      if (i === 0 && isRequest && !isWidthBound && !isHeightBound) {
        return [0, 0];
      }

      if (keepRatio) {
        var widthDist = Math.abs(nextWidthOffset) * (width ? 1 / width : 1);
        var heightDist = Math.abs(nextHeightOffset) * (height ? 1 / height : 1);
        var isGetWidthOffset = isWidthBound && isHeightBound ? widthDist < heightDist : isHeightBound || !isWidthBound && widthDist < heightDist;

        if (isGetWidthOffset) {
          // width : height = ? : heightOffset
          nextWidthOffset = width * nextHeightOffset / height;
        } else {
          // width : height = widthOffset : ?
          nextHeightOffset = height * nextWidthOffset / width;
        }
      }

      widthOffset += nextWidthOffset;
      heightOffset += nextHeightOffset;
    }

    if (direction[0] && direction[1]) {
      var _b = checkMaxBounds(moveable, poses, direction, fixedPosition, datas),
          maxWidth = _b.maxWidth,
          maxHeight = _b.maxHeight;

      var _c = recheckSizeByTwoDirection(moveable, getNextPoses(widthOffset, heightOffset), width + widthOffset, height + heightOffset, maxWidth, maxHeight, direction, isRequest, datas),
          nextWidthOffset = _c[0],
          nextHeightOffset = _c[1];

      widthOffset += nextWidthOffset;
      heightOffset += nextHeightOffset;
    }

    return [widthOffset, heightOffset];
  }
  function checkSnapRotate(moveable, rect, origin, rotation) {
    if (!hasGuidelines(moveable, "rotatable")) {
      return rotation;
    }

    var pos1 = rect.pos1,
        pos2 = rect.pos2,
        pos3 = rect.pos3,
        pos4 = rect.pos4;
    var rad = rotation * Math.PI / 180;
    var prevPoses = [pos1, pos2, pos3, pos4].map(function (pos) {
      return minus(pos, origin);
    });
    var nextPoses = prevPoses.map(function (pos) {
      return rotate(pos, rad);
    });

    var result = __spreadArrays$1(checkRotateBounds(moveable, prevPoses, nextPoses, origin, rotation), checkRotateInnerBounds(moveable, prevPoses, nextPoses, origin, rotation));

    result.sort(function (a, b) {
      return Math.abs(a - rotation) - Math.abs(b - rotation);
    });

    if (result.length) {
      return result[0];
    } else {
      return rotation;
    }
  }
  function checkSnapSize(moveable, width, height, direction, fixedPosition, isRequest, datas) {
    if (!hasGuidelines(moveable, "resizable")) {
      return [0, 0];
    }

    var _a = moveable.state,
        allMatrix = _a.allMatrix,
        is3d = _a.is3d;
    return checkSizeDist(moveable, function (widthOffset, heightOffset) {
      return getNextFixedPoses(allMatrix, width + widthOffset, height + heightOffset, fixedPosition, direction, is3d);
    }, width, height, direction, fixedPosition, isRequest, datas);
  }
  function checkSnapScale(moveable, scale, direction, isRequest, datas) {
    var width = datas.width,
        height = datas.height,
        fixedPosition = datas.fixedPosition;

    if (!hasGuidelines(moveable, "scalable")) {
      return [0, 0];
    }

    var is3d = datas.is3d;
    var sizeDist = checkSizeDist(moveable, function (widthOffset, heightOffset) {
      return getNextFixedPoses(scaleMatrix(datas, plus(scale, [widthOffset / width, heightOffset / height])), width, height, fixedPosition, direction, is3d);
    }, width, height, direction, fixedPosition, isRequest, datas);
    return [sizeDist[0] / width, sizeDist[1] / height];
  }
  function solveEquation(pos1, pos2, snapOffset, isVertical) {
    var dx = pos2[0] - pos1[0];
    var dy = pos2[1] - pos1[1];

    if (Math.abs(dx) < TINY_NUM) {
      dx = 0;
    }

    if (Math.abs(dy) < TINY_NUM) {
      dy = 0;
    }

    if (!dx) {
      // y = 0 * x + b
      // only horizontal
      if (!isVertical) {
        return [0, snapOffset];
      }

      return [0, 0];
    }

    if (!dy) {
      // only vertical
      if (isVertical) {
        return [snapOffset, 0];
      }

      return [0, 0];
    } // y = ax + b


    var a = dy / dx;
    var b = pos1[1] - a * pos1[0];

    if (isVertical) {
      // y = a * x + b
      var y = a * (pos2[0] + snapOffset) + b;
      return [snapOffset, y - pos2[1]];
    } else {
      // x = (y - b) / a
      var x = (pos2[1] + snapOffset - b) / a;
      return [x - pos2[0], snapOffset];
    }
  }
  function startCheckSnapDrag(moveable, datas) {
    datas.absolutePoses = getAbsolutePosesByState(moveable.state);
  }
  function checkThrottleDragRotate(throttleDragRotate, _a, _b, _c, _d) {
    var distX = _a[0],
        distY = _a[1];
    var isVerticalBound = _b[0],
        isHorizontalBound = _b[1];
    var isVerticalSnap = _c[0],
        isHorizontalSnap = _c[1];
    var verticalOffset = _d[0],
        horizontalOffset = _d[1];
    var offsetX = -verticalOffset;
    var offsetY = -horizontalOffset;

    if (throttleDragRotate && distX && distY) {
      offsetX = 0;
      offsetY = 0;
      var adjustPoses = [];

      if (isVerticalBound && isHorizontalBound) {
        adjustPoses.push([0, horizontalOffset], [verticalOffset, 0]);
      } else if (isVerticalBound) {
        adjustPoses.push([verticalOffset, 0]);
      } else if (isHorizontalBound) {
        adjustPoses.push([0, horizontalOffset]);
      } else if (isVerticalSnap && isHorizontalSnap) {
        adjustPoses.push([0, horizontalOffset], [verticalOffset, 0]);
      } else if (isVerticalSnap) {
        adjustPoses.push([verticalOffset, 0]);
      } else if (isHorizontalSnap) {
        adjustPoses.push([0, horizontalOffset]);
      }

      if (adjustPoses.length) {
        adjustPoses.sort(function (a, b) {
          return getDistSize(minus([distX, distY], a)) - getDistSize(minus([distX, distY], b));
        });
        var adjustPos = adjustPoses[0];

        if (adjustPos[0] && Math.abs(distX) > TINY_NUM) {
          offsetX = -adjustPos[0];
          offsetY = distY * Math.abs(distX + offsetX) / Math.abs(distX) - distY;
        } else if (adjustPos[1] && Math.abs(distY) > TINY_NUM) {
          var prevDistY = distY;
          offsetY = -adjustPos[1];
          offsetX = distX * Math.abs(distY + offsetY) / Math.abs(prevDistY) - distX;
        }

        if (throttleDragRotate && isHorizontalBound && isVerticalBound) {
          if (Math.abs(offsetX) > TINY_NUM && Math.abs(offsetX) < Math.abs(verticalOffset)) {
            var scale = Math.abs(verticalOffset) / Math.abs(offsetX);
            offsetX *= scale;
            offsetY *= scale;
          } else if (Math.abs(offsetY) > TINY_NUM && Math.abs(offsetY) < Math.abs(horizontalOffset)) {
            var scale = Math.abs(horizontalOffset) / Math.abs(offsetY);
            offsetX *= scale;
            offsetY *= scale;
          } else {
            offsetX = maxOffset(-verticalOffset, offsetX);
            offsetY = maxOffset(-horizontalOffset, offsetY);
          }
        }
      }
    } else {
      offsetX = distX || isVerticalBound ? -verticalOffset : 0;
      offsetY = distY || isHorizontalBound ? -horizontalOffset : 0;
    }

    return [offsetX, offsetY];
  }
  function checkSnapDrag(moveable, distX, distY, throttleDragRotate, isRequest, datas) {
    if (!hasGuidelines(moveable, "draggable")) {
      return [{
        isSnap: false,
        isBound: false,
        offset: 0
      }, {
        isSnap: false,
        isBound: false,
        offset: 0
      }];
    }

    var poses = getAbsolutePoses(datas.absolutePoses, [distX, distY]);

    var _a = getRect(poses),
        left = _a.left,
        right = _a.right,
        top = _a.top,
        bottom = _a.bottom;

    var snapCenter = moveable.props.snapCenter;
    var snapPoses = [[left, top], [right, top], [left, bottom], [right, bottom]];

    if (snapCenter) {
      snapPoses.push([(left + right) / 2, (top + bottom) / 2]);
    }

    var _b = checkMoveableSnapBounds(moveable, isRequest, snapPoses, poses),
        verticalSnapBoundInfo = _b.vertical,
        horizontalSnapBoundInfo = _b.horizontal;

    var _c = getInnerBoundDragInfo(moveable, poses, datas),
        verticalInnerBoundInfo = _c.vertical,
        horizontalInnerBoundInfo = _c.horizontal;

    var isVerticalSnap = verticalSnapBoundInfo.isSnap;
    var isHorizontalSnap = horizontalSnapBoundInfo.isSnap;
    var isVerticalBound = verticalSnapBoundInfo.isBound || verticalInnerBoundInfo.isBound;
    var isHorizontalBound = horizontalSnapBoundInfo.isBound || horizontalInnerBoundInfo.isBound;
    var verticalOffset = maxOffset(verticalSnapBoundInfo.offset, verticalInnerBoundInfo.offset);
    var horizontalOffset = maxOffset(horizontalSnapBoundInfo.offset, horizontalInnerBoundInfo.offset);

    var _d = checkThrottleDragRotate(throttleDragRotate, [distX, distY], [isVerticalBound, isHorizontalBound], [isVerticalSnap, isHorizontalSnap], [verticalOffset, horizontalOffset]),
        offsetX = _d[0],
        offsetY = _d[1];

    return [{
      isBound: isVerticalBound,
      isSnap: isVerticalSnap,
      offset: offsetX
    }, {
      isBound: isHorizontalBound,
      isSnap: isHorizontalSnap,
      offset: offsetY
    }];
  }

  function getSnapGuidelines(posInfos) {
    var guidelines = [];
    posInfos.forEach(function (posInfo) {
      posInfo.guidelineInfos.forEach(function (_a) {
        var guideline = _a.guideline;

        if (guidelines.indexOf(guideline) > -1) {
          return;
        }

        guidelines.push(guideline);
      });
    });
    return guidelines;
  }

  function getElementGuidelineDist(elementPos, elementSize, targetPos, targetSize) {
    // relativePos < 0  => element(l)  ---  (r)target
    // relativePos > 0  => target(l)   ---  (r)element
    var relativePos = elementPos - targetPos;
    var startPos = relativePos < 0 ? relativePos + elementSize : targetSize;
    var endPos = relativePos < 0 ? 0 : relativePos;
    var size = endPos - startPos;
    return {
      size: size,
      pos: startPos
    };
  }

  function groupByElementGuidelines(guidelines, clientPos, size, index) {
    var groupInfos = [];
    var group = groupBy(guidelines.filter(function (_a) {
      var element = _a.element,
          gap = _a.gap;
      return element && !gap;
    }), function (_a) {
      var element = _a.element,
          pos = _a.pos;
      var elementPos = pos[index];
      var sign = Math.min(0, elementPos - clientPos) < 0 ? -1 : 1;
      var groupKey = sign + "_" + pos[index ? 0 : 1];
      var groupInfo = find$1(groupInfos, function (_a) {
        var groupElement = _a[0],
            groupPos = _a[1];
        return element === groupElement && elementPos === groupPos;
      });

      if (groupInfo) {
        return groupInfo[2];
      }

      groupInfos.push([element, elementPos, groupKey]);
      return groupKey;
    });
    group.forEach(function (elementGuidelines) {
      elementGuidelines.sort(function (a, b) {
        var result = getElementGuidelineDist(a.pos[index], a.size, clientPos, size).size - getElementGuidelineDist(b.pos[index], a.size, clientPos, size).size;
        return result || a.pos[index ? 0 : 1] - b.pos[index ? 0 : 1];
      });
    });
    return group;
  }

  function renderElementGroup(moveable, direction, groups, minPos, clientPos, clientSize, targetPos, snapThreshold, snapDigit, index, snapDistFormat, React) {
    var _a = moveable.props,
        zoom = _a.zoom,
        _b = _a.isDisplaySnapDigit,
        isDisplaySnapDigit = _b === void 0 ? true : _b;
    var _c = DIRECTION_NAMES[direction],
        posName1 = _c[0],
        posName2 = _c[1],
        sizeName = _c[2],
        scaleDirection = _c[4];
    return flat(groups.map(function (elementGuidelines, i) {
      var isFirstRenderSize = true;
      return elementGuidelines.map(function (_a, j) {
        var _b;

        var pos = _a.pos,
            size = _a.size;

        var _c = getElementGuidelineDist(pos[index], size, clientPos, clientSize),
            linePos = _c.pos,
            lineSize = _c.size;

        if (lineSize < snapThreshold) {
          return null;
        }

        var isRenderSize = isFirstRenderSize;
        isFirstRenderSize = false;
        var snapSize = isDisplaySnapDigit && isRenderSize ? parseFloat(lineSize.toFixed(snapDigit)) : 0;
        return React.createElement("div", {
          key: direction + "LinkGuideline" + i + "-" + j,
          className: prefix("guideline-group", direction),
          style: (_b = {}, _b[posName1] = minPos + linePos + "px", _b[posName2] = -targetPos + pos[index ? 0 : 1] + "px", _b[sizeName] = lineSize + "px", _b)
        }, renderInnerGuideline({
          direction: direction,
          classNames: [prefix("dashed")],
          size: "100%",
          posValue: [0, 0],
          sizeValue: lineSize,
          zoom: zoom
        }, React), React.createElement("div", {
          className: prefix("size-value"),
          style: {
            transform: "translate" + scaleDirection + "(-50%) scale(" + zoom + ")"
          }
        }, snapSize > 0 ? snapDistFormat(snapSize) : ""));
      });
    }));
  }

  function renderSnapPoses(moveable, direction, snapPoses, minPos, targetPos, size, index, React) {
    var zoom = moveable.props.zoom;
    return snapPoses.map(function (_a, i) {
      var type = _a.type,
          pos = _a.pos;
      var renderPos = [0, 0];
      renderPos[index] = minPos;
      renderPos[index ? 0 : 1] = -targetPos + pos;
      return renderInnerGuideline({
        key: direction + "TargetGuideline" + i,
        classNames: [prefix("target", "bold", type)],
        posValue: renderPos,
        sizeValue: size,
        zoom: zoom,
        direction: direction
      }, React);
    });
  }

  function renderGuidelines(moveable, direction, guidelines, targetPos, React) {
    var zoom = moveable.props.zoom;
    return guidelines.map(function (guideline, i) {
      var pos = guideline.pos,
          size = guideline.size,
          element = guideline.element;
      var renderPos = [-targetPos[0] + pos[0], -targetPos[1] + pos[1]];
      return renderInnerGuideline({
        key: direction + "Guideline" + i,
        classNames: element ? [prefix("bold")] : [],
        direction: direction,
        posValue: renderPos,
        sizeValue: size,
        zoom: zoom
      }, React);
    });
  }

  function getGapGuidelinesToStart(guidelines, index, targetPos, targetSizes, guidelinePos, gap, otherPos) {
    var absGap = Math.abs(gap);
    var start = guidelinePos[index] + (gap > 0 ? targetSizes[0] : 0);
    return guidelines.filter(function (_a) {
      var gapPos = _a.pos;
      return gapPos[index] <= targetPos[index];
    }).sort(function (_a, _b) {
      var aPos = _a.pos;
      var bPos = _b.pos;
      return bPos[index] - aPos[index];
    }).filter(function (_a) {
      var gapPos = _a.pos,
          gapSizes = _a.sizes;
      var nextPos = gapPos[index];

      if (throttle(nextPos + gapSizes[index], 0.0001) === throttle(start - absGap, 0.0001)) {
        start = nextPos;
        return true;
      }

      return false;
    }).map(function (gapGuideline) {
      var renderPos = -targetPos[index] + gapGuideline.pos[index] + gapGuideline.sizes[index];
      return __assign$2(__assign$2({}, gapGuideline), {
        gap: gap,
        renderPos: index ? [otherPos, renderPos] : [renderPos, otherPos]
      });
    });
  }

  function getGapGuidelinesToEnd(guidelines, index, targetPos, targetSizes, guidelinePos, gap, otherPos) {
    var absGap = Math.abs(gap);
    var start = guidelinePos[index] + (gap < 0 ? targetSizes[index] : 0);
    return guidelines.filter(function (_a) {
      var gapPos = _a.pos;
      return gapPos[index] > targetPos[index];
    }).sort(function (_a, _b) {
      var aPos = _a.pos;
      var bPos = _b.pos;
      return aPos[index] - bPos[index];
    }).filter(function (_a) {
      var gapPos = _a.pos,
          gapSizes = _a.sizes;
      var nextPos = gapPos[index];

      if (throttle(nextPos, 0.0001) === throttle(start + absGap, 0.0001)) {
        start = nextPos + gapSizes[index];
        return true;
      }

      return false;
    }).map(function (gapGuideline) {
      var renderPos = -targetPos[index] + gapGuideline.pos[index] - absGap;
      return __assign$2(__assign$2({}, gapGuideline), {
        gap: gap,
        renderPos: index ? [otherPos, renderPos] : [renderPos, otherPos]
      });
    });
  }

  function getGapGuidelines$1(guidelines, type, targetPos, targetSizes) {
    var elementGuidelines = guidelines.filter(function (_a) {
      var element = _a.element,
          gap = _a.gap,
          guidelineType = _a.type;
      return element && gap && guidelineType === type;
    });

    var _a = type === "vertical" ? [0, 1] : [1, 0],
        index = _a[0],
        otherIndex = _a[1];

    return flat(elementGuidelines.map(function (guideline) {
      var pos = guideline.pos;
      var gap = guideline.gap;
      var gapGuidelines = guideline.gapGuidelines;
      var sizes = guideline.sizes;
      var offset = minOffset(pos[otherIndex] + sizes[otherIndex] - targetPos[otherIndex], pos[otherIndex] - targetPos[otherIndex] - targetSizes[otherIndex]);
      var minSize = Math.min(sizes[otherIndex], targetSizes[otherIndex]);

      if (offset > 0 && offset > minSize) {
        offset = (offset - minSize / 2) * 2;
      } else if (offset < 0 && offset < -minSize) {
        offset = (offset + minSize / 2) * 2;
      }

      var otherPos = (offset > 0 ? 0 : targetSizes[otherIndex]) + offset / 2;
      return __spreadArrays$1(getGapGuidelinesToStart(gapGuidelines, index, targetPos, targetSizes, pos, gap, otherPos), getGapGuidelinesToEnd(gapGuidelines, index, targetPos, targetSizes, pos, gap, otherPos));
    }));
  }

  function renderGapGuidelines(moveable, direction, gapGuidelines, snapDistFormat, React) {
    var _a = moveable.props,
        _b = _a.snapDigit,
        snapDigit = _b === void 0 ? 0 : _b,
        _c = _a.isDisplaySnapDigit,
        isDisplaySnapDigit = _c === void 0 ? true : _c,
        zoom = _a.zoom;
    var scaleDirection = direction === "horizontal" ? "X" : "Y";
    var sizeName = direction === "horizontal" ? "width" : "height";
    return gapGuidelines.map(function (_a, i) {
      var _b;

      var renderPos = _a.renderPos,
          gap = _a.gap,
          className = _a.className;
      var absGap = Math.abs(gap);
      var snapSize = isDisplaySnapDigit ? parseFloat(absGap.toFixed(snapDigit)) : 0;
      return React.createElement("div", {
        key: direction + "GapGuideline" + i,
        className: prefix("guideline-group", direction),
        style: (_b = {
          left: renderPos[0] + "px",
          top: renderPos[1] + "px"
        }, _b[sizeName] = absGap + "px", _b)
      }, renderInnerGuideline({
        direction: direction,
        classNames: [prefix("gap"), className],
        size: "100%",
        posValue: [0, 0],
        sizeValue: absGap,
        zoom: zoom
      }, React), React.createElement("div", {
        className: prefix("size-value", "gap"),
        style: {
          transform: "translate" + scaleDirection + "(-50%) scale(" + zoom + ")"
        }
      }, snapSize > 0 ? snapDistFormat(snapSize) : ""));
    });
  }

  function addBoundGuidelines(moveable, verticalPoses, horizontalPoses, verticalSnapPoses, horizontalSnapPoses, externalBounds) {
    var _a = checkBoundPoses(externalBounds || moveable.props.bounds, verticalPoses, horizontalPoses),
        verticalBoundInfos = _a.vertical,
        horizontalBoundInfos = _a.horizontal;

    verticalBoundInfos.forEach(function (info) {
      if (info.isBound) {
        verticalSnapPoses.push({
          type: "bounds",
          pos: info.pos
        });
      }
    });
    horizontalBoundInfos.forEach(function (info) {
      if (info.isBound) {
        horizontalSnapPoses.push({
          type: "bounds",
          pos: info.pos
        });
      }
    });

    var _b = checkInnerBoundPoses(moveable),
        verticalInnerBoundPoses = _b.vertical,
        horizontalInnerBoundPoses = _b.horizontal;

    verticalInnerBoundPoses.forEach(function (innerPos) {
      if (findIndex(verticalSnapPoses, function (_a) {
        var type = _a.type,
            pos = _a.pos;
        return type === "bounds" && pos === innerPos;
      }) >= 0) {
        return;
      }

      verticalSnapPoses.push({
        type: "bounds",
        pos: innerPos
      });
    });
    horizontalInnerBoundPoses.forEach(function (innerPos) {
      if (findIndex(horizontalSnapPoses, function (_a) {
        var type = _a.type,
            pos = _a.pos;
        return type === "bounds" && pos === innerPos;
      }) >= 0) {
        return;
      }

      horizontalSnapPoses.push({
        type: "bounds",
        pos: innerPos
      });
    });
  }
  /**
   * @namespace Moveable.Snappable
   * @description Whether or not target can be snapped to the guideline. (default: false)
   * @sort 2
   */


  var Snappable = {
    name: "snappable",
    props: {
      snappable: [Boolean, Array],
      snapCenter: Boolean,
      snapHorizontal: Boolean,
      snapVertical: Boolean,
      snapElement: Boolean,
      snapGap: Boolean,
      isDisplaySnapDigit: Boolean,
      snapDigit: Number,
      snapThreshold: Number,
      horizontalGuidelines: Array,
      verticalGuidelines: Array,
      elementGuidelines: Array,
      bounds: Object,
      innerBounds: Object,
      snapDistFormat: Function
    },
    events: {
      onSnap: "snap"
    },
    css: [":host {\n    --bounds-color: #d66;\n}\n.guideline {\n    pointer-events: none;\n    z-index: 2;\n}\n.guideline.bounds {\n    background: #d66;\n    background: var(--bounds-color);\n}\n.guideline-group {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n.guideline-group .size-value {\n    position: absolute;\n    color: #f55;\n    font-size: 12px;\n    font-weight: bold;\n}\n.guideline-group.horizontal .size-value {\n    transform-origin: 50% 100%;\n    transform: translateX(-50%);\n    left: 50%;\n    bottom: 5px;\n}\n.guideline-group.vertical .size-value {\n    transform-origin: 0% 50%;\n    top: 50%;\n    transform: translateY(-50%);\n    left: 5px;\n}\n.guideline.gap {\n    background: #f55;\n}\n.size-value.gap {\n    color: #f55;\n}\n"],
    render: function (moveable, React) {
      var _a = moveable.state,
          targetTop = _a.top,
          targetLeft = _a.left,
          pos1 = _a.pos1,
          pos2 = _a.pos2,
          pos3 = _a.pos3,
          pos4 = _a.pos4,
          snapRenderInfo = _a.snapRenderInfo,
          targetClientRect = _a.targetClientRect,
          containerClientRect = _a.containerClientRect,
          is3d = _a.is3d,
          rootMatrix = _a.rootMatrix;

      if (!snapRenderInfo || !hasGuidelines(moveable, "")) {
        return [];
      }

      var n = is3d ? 4 : 3;
      var minLeft = Math.min(pos1[0], pos2[0], pos3[0], pos4[0]);
      var minTop = Math.min(pos1[1], pos2[1], pos3[1], pos4[1]);
      var containerPos = calculateContainerPos(rootMatrix, containerClientRect, n);

      var _b = calculateInversePosition(rootMatrix, [targetClientRect.left - containerPos[0], targetClientRect.top - containerPos[1]], n),
          clientLeft = _b[0],
          clientTop = _b[1];

      var _c = moveable.props,
          _d = _c.snapThreshold,
          snapThreshold = _d === void 0 ? 5 : _d,
          _e = _c.snapDigit,
          snapDigit = _e === void 0 ? 0 : _e,
          _f = _c.snapDistFormat,
          snapDistFormat = _f === void 0 ? function (v) {
        return v;
      } : _f;
      var externalPoses = snapRenderInfo.externalPoses || [];
      var poses = getAbsolutePosesByState(moveable.state);
      var verticalSnapPoses = [];
      var horizontalSnapPoses = [];
      var verticalGuidelines = [];
      var horizontalGuidelines = [];
      var snapInfos = [];

      var _g = getRect(poses),
          width = _g.width,
          height = _g.height,
          top = _g.top,
          left = _g.left,
          bottom = _g.bottom,
          right = _g.right;

      var hasExternalPoses = externalPoses.length > 0;
      var externalRect = hasExternalPoses ? getRect(externalPoses) : {};

      if (!snapRenderInfo.request) {
        if (snapRenderInfo.direction) {
          snapInfos.push(getSnapInfosByDirection(moveable, poses, snapRenderInfo.direction));
        }

        if (snapRenderInfo.snap) {
          var rect = getRect(poses);

          if (snapRenderInfo.center) {
            rect.middle = (rect.top + rect.bottom) / 2;
            rect.center = (rect.left + rect.right) / 2;
          }

          snapInfos.push(checkSnaps(moveable, rect, true, 1));
        }

        if (hasExternalPoses) {
          if (snapRenderInfo.center) {
            externalRect.middle = (externalRect.top + externalRect.bottom) / 2;
            externalRect.center = (externalRect.left + externalRect.right) / 2;
          }

          snapInfos.push(checkSnaps(moveable, externalRect, true, 1));
        }

        snapInfos.forEach(function (snapInfo) {
          var verticalPosInfos = snapInfo.vertical.posInfos,
              horizontalPosInfos = snapInfo.horizontal.posInfos;
          verticalSnapPoses.push.apply(verticalSnapPoses, verticalPosInfos.map(function (posInfo) {
            return {
              type: "snap",
              pos: posInfo.pos
            };
          }));
          horizontalSnapPoses.push.apply(horizontalSnapPoses, horizontalPosInfos.map(function (posInfo) {
            return {
              type: "snap",
              pos: posInfo.pos
            };
          }));
          verticalGuidelines.push.apply(verticalGuidelines, getSnapGuidelines(verticalPosInfos));
          horizontalGuidelines.push.apply(horizontalGuidelines, getSnapGuidelines(horizontalPosInfos));
        });
      }

      addBoundGuidelines(moveable, [left, right], [top, bottom], verticalSnapPoses, horizontalSnapPoses);

      if (hasExternalPoses) {
        addBoundGuidelines(moveable, [externalRect.left, externalRect.right], [externalRect.top, externalRect.bottom], verticalSnapPoses, horizontalSnapPoses, snapRenderInfo.externalBounds);
      }

      var elementHorizontalGroup = groupByElementGuidelines(horizontalGuidelines, clientLeft, width, 0);
      var elementVerticalGroup = groupByElementGuidelines(verticalGuidelines, clientTop, height, 1);
      var gapHorizontalGuidelines = getGapGuidelines$1(verticalGuidelines, "vertical", [targetLeft, targetTop], [width, height]);
      var gapVerticalGuidelines = getGapGuidelines$1(horizontalGuidelines, "horizontal", [targetLeft, targetTop], [width, height]);

      var allGuidelines = __spreadArrays$1(verticalGuidelines, horizontalGuidelines);

      triggerEvent(moveable, "onSnap", {
        guidelines: allGuidelines.filter(function (_a) {
          var element = _a.element;
          return !element;
        }),
        elements: groupBy(allGuidelines.filter(function (_a) {
          var element = _a.element;
          return element;
        }), function (_a) {
          var element = _a.element;
          return element;
        }),
        gaps: __spreadArrays$1(gapVerticalGuidelines, gapHorizontalGuidelines)
      }, true);
      return __spreadArrays$1(renderGapGuidelines(moveable, "vertical", gapVerticalGuidelines, snapDistFormat, React), renderGapGuidelines(moveable, "horizontal", gapHorizontalGuidelines, snapDistFormat, React), renderElementGroup(moveable, "horizontal", elementHorizontalGroup, minLeft, clientLeft, width, targetTop, snapThreshold, snapDigit, 0, snapDistFormat, React), renderElementGroup(moveable, "vertical", elementVerticalGroup, minTop, clientTop, height, targetLeft, snapThreshold, snapDigit, 1, snapDistFormat, React), renderSnapPoses(moveable, "horizontal", horizontalSnapPoses, minLeft, targetTop, width, 0, React), renderSnapPoses(moveable, "vertical", verticalSnapPoses, minTop, targetLeft, height, 1, React), renderGuidelines(moveable, "horizontal", horizontalGuidelines, [targetLeft, targetTop], React), renderGuidelines(moveable, "vertical", verticalGuidelines, [targetLeft, targetTop], React));
    },
    dragStart: function (moveable, e) {
      moveable.state.snapRenderInfo = {
        request: e.isRequest,
        snap: true,
        center: true
      };
      snapStart(moveable);
    },
    drag: function (moveable) {
      var state = moveable.state;
      state.staticGuidelines = getElementGuidelines(moveable, false, state.staticGuidelines);
      state.guidelines = getTotalGuidelines(moveable);
    },
    pinchStart: function (moveable) {
      this.unset(moveable);
    },
    dragEnd: function (moveable) {
      this.unset(moveable);
    },
    dragControlCondition: function (e, moveable) {
      if (directionCondition(e) || dragControlCondition(e, moveable)) {
        return true;
      }

      if (!e.isRequest && e.inputEvent) {
        return hasClass(e.inputEvent.target, prefix("snap-control"));
      }
    },
    dragControlStart: function (moveable) {
      moveable.state.snapRenderInfo = null;
      snapStart(moveable);
    },
    dragControl: function (moveable) {
      this.drag(moveable);
    },
    dragControlEnd: function (moveable) {
      this.unset(moveable);
    },
    dragGroupStart: function (moveable, e) {
      this.dragStart(moveable, e);
    },
    dragGroup: function (moveable) {
      this.drag(moveable);
    },
    dragGroupEnd: function (moveable) {
      this.unset(moveable);
    },
    dragGroupControlStart: function (moveable) {
      moveable.state.snapRenderInfo = null;
      snapStart(moveable);
    },
    dragGroupControl: function (moveable) {
      this.drag(moveable);
    },
    dragGroupControlEnd: function (moveable) {
      this.unset(moveable);
    },
    unset: function (moveable) {
      var state = moveable.state;
      state.enableSnap = false;
      state.staticGuidelines = [];
      state.guidelines = [];
      state.snapRenderInfo = null;
    }
  };
  /**
   * Whether or not target can be snapped to the guideline. (default: false)
   * @name Moveable.Snappable#snappable
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.snappable = true;
   */

  /**
   * When you drag, make the snap in the center of the target. (default: false)
   * @name Moveable.Snappable#snapCenter
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *   snappable: true,
   * });
   *
   * moveable.snapCenter = true;
   */

  /**
   * When you drag, make the snap in the vertical guidelines. (default: true)
   * @name Moveable.Snappable#snapVertical
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *   snappable: true,
   *   snapVertical: true,
   *   snapHorizontal: true,
   *   snapElement: true,
   * });
   *
   * moveable.snapVertical = false;
   */

  /**
   * When you drag, make the snap in the horizontal guidelines. (default: true)
   * @name Moveable.Snappable#snapHorizontal
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *   snappable: true,
   *   snapVertical: true,
   *   snapHorizontal: true,
   *   snapElement: true,
   * });
   *
   * moveable.snapHorizontal = false;
   */

  /**
   * When you drag, make the gap snap in the element guidelines. (default: true)
   * @name Moveable.Snappable#snapGap
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *   snappable: true,
   *   snapVertical: true,
   *   snapHorizontal: true,
   *   snapElement: true,
   *   snapGap: true,
   * });
   *
   * moveable.snapGap = false;
   */

  /**
   * When you drag, make the snap in the element guidelines. (default: true)
   * @name Moveable.Snappable#snapElement
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *   snappable: true,
   *   snapVertical: true,
   *   snapHorizontal: true,
   *   snapElement: true,
   * });
   *
   * moveable.snapElement = false;
   */

  /**
   * Distance value that can snap to guidelines. (default: 5)
   * @name Moveable.Snappable#snapThreshold
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.snapThreshold = 5;
   */

  /**
   * Add guidelines in the horizontal direction. (default: [])
   * @name Moveable.Snappable#horizontalGuidelines
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.horizontalGuidelines = [100, 200, 500];
   */

  /**
   * Add guidelines in the vertical direction. (default: [])
   * @name Moveable.Snappable#verticalGuidelines
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.verticalGuidelines = [100, 200, 500];
   */

  /**
   * Add guidelines for the element. (default: [])
   * @name Moveable.Snappable#elementGuidelines
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.elementGuidelines = [
   *   document.querySelector(".element"),
   * ];
   */

  /**
   * You can set up boundaries. (default: null)
   * @name Moveable.Snappable#bounds
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.bounds = { left: 0, right: 1000, top: 0, bottom: 1000};
   */

  /**
   * You can set up inner boundaries. (default: null)
   * @name Moveable.Snappable#innerBounds
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.innerBounds = { left: 500, top: 500, width: 100, height: 100};
   */

  /**
   * snap distance digits (default: 0)
   * @name Moveable.Snappable#snapDigit
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.snapDigit = 0
   */

  /**
   * Whether to show snap distance (default: true)
   * @name Moveable.Snappable#isDisplaySnapDigit
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.isDisplaySnapDigit = true;
   */

  /**
   * You can set the text format of the distance shown in the guidelines. (default: self)
   * @name Moveable.Snappable#snapDistFormat
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *  snappable: true,
   *  snapDistFormat: v => v,
   * });
   * moveable.snapDistFormat = v => `${v}px`;
   */

  /**
   * When you drag or dragControl, the `snap` event is called.
   * @memberof Moveable.Snappable
   * @event snap
   * @param {Moveable.Snappable.OnSnap} - Parameters for the `snap` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     snappable: true
   * });
   * moveable.on("snap", e => {
   *     console.log("onSnap", e);
   * });
   */

  /**
   * @namespace Draggable
   * @memberof Moveable
   * @description Draggable refers to the ability to drag and move targets.
   */

  var Draggable = {
    name: "draggable",
    props: {
      draggable: Boolean,
      throttleDrag: Number,
      throttleDragRotate: Number,
      startDragRotate: Number,
      edgeDraggable: Boolean
    },
    events: {
      onDragStart: "dragStart",
      onDrag: "drag",
      onDragEnd: "dragEnd",
      onDragGroupStart: "dragGroupStart",
      onDragGroup: "dragGroup",
      onDragGroupEnd: "dragGroupEnd"
    },
    render: function (moveable, React) {
      var _a = moveable.props,
          throttleDragRotate = _a.throttleDragRotate,
          zoom = _a.zoom;
      var _b = moveable.state,
          dragInfo = _b.dragInfo,
          beforeOrigin = _b.beforeOrigin;

      if (!throttleDragRotate || !dragInfo) {
        return [];
      }

      var dist = dragInfo.dist;

      if (!dist[0] && !dist[1]) {
        return [];
      }

      var width = getDistSize(dist);
      var rad = getRad$1(dist, [0, 0]);
      return [React.createElement("div", {
        className: prefix("line", "horizontal", "dragline", "dashed"),
        key: "dragRotateGuideline",
        style: {
          width: width + "px",
          transform: "translate(" + beforeOrigin[0] + "px, " + beforeOrigin[1] + "px) rotate(" + rad + "rad) scaleY(" + zoom + ")"
        }
      })];
    },
    dragStart: function (moveable, e) {
      var datas = e.datas,
          parentEvent = e.parentEvent,
          parentGesto = e.parentGesto;
      var state = moveable.state;
      var target = state.target,
          gesto = state.gesto;

      if (gesto) {
        return false;
      }

      state.gesto = parentGesto || moveable.targetGesto;
      var style = window.getComputedStyle(target);
      datas.datas = {};
      datas.left = parseFloat(style.left || "") || 0;
      datas.top = parseFloat(style.top || "") || 0;
      datas.bottom = parseFloat(style.bottom || "") || 0;
      datas.right = parseFloat(style.right || "") || 0;
      datas.startValue = [0, 0];
      setDragStart(moveable, e);
      setDefaultTransformIndex(e);
      startCheckSnapDrag(moveable, datas);
      datas.prevDist = [0, 0];
      datas.prevBeforeDist = [0, 0];
      datas.isDrag = false;
      var params = fillParams(moveable, e, __assign$2({
        set: function (translate) {
          datas.startValue = translate;
        }
      }, fillTransformStartEvent(e)));
      var result = parentEvent || triggerEvent(moveable, "onDragStart", params);

      if (result !== false) {
        datas.isDrag = true;
        moveable.state.dragInfo = {
          startRect: moveable.getRect(),
          dist: [0, 0]
        };
      } else {
        state.gesto = null;
        datas.isPinch = false;
      }

      return datas.isDrag ? params : false;
    },
    drag: function (moveable, e) {
      resolveTransformEvent(e, "translate");
      var datas = e.datas,
          parentEvent = e.parentEvent,
          parentFlag = e.parentFlag,
          isPinch = e.isPinch,
          isRequest = e.isRequest;
      var distX = e.distX,
          distY = e.distY;
      var isDrag = datas.isDrag,
          prevDist = datas.prevDist,
          prevBeforeDist = datas.prevBeforeDist,
          startValue = datas.startValue;

      if (!isDrag) {
        return;
      }

      var props = moveable.props;
      var parentMoveable = props.parentMoveable;
      var throttleDrag = parentEvent ? 0 : props.throttleDrag || 0;
      var throttleDragRotate = parentEvent ? 0 : props.throttleDragRotate || 0;
      var isSnap = false;
      var dragRotateRad = 0;

      if (!parentEvent && throttleDragRotate > 0 && (distX || distY)) {
        var startDragRotate = props.startDragRotate || 0;
        var deg = throttle(startDragRotate + getRad$1([0, 0], [distX, distY]) * 180 / Math.PI, throttleDragRotate) - startDragRotate;
        var ry = distY * Math.abs(Math.cos((deg - 90) / 180 * Math.PI));
        var rx = distX * Math.abs(Math.cos(deg / 180 * Math.PI));
        var r = getDistSize([rx, ry]);
        dragRotateRad = deg * Math.PI / 180;
        distX = r * Math.cos(dragRotateRad);
        distY = r * Math.sin(dragRotateRad);
      }

      if (!isPinch && !parentEvent && !parentFlag && (!throttleDragRotate || distX || distY)) {
        var _a = checkSnapDrag(moveable, distX, distY, throttleDragRotate, isRequest, datas),
            verticalInfo = _a[0],
            horizontalInfo = _a[1];

        var isVerticalSnap = verticalInfo.isSnap,
            isVerticalBound = verticalInfo.isBound,
            verticalOffset = verticalInfo.offset;
        var isHorizontalSnap = horizontalInfo.isSnap,
            isHorizontalBound = horizontalInfo.isBound,
            horizontalOffset = horizontalInfo.offset;
        isSnap = isVerticalSnap || isHorizontalSnap || isVerticalBound || isHorizontalBound;
        distX += verticalOffset;
        distY += horizontalOffset;
      }

      datas.passDeltaX = distX - (datas.passDistX || 0);
      datas.passDeltaY = distY - (datas.passDistY || 0);
      datas.passDistX = distX;
      datas.passDistY = distY;
      var beforeTranslate = plus(getBeforeDragDist({
        datas: datas,
        distX: distX,
        distY: distY
      }), startValue);
      var translate = plus(getTransformDist({
        datas: datas,
        distX: distX,
        distY: distY
      }), startValue);

      if (!throttleDragRotate && !isSnap) {
        throttleArray(translate, throttleDrag);
        throttleArray(beforeTranslate, throttleDrag);
      }

      var beforeDist = minus(beforeTranslate, startValue);
      var dist = minus(translate, startValue);
      var delta = minus(dist, prevDist);
      var beforeDelta = minus(beforeDist, prevBeforeDist);
      datas.prevDist = dist;
      datas.prevBeforeDist = beforeDist;
      var left = datas.left + beforeDist[0];
      var top = datas.top + beforeDist[1];
      var right = datas.right - beforeDist[0];
      var bottom = datas.bottom - beforeDist[1];
      var nextTransform = convertTransformFormat(datas, "translate(" + translate[0] + "px, " + translate[1] + "px)", "translate(" + dist[0] + "px, " + dist[1] + "px)");
      moveable.state.dragInfo.dist = parentEvent ? [0, 0] : dist;

      if (!parentEvent && !parentMoveable && delta.every(function (num) {
        return !num;
      }) && beforeDelta.some(function (num) {
        return !num;
      })) {
        return;
      }

      var _b = moveable.state,
          width = _b.width,
          height = _b.height;
      var params = fillParams(moveable, e, {
        transform: nextTransform,
        dist: dist,
        delta: delta,
        translate: translate,
        beforeDist: beforeDist,
        beforeDelta: beforeDelta,
        beforeTranslate: beforeTranslate,
        left: left,
        top: top,
        right: right,
        bottom: bottom,
        width: width,
        height: height,
        isPinch: isPinch
      });
      !parentEvent && triggerEvent(moveable, "onDrag", params);
      return params;
    },
    dragEnd: function (moveable, e) {
      var parentEvent = e.parentEvent,
          datas = e.datas,
          isDrag = e.isDrag;
      moveable.state.gesto = null;
      moveable.state.dragInfo = null;

      if (!datas.isDrag) {
        return;
      }

      datas.isDrag = false;
      !parentEvent && triggerEvent(moveable, "onDragEnd", fillEndParams(moveable, e, {}));
      return isDrag;
    },
    dragGroupStart: function (moveable, e) {
      var datas = e.datas,
          clientX = e.clientX,
          clientY = e.clientY;
      var params = this.dragStart(moveable, e);

      if (!params) {
        return false;
      }

      var events = triggerChildGesto(moveable, this, "dragStart", [clientX || 0, clientY || 0], e, false);

      var nextParams = __assign$2(__assign$2({}, params), {
        targets: moveable.props.targets,
        events: events
      });

      var result = triggerEvent(moveable, "onDragGroupStart", nextParams);
      datas.isDrag = result !== false;
      return datas.isDrag ? params : false;
    },
    dragGroup: function (moveable, e) {
      var datas = e.datas;

      if (!datas.isDrag) {
        return;
      }

      var params = this.drag(moveable, e);
      var _a = e.datas,
          passDeltaX = _a.passDeltaX,
          passDeltaY = _a.passDeltaY;
      var events = triggerChildGesto(moveable, this, "drag", [passDeltaX, passDeltaY], e, false);

      if (!params) {
        return;
      }

      var nextParams = __assign$2({
        targets: moveable.props.targets,
        events: events
      }, params);

      triggerEvent(moveable, "onDragGroup", nextParams);
      return nextParams;
    },
    dragGroupEnd: function (moveable, e) {
      var isDrag = e.isDrag,
          datas = e.datas;

      if (!datas.isDrag) {
        return;
      }

      this.dragEnd(moveable, e);
      triggerChildGesto(moveable, this, "dragEnd", [0, 0], e, false);
      triggerEvent(moveable, "onDragGroupEnd", fillEndParams(moveable, e, {
        targets: moveable.props.targets
      }));
      return isDrag;
    },

    /**
     * @method Moveable.Draggable#request
     * @param {object} [e] - the draggable's request parameter
     * @param {number} [e.x] - x position
     * @param {number} [e.y] - y position
     * @param {number} [e.deltaX] - X number to move
     * @param {number} [e.deltaY] - Y number to move
     * @return {Moveable.Requester} Moveable Requester
     * @example
      * // Instantly Request (requestStart - request - requestEnd)
     * // Use Relative Value
     * moveable.request("draggable", { deltaX: 10, deltaY: 10 }, true);
     * // Use Absolute Value
     * moveable.request("draggable", { x: 200, y: 100 }, true);
     *
     * // requestStart
     * const requester = moveable.request("draggable");
     *
     * // request
     * // Use Relative Value
     * requester.request({ deltaX: 10, deltaY: 10 });
     * requester.request({ deltaX: 10, deltaY: 10 });
     * requester.request({ deltaX: 10, deltaY: 10 });
     * // Use Absolute Value
     * moveable.request("draggable", { x: 200, y: 100 });
     * moveable.request("draggable", { x: 220, y: 100 });
     * moveable.request("draggable", { x: 240, y: 100 });
     *
     * // requestEnd
     * requester.requestEnd();
     */
    request: function (moveable) {
      var datas = {};
      var rect = moveable.getRect();
      var distX = 0;
      var distY = 0;
      return {
        isControl: false,
        requestStart: function () {
          return {
            datas: datas
          };
        },
        request: function (e) {
          if ("x" in e) {
            distX = e.x - rect.left;
          } else if ("deltaX" in e) {
            distX += e.deltaX;
          }

          if ("y" in e) {
            distY = e.y - rect.top;
          } else if ("deltaY" in e) {
            distY += e.deltaY;
          }

          return {
            datas: datas,
            distX: distX,
            distY: distY
          };
        },
        requestEnd: function () {
          return {
            datas: datas,
            isDrag: true
          };
        }
      };
    },
    unset: function (moveable) {
      moveable.state.dragInfo = null;
    }
  };
  /**
   * Whether or not target can be dragged. (default: false)
   * @name Moveable.Draggable#draggable
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.draggable = true;
   */

  /**
   * throttle of x, y when drag.
   * @name Moveable.Draggable#throttleDrag
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.throttleDrag = 1;
   */

  /**
  * throttle of angle of x, y when drag.
  * @name Moveable.Draggable#throttleDragRotate
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body);
  *
  * moveable.throttleDragRotate = 45;
  */

  /**
  * start angle of throttleDragRotate of x, y when drag.
  * @name Moveable.Draggable#startDragRotate
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body);
  *
  * // 45, 135, 225, 315
  * moveable.throttleDragRotate = 90;
  * moveable.startDragRotate = 45;
  */

  /**
   * When the drag starts, the dragStart event is called.
   * @memberof Moveable.Draggable
   * @event dragStart
   * @param {Moveable.Draggable.OnDragStart} - Parameters for the dragStart event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, { draggable: true });
   * moveable.on("dragStart", ({ target }) => {
   *     console.log(target);
   * });
   */

  /**
   * When dragging, the drag event is called.
   * @memberof Moveable.Draggable
   * @event drag
   * @param {Moveable.Draggable.OnDrag} - Parameters for the drag event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, { draggable: true });
   * moveable.on("drag", ({ target, transform }) => {
   *     target.style.transform = transform;
   * });
   */

  /**
   * When the drag finishes, the dragEnd event is called.
   * @memberof Moveable.Draggable
   * @event dragEnd
   * @param {Moveable.Draggable.OnDragEnd} - Parameters for the dragEnd event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, { draggable: true });
   * moveable.on("dragEnd", ({ target, isDrag }) => {
   *     console.log(target, isDrag);
   * });
   */

  /**
  * When the group drag starts, the `dragGroupStart` event is called.
  * @memberof Moveable.Draggable
  * @event dragGroupStart
  * @param {Moveable.Draggable.OnDragGroupStart} - Parameters for the `dragGroupStart` event
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, {
  *     target: [].slice.call(document.querySelectorAll(".target")),
  *     draggable: true
  * });
  * moveable.on("dragGroupStart", ({ targets }) => {
  *     console.log("onDragGroupStart", targets);
  * });
  */

  /**
  * When the group drag, the `dragGroup` event is called.
  * @memberof Moveable.Draggable
  * @event dragGroup
  * @param {Moveable.Draggable.OnDragGroup} - Parameters for the `dragGroup` event
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, {
  *     target: [].slice.call(document.querySelectorAll(".target")),
  *     draggable: true
  * });
  * moveable.on("dragGroup", ({ targets, events }) => {
  *     console.log("onDragGroup", targets);
  *     events.forEach(ev => {
  *          // drag event
  *          console.log("onDrag left, top", ev.left, ev.top);
  *          // ev.target!.style.left = `${ev.left}px`;
  *          // ev.target!.style.top = `${ev.top}px`;
  *          console.log("onDrag translate", ev.dist);
  *          ev.target!.style.transform = ev.transform;)
  *     });
  * });
  */

  /**
   * When the group drag finishes, the `dragGroupEnd` event is called.
   * @memberof Moveable.Draggable
   * @event dragGroupEnd
   * @param {Moveable.Draggable.OnDragGroupEnd} - Parameters for the `dragGroupEnd` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: [].slice.call(document.querySelectorAll(".target")),
   *     draggable: true
   * });
   * moveable.on("dragGroupEnd", ({ targets, isDrag }) => {
   *     console.log("onDragGroupEnd", targets, isDrag);
   * });
   */

  function renderControls(moveable, defaultDirections, React) {
    var _a = moveable.state,
        renderPoses = _a.renderPoses,
        radRotation = _a.rotation,
        direction = _a.direction;
    var _b = moveable.props,
        _c = _b.renderDirections,
        directions = _c === void 0 ? defaultDirections : _c,
        zoom = _b.zoom;
    var directionMap = {};

    if (!directions) {
      return [];
    }

    var sign = direction > 0 ? 1 : -1;
    var renderDirections = directions === true ? DIRECTIONS : directions;
    var degRotation = radRotation / Math.PI * 180;
    renderDirections.forEach(function (dir) {
      directionMap[dir] = true;
    });
    return renderDirections.map(function (dir) {
      var indexes = DIRECTION_INDEXES[dir];

      if (!indexes || !directionMap[dir]) {
        return null;
      }

      var directionRotation = (throttle(degRotation, 15) + sign * DIRECTION_ROTATIONS[dir] + 720) % 180;
      return React.createElement("div", {
        className: prefix("control", "direction", dir),
        "data-rotation": directionRotation,
        "data-direction": dir,
        key: "direction-" + dir,
        style: getControlTransform.apply(void 0, __spreadArrays$1([radRotation, zoom], indexes.map(function (index) {
          return renderPoses[index];
        })))
      });
    });
  }
  function renderLine(React, direction, pos1, pos2, zoom, key) {
    var classNames = [];

    for (var _i = 6; _i < arguments.length; _i++) {
      classNames[_i - 6] = arguments[_i];
    }

    var rad = getRad$1(pos1, pos2);
    var rotation = direction ? throttle(rad / Math.PI * 180, 15) % 180 : -1;
    return React.createElement("div", {
      key: "line" + key,
      className: prefix.apply(void 0, __spreadArrays$1(["line", "direction", direction], classNames)),
      "data-rotation": rotation,
      "data-line-index": key,
      "data-direction": direction,
      style: getLineStyle(pos1, pos2, zoom, rad)
    });
  }
  function renderAllDirections(moveable, React) {
    return renderControls(moveable, DIRECTIONS, React);
  }
  function renderDiagonalDirections(moveable, React) {
    return renderControls(moveable, ["nw", "ne", "sw", "se"], React);
  }

  /**
   * @namespace Rotatable
   * @memberof Moveable
   * @description Rotatable indicates whether the target can be rotated.
   */

  function setRotateStartInfo(moveable, datas, clientX, clientY, origin, rect) {
    var n = moveable.state.is3d ? 4 : 3;
    var nextOrigin = calculatePosition(moveable.state.rootMatrix, origin, n);
    var startAbsoluteOrigin = plus([rect.left, rect.top], nextOrigin);
    datas.startAbsoluteOrigin = startAbsoluteOrigin;
    datas.prevDeg = getRad$1(startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180;
    datas.prevSnapDeg = datas.prevDeg;
    datas.startDeg = datas.prevDeg;
    datas.loop = 0;
  }

  function getParentDeg(moveable, moveableRect, datas, parentDist, direction, startValue) {
    var prevDeg = datas.prevDeg; // const absoluteDeg = startValue + parentDist;

    var dist = checkSnapRotate(moveable, moveableRect, datas.origin, parentDist);
    datas.prevDeg = dist;
    var delta = dist - prevDeg;
    return [delta, dist, startValue + dist];
  }

  function getDeg(moveable, moveableRect, datas, deg, direction, startValue, throttleRotate, isSnap) {
    var prevDeg = datas.prevDeg,
        prevSnapDeg = datas.prevSnapDeg,
        startDeg = datas.startDeg,
        prevLoop = datas.loop;

    if (prevDeg > deg && prevDeg > 270 && deg < 90) {
      // 360 => 0
      ++datas.loop;
    } else if (prevDeg < deg && prevDeg < 90 && deg > 270) {
      // 0 => 360
      --datas.loop;
    }

    var loop = datas.loop;
    var absolutePrevSnapDeg = prevLoop * 360 + prevSnapDeg - startDeg + startValue;
    var absoluteDeg = loop * 360 + deg - startDeg + startValue;
    datas.prevDeg = absoluteDeg - loop * 360 + startDeg - startValue;
    absoluteDeg = throttle(absoluteDeg, throttleRotate);
    var dist = direction * (absoluteDeg - startValue);

    if (isSnap) {
      dist = checkSnapRotate(moveable, moveableRect, datas.origin, dist);
      absoluteDeg = dist / direction + startValue;
    }

    datas.prevSnapDeg = absoluteDeg - loop * 360 + startDeg - startValue;
    var delta = direction * (absoluteDeg - absolutePrevSnapDeg);
    return [delta, dist, startValue + dist];
  }

  function getRotateInfo(moveable, moveableRect, datas, direction, clientX, clientY, startValue, throttleRotate) {
    return getDeg(moveable, moveableRect, datas, getRad$1(datas.startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180, direction, startValue, throttleRotate, true);
  }
  function getRotationPositions(rotationPosition, _a, direction) {
    var pos1 = _a[0],
        pos2 = _a[1],
        pos3 = _a[2],
        pos4 = _a[3];

    if (rotationPosition === "none") {
      return;
    }

    var _b = (rotationPosition || "top").split("-"),
        dir1 = _b[0],
        dir2 = _b[1];

    var radPoses = [pos1, pos2]; // if (scale[0] < 0) {
    //     dir1 = getReversePositionX(dir1);
    //     dir2 = getReversePositionX(dir2);
    // }
    // if (scale[1] < 0) {
    //     dir1 = getReversePositionY(dir1);
    //     dir2 = getReversePositionY(dir2);
    // }

    if (dir1 === "left") {
      radPoses = [pos3, pos1];
    } else if (dir1 === "right") {
      radPoses = [pos2, pos4];
    } else if (dir1 === "bottom") {
      radPoses = [pos4, pos3];
    }

    var pos = [(radPoses[0][0] + radPoses[1][0]) / 2, (radPoses[0][1] + radPoses[1][1]) / 2];
    var rad = getRotationRad(radPoses, direction);

    if (dir2) {
      var isStart = dir2 === "top" || dir2 === "left";
      var isReverse = dir1 === "bottom" || dir1 === "left";
      pos = radPoses[isStart && !isReverse || !isStart && isReverse ? 0 : 1];
    }

    return [pos, rad];
  }
  function dragControlCondition(e, moveable) {
    if (e.isRequest) {
      return e.requestAble === "rotatable";
    }

    var target = e.inputEvent.target;

    if (hasClass(target, prefix("rotation-control"))) {
      return true;
    }

    var rotationTarget = moveable.props.rotationTarget;

    if (rotationTarget) {
      return getRefTargets(rotationTarget, true).some(function (element) {
        if (!element) {
          return false;
        }

        return target === element || target.contains(element);
      });
    }

    return false;
  }
  var Rotatable = {
    name: "rotatable",
    canPinch: true,
    props: {
      rotatable: Boolean,
      rotationPosition: String,
      throttleRotate: Number,
      renderDirections: Object,
      rotationTarget: Object
    },
    events: {
      onRotateStart: "rotateStart",
      onRotate: "rotate",
      onRotateEnd: "rotateEnd",
      onRotateGroupStart: "rotateGroupStart",
      onRotateGroup: "rotateGroup",
      onRotateGroupEnd: "rotateGroupEnd"
    },
    css: [".rotation {\n            position: absolute;\n            height: 40px;\n            width: 1px;\n            transform-origin: 50% 100%;\n            height: calc(40px * var(--zoom));\n            top: auto;\n            left: 0;\n            bottom: 100%;\n            will-change: transform;\n        }\n        .rotation .rotation-line {\n            display: block;\n            width: 100%;\n            height: 100%;\n            transform-origin: 50% 50%;\n        }\n        .rotation .rotation-control {\n            border-color: #4af;\n            border-color: var(--moveable-color);\n            background:#fff;\n            cursor: alias;\n        }"],
    render: function (moveable, React) {
      var _a = moveable.props,
          rotatable = _a.rotatable,
          rotationPosition = _a.rotationPosition,
          zoom = _a.zoom,
          renderDirections = _a.renderDirections;
      var _b = moveable.state,
          renderPoses = _b.renderPoses,
          direction = _b.direction;

      if (!rotatable) {
        return null;
      }

      var positions = getRotationPositions(rotationPosition, renderPoses, direction);
      var jsxs = [];

      if (positions) {
        var pos = positions[0],
            rad = positions[1];
        jsxs.push(React.createElement("div", {
          key: "rotation",
          className: prefix("rotation"),
          style: {
            // tslint:disable-next-line: max-line-length
            transform: "translate(-50%) translate(" + pos[0] + "px, " + pos[1] + "px) rotate(" + rad + "rad)"
          }
        }, React.createElement("div", {
          className: prefix("line rotation-line"),
          style: {
            transform: "scaleX(" + zoom + ")"
          }
        }), React.createElement("div", {
          className: prefix("control rotation-control"),
          style: {
            transform: "translate(0.5px) scale(" + zoom + ")"
          }
        })));
      }

      if (renderDirections) {
        jsxs.push.apply(jsxs, renderControls(moveable, [], React));
      }

      return jsxs;
    },
    dragControlCondition: dragControlCondition,
    dragControlStart: function (moveable, e) {
      var datas = e.datas,
          clientX = e.clientX,
          clientY = e.clientY,
          parentRotate = e.parentRotate,
          parentFlag = e.parentFlag,
          isPinch = e.isPinch,
          isRequest = e.isRequest;
      var _a = moveable.state,
          target = _a.target,
          left = _a.left,
          top = _a.top,
          origin = _a.origin,
          beforeOrigin = _a.beforeOrigin,
          direction = _a.direction,
          beforeDirection = _a.beforeDirection,
          targetTransform = _a.targetTransform,
          moveableClientRect = _a.moveableClientRect;

      if (!isRequest && !target) {
        return false;
      }

      var rect = moveable.getRect();
      datas.rect = rect;
      datas.transform = targetTransform;
      datas.left = left;
      datas.top = top;
      datas.fixedPosition = getDirectionOffset(moveable, getOriginDirection(moveable));
      datas.absoluteInfo = {
        origin: rect.origin,
        startValue: rect.rotation
      };
      setRotateStartInfo(moveable, datas.absoluteInfo, clientX, clientY, origin, moveableClientRect);

      if (isRequest || isPinch || parentFlag) {
        var externalRotate = parentRotate || 0;
        datas.beforeInfo = {
          origin: rect.beforeOrigin,
          prevDeg: externalRotate,
          startDeg: externalRotate,
          prevSnapDeg: externalRotate,
          loop: 0
        };
        datas.afterInfo = {
          origin: rect.origin,
          prevDeg: externalRotate,
          startDeg: externalRotate,
          prevSnapDeg: externalRotate,
          loop: 0
        };
      } else {
        datas.beforeInfo = {
          origin: rect.beforeOrigin
        };
        datas.afterInfo = {
          origin: rect.origin
        };
        setRotateStartInfo(moveable, datas.beforeInfo, clientX, clientY, beforeOrigin, moveableClientRect);
        setRotateStartInfo(moveable, datas.afterInfo, clientX, clientY, origin, moveableClientRect);
      }

      datas.direction = direction;
      datas.beforeDirection = beforeDirection;
      datas.startValue = 0;
      datas.datas = {};
      setDefaultTransformIndex(e);
      var params = fillParams(moveable, e, __assign$2(__assign$2({
        set: function (rotatation) {
          datas.startValue = rotatation * Math.PI / 180;
        }
      }, fillTransformStartEvent(e)), {
        dragStart: Draggable.dragStart(moveable, new CustomGesto().dragStart([0, 0], e))
      }));
      var result = triggerEvent(moveable, "onRotateStart", params);
      datas.isRotate = result !== false;
      moveable.state.snapRenderInfo = {
        request: e.isRequest
      };
      return datas.isRotate ? params : false;
    },
    dragControl: function (moveable, e) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j;

      var datas = e.datas,
          clientX = e.clientX,
          clientY = e.clientY,
          parentRotate = e.parentRotate,
          parentFlag = e.parentFlag,
          isPinch = e.isPinch,
          groupDelta = e.groupDelta;
      var beforeDirection = datas.beforeDirection,
          beforeInfo = datas.beforeInfo,
          afterInfo = datas.afterInfo,
          absoluteInfo = datas.absoluteInfo,
          isRotate = datas.isRotate,
          startValue = datas.startValue,
          rect = datas.rect;

      if (!isRotate) {
        return;
      }

      resolveTransformEvent(e, "rotate");
      var targetDirection = getTransformDirection(e);
      var direction = beforeDirection * targetDirection;
      var _k = moveable.props,
          _l = _k.throttleRotate,
          throttleRotate = _l === void 0 ? 0 : _l,
          parentMoveable = _k.parentMoveable;
      var delta;
      var dist;
      var rotate;
      var beforeDelta;
      var beforeDist;
      var beforeRotate;
      var absoluteDelta;
      var absoluteDist;
      var absoluteRotate;
      var startDeg = 180 / Math.PI * startValue;
      var absoluteStartDeg = absoluteInfo.startValue;

      if (!parentFlag && "parentDist" in e) {
        var parentDist = e.parentDist;
        _a = getParentDeg(moveable, rect, afterInfo, parentDist, direction, startDeg), delta = _a[0], dist = _a[1], rotate = _a[2];
        _b = getParentDeg(moveable, rect, beforeInfo, parentDist, beforeDirection, startDeg), beforeDelta = _b[0], beforeDist = _b[1], beforeRotate = _b[2];
        _c = getParentDeg(moveable, rect, absoluteInfo, parentDist, direction, absoluteStartDeg), absoluteDelta = _c[0], absoluteDist = _c[1], absoluteRotate = _c[2];
      } else if (isPinch || parentFlag) {
        _d = getDeg(moveable, rect, afterInfo, parentRotate, direction, startDeg, throttleRotate), delta = _d[0], dist = _d[1], rotate = _d[2];
        _e = getDeg(moveable, rect, beforeInfo, parentRotate, beforeDirection, startDeg, throttleRotate), beforeDelta = _e[0], beforeDist = _e[1], beforeRotate = _e[2];
        _f = getDeg(moveable, rect, absoluteInfo, parentRotate, direction, absoluteStartDeg, throttleRotate), absoluteDelta = _f[0], absoluteDist = _f[1], absoluteRotate = _f[2];
      } else {
        _g = getRotateInfo(moveable, rect, afterInfo, direction, clientX, clientY, startDeg, throttleRotate), delta = _g[0], dist = _g[1], rotate = _g[2];
        _h = getRotateInfo(moveable, rect, beforeInfo, beforeDirection, clientX, clientY, startDeg, throttleRotate), beforeDelta = _h[0], beforeDist = _h[1], beforeRotate = _h[2];
        _j = getRotateInfo(moveable, rect, absoluteInfo, direction, clientX, clientY, absoluteStartDeg, throttleRotate), absoluteDelta = _j[0], absoluteDist = _j[1], absoluteRotate = _j[2];
      }

      if (!absoluteDelta && !delta && !beforeDelta && !parentMoveable) {
        return;
      }

      var nextTransform = convertTransformFormat(datas, "rotate(" + rotate + "deg)", "rotate(" + dist + "deg)");
      var inverseDist = getRotateDist(moveable, dist, datas.fixedPosition, datas);
      var inverseDelta = minus(plus(groupDelta || [0, 0], inverseDist), datas.prevInverseDist || [0, 0]);
      datas.prevInverseDist = inverseDist;
      var params = fillParams(moveable, e, __assign$2({
        delta: delta,
        dist: dist,
        rotate: rotate,
        beforeDist: beforeDist,
        beforeDelta: beforeDelta,
        beforeRotate: beforeRotate,
        absoluteDist: absoluteDist,
        absoluteDelta: absoluteDelta,
        absoluteRotate: absoluteRotate,
        isPinch: !!isPinch
      }, fillTransformEvent(moveable, nextTransform, inverseDelta, isPinch, e)));
      triggerEvent(moveable, "onRotate", params);
      return params;
    },
    dragControlEnd: function (moveable, e) {
      var datas = e.datas,
          isDrag = e.isDrag;

      if (!datas.isRotate) {
        return false;
      }

      datas.isRotate = false;
      triggerEvent(moveable, "onRotateEnd", fillEndParams(moveable, e, {}));
      return isDrag;
    },
    dragGroupControlCondition: dragControlCondition,
    dragGroupControlStart: function (moveable, e) {
      var datas = e.datas;
      var _a = moveable.state,
          parentLeft = _a.left,
          parentTop = _a.top,
          parentBeforeOrigin = _a.beforeOrigin;
      var params = this.dragControlStart(moveable, e);

      if (!params) {
        return false;
      }

      params.set(datas.beforeDirection * moveable.rotation);
      var events = triggerChildAble(moveable, this, "dragControlStart", e, function (child, ev) {
        var _a = child.state,
            left = _a.left,
            top = _a.top,
            beforeOrigin = _a.beforeOrigin;
        var childClient = plus(minus([left, top], [parentLeft, parentTop]), minus(beforeOrigin, parentBeforeOrigin));
        ev.datas.groupClient = childClient;
        return __assign$2(__assign$2({}, ev), {
          parentRotate: 0
        });
      });

      var nextParams = __assign$2(__assign$2({}, params), {
        targets: moveable.props.targets,
        events: events
      });

      var result = triggerEvent(moveable, "onRotateGroupStart", nextParams);
      datas.isRotate = result !== false;
      return datas.isRotate ? params : false;
    },
    dragGroupControl: function (moveable, e) {
      var datas = e.datas;

      if (!datas.isRotate) {
        return;
      }

      var params = this.dragControl(moveable, e);

      if (!params) {
        return;
      }

      var direction = datas.beforeDirection;
      var parentRotate = params.beforeDist;
      var deg = params.beforeDelta;
      var rad = deg / 180 * Math.PI;
      var events = triggerChildAble(moveable, this, "dragControl", e, function (_, ev) {
        var _a = ev.datas.groupClient,
            prevX = _a[0],
            prevY = _a[1];

        var _b = rotate([prevX, prevY], rad * direction),
            clientX = _b[0],
            clientY = _b[1];

        var delta = [clientX - prevX, clientY - prevY];
        ev.datas.groupClient = [clientX, clientY];
        return __assign$2(__assign$2({}, ev), {
          parentRotate: parentRotate,
          groupDelta: delta
        });
      });
      moveable.rotation = direction * params.beforeRotate;

      var nextParams = __assign$2({
        targets: moveable.props.targets,
        events: events,
        set: function (rotation) {
          moveable.rotation = rotation;
        }
      }, params);

      triggerEvent(moveable, "onRotateGroup", nextParams);
      return nextParams;
    },
    dragGroupControlEnd: function (moveable, e) {
      var isDrag = e.isDrag,
          datas = e.datas;

      if (!datas.isRotate) {
        return;
      }

      this.dragControlEnd(moveable, e);
      triggerChildAble(moveable, this, "dragControlEnd", e);
      var nextParams = fillEndParams(moveable, e, {
        targets: moveable.props.targets
      });
      triggerEvent(moveable, "onRotateGroupEnd", nextParams);
      return isDrag;
    },

    /**
     * @method Moveable.Rotatable#request
     * @param {object} [e] - the Resizable's request parameter
     * @param {number} [e.deltaRotate=0] -  delta number of rotation
     * @param {number} [e.rotate=0] - absolute number of moveable's rotation
     * @return {Moveable.Requester} Moveable Requester
     * @example
      * // Instantly Request (requestStart - request - requestEnd)
     * moveable.request("rotatable", { deltaRotate: 10 }, true);
     *
     * * moveable.request("rotatable", { rotate: 10 }, true);
     *
     * // requestStart
     * const requester = moveable.request("rotatable");
     *
     * // request
     * requester.request({ deltaRotate: 10 });
     * requester.request({ deltaRotate: 10 });
     * requester.request({ deltaRotate: 10 });
     *
     * requester.request({ rotate: 10 });
     * requester.request({ rotate: 20 });
     * requester.request({ rotate: 30 });
     *
     * // requestEnd
     * requester.requestEnd();
     */
    request: function (moveable) {
      var datas = {};
      var distRotate = 0;
      var startRotation = moveable.getRotation();
      return {
        isControl: true,
        requestStart: function () {
          return {
            datas: datas
          };
        },
        request: function (e) {
          if ("deltaRotate" in e) {
            distRotate += e.deltaRotate;
          } else if ("rotate" in e) {
            distRotate = e.rotate - startRotation;
          }

          return {
            datas: datas,
            parentDist: distRotate
          };
        },
        requestEnd: function () {
          return {
            datas: datas,
            isDrag: true
          };
        }
      };
    }
  };
  /**
   * Whether or not target can be rotated. (default: false)
   * @name Moveable.Rotatable#rotatable
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.rotatable = true;
   */

  /**
   * You can specify the position of the rotation. (default: "top")
   * @name Moveable.Rotatable#rotationPosition
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *   rotationPosition: "top",
   * });
   *
   * moveable.rotationPosition = "bottom"
   */

  /**
   * throttle of angle(degree) when rotate.
   * @name Moveable.Rotatable#throttleRotate
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.throttleRotate = 1;
   */

  /**
   * When the rotate starts, the rotateStart event is called.
   * @memberof Moveable.Rotatable
   * @event rotateStart
   * @param {Moveable.Rotatable.OnRotateStart} - Parameters for the rotateStart event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, { rotatable: true });
   * moveable.on("rotateStart", ({ target }) => {
   *     console.log(target);
   * });
   */

  /**
  * When rotating, the rotate event is called.
  * @memberof Moveable.Rotatable
  * @event rotate
  * @param {Moveable.Rotatable.OnRotate} - Parameters for the rotate event
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, { rotatable: true });
  * moveable.on("rotate", ({ target, transform, dist }) => {
  *     target.style.transform = transform;
  * });
  */

  /**
   * When the rotate finishes, the rotateEnd event is called.
   * @memberof Moveable.Rotatable
   * @event rotateEnd
   * @param {Moveable.Rotatable.OnRotateEnd} - Parameters for the rotateEnd event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, { rotatable: true });
   * moveable.on("rotateEnd", ({ target, isDrag }) => {
   *     console.log(target, isDrag);
   * });
   */

  /**
   * When the group rotate starts, the `rotateGroupStart` event is called.
   * @memberof Moveable.Rotatable
   * @event rotateGroupStart
   * @param {Moveable.Rotatable.OnRotateGroupStart} - Parameters for the `rotateGroupStart` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: [].slice.call(document.querySelectorAll(".target")),
   *     rotatable: true
   * });
   * moveable.on("rotateGroupStart", ({ targets }) => {
   *     console.log("onRotateGroupStart", targets);
   * });
   */

  /**
  * When the group rotate, the `rotateGroup` event is called.
  * @memberof Moveable.Rotatable
  * @event rotateGroup
  * @param {Moveable.Rotatable.OnRotateGroup} - Parameters for the `rotateGroup` event
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, {
  *     target: [].slice.call(document.querySelectorAll(".target")),
  *     rotatable: true
  * });
  * moveable.on("rotateGroup", ({ targets, events }) => {
  *     console.log("onRotateGroup", targets);
  *     events.forEach(ev => {
  *         const target = ev.target;
  *         // ev.drag is a drag event that occurs when the group rotate.
  *         const left = ev.drag.beforeDist[0];
  *         const top = ev.drag.beforeDist[1];
  *         const deg = ev.beforeDist;
  *     });
  * });
  */

  /**
   * When the group rotate finishes, the `rotateGroupEnd` event is called.
   * @memberof Moveable.Rotatable
   * @event rotateGroupEnd
   * @param {Moveable.Rotatable.OnRotateGroupEnd} - Parameters for the `rotateGroupEnd` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: [].slice.call(document.querySelectorAll(".target")),
   *     rotatable: true
   * });
   * moveable.on("rotateGroupEnd", ({ targets, isDrag }) => {
   *     console.log("onRotateGroupEnd", targets, isDrag);
   * });
   */

  /**
   * @namespace Resizable
   * @memberof Moveable
   * @description Resizable indicates whether the target's width and height can be increased or decreased.
   */

  var Resizable = {
    name: "resizable",
    ableGroup: "size",
    updateRect: true,
    canPinch: true,
    props: {
      resizable: Boolean,
      throttleResize: Number,
      renderDirections: Array,
      keepRatio: Boolean
    },
    events: {
      onResizeStart: "resizeStart",
      onResize: "resize",
      onResizeEnd: "resizeEnd",
      onResizeGroupStart: "resizeGroupStart",
      onResizeGroup: "resizeGroup",
      onResizeGroupEnd: "resizeGroupEnd"
    },
    render: function (moveable, React) {
      var _a = moveable.props,
          resizable = _a.resizable,
          edge = _a.edge;

      if (resizable) {
        if (edge) {
          return renderDiagonalDirections(moveable, React);
        }

        return renderAllDirections(moveable, React);
      }
    },
    dragControlCondition: directionCondition,
    dragControlStart: function (moveable, e) {
      var _a;

      var inputEvent = e.inputEvent,
          isPinch = e.isPinch,
          parentDirection = e.parentDirection,
          datas = e.datas,
          parentFlag = e.parentFlag;
      var direction = parentDirection || (isPinch ? [0, 0] : getDirection(inputEvent.target));
      var _b = moveable.state,
          target = _b.target,
          width = _b.width,
          height = _b.height;

      if (!direction || !target) {
        return false;
      }

      !isPinch && setDragStart(moveable, e);
      datas.datas = {};
      datas.direction = direction;
      datas.startOffsetWidth = width;
      datas.startOffsetHeight = height;
      datas.prevWidth = 0;
      datas.prevHeight = 0;
      _a = getCSSSize(target), datas.startWidth = _a[0], datas.startHeight = _a[1];
      var padding = [Math.max(0, width - datas.startWidth), Math.max(0, height - datas.startHeight)];
      datas.minSize = padding;
      datas.maxSize = [Infinity, Infinity];

      if (!parentFlag) {
        var style = window.getComputedStyle(target);
        var position = style.position,
            minWidth = style.minWidth,
            minHeight = style.minHeight,
            maxWidth = style.maxWidth,
            maxHeight = style.maxHeight;
        var isParentElement = position === "static" || position === "relative";
        var container = isParentElement ? target.parentElement : target.offsetParent;
        var containerWidth = width;
        var containerHeight = height;

        if (container) {
          containerWidth = container.clientWidth;
          containerHeight = container.clientHeight;

          if (isParentElement) {
            var containerStyle = window.getComputedStyle(container);
            containerWidth -= parseFloat(containerStyle.paddingLeft) || 0;
            containerHeight -= parseFloat(containerStyle.paddingTop) || 0;
          }
        }

        datas.minSize = plus([convertUnitSize(minWidth, containerWidth) || 0, convertUnitSize(minHeight, containerHeight) || 0], padding);
        datas.maxSize = plus([convertUnitSize(maxWidth, containerWidth) || Infinity, convertUnitSize(maxHeight, containerHeight) || Infinity], padding);
      }

      var transformOrigin = moveable.props.transformOrigin || "% %";
      datas.transformOrigin = transformOrigin && isString(transformOrigin) ? transformOrigin.split(" ") : transformOrigin;
      datas.isWidth = !direction[0] && !direction[1] || direction[0] || !direction[1];

      function setRatio(ratio) {
        datas.ratio = ratio && isFinite(ratio) ? ratio : 0;
      }

      function setFixedDirection(fixedDirection) {
        datas.fixedDirection = fixedDirection;
        datas.fixedPosition = getAbsolutePosition(moveable, fixedDirection);
      }

      setRatio(width / height);
      setFixedDirection([-direction[0], -direction[1]]);
      var params = fillParams(moveable, e, {
        direction: direction,
        set: function (_a) {
          var startWidth = _a[0],
              startHeight = _a[1];
          datas.startWidth = startWidth;
          datas.startHeight = startHeight;
        },
        setMin: function (minSize) {
          datas.minSize = minSize;
        },
        setMax: function (maxSize) {
          datas.maxSize = [maxSize[0] || Infinity, maxSize[1] || Infinity];
        },
        setRatio: setRatio,
        setFixedDirection: setFixedDirection,
        setOrigin: function (origin) {
          datas.transformOrigin = origin;
        },
        dragStart: Draggable.dragStart(moveable, new CustomGesto().dragStart([0, 0], e))
      });
      var result = triggerEvent(moveable, "onResizeStart", params);

      if (result !== false) {
        datas.isResize = true;
        moveable.state.snapRenderInfo = {
          request: e.isRequest,
          direction: direction
        };
      }

      return datas.isResize ? params : false;
    },
    dragControl: function (moveable, e) {
      var _a;

      var datas = e.datas,
          distX = e.distX,
          distY = e.distY,
          parentFlag = e.parentFlag,
          isPinch = e.isPinch,
          parentDistance = e.parentDistance,
          parentScale = e.parentScale,
          parentKeepRatio = e.parentKeepRatio,
          dragClient = e.dragClient,
          parentDist = e.parentDist,
          isRequest = e.isRequest;
      var isResize = datas.isResize,
          transformOrigin = datas.transformOrigin,
          fixedDirection = datas.fixedDirection,
          startWidth = datas.startWidth,
          startHeight = datas.startHeight,
          prevWidth = datas.prevWidth,
          prevHeight = datas.prevHeight,
          minSize = datas.minSize,
          maxSize = datas.maxSize,
          ratio = datas.ratio,
          isWidth = datas.isWidth,
          startOffsetWidth = datas.startOffsetWidth,
          startOffsetHeight = datas.startOffsetHeight;

      if (!isResize) {
        return;
      }

      var _b = moveable.props,
          _c = _b.throttleResize,
          throttleResize = _c === void 0 ? 0 : _c,
          parentMoveable = _b.parentMoveable,
          _d = _b.snapThreshold,
          snapThreshold = _d === void 0 ? 5 : _d;
      var direction = datas.direction;
      var sizeDirection = direction;
      var distWidth = 0;
      var distHeight = 0;

      if (!direction[0] && !direction[1]) {
        sizeDirection = [1, 1];
      }

      var keepRatio = ratio && (moveable.props.keepRatio || parentKeepRatio);
      var fixedPosition = dragClient;

      if (!dragClient) {
        if (!parentFlag && isPinch) {
          fixedPosition = getAbsolutePosition(moveable, [0, 0]);
        } else {
          fixedPosition = datas.fixedPosition;
        }
      }

      if (parentDist) {
        distWidth = parentDist[0];
        distHeight = parentDist[1];

        if (keepRatio) {
          if (!distWidth) {
            distWidth = distHeight * ratio;
          } else if (!distHeight) {
            distHeight = distWidth / ratio;
          }
        }
      } else if (parentScale) {
        distWidth = (parentScale[0] - 1) * startOffsetWidth;
        distHeight = (parentScale[1] - 1) * startOffsetHeight;
      } else if (isPinch) {
        if (parentDistance) {
          distWidth = parentDistance;
          distHeight = parentDistance * startOffsetHeight / startOffsetWidth;
        }
      } else {
        var dist = getDragDist({
          datas: datas,
          distX: distX,
          distY: distY
        });
        distWidth = sizeDirection[0] * dist[0];
        distHeight = sizeDirection[1] * dist[1];

        if (keepRatio && startOffsetWidth && startOffsetHeight) {
          var rad = getRad$1([0, 0], dist);
          var standardRad = getRad$1([0, 0], sizeDirection);
          var size = getDistSize([distWidth, distHeight]);
          var signSize = Math.cos(rad - standardRad) * size;

          if (!sizeDirection[0]) {
            // top, bottom
            distHeight = signSize;
            distWidth = distHeight / ratio;
          } else if (!sizeDirection[1]) {
            // left, right
            distWidth = signSize;
            distHeight = distWidth * ratio;
          } else {
            // two-way
            var startWidthSize = sizeDirection[0] * 2 * startOffsetWidth;
            var startHeightSize = sizeDirection[1] * 2 * startOffsetHeight;
            var distSize = getDistSize([startWidthSize + dist[0], startHeightSize + dist[1]]) - getDistSize([startWidthSize, startHeightSize]);
            var ratioRad = getRad$1([0, 0], [ratio, 1]);
            distWidth = Math.cos(ratioRad) * distSize;
            distHeight = Math.sin(ratioRad) * distSize;
          }
        } else if (!keepRatio) {
          var nextDirection = __spreadArrays$1(direction);

          if (!startOffsetWidth) {
            if (dist[0] < 0) {
              nextDirection[0] = -1;
            } else if (dist[0] > 0) {
              nextDirection[0] = 1;
            }
          }

          if (!startOffsetHeight) {
            if (dist[1] < 0) {
              nextDirection[1] = -1;
            } else if (dist[1] > 0) {
              nextDirection[1] = 1;
            }
          }

          direction = nextDirection;
          sizeDirection = nextDirection;
          distWidth = sizeDirection[0] * dist[0];
          distHeight = sizeDirection[1] * dist[1];
        }
      }

      var nextWidth = sizeDirection[0] || keepRatio ? Math.max(startOffsetWidth + distWidth, TINY_NUM) : startOffsetWidth;
      var nextHeight = sizeDirection[1] || keepRatio ? Math.max(startOffsetHeight + distHeight, TINY_NUM) : startOffsetHeight;

      if (keepRatio && startOffsetWidth && startOffsetHeight) {
        // startOffsetWidth : startOffsetHeight = nextWidth : nextHeight
        if (isWidth) {
          nextHeight = nextWidth / ratio;
        } else {
          nextWidth = nextHeight * ratio;
        }
      }

      var snapDist = [0, 0];

      if (!isPinch) {
        snapDist = checkSnapSize(moveable, nextWidth, nextHeight, direction, fixedPosition, isRequest, datas);
      }

      if (parentDist) {
        !parentDist[0] && (snapDist[0] = 0);
        !parentDist[1] && (snapDist[1] = 0);
      }

      if (keepRatio) {
        if (sizeDirection[0] && sizeDirection[1] && snapDist[0] && snapDist[1]) {
          if (Math.abs(snapDist[0]) > Math.abs(snapDist[1])) {
            snapDist[1] = 0;
          } else {
            snapDist[0] = 0;
          }
        }

        var isNoSnap = !snapDist[0] && !snapDist[1];

        if (isNoSnap) {
          if (isWidth) {
            nextWidth = throttle(nextWidth, throttleResize);
          } else {
            nextHeight = throttle(nextHeight, throttleResize);
          }
        }

        if (sizeDirection[0] && !sizeDirection[1] || snapDist[0] && !snapDist[1] || isNoSnap && isWidth) {
          nextWidth += snapDist[0];
          nextHeight = nextWidth / ratio;
        } else if (!sizeDirection[0] && sizeDirection[1] || !snapDist[0] && snapDist[1] || isNoSnap && !isWidth) {
          nextHeight += snapDist[1];
          nextWidth = nextHeight * ratio;
        }
      } else {
        if (startOffsetWidth + distWidth < -snapThreshold) {
          snapDist[0] = 0;
        }

        if (startOffsetWidth + distHeight < -snapThreshold) {
          snapDist[1] = 0;
        }

        nextWidth += snapDist[0];
        nextHeight += snapDist[1];

        if (!snapDist[0]) {
          nextWidth = throttle(nextWidth, throttleResize);
        }

        if (!snapDist[1]) {
          nextHeight = throttle(nextHeight, throttleResize);
        }
      }

      _a = calculateBoundSize([nextWidth, nextHeight], minSize, maxSize, keepRatio), nextWidth = _a[0], nextHeight = _a[1];
      nextWidth = Math.round(nextWidth);
      nextHeight = Math.round(nextHeight);
      distWidth = nextWidth - startOffsetWidth;
      distHeight = nextHeight - startOffsetHeight;
      var delta = [distWidth - prevWidth, distHeight - prevHeight];
      datas.prevWidth = distWidth;
      datas.prevHeight = distHeight;
      var inverseDelta = getResizeDist(moveable, nextWidth, nextHeight, fixedDirection, fixedPosition, transformOrigin);

      if (!parentMoveable && delta.every(function (num) {
        return !num;
      }) && inverseDelta.every(function (num) {
        return !num;
      })) {
        return;
      }

      var params = fillParams(moveable, e, {
        width: startWidth + distWidth,
        height: startHeight + distHeight,
        offsetWidth: nextWidth,
        offsetHeight: nextHeight,
        direction: direction,
        dist: [distWidth, distHeight],
        delta: delta,
        isPinch: !!isPinch,
        drag: Draggable.drag(moveable, setCustomDrag(e, moveable.state, inverseDelta, !!isPinch, false))
      });
      triggerEvent(moveable, "onResize", params);
      return params;
    },
    dragControlAfter: function (moveable, e) {
      var datas = e.datas;
      var isResize = datas.isResize,
          startOffsetWidth = datas.startOffsetWidth,
          startOffsetHeight = datas.startOffsetHeight,
          prevWidth = datas.prevWidth,
          prevHeight = datas.prevHeight;

      if (!isResize) {
        return;
      }

      var _a = moveable.state,
          width = _a.width,
          height = _a.height;
      var errorWidth = width - (startOffsetWidth + prevWidth);
      var errorHeight = height - (startOffsetHeight + prevHeight);
      var isErrorWidth = Math.abs(errorWidth) > 3;
      var isErrorHeight = Math.abs(errorHeight) > 3;

      if (isErrorWidth) {
        datas.startWidth += errorWidth;
        datas.startOffsetWidth += errorWidth;
        datas.prevWidth += errorWidth;
      }

      if (isErrorHeight) {
        datas.startHeight += errorHeight;
        datas.startOffsetHeight += errorHeight;
        datas.prevHeight += errorHeight;
      }

      if (isErrorWidth || isErrorHeight) {
        this.dragControl(moveable, e);
        return true;
      }
    },
    dragControlEnd: function (moveable, e) {
      var datas = e.datas,
          isDrag = e.isDrag;

      if (!datas.isResize) {
        return false;
      }

      datas.isResize = false;
      var params = fillEndParams(moveable, e, {});
      triggerEvent(moveable, "onResizeEnd", params);
      return isDrag;
    },
    dragGroupControlCondition: directionCondition,
    dragGroupControlStart: function (moveable, e) {
      var datas = e.datas;
      var params = this.dragControlStart(moveable, e);

      if (!params) {
        return false;
      }

      var originalEvents = fillChildEvents(moveable, "resizable", e);

      function setDist(child, ev) {
        var fixedDirection = datas.fixedDirection;
        var fixedPosition = datas.fixedPosition;
        var pos = getAbsolutePosition(child, fixedDirection);

        var _a = calculate(createRotateMatrix(-moveable.rotation / 180 * Math.PI, 3), [pos[0] - fixedPosition[0], pos[1] - fixedPosition[1], 1], 3),
            originalX = _a[0],
            originalY = _a[1];

        ev.datas.originalX = originalX;
        ev.datas.originalY = originalY;
        return ev;
      }

      var events = triggerChildAble(moveable, this, "dragControlStart", e, function (child, ev) {
        return setDist(child, ev);
      });

      var nextParams = __assign$2(__assign$2({}, params), {
        targets: moveable.props.targets,
        events: events,
        setFixedDirection: function (fixedDirection) {
          params.setFixedDirection(fixedDirection);
          events.forEach(function (ev, i) {
            ev.setFixedDirection(fixedDirection);
            setDist(moveable.moveables[i], originalEvents[i]);
          });
        }
      });

      var result = triggerEvent(moveable, "onResizeGroupStart", nextParams);
      datas.isResize = result !== false;
      return datas.isResize ? params : false;
    },
    dragGroupControl: function (moveable, e) {
      var datas = e.datas;

      if (!datas.isResize) {
        return;
      }

      var params = this.dragControl(moveable, e);

      if (!params) {
        return;
      }

      var offsetWidth = params.offsetWidth,
          offsetHeight = params.offsetHeight,
          dist = params.dist;
      var keepRatio = moveable.props.keepRatio;
      var parentScale = [offsetWidth / (offsetWidth - dist[0]), offsetHeight / (offsetHeight - dist[1])];
      var fixedPosition = datas.fixedPosition;
      var events = triggerChildAble(moveable, this, "dragControl", e, function (_, ev) {
        var _a = calculate(createRotateMatrix(moveable.rotation / 180 * Math.PI, 3), [ev.datas.originalX * parentScale[0], ev.datas.originalY * parentScale[1], 1], 3),
            clientX = _a[0],
            clientY = _a[1];

        return __assign$2(__assign$2({}, ev), {
          parentDist: null,
          parentScale: parentScale,
          dragClient: plus(fixedPosition, [clientX, clientY]),
          parentKeepRatio: keepRatio
        });
      });

      var nextParams = __assign$2({
        targets: moveable.props.targets,
        events: events
      }, params);

      triggerEvent(moveable, "onResizeGroup", nextParams);
      return nextParams;
    },
    dragGroupControlEnd: function (moveable, e) {
      var isDrag = e.isDrag,
          datas = e.datas;

      if (!datas.isResize) {
        return;
      }

      this.dragControlEnd(moveable, e);
      triggerChildAble(moveable, this, "dragControlEnd", e);
      var nextParams = fillEndParams(moveable, e, {
        targets: moveable.props.targets
      });
      triggerEvent(moveable, "onResizeGroupEnd", nextParams);
      return isDrag;
    },

    /**
     * @method Moveable.Resizable#request
     * @param {object} [e] - the Resizable's request parameter
     * @param {number} [e.direction=[1, 1]] - Direction to resize
     * @param {number} [e.deltaWidth] - delta number of width
     * @param {number} [e.deltaHeight] - delta number of height
     * @param {number} [e.offsetWidth] - offset number of width
     * @param {number} [e.offsetHeight] - offset number of height
     * @param {number} [e.isInstant] - Whether to execute the request instantly
     * @return {Moveable.Requester} Moveable Requester
     * @example
      * // Instantly Request (requestStart - request - requestEnd)
     * // Use Relative Value
     * moveable.request("resizable", { deltaWidth: 10, deltaHeight: 10 }, true);
     *
     * // Use Absolute Value
     * moveable.request("resizable", { offsetWidth: 100, offsetHeight: 100 }, true);
     *
     * // requestStart
     * const requester = moveable.request("resizable");
     *
     * // request
     * // Use Relative Value
     * requester.request({ deltaWidth: 10, deltaHeight: 10 });
     * requester.request({ deltaWidth: 10, deltaHeight: 10 });
     * requester.request({ deltaWidth: 10, deltaHeight: 10 });
     *
     * // Use Absolute Value
     * moveable.request("resizable", { offsetWidth: 100, offsetHeight: 100 });
     * moveable.request("resizable", { offsetWidth: 110, offsetHeight: 100 });
     * moveable.request("resizable", { offsetWidth: 120, offsetHeight: 100 });
     *
     * // requestEnd
     * requester.requestEnd();
     */
    request: function (moveable) {
      var datas = {};
      var distWidth = 0;
      var distHeight = 0;
      var rect = moveable.getRect();
      return {
        isControl: true,
        requestStart: function (e) {
          return {
            datas: datas,
            parentDirection: e.direction || [1, 1]
          };
        },
        request: function (e) {
          if ("offsetWidth" in e) {
            distWidth = e.offsetWidth - rect.offsetWidth;
          } else if ("deltaWidth" in e) {
            distWidth += e.deltaWidth;
          }

          if ("offsetHeight" in e) {
            distHeight = e.offsetHeight - rect.offsetHeight;
          } else if ("deltaHeight" in e) {
            distHeight += e.deltaHeight;
          }

          return {
            datas: datas,
            parentDist: [distWidth, distHeight]
          };
        },
        requestEnd: function () {
          return {
            datas: datas,
            isDrag: true
          };
        }
      };
    }
  };
  /**
   * Whether or not target can be resized. (default: false)
   * @name Moveable.Resizable#resizable
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     resizable: false,
   * });
   *
   * moveable.resizable = true;
   */

  /**
   * throttle of width, height when resize.
   * @name Moveable.Resizable#throttleResize
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *   resizable: true,
   *   throttleResize: 0,
   * });
   *
   * moveable.throttleResize = 1;
   */

  /**
   * When resize or scale, keeps a ratio of the width, height. (default: false)
   * @name Moveable.Resizable#keepRatio
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *   resizable: true,
   * });
   *
   * moveable.keepRatio = true;
   */

  /**
   * Set directions to show the control box. (default: ["n", "nw", "ne", "s", "se", "sw", "e", "w"])
   * @name Moveable.Resizable#renderDirections
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *   resizable: true,
   *   renderDirections: ["n", "nw", "ne", "s", "se", "sw", "e", "w"],
   * });
   *
   * moveable.renderDirections = ["nw", "ne", "sw", "se"];
   */

  /**
   * When the resize starts, the resizeStart event is called.
   * @memberof Moveable.Resizable
   * @event resizeStart
   * @param {Moveable.Resizable.OnResizeStart} - Parameters for the resizeStart event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, { resizable: true });
   * moveable.on("resizeStart", ({ target }) => {
   *     console.log(target);
   * });
   */

  /**
   * When resizing, the resize event is called.
   * @memberof Moveable.Resizable
   * @event resize
   * @param {Moveable.Resizable.OnResize} - Parameters for the resize event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, { resizable: true });
   * moveable.on("resize", ({ target, width, height }) => {
   *     target.style.width = `${e.width}px`;
   *     target.style.height = `${e.height}px`;
   * });
   */

  /**
   * When the resize finishes, the resizeEnd event is called.
   * @memberof Moveable.Resizable
   * @event resizeEnd
   * @param {Moveable.Resizable.OnResizeEnd} - Parameters for the resizeEnd event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, { resizable: true });
   * moveable.on("resizeEnd", ({ target, isDrag }) => {
   *     console.log(target, isDrag);
   * });
   */

  /**
  * When the group resize starts, the `resizeGroupStart` event is called.
  * @memberof Moveable.Resizable
  * @event resizeGroupStart
  * @param {Moveable.Resizable.OnResizeGroupStart} - Parameters for the `resizeGroupStart` event
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, {
  *     target: [].slice.call(document.querySelectorAll(".target")),
  *     resizable: true
  * });
  * moveable.on("resizeGroupStart", ({ targets }) => {
  *     console.log("onResizeGroupStart", targets);
  * });
  */

  /**
  * When the group resize, the `resizeGroup` event is called.
  * @memberof Moveable.Resizable
  * @event resizeGroup
  * @param {Moveable.Resizable.onResizeGroup} - Parameters for the `resizeGroup` event
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, {
  *     target: [].slice.call(document.querySelectorAll(".target")),
  *     resizable: true
  * });
  * moveable.on("resizeGroup", ({ targets, events }) => {
  *     console.log("onResizeGroup", targets);
  *     events.forEach(ev => {
  *         const offset = [
  *             direction[0] < 0 ? -ev.delta[0] : 0,
  *             direction[1] < 0 ? -ev.delta[1] : 0,
  *         ];
  *         // ev.drag is a drag event that occurs when the group resize.
  *         const left = offset[0] + ev.drag.beforeDist[0];
  *         const top = offset[1] + ev.drag.beforeDist[1];
  *         const width = ev.width;
  *         const top = ev.top;
  *     });
  * });
  */

  /**
   * When the group resize finishes, the `resizeGroupEnd` event is called.
   * @memberof Moveable.Resizable
   * @event resizeGroupEnd
   * @param {Moveable.Resizable.OnResizeGroupEnd} - Parameters for the `resizeGroupEnd` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: [].slice.call(document.querySelectorAll(".target")),
   *     resizable: true
   * });
   * moveable.on("resizeGroupEnd", ({ targets, isDrag }) => {
   *     console.log("onResizeGroupEnd", targets, isDrag);
   * });
   */

  /**
   * @namespace Scalable
   * @memberof Moveable
   * @description Scalable indicates whether the target's x and y can be scale of transform.
   */

  var Scalable = {
    name: "scalable",
    ableGroup: "size",
    canPinch: true,
    props: {
      scalable: Boolean,
      throttleScale: Number,
      renderDirections: String,
      keepRatio: Boolean
    },
    events: {
      onScaleStart: "scaleStart",
      onScale: "scale",
      onScaleEnd: "scaleEnd",
      onScaleGroupStart: "scaleGroupStart",
      onScaleGroup: "scaleGroup",
      onScaleGroupEnd: "scaleGroupEnd"
    },
    render: function (moveable, React) {
      var _a = moveable.props,
          resizable = _a.resizable,
          scalable = _a.scalable,
          edge = _a.edge;

      if (!resizable && scalable) {
        if (edge) {
          return renderDiagonalDirections(moveable, React);
        }

        return renderAllDirections(moveable, React);
      }
    },
    dragControlCondition: directionCondition,
    dragControlStart: function (moveable, e) {
      var datas = e.datas,
          isPinch = e.isPinch,
          inputEvent = e.inputEvent,
          parentDirection = e.parentDirection;
      var direction = parentDirection || (isPinch ? [0, 0] : getDirection(inputEvent.target));
      var _a = moveable.state,
          width = _a.width,
          height = _a.height,
          targetTransform = _a.targetTransform,
          target = _a.target,
          pos1 = _a.pos1,
          pos2 = _a.pos2,
          pos4 = _a.pos4;

      if (!direction || !target) {
        return false;
      }

      if (!isPinch) {
        setDragStart(moveable, e);
      }

      setDefaultTransformIndex(e);
      datas.datas = {};
      datas.transform = targetTransform;
      datas.prevDist = [1, 1];
      datas.direction = direction;
      datas.width = width;
      datas.height = height;
      datas.startValue = [1, 1];
      var isWidth = !direction[0] && !direction[1] || direction[0] || !direction[1];
      datas.isWidth = isWidth;

      function setRatio(ratio) {
        datas.ratio = ratio && isFinite(ratio) ? ratio : 0;
      }

      function setFixedDirection(fixedDirection) {
        datas.fixedDirection = fixedDirection;
        datas.fixedPosition = getAbsolutePosition(moveable, fixedDirection);
      }

      setRatio(getDist$2(pos1, pos2) / getDist$2(pos2, pos4));
      setFixedDirection([-direction[0], -direction[1]]);
      var params = fillParams(moveable, e, __assign$2(__assign$2({
        direction: direction,
        set: function (scale) {
          datas.startValue = scale;
        },
        setRatio: setRatio,
        setFixedDirection: setFixedDirection
      }, fillTransformStartEvent(e)), {
        dragStart: Draggable.dragStart(moveable, new CustomGesto().dragStart([0, 0], e))
      }));
      var result = triggerEvent(moveable, "onScaleStart", params);

      if (result !== false) {
        datas.isScale = true;
        moveable.state.snapRenderInfo = {
          request: e.isRequest,
          direction: direction
        };
      }

      return datas.isScale ? params : false;
    },
    dragControl: function (moveable, e) {
      resolveTransformEvent(e, "scale");
      var datas = e.datas,
          distX = e.distX,
          distY = e.distY,
          parentScale = e.parentScale,
          parentDistance = e.parentDistance,
          parentKeepRatio = e.parentKeepRatio,
          parentFlag = e.parentFlag,
          isPinch = e.isPinch,
          dragClient = e.dragClient,
          parentDist = e.parentDist,
          isRequest = e.isRequest;
      var prevDist = datas.prevDist,
          direction = datas.direction,
          width = datas.width,
          height = datas.height,
          isScale = datas.isScale,
          startValue = datas.startValue,
          isWidth = datas.isWidth,
          ratio = datas.ratio,
          fixedDirection = datas.fixedDirection;

      if (!isScale) {
        return false;
      }

      var _a = moveable.props,
          throttleScale = _a.throttleScale,
          parentMoveable = _a.parentMoveable;
      var sizeDirection = direction;

      if (!direction[0] && !direction[1]) {
        sizeDirection = [1, 1];
      }

      var keepRatio = ratio && (moveable.props.keepRatio || parentKeepRatio);
      var state = moveable.state; // const startWidth = width * startValue[0];
      // const startHeight = height * startValue[1];

      var scaleX = 1;
      var scaleY = 1;
      var fixedPosition = dragClient;

      if (!dragClient) {
        if (!parentFlag && isPinch) {
          fixedPosition = getAbsolutePosition(moveable, [0, 0]);
        } else {
          fixedPosition = datas.fixedPosition;
        }
      }

      if (parentDist) {
        scaleX = (width + parentDist[0]) / width;
        scaleY = (height + parentDist[1]) / height;
      } else if (parentScale) {
        scaleX = parentScale[0];
        scaleY = parentScale[1];
      } else if (isPinch) {
        if (parentDistance) {
          scaleX = (width + parentDistance) / width;
          scaleY = (height + parentDistance * height / width) / height;
        }
      } else {
        var dragDist = getDragDist({
          datas: datas,
          distX: distX,
          distY: distY
        });
        var distWidth = sizeDirection[0] * dragDist[0];
        var distHeight = sizeDirection[1] * dragDist[1];

        if (keepRatio && width && height) {
          var rad = getRad$1([0, 0], dragDist);
          var standardRad = getRad$1([0, 0], sizeDirection);
          var size = getDistSize([distWidth, distHeight]);
          var signSize = Math.cos(rad - standardRad) * size;

          if (!sizeDirection[0]) {
            // top, bottom
            distHeight = signSize;
            distWidth = distHeight / ratio;
          } else if (!sizeDirection[1]) {
            // left, right
            distWidth = signSize;
            distHeight = distWidth * ratio;
          } else {
            // two-way
            distHeight = distWidth * ratio;
          }
        }

        scaleX = (width + distWidth) / width;
        scaleY = (height + distHeight) / height;
      }

      scaleX = sizeDirection[0] || keepRatio ? scaleX * startValue[0] : startValue[0];
      scaleY = sizeDirection[1] || keepRatio ? scaleY * startValue[1] : startValue[1];

      if (scaleX === 0) {
        scaleX = (prevDist[0] > 0 ? 1 : -1) * MIN_SCALE;
      }

      if (scaleY === 0) {
        scaleY = (prevDist[1] > 0 ? 1 : -1) * MIN_SCALE;
      }

      var dist = [scaleX / startValue[0], scaleY / startValue[1]];
      var scale = [scaleX, scaleY];

      if (!isPinch && moveable.props.groupable) {
        var snapRenderInfo = state.snapRenderInfo || {};
        var stateDirection = snapRenderInfo.direction;

        if (isArray(stateDirection) && (stateDirection[0] || stateDirection[1])) {
          state.snapRenderInfo = {
            direction: direction,
            request: e.isRequest
          };
        }
      }

      var snapDist = [0, 0];

      if (!isPinch) {
        snapDist = checkSnapScale(moveable, dist, direction, isRequest, datas);
      }

      if (keepRatio) {
        if (sizeDirection[0] && sizeDirection[1] && snapDist[0] && snapDist[1]) {
          if (Math.abs(snapDist[0]) > Math.abs(snapDist[1])) {
            snapDist[1] = 0;
          } else {
            snapDist[0] = 0;
          }
        }

        var isNoSnap = !snapDist[0] && !snapDist[1];

        if (isNoSnap) {
          if (isWidth) {
            dist[0] = throttle(dist[0] * startValue[0], throttleScale) / startValue[0];
          } else {
            dist[1] = throttle(dist[1] * startValue[1], throttleScale) / startValue[1];
          }
        }

        if (sizeDirection[0] && !sizeDirection[1] || snapDist[0] && !snapDist[1] || isNoSnap && isWidth) {
          dist[0] += snapDist[0];
          var snapHeight = width * dist[0] * startValue[0] / ratio;
          dist[1] = snapHeight / height / startValue[1];
        } else if (!sizeDirection[0] && sizeDirection[1] || !snapDist[0] && snapDist[1] || isNoSnap && !isWidth) {
          dist[1] += snapDist[1];
          var snapWidth = height * dist[1] * startValue[1] * ratio;
          dist[0] = snapWidth / width / startValue[0];
        }
      } else {
        dist[0] += snapDist[0];
        dist[1] += snapDist[1];

        if (!snapDist[0]) {
          dist[0] = throttle(dist[0] * startValue[0], throttleScale) / startValue[0];
        }

        if (!snapDist[1]) {
          dist[1] = throttle(dist[1] * startValue[1], throttleScale) / startValue[1];
        }
      }

      if (dist[0] === 0) {
        dist[0] = (prevDist[0] > 0 ? 1 : -1) * MIN_SCALE;
      }

      if (dist[1] === 0) {
        dist[1] = (prevDist[1] > 0 ? 1 : -1) * MIN_SCALE;
      }

      var delta = [dist[0] / prevDist[0], dist[1] / prevDist[1]];
      scale = multiply2(dist, startValue);
      var inverseDist = getScaleDist(moveable, dist, fixedDirection, fixedPosition, datas);
      var inverseDelta = minus(inverseDist, datas.prevInverseDist || [0, 0]);
      datas.prevDist = dist;
      datas.prevInverseDist = inverseDist;

      if (scaleX === prevDist[0] && scaleY === prevDist[1] && inverseDelta.every(function (num) {
        return !num;
      }) && !parentMoveable) {
        return false;
      }

      var nextTransform = convertTransformFormat(datas, "scale(" + scale.join(", ") + ")", "scale(" + dist.join(", ") + ")");
      var params = fillParams(moveable, e, __assign$2({
        offsetWidth: width,
        offsetHeight: height,
        direction: direction,
        // beforeScale,
        // beforeDist,
        // beforeDelta,
        scale: scale,
        dist: dist,
        delta: delta,
        isPinch: !!isPinch
      }, fillTransformEvent(moveable, nextTransform, inverseDelta, isPinch, e)));
      triggerEvent(moveable, "onScale", params);
      return params;
    },
    dragControlEnd: function (moveable, e) {
      var datas = e.datas,
          isDrag = e.isDrag;

      if (!datas.isScale) {
        return false;
      }

      datas.isScale = false;
      triggerEvent(moveable, "onScaleEnd", fillEndParams(moveable, e, {}));
      return isDrag;
    },
    dragGroupControlCondition: directionCondition,
    dragGroupControlStart: function (moveable, e) {
      var datas = e.datas;
      var params = this.dragControlStart(moveable, e);

      if (!params) {
        return false;
      }

      var originalEvents = fillChildEvents(moveable, "resizable", e);

      function setDist(child, ev) {
        var fixedDirection = datas.fixedDirection;
        var fixedPosition = datas.fixedPosition;
        var pos = getAbsolutePosition(child, fixedDirection);

        var _a = calculate(createRotateMatrix(-moveable.rotation / 180 * Math.PI, 3), [pos[0] - fixedPosition[0], pos[1] - fixedPosition[1], 1], 3),
            originalX = _a[0],
            originalY = _a[1];

        ev.datas.originalX = originalX;
        ev.datas.originalY = originalY;
        return ev;
      }

      datas.moveableScale = moveable.scale;
      var events = triggerChildAble(moveable, this, "dragControlStart", e, function (child, ev) {
        return setDist(child, ev);
      });

      var nextParams = __assign$2(__assign$2({}, params), {
        targets: moveable.props.targets,
        events: events,
        setFixedDirection: function (fixedDirection) {
          params.setFixedDirection(fixedDirection);
          events.forEach(function (ev, i) {
            ev.setFixedDirection(fixedDirection);
            setDist(moveable.moveables[i], originalEvents[i]);
          });
        }
      });

      var result = triggerEvent(moveable, "onScaleGroupStart", nextParams);
      datas.isScale = result !== false;
      return datas.isScale ? nextParams : false;
    },
    dragGroupControl: function (moveable, e) {
      var datas = e.datas;

      if (!datas.isScale) {
        return;
      }

      var params = this.dragControl(moveable, e);

      if (!params) {
        return;
      }

      var moveableScale = datas.moveableScale;
      moveable.scale = [params.scale[0] * moveableScale[0], params.scale[1] * moveableScale[1]];
      var keepRatio = moveable.props.keepRatio;
      var dist = params.dist,
          scale = params.scale;
      var fixedPosition = datas.fixedPosition;
      var events = triggerChildAble(moveable, this, "dragControl", e, function (_, ev) {
        var _a = calculate(createRotateMatrix(moveable.rotation / 180 * Math.PI, 3), [ev.datas.originalX * dist[0], ev.datas.originalY * dist[1], 1], 3),
            clientX = _a[0],
            clientY = _a[1];

        return __assign$2(__assign$2({}, ev), {
          parentDist: null,
          parentScale: scale,
          parentKeepRatio: keepRatio,
          dragClient: plus(fixedPosition, [clientX, clientY])
        });
      });

      var nextParams = __assign$2({
        targets: moveable.props.targets,
        events: events
      }, params);

      triggerEvent(moveable, "onScaleGroup", nextParams);
      return nextParams;
    },
    dragGroupControlEnd: function (moveable, e) {
      var isDrag = e.isDrag,
          datas = e.datas;

      if (!datas.isScale) {
        return;
      }

      this.dragControlEnd(moveable, e);
      triggerChildAble(moveable, this, "dragControlEnd", e);
      var nextParams = fillEndParams(moveable, e, {
        targets: moveable.props.targets
      });
      triggerEvent(moveable, "onScaleGroupEnd", nextParams);
      return isDrag;
    },

    /**
     * @method Moveable.Scalable#request
     * @param {object} [e] - the Resizable's request parameter
     * @param {number} [e.direction=[1, 1]] - Direction to scale
     * @param {number} [e.deltaWidth] - delta number of width
     * @param {number} [e.deltaHeight] - delta number of height
     * @return {Moveable.Requester} Moveable Requester
     * @example
      * // Instantly Request (requestStart - request - requestEnd)
     * moveable.request("scalable", { deltaWidth: 10, deltaHeight: 10 }, true);
     *
     * // requestStart
     * const requester = moveable.request("scalable");
     *
     * // request
     * requester.request({ deltaWidth: 10, deltaHeight: 10 });
     * requester.request({ deltaWidth: 10, deltaHeight: 10 });
     * requester.request({ deltaWidth: 10, deltaHeight: 10 });
     *
     * // requestEnd
     * requester.requestEnd();
     */
    request: function () {
      var datas = {};
      var distWidth = 0;
      var distHeight = 0;
      return {
        isControl: true,
        requestStart: function (e) {
          return {
            datas: datas,
            parentDirection: e.direction || [1, 1]
          };
        },
        request: function (e) {
          distWidth += e.deltaWidth;
          distHeight += e.deltaHeight;
          return {
            datas: datas,
            parentDist: [distWidth, distHeight]
          };
        },
        requestEnd: function () {
          return {
            datas: datas,
            isDrag: true
          };
        }
      };
    }
  };
  /**
   * Whether or not target can scaled. (default: false)
   * @name Moveable.Scalable#scalable
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.scalable = true;
   */

  /**
   * throttle of scaleX, scaleY when scale.
   * @name Moveable.Scalable#throttleScale
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.throttleScale = 0.1;
   */

  /**
   * Set directions to show the control box. (default: ["n", "nw", "ne", "s", "se", "sw", "e", "w"])
   * @name Moveable.Scalable#renderDirections
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     scalable: true,
   *   renderDirections: ["n", "nw", "ne", "s", "se", "sw", "e", "w"],
   * });
   *
   * moveable.renderDirections = ["nw", "ne", "sw", "se"];
   */

  /**
   * When resize or scale, keeps a ratio of the width, height. (default: false)
   * @name Moveable.Scalable#keepRatio
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     scalable: true,
   * });
   *
   * moveable.keepRatio = true;
   */

  /**
   * When the scale starts, the scaleStart event is called.
   * @memberof Moveable.Scalable
   * @event scaleStart
   * @param {Moveable.Scalable.OnScaleStart} - Parameters for the scaleStart event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, { scalable: true });
   * moveable.on("scaleStart", ({ target }) => {
   *     console.log(target);
   * });
   */

  /**
   * When scaling, the scale event is called.
   * @memberof Moveable.Scalable
   * @event scale
   * @param {Moveable.Scalable.OnScale} - Parameters for the scale event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, { scalable: true });
   * moveable.on("scale", ({ target, transform, dist }) => {
   *     target.style.transform = transform;
   * });
   */

  /**
   * When the scale finishes, the scaleEnd event is called.
   * @memberof Moveable.Scalable
   * @event scaleEnd
   * @param {Moveable.Scalable.OnScaleEnd} - Parameters for the scaleEnd event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, { scalable: true });
   * moveable.on("scaleEnd", ({ target, isDrag }) => {
   *     console.log(target, isDrag);
   * });
   */

  /**
  * When the group scale starts, the `scaleGroupStart` event is called.
  * @memberof Moveable.Scalable
  * @event scaleGroupStart
  * @param {Moveable.Scalable.OnScaleGroupStart} - Parameters for the `scaleGroupStart` event
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, {
  *     target: [].slice.call(document.querySelectorAll(".target")),
  *     scalable: true
  * });
  * moveable.on("scaleGroupStart", ({ targets }) => {
  *     console.log("onScaleGroupStart", targets);
  * });
  */

  /**
  * When the group scale, the `scaleGroup` event is called.
  * @memberof Moveable.Scalable
  * @event scaleGroup
  * @param {Moveable.Scalable.OnScaleGroup} - Parameters for the `scaleGroup` event
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, {
  *     target: [].slice.call(document.querySelectorAll(".target")),
  *     scalable: true
  * });
  * moveable.on("scaleGroup", ({ targets, events }) => {
  *     console.log("onScaleGroup", targets);
  *     events.forEach(ev => {
  *         const target = ev.target;
  *         // ev.drag is a drag event that occurs when the group scale.
  *         const left = ev.drag.beforeDist[0];
  *         const top = ev.drag.beforeDist[1];
  *         const scaleX = ev.scale[0];
  *         const scaleY = ev.scale[1];
  *     });
  * });
  */

  /**
   * When the group scale finishes, the `scaleGroupEnd` event is called.
   * @memberof Moveable.Scalable
   * @event scaleGroupEnd
   * @param {Moveable.Scalable.OnScaleGroupEnd} - Parameters for the `scaleGroupEnd` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: [].slice.call(document.querySelectorAll(".target")),
   *     scalable: true
   * });
   * moveable.on("scaleGroupEnd", ({ targets, isDrag }) => {
   *     console.log("onScaleGroupEnd", targets, isDrag);
   * });
   */

  function getMiddleLinePos(pos1, pos2) {
    return pos1.map(function (pos, i) {
      return dot(pos, pos2[i], 1, 2);
    });
  }

  function getTriangleRad(pos1, pos2, pos3) {
    // pos1 Rad
    var rad1 = getRad$1(pos1, pos2);
    var rad2 = getRad$1(pos1, pos3);
    var rad = rad2 - rad1;
    return rad >= 0 ? rad : rad + 2 * Math.PI;
  }

  function isValidPos(poses1, poses2) {
    var rad1 = getTriangleRad(poses1[0], poses1[1], poses1[2]);
    var rad2 = getTriangleRad(poses2[0], poses2[1], poses2[2]);
    var pi = Math.PI;

    if (rad1 >= pi && rad2 <= pi || rad1 <= pi && rad2 >= pi) {
      return false;
    }

    return true;
  }
  /**
   * @namespace Moveable.Warpable
   * @description Warpable indicates whether the target can be warped(distorted, bented).
   */


  var Warpable = {
    name: "warpable",
    ableGroup: "size",
    props: {
      warpable: Boolean,
      renderDirections: Array
    },
    events: {
      onWarpStart: "warpStart",
      onWarp: "warp",
      onWarpEnd: "warpEnd"
    },
    render: function (moveable, React) {
      var _a = moveable.props,
          resizable = _a.resizable,
          scalable = _a.scalable,
          warpable = _a.warpable,
          zoom = _a.zoom;

      if (resizable || scalable || !warpable) {
        return [];
      }

      var _b = moveable.state,
          pos1 = _b.pos1,
          pos2 = _b.pos2,
          pos3 = _b.pos3,
          pos4 = _b.pos4;
      var linePosFrom1 = getMiddleLinePos(pos1, pos2);
      var linePosFrom2 = getMiddleLinePos(pos2, pos1);
      var linePosFrom3 = getMiddleLinePos(pos1, pos3);
      var linePosFrom4 = getMiddleLinePos(pos3, pos1);
      var linePosTo1 = getMiddleLinePos(pos3, pos4);
      var linePosTo2 = getMiddleLinePos(pos4, pos3);
      var linePosTo3 = getMiddleLinePos(pos2, pos4);
      var linePosTo4 = getMiddleLinePos(pos4, pos2);
      return __spreadArrays$1([React.createElement("div", {
        className: prefix("line"),
        key: "middeLine1",
        style: getLineStyle(linePosFrom1, linePosTo1, zoom)
      }), React.createElement("div", {
        className: prefix("line"),
        key: "middeLine2",
        style: getLineStyle(linePosFrom2, linePosTo2, zoom)
      }), React.createElement("div", {
        className: prefix("line"),
        key: "middeLine3",
        style: getLineStyle(linePosFrom3, linePosTo3, zoom)
      }), React.createElement("div", {
        className: prefix("line"),
        key: "middeLine4",
        style: getLineStyle(linePosFrom4, linePosTo4, zoom)
      })], renderAllDirections(moveable, React));
    },
    dragControlCondition: function (e) {
      if (e.isRequest) {
        return false;
      }

      return hasClass(e.inputEvent.target, prefix("direction"));
    },
    dragControlStart: function (moveable, e) {
      var datas = e.datas,
          inputEvent = e.inputEvent;
      var target = moveable.props.target;
      var inputTarget = inputEvent.target;
      var direction = getDirection(inputTarget);

      if (!direction || !target) {
        return false;
      }

      var state = moveable.state;
      var transformOrigin = state.transformOrigin,
          is3d = state.is3d,
          targetTransform = state.targetTransform,
          targetMatrix = state.targetMatrix,
          width = state.width,
          height = state.height,
          left = state.left,
          top = state.top;
      datas.datas = {};
      datas.targetTransform = targetTransform;
      datas.warpTargetMatrix = is3d ? targetMatrix : convertDimension(targetMatrix, 3, 4);
      datas.targetInverseMatrix = ignoreDimension(invert(datas.warpTargetMatrix, 4), 3, 4);
      datas.direction = direction;
      datas.left = left;
      datas.top = top;
      setDragStart(moveable, e);
      setDefaultTransformIndex(e);
      datas.poses = [[0, 0], [width, 0], [0, height], [width, height]].map(function (p) {
        return minus(p, transformOrigin);
      });
      datas.nextPoses = datas.poses.map(function (_a) {
        var x = _a[0],
            y = _a[1];
        return calculate(datas.warpTargetMatrix, [x, y, 0, 1], 4);
      });
      datas.startValue = createIdentityMatrix(4);
      datas.prevMatrix = createIdentityMatrix(4);
      datas.absolutePoses = getAbsolutePosesByState(state);
      datas.posIndexes = getPosIndexesByDirection(direction);
      state.snapRenderInfo = {
        request: e.isRequest,
        direction: direction
      };
      var params = fillParams(moveable, e, __assign$2({
        set: function (matrix) {
          datas.startValue = matrix;
        }
      }, fillTransformStartEvent(e)));
      var result = triggerEvent(moveable, "onWarpStart", params);

      if (result !== false) {
        datas.isWarp = true;
      }

      return datas.isWarp;
    },
    dragControl: function (moveable, e) {
      var datas = e.datas,
          isRequest = e.isRequest;
      var distX = e.distX,
          distY = e.distY;
      var targetInverseMatrix = datas.targetInverseMatrix,
          prevMatrix = datas.prevMatrix,
          isWarp = datas.isWarp,
          startValue = datas.startValue,
          poses = datas.poses,
          posIndexes = datas.posIndexes,
          absolutePoses = datas.absolutePoses;

      if (!isWarp) {
        return false;
      }

      resolveTransformEvent(e, "matrix3d");

      if (hasGuidelines(moveable, "warpable")) {
        var selectedPoses = posIndexes.map(function (index) {
          return absolutePoses[index];
        });

        if (selectedPoses.length > 1) {
          selectedPoses.push([(selectedPoses[0][0] + selectedPoses[1][0]) / 2, (selectedPoses[0][1] + selectedPoses[1][1]) / 2]);
        }

        var _a = checkMoveableSnapBounds(moveable, isRequest, selectedPoses.map(function (pos) {
          return [pos[0] + distX, pos[1] + distY];
        })),
            horizontalSnapInfo = _a.horizontal,
            verticalSnapInfo = _a.vertical;

        distY -= horizontalSnapInfo.offset;
        distX -= verticalSnapInfo.offset;
      }

      var dist = getDragDist({
        datas: datas,
        distX: distX,
        distY: distY
      }, true);
      var nextPoses = datas.nextPoses.slice();
      posIndexes.forEach(function (index) {
        nextPoses[index] = plus(nextPoses[index], dist);
      });

      if (!NEARBY_POS.every(function (nearByPoses) {
        return isValidPos(nearByPoses.map(function (i) {
          return poses[i];
        }), nearByPoses.map(function (i) {
          return nextPoses[i];
        }));
      })) {
        return false;
      }

      var h = createWarpMatrix(poses[0], poses[2], poses[1], poses[3], nextPoses[0], nextPoses[2], nextPoses[1], nextPoses[3]);

      if (!h.length) {
        return false;
      } // B * A * M


      var afterMatrix = multiply(targetInverseMatrix, h, 4); // B * M * A

      var matrix = getTransfromMatrix(datas, afterMatrix, true);
      var delta = multiply(invert(prevMatrix, 4), matrix, 4);
      datas.prevMatrix = matrix;
      var totalMatrix = multiply(startValue, matrix, 4);
      var nextTransform = convertTransformFormat(datas, "matrix3d(" + totalMatrix.join(", ") + ")", "matrix3d(" + matrix.join(", ") + ")");
      fillOriginalTransform(e, nextTransform);
      triggerEvent(moveable, "onWarp", fillParams(moveable, e, {
        delta: delta,
        matrix: totalMatrix,
        dist: matrix,
        multiply: multiply,
        transform: nextTransform
      }));
      return true;
    },
    dragControlEnd: function (moveable, e) {
      var datas = e.datas,
          isDrag = e.isDrag;

      if (!datas.isWarp) {
        return false;
      }

      datas.isWarp = false;
      triggerEvent(moveable, "onWarpEnd", fillEndParams(moveable, e, {}));
      return isDrag;
    }
  };
  /**
   * Whether or not target can be warped. (default: false)
   * @name Moveable.Warpable#warpable
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.warpable = true;
   */

  /**
  * Set directions to show the control box. (default: ["n", "nw", "ne", "s", "se", "sw", "e", "w"])
  * @name Moveable.Warpable#renderDirections
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, {
  *     warpable: true,
  *     renderDirections: ["n", "nw", "ne", "s", "se", "sw", "e", "w"],
  * });
  *
  * moveable.renderDirections = ["nw", "ne", "sw", "se"];
  */

  /**
  * When the warp starts, the warpStart event is called.
  * @memberof Moveable.Warpable
  * @event warpStart
  * @param {Moveable.Warpable.OnWarpStart} - Parameters for the warpStart event
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, { warpable: true });
  * moveable.on("warpStart", ({ target }) => {
  *     console.log(target);
  * });
  */

  /**
   * When warping, the warp event is called.
   * @memberof Moveable.Warpable
   * @event warp
   * @param {Moveable.Warpable.OnWarp} - Parameters for the warp event
   * @example
   * import Moveable from "moveable";
   * let matrix = [
   *  1, 0, 0, 0,
   *  0, 1, 0, 0,
   *  0, 0, 1, 0,
   *  0, 0, 0, 1,
   * ];
   * const moveable = new Moveable(document.body, { warpable: true });
   * moveable.on("warp", ({ target, transform, delta, multiply }) => {
   *    // target.style.transform = transform;
   *    matrix = multiply(matrix, delta);
   *    target.style.transform = `matrix3d(${matrix.join(",")})`;
   * });
   */

  /**
   * When the warp finishes, the warpEnd event is called.
   * @memberof Moveable.Warpable
   * @event warpEnd
   * @param {Moveable.Warpable.OnWarpEnd} - Parameters for the warpEnd event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, { warpable: true });
   * moveable.on("warpEnd", ({ target, isDrag }) => {
   *     console.log(target, isDrag);
   * });
   */

  var AREA_PIECES = /*#__PURE__*/prefix("area-pieces");
  var AREA_PIECE = /*#__PURE__*/prefix("area-piece");
  var AVOID = /*#__PURE__*/prefix("avoid");

  function restoreStyle(moveable) {
    var el = moveable.areaElement;
    var _a = moveable.state,
        width = _a.width,
        height = _a.height;
    removeClass(el, AVOID);
    el.style.cssText += "left: 0px; top: 0px; width: " + width + "px; height: " + height + "px";
  }

  function renderPieces(React) {
    return React.createElement("div", {
      key: "area_pieces",
      className: AREA_PIECES
    }, React.createElement("div", {
      className: AREA_PIECE
    }), React.createElement("div", {
      className: AREA_PIECE
    }), React.createElement("div", {
      className: AREA_PIECE
    }), React.createElement("div", {
      className: AREA_PIECE
    }));
  }

  var DragArea = {
    name: "dragArea",
    props: {
      dragArea: Boolean,
      passDragArea: Boolean
    },
    events: {
      onClick: "click",
      onClickGroup: "clickGroup"
    },
    render: function (moveable, React) {
      var _a = moveable.props,
          target = _a.target,
          dragArea = _a.dragArea,
          groupable = _a.groupable,
          passDragArea = _a.passDragArea;
      var _b = moveable.state,
          width = _b.width,
          height = _b.height,
          renderPoses = _b.renderPoses;
      var className = passDragArea ? prefix("area", "pass") : prefix("area");

      if (groupable) {
        return [React.createElement("div", {
          key: "area",
          ref: ref(moveable, "areaElement"),
          className: className
        }), renderPieces(React)];
      }

      if (!target || !dragArea) {
        return [];
      }

      var h = createWarpMatrix([0, 0], [width, 0], [0, height], [width, height], renderPoses[0], renderPoses[1], renderPoses[2], renderPoses[3]);
      var transform = h.length ? makeMatrixCSS(h, true) : "none";
      return [React.createElement("div", {
        key: "area",
        ref: ref(moveable, "areaElement"),
        className: className,
        style: {
          top: "0px",
          left: "0px",
          width: width + "px",
          height: height + "px",
          transformOrigin: "0 0",
          transform: transform
        }
      }), renderPieces(React)];
    },
    dragStart: function (moveable, _a) {
      var datas = _a.datas,
          clientX = _a.clientX,
          clientY = _a.clientY,
          inputEvent = _a.inputEvent;

      if (!inputEvent) {
        return false;
      }

      datas.isDragArea = false;
      var areaElement = moveable.areaElement;
      var _b = moveable.state,
          moveableClientRect = _b.moveableClientRect,
          renderPoses = _b.renderPoses,
          rootMatrix = _b.rootMatrix,
          is3d = _b.is3d;
      var left = moveableClientRect.left,
          top = moveableClientRect.top;

      var _c = getRect(renderPoses),
          relativeLeft = _c.left,
          relativeTop = _c.top,
          width = _c.width,
          height = _c.height;

      var n = is3d ? 4 : 3;

      var _d = calculateInversePosition(rootMatrix, [clientX - left, clientY - top], n),
          posX = _d[0],
          posY = _d[1];

      posX -= relativeLeft;
      posY -= relativeTop;
      var rects = [{
        left: relativeLeft,
        top: relativeTop,
        width: width,
        height: posY - 10
      }, {
        left: relativeLeft,
        top: relativeTop,
        width: posX - 10,
        height: height
      }, {
        left: relativeLeft,
        top: relativeTop + posY + 10,
        width: width,
        height: height - posY - 10
      }, {
        left: relativeLeft + posX + 10,
        top: relativeTop,
        width: width - posX - 10,
        height: height
      }];
      var children = [].slice.call(areaElement.nextElementSibling.children);
      rects.forEach(function (rect, i) {
        children[i].style.cssText = "left: " + rect.left + "px;top: " + rect.top + "px; width: " + rect.width + "px; height: " + rect.height + "px;";
      });
      addClass(areaElement, AVOID);
      return;
    },
    drag: function (moveable, _a) {
      var datas = _a.datas,
          inputEvent = _a.inputEvent;

      if (!inputEvent) {
        return false;
      }

      if (!datas.isDragArea) {
        datas.isDragArea = true;
        restoreStyle(moveable);
      }
    },
    dragEnd: function (moveable, e) {
      var inputEvent = e.inputEvent,
          datas = e.datas;

      if (!inputEvent) {
        return false;
      }

      if (!datas.isDragArea) {
        restoreStyle(moveable);
      }
    },
    dragGroupStart: function (moveable, e) {
      return this.dragStart(moveable, e);
    },
    dragGroup: function (moveable, e) {
      return this.drag(moveable, e);
    },
    dragGroupEnd: function (moveable, e) {
      return this.dragEnd(moveable, e);
    },
    unset: function (moveable) {
      restoreStyle(moveable);
    }
  };
  /**
   * Add an event to the moveable area instead of the target for stopPropagation. (default: false, true in group)
   * @name Moveable#dragArea
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *  dragArea: false,
   * });
   */

  /**
   * Set `pointerEvents: none;` css to pass events in dragArea. (default: false)
   * @name Moveable#passDragArea
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *  dragArea: false,
   * });
   */

  var Origin = {
    name: "origin",
    props: {
      origin: Boolean
    },
    events: {},
    render: function (moveable, React) {
      var zoom = moveable.props.zoom;
      var _a = moveable.state,
          beforeOrigin = _a.beforeOrigin,
          rotation = _a.rotation;
      return [React.createElement("div", {
        className: prefix("control", "origin"),
        style: getControlTransform(rotation, zoom, beforeOrigin),
        key: "beforeOrigin"
      })];
    }
  };
  /**
   * Whether or not the origin controlbox will be visible or not (default: true)
   * @name Moveable#origin
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   *
   * moveable.origin = true;
   */

  function getDefaultScrollPosition(e) {
    var scrollContainer = e.scrollContainer;
    return [scrollContainer.scrollLeft, scrollContainer.scrollTop];
  }
  /**
   * @namespace Moveable.Scrollable
   * @description Whether or not target can be scrolled to the scroll container (default: false)
   */


  var Scrollable = {
    name: "scrollable",
    canPinch: true,
    props: {
      scrollable: Boolean,
      scrollContainer: Object,
      scrollThreshold: Number,
      getScrollPosition: Function
    },
    events: {
      onScroll: "scroll",
      onScrollGroup: "scrollGroup"
    },
    dragStart: function (moveable, e) {
      var props = moveable.props;
      var _a = props.scrollContainer,
          scrollContainer = _a === void 0 ? moveable.getContainer() : _a;
      var dragScroll = new DragScroll();
      var scrollContainerElement = getRefTarget(scrollContainer, true);
      e.datas.dragScroll = dragScroll;
      var gestoName = e.isControl ? "controlGesto" : "targetGesto";
      var targets = e.targets;
      dragScroll.on("scroll", function (_a) {
        var container = _a.container,
            direction = _a.direction;
        var params = fillParams(moveable, e, {
          scrollContainer: container,
          direction: direction
        });
        var eventName = targets ? "onScrollGroup" : "onScroll";

        if (targets) {
          params.targets = targets;
        }

        triggerEvent(moveable, eventName, params);
      }).on("move", function (_a) {
        var offsetX = _a.offsetX,
            offsetY = _a.offsetY;
        moveable[gestoName].scrollBy(offsetX, offsetY, e.inputEvent, false);
      });
      dragScroll.dragStart(e, {
        container: scrollContainerElement
      });
    },
    checkScroll: function (moveable, e) {
      var dragScroll = e.datas.dragScroll;

      if (!dragScroll) {
        return;
      }

      var _a = moveable.props,
          _b = _a.scrollContainer,
          scrollContainer = _b === void 0 ? moveable.getContainer() : _b,
          _c = _a.scrollThreshold,
          scrollThreshold = _c === void 0 ? 0 : _c,
          _d = _a.getScrollPosition,
          getScrollPosition = _d === void 0 ? getDefaultScrollPosition : _d;
      dragScroll.drag(e, {
        container: scrollContainer,
        threshold: scrollThreshold,
        getScrollPosition: function (ev) {
          return getScrollPosition({
            scrollContainer: ev.container,
            direction: ev.direction
          });
        }
      });
      return true;
    },
    drag: function (moveable, e) {
      return this.checkScroll(moveable, e);
    },
    dragEnd: function (moveable, e) {
      e.datas.dragScroll.dragEnd();
      e.datas.dragScroll = null;
    },
    dragControlStart: function (moveable, e) {
      return this.dragStart(moveable, __assign$2(__assign$2({}, e), {
        isControl: true
      }));
    },
    dragControl: function (moveable, e) {
      return this.drag(moveable, e);
    },
    dragControlEnd: function (moveable, e) {
      return this.dragEnd(moveable, e);
    },
    dragGroupStart: function (moveable, e) {
      return this.dragStart(moveable, __assign$2(__assign$2({}, e), {
        targets: moveable.props.targets
      }));
    },
    dragGroup: function (moveable, e) {
      return this.drag(moveable, __assign$2(__assign$2({}, e), {
        targets: moveable.props.targets
      }));
    },
    dragGroupEnd: function (moveable, e) {
      return this.dragEnd(moveable, __assign$2(__assign$2({}, e), {
        targets: moveable.props.targets
      }));
    },
    dragGroupControlStart: function (moveable, e) {
      return this.dragStart(moveable, __assign$2(__assign$2({}, e), {
        targets: moveable.props.targets,
        isControl: true
      }));
    },
    dragGroupContro: function (moveable, e) {
      return this.drag(moveable, __assign$2(__assign$2({}, e), {
        targets: moveable.props.targets
      }));
    },
    dragGroupControEnd: function (moveable, e) {
      return this.dragEnd(moveable, __assign$2(__assign$2({}, e), {
        targets: moveable.props.targets
      }));
    }
  };
  /**
   * Whether or not target can be scrolled to the scroll container (default: false)
   * @name Moveable.Scrollable#scrollable
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *   scrollable: true,
   *   scrollContainer: document.body,
   *   scrollThreshold: 0,
   *   getScrollPosition: ({ scrollContainer }) => ([scrollContainer.scrollLeft, scrollContainer.scrollTop]),
   * });
   *
   * moveable.scrollable = true;
   */

  /**
   * The container to which scroll is applied (default: container)
   * @name Moveable.Scrollable#scrollContainer
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *   scrollable: true,
   *   scrollContainer: document.body,
   *   scrollThreshold: 0,
   *   getScrollPosition: ({ scrollContainer }) => ([scrollContainer.scrollLeft, scrollContainer.scrollTop]),
   * });
   */

  /**
   * Expand the range of the scroll check area. (default: 0)
   * @name Moveable.Scrollable#scrollThreshold
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *   scrollable: true,
   *   scrollContainer: document.body,
   *   scrollThreshold: 0,
   *   getScrollPosition: ({ scrollContainer }) => ([scrollContainer.scrollLeft, scrollContainer.scrollTop]),
   * });
   */

  /**
   * Sets a function to get the scroll position. (default: Function)
   * @name Moveable.Scrollable#getScrollPosition
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *   scrollable: true,
   *   scrollContainer: document.body,
   *   scrollThreshold: 0,
   *   getScrollPosition: ({ scrollContainer }) => ([scrollContainer.scrollLeft, scrollContainer.scrollTop]),
   * });
   *
   */

  /**
   * When the drag cursor leaves the scrollContainer, the `scroll` event occur to scroll.
   * @memberof Moveable.Scrollable
   * @event scroll
   * @param {Moveable.Scrollable.OnScroll} - Parameters for the `scroll` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: document.querySelector(".target"),
   * });
   * moveable.on("scroll", ({ scrollContainer, direction }) => {
   *   scrollContainer.scrollLeft += direction[0] * 10;
   *   scrollContainer.scrollTop += direction[1] * 10;
   * });
   */

  /**
   * When the drag cursor leaves the scrollContainer, the `scrollGroup` event occur to scroll in group.
   * @memberof Moveable.Scrollable
   * @event scrollGroup
   * @param {Moveable.Scrollable.OnScrollGroup} - Parameters for the `scrollGroup` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: [].slice.call(document.querySelectorAll(".target")),
   * });
   * moveable.on("scroll", ({ scrollContainer, direction }) => {
   *   scrollContainer.scrollLeft += direction[0] * 10;
   *   scrollContainer.scrollTop += direction[1] * 10;
   * });
   */

  var Default = {
    name: "",
    props: {
      target: Object,
      dragTarget: Object,
      container: Object,
      portalContainer: Object,
      rootContainer: Object,
      zoom: Number,
      transformOrigin: Array,
      edge: Boolean,
      ables: Array,
      className: String,
      pinchThreshold: Number,
      pinchOutside: Boolean,
      triggerAblesSimultaneously: Boolean,
      checkInput: Boolean,
      cspNonce: String,
      translateZ: Number,
      props: Object
    },
    events: {}
  };

  var Padding = {
    name: "padding",
    props: {
      padding: Object
    },
    events: {},
    render: function (moveable, React) {
      var props = moveable.props;

      if (props.dragArea) {
        return [];
      }

      var padding = props.padding || {};
      var _a = padding.left,
          left = _a === void 0 ? 0 : _a,
          _b = padding.top,
          top = _b === void 0 ? 0 : _b,
          _c = padding.right,
          right = _c === void 0 ? 0 : _c,
          _d = padding.bottom,
          bottom = _d === void 0 ? 0 : _d;
      var _e = moveable.state,
          renderPoses = _e.renderPoses,
          pos1 = _e.pos1,
          pos2 = _e.pos2,
          pos3 = _e.pos3,
          pos4 = _e.pos4;
      var poses = [pos1, pos2, pos3, pos4];
      var paddingDirections = [];

      if (left > 0) {
        paddingDirections.push([0, 2]);
      }

      if (top > 0) {
        paddingDirections.push([0, 1]);
      }

      if (right > 0) {
        paddingDirections.push([1, 3]);
      }

      if (bottom > 0) {
        paddingDirections.push([2, 3]);
      }

      return paddingDirections.map(function (_a, i) {
        var dir1 = _a[0],
            dir2 = _a[1];
        var paddingPos1 = poses[dir1];
        var paddingPos2 = poses[dir2];
        var paddingPos3 = renderPoses[dir1];
        var paddingPos4 = renderPoses[dir2];
        var h = createWarpMatrix([0, 0], [100, 0], [0, 100], [100, 100], paddingPos1, paddingPos2, paddingPos3, paddingPos4);

        if (!h.length) {
          return undefined;
        }

        return React.createElement("div", {
          key: "padding" + i,
          className: prefix("padding"),
          style: {
            transform: makeMatrixCSS(h, true)
          }
        });
      });
    }
  };
  /**
   * Add padding around the target to increase the drag area. (default: null)
   * @name Moveable#padding
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *  target: document.querySelector(".target"),
   *  padding: { left: 0, top: 0, right: 0, bottom: 0 },
   * });
   * moveable.padding = { left: 10, top: 10, right: 10, bottom: 10 },
   * moveable.updateRect();
   */

  var RADIUS_DIRECTIONS = ["nw", "ne", "se", "sw"];

  function calculateRatio(values, size) {
    var sumSize = values[0] + values[1];
    var sumRatio = sumSize > size ? size / sumSize : 1;
    values[0] *= sumRatio;
    values[1] = size - values[1] * sumRatio;
    return values;
  }

  var HORIZONTAL_RADIUS_ORDER = [1, 2, 5, 6];
  var VERTICAL_RADIUS_ORDER = [0, 3, 4, 7];
  var HORIZONTAL_RADIUS_DIRECTIONS = [1, -1, -1, 1];
  var VERTICAL_RADIUS_DIRECTIONS = [1, 1, -1, -1];
  function getRadiusStyles(poses, controlPoses, isRelative, width, height, left, top, right, bottom) {
    if (left === void 0) {
      left = 0;
    }

    if (top === void 0) {
      top = 0;
    }

    if (right === void 0) {
      right = width;
    }

    if (bottom === void 0) {
      bottom = height;
    }

    var clipStyles = [];
    var isVertical = false;
    var raws = poses.map(function (pos, i) {
      var _a = controlPoses[i],
          horizontal = _a.horizontal,
          vertical = _a.vertical;

      if (vertical && !isVertical) {
        isVertical = true;
        clipStyles.push("/");
      }

      if (isVertical) {
        var rawPos = Math.max(0, vertical === 1 ? pos[1] - top : bottom - pos[1]);
        clipStyles.push(convertCSSSize(rawPos, height, isRelative));
        return rawPos;
      } else {
        var rawPos = Math.max(0, horizontal === 1 ? pos[0] - left : right - pos[0]);
        clipStyles.push(convertCSSSize(rawPos, width, isRelative));
        return rawPos;
      }
    });
    return {
      styles: clipStyles,
      raws: raws
    };
  }
  function getRadiusRange(controlPoses) {
    // [start, length]
    var horizontalRange = [0, 0];
    var verticalRange = [0, 0];
    var length = controlPoses.length;

    for (var i = 0; i < length; ++i) {
      var clipPose = controlPoses[i];

      if (!clipPose.sub) {
        continue;
      }

      if (clipPose.horizontal) {
        if (horizontalRange[1] === 0) {
          horizontalRange[0] = i;
        }

        horizontalRange[1] = i - horizontalRange[0] + 1;
        verticalRange[0] = i + 1;
      }

      if (clipPose.vertical) {
        if (verticalRange[1] === 0) {
          verticalRange[0] = i;
        }

        verticalRange[1] = i - verticalRange[0] + 1;
      }
    }

    return {
      horizontalRange: horizontalRange,
      verticalRange: verticalRange
    };
  }
  function getRadiusValues(values, width, height, left, top, minCounts) {
    var _a, _b, _c, _d;

    if (minCounts === void 0) {
      minCounts = [0, 0];
    }

    var splitIndex = values.indexOf("/");
    var splitLength = (splitIndex > -1 ? values.slice(0, splitIndex) : values).length;
    var horizontalValues = values.slice(0, splitLength);
    var verticalValues = values.slice(splitLength + 1);
    var _e = horizontalValues[0],
        nwValue = _e === void 0 ? "0px" : _e,
        _f = horizontalValues[1],
        neValue = _f === void 0 ? nwValue : _f,
        _g = horizontalValues[2],
        seValue = _g === void 0 ? nwValue : _g,
        _h = horizontalValues[3],
        swValue = _h === void 0 ? neValue : _h;
    var _j = verticalValues[0],
        wnValue = _j === void 0 ? nwValue : _j,
        _k = verticalValues[1],
        enValue = _k === void 0 ? wnValue : _k,
        _l = verticalValues[2],
        esValue = _l === void 0 ? wnValue : _l,
        _m = verticalValues[3],
        wsValue = _m === void 0 ? enValue : _m;
    var horizontalRawPoses = [nwValue, neValue, seValue, swValue].map(function (pos) {
      return convertUnitSize(pos, width);
    });
    var verticalRawPoses = [wnValue, enValue, esValue, wsValue].map(function (pos) {
      return convertUnitSize(pos, height);
    });
    var horizontalPoses = horizontalRawPoses.slice();
    var verticalPoses = verticalRawPoses.slice();
    _a = calculateRatio([horizontalPoses[0], horizontalPoses[1]], width), horizontalPoses[0] = _a[0], horizontalPoses[1] = _a[1];
    _b = calculateRatio([horizontalPoses[3], horizontalPoses[2]], width), horizontalPoses[3] = _b[0], horizontalPoses[2] = _b[1];
    _c = calculateRatio([verticalPoses[0], verticalPoses[3]], height), verticalPoses[0] = _c[0], verticalPoses[3] = _c[1];
    _d = calculateRatio([verticalPoses[1], verticalPoses[2]], height), verticalPoses[1] = _d[0], verticalPoses[2] = _d[1];
    var nextHorizontalPoses = horizontalPoses.slice(0, Math.max(minCounts[0], horizontalValues.length));
    var nextVerticalPoses = verticalPoses.slice(0, Math.max(minCounts[1], verticalValues.length));
    return __spreadArrays$1(nextHorizontalPoses.map(function (pos, i) {
      var direction = RADIUS_DIRECTIONS[i];
      return {
        horizontal: HORIZONTAL_RADIUS_DIRECTIONS[i],
        vertical: 0,
        pos: [left + pos, top + (VERTICAL_RADIUS_DIRECTIONS[i] === -1 ? height : 0)],
        sub: true,
        raw: horizontalRawPoses[i],
        direction: direction
      };
    }), nextVerticalPoses.map(function (pos, i) {
      var direction = RADIUS_DIRECTIONS[i];
      return {
        horizontal: 0,
        vertical: VERTICAL_RADIUS_DIRECTIONS[i],
        pos: [left + (HORIZONTAL_RADIUS_DIRECTIONS[i] === -1 ? width : 0), top + pos],
        sub: true,
        raw: verticalRawPoses[i],
        direction: direction
      };
    }));
  }
  function removeRadiusPos(controlPoses, poses, index, startIndex, length) {
    if (length === void 0) {
      length = poses.length;
    }

    var _a = getRadiusRange(controlPoses.slice(startIndex)),
        horizontalRange = _a.horizontalRange,
        verticalRange = _a.verticalRange;

    var radiuslIndex = index - startIndex;
    var deleteCount = 0;

    if (radiuslIndex === 0) {
      deleteCount = length;
    } else if (radiuslIndex > 0 && radiuslIndex < horizontalRange[1]) {
      deleteCount = horizontalRange[1] - radiuslIndex;
    } else if (radiuslIndex >= verticalRange[0]) {
      deleteCount = verticalRange[0] + verticalRange[1] - radiuslIndex;
    } else {
      return;
    }

    controlPoses.splice(index, deleteCount);
    poses.splice(index, deleteCount);
  }
  function addRadiusPos(controlPoses, poses, startIndex, horizontalIndex, verticalIndex, distX, distY, right, bottom, left, top) {
    if (left === void 0) {
      left = 0;
    }

    if (top === void 0) {
      top = 0;
    }

    var _a = getRadiusRange(controlPoses.slice(startIndex)),
        horizontalRange = _a.horizontalRange,
        verticalRange = _a.verticalRange;

    if (horizontalIndex > -1) {
      var radiusX = HORIZONTAL_RADIUS_DIRECTIONS[horizontalIndex] === 1 ? distX - left : right - distX;

      for (var i = horizontalRange[1]; i <= horizontalIndex; ++i) {
        var y = VERTICAL_RADIUS_DIRECTIONS[i] === 1 ? top : bottom;
        var x = 0;

        if (horizontalIndex === i) {
          x = distX;
        } else if (i === 0) {
          x = left + radiusX;
        } else if (HORIZONTAL_RADIUS_DIRECTIONS[i] === -1) {
          x = right - (poses[startIndex][0] - left);
        }

        controlPoses.splice(startIndex + i, 0, {
          horizontal: HORIZONTAL_RADIUS_DIRECTIONS[i],
          vertical: 0,
          pos: [x, y]
        });
        poses.splice(startIndex + i, 0, [x, y]);

        if (i === 0) {
          break;
        }
      }
    } else if (verticalIndex > -1) {
      var radiusY = VERTICAL_RADIUS_DIRECTIONS[verticalIndex] === 1 ? distY - top : bottom - distY;

      if (horizontalRange[1] === 0 && verticalRange[1] === 0) {
        var pos = [left + radiusY, top];
        controlPoses.push({
          horizontal: HORIZONTAL_RADIUS_DIRECTIONS[0],
          vertical: 0,
          pos: pos
        });
        poses.push(pos);
      }

      var startVerticalIndex = verticalRange[0];

      for (var i = verticalRange[1]; i <= verticalIndex; ++i) {
        var x = HORIZONTAL_RADIUS_DIRECTIONS[i] === 1 ? left : right;
        var y = 0;

        if (verticalIndex === i) {
          y = distY;
        } else if (i === 0) {
          y = top + radiusY;
        } else if (VERTICAL_RADIUS_DIRECTIONS[i] === 1) {
          y = poses[startIndex + startVerticalIndex][1];
        } else if (VERTICAL_RADIUS_DIRECTIONS[i] === -1) {
          y = bottom - (poses[startIndex + startVerticalIndex][1] - top);
        }

        controlPoses.push({
          horizontal: 0,
          vertical: VERTICAL_RADIUS_DIRECTIONS[i],
          pos: [x, y]
        });
        poses.push([x, y]);

        if (i === 0) {
          break;
        }
      }
    }
  }
  function splitRadiusPoses(controlPoses, raws) {
    if (raws === void 0) {
      raws = controlPoses.map(function (pos) {
        return pos.raw;
      });
    }

    var horizontals = controlPoses.map(function (pos, i) {
      return pos.horizontal ? raws[i] : null;
    }).filter(function (pos) {
      return pos != null;
    });
    var verticals = controlPoses.map(function (pos, i) {
      return pos.vertical ? raws[i] : null;
    }).filter(function (pos) {
      return pos != null;
    });
    return {
      horizontals: horizontals,
      verticals: verticals
    };
  }

  var CLIP_DIRECTIONS = [[0, -1, "n"], [1, 0, "e"]];
  var CLIP_RECT_DIRECTIONS = [[-1, -1, "nw"], [0, -1, "n"], [1, -1, "ne"], [1, 0, "e"], [1, 1, "se"], [0, 1, "s"], [-1, 1, "sw"], [-1, 0, "w"]]; // 1 2 5 6 0 3 4 7
  // 0 1 2 3 4 5 6 7

  function getClipStyles(moveable, clipPath, poses) {
    var clipRelative = moveable.props.clipRelative;
    var _a = moveable.state,
        width = _a.width,
        height = _a.height;
    var _b = clipPath,
        clipType = _b.type,
        clipPoses = _b.poses;
    var isRect = clipType === "rect";
    var isCircle = clipType === "circle";

    if (clipType === "polygon") {
      return poses.map(function (pos) {
        return convertCSSSize(pos[0], width, clipRelative) + " " + convertCSSSize(pos[1], height, clipRelative);
      });
    } else if (isRect || clipType === "inset") {
      var top = poses[1][1];
      var right = poses[3][0];
      var left = poses[7][0];
      var bottom = poses[5][1];

      if (isRect) {
        return [top, right, bottom, left].map(function (pos) {
          return pos + "px";
        });
      }

      var clipStyles = [top, width - right, height - bottom, left].map(function (pos, i) {
        return convertCSSSize(pos, i % 2 ? width : height, clipRelative);
      });

      if (poses.length > 8) {
        var _c = minus(poses[4], poses[0]),
            subWidth = _c[0],
            subHeight = _c[1];

        clipStyles.push.apply(clipStyles, __spreadArrays$1(["round"], getRadiusStyles(poses.slice(8), clipPoses.slice(8), clipRelative, subWidth, subHeight, left, top, right, bottom).styles));
      }

      return clipStyles;
    } else if (isCircle || clipType === "ellipse") {
      var center = poses[0];
      var ry = convertCSSSize(Math.abs(poses[1][1] - center[1]), isCircle ? Math.sqrt((width * width + height * height) / 2) : height, clipRelative);
      var clipStyles = isCircle ? [ry] : [convertCSSSize(Math.abs(poses[2][0] - center[0]), width, clipRelative), ry];
      clipStyles.push("at", convertCSSSize(center[0], width, clipRelative), convertCSSSize(center[1], height, clipRelative));
      return clipStyles;
    }
  }

  function getRectPoses(top, right, bottom, left) {
    var xs = [left, (left + right) / 2, right];
    var ys = [top, (top + bottom) / 2, bottom];
    return CLIP_RECT_DIRECTIONS.map(function (_a) {
      var dirx = _a[0],
          diry = _a[1],
          dir = _a[2];
      var x = xs[dirx + 1];
      var y = ys[diry + 1];
      return {
        vertical: Math.abs(diry),
        horizontal: Math.abs(dirx),
        direction: dir,
        pos: [x, y]
      };
    });
  }

  function getClipPath(target, width, height, defaultClip, customClip) {
    var _a, _b, _c, _d, _e, _f, _g;

    var clipText = customClip;

    if (!clipText) {
      var style = getComputedStyle(target);
      var clipPath = style.clipPath;
      clipText = clipPath !== "none" ? clipPath : style.clip;
    }

    if (!clipText || clipText === "none" || clipText === "auto") {
      clipText = defaultClip;

      if (!clipText) {
        return;
      }
    }

    var _h = splitBracket(clipText),
        _j = _h.prefix,
        clipPrefix = _j === void 0 ? clipText : _j,
        _k = _h.value,
        value = _k === void 0 ? "" : _k;

    var isCircle = clipPrefix === "circle";
    var splitter = " ";

    if (clipPrefix === "polygon") {
      var values = splitComma(value || "0% 0%, 100% 0%, 100% 100%, 0% 100%");
      splitter = ",";
      var poses = values.map(function (pos) {
        var _a = pos.split(" "),
            xPos = _a[0],
            yPos = _a[1];

        return {
          vertical: 1,
          horizontal: 1,
          pos: [convertUnitSize(xPos, width), convertUnitSize(yPos, height)]
        };
      });
      return {
        type: clipPrefix,
        clipText: clipText,
        poses: poses,
        splitter: splitter
      };
    } else if (isCircle || clipPrefix === "ellipse") {
      var xPos = "";
      var yPos = "";
      var radiusX_1 = 0;
      var radiusY_1 = 0;
      var values = splitSpace(value);

      if (isCircle) {
        var radius = "";
        _a = values[0], radius = _a === void 0 ? "50%" : _a, _b = values[2], xPos = _b === void 0 ? "50%" : _b, _c = values[3], yPos = _c === void 0 ? "50%" : _c;
        radiusX_1 = convertUnitSize(radius, Math.sqrt((width * width + height * height) / 2));
        radiusY_1 = radiusX_1;
      } else {
        var xRadius = "";
        var yRadius = "";
        _d = values[0], xRadius = _d === void 0 ? "50%" : _d, _e = values[1], yRadius = _e === void 0 ? "50%" : _e, _f = values[3], xPos = _f === void 0 ? "50%" : _f, _g = values[4], yPos = _g === void 0 ? "50%" : _g;
        radiusX_1 = convertUnitSize(xRadius, width);
        radiusY_1 = convertUnitSize(yRadius, height);
      }

      var centerPos_1 = [convertUnitSize(xPos, width), convertUnitSize(yPos, height)];

      var poses = __spreadArrays$1([{
        vertical: 1,
        horizontal: 1,
        pos: centerPos_1,
        direction: "nesw"
      }], CLIP_DIRECTIONS.slice(0, isCircle ? 1 : 2).map(function (dir) {
        return {
          vertical: Math.abs(dir[1]),
          horizontal: dir[0],
          direction: dir[2],
          sub: true,
          pos: [centerPos_1[0] + dir[0] * radiusX_1, centerPos_1[1] + dir[1] * radiusY_1]
        };
      }));

      return {
        type: clipPrefix,
        clipText: clipText,
        radiusX: radiusX_1,
        radiusY: radiusY_1,
        left: centerPos_1[0] - radiusX_1,
        top: centerPos_1[1] - radiusY_1,
        poses: poses,
        splitter: splitter
      };
    } else if (clipPrefix === "inset") {
      var values = splitSpace(value || "0 0 0 0");
      var roundIndex = values.indexOf("round");
      var rectLength = (roundIndex > -1 ? values.slice(0, roundIndex) : values).length;
      var radiusValues = values.slice(rectLength + 1);

      var _l = values.slice(0, rectLength),
          topValue = _l[0],
          _m = _l[1],
          rightValue = _m === void 0 ? topValue : _m,
          _o = _l[2],
          bottomValue = _o === void 0 ? topValue : _o,
          _p = _l[3],
          leftValue = _p === void 0 ? rightValue : _p;

      var _q = [topValue, bottomValue].map(function (pos) {
        return convertUnitSize(pos, height);
      }),
          top = _q[0],
          bottom = _q[1];

      var _r = [leftValue, rightValue].map(function (pos) {
        return convertUnitSize(pos, width);
      }),
          left = _r[0],
          right = _r[1];

      var nextRight = width - right;
      var nextBottom = height - bottom;
      var radiusPoses = getRadiusValues(radiusValues, nextRight - left, nextBottom - top, left, top);

      var poses = __spreadArrays$1(getRectPoses(top, nextRight, nextBottom, left), radiusPoses);

      return {
        type: "inset",
        clipText: clipText,
        poses: poses,
        top: top,
        left: left,
        right: nextRight,
        bottom: nextBottom,
        radius: radiusValues,
        splitter: splitter
      };
    } else if (clipPrefix === "rect") {
      // top right bottom left
      var values = splitComma(value || "0px, " + width + "px, " + height + "px, 0px");
      splitter = ",";

      var _s = values.map(function (pos) {
        var posValue = splitUnit(pos).value;
        return posValue;
      }),
          top = _s[0],
          right = _s[1],
          bottom = _s[2],
          left = _s[3];

      var poses = getRectPoses(top, right, bottom, left);
      return {
        type: "rect",
        clipText: clipText,
        poses: poses,
        top: top,
        right: right,
        bottom: bottom,
        left: left,
        values: values,
        splitter: splitter
      };
    }

    return;
  }

  function addClipPath(moveable, e) {
    var _a = calculatePointerDist(moveable, e),
        distX = _a[0],
        distY = _a[1];

    var _b = e.datas,
        clipPath = _b.clipPath,
        index = _b.index;
    var _c = clipPath,
        clipType = _c.type,
        clipPoses = _c.poses,
        splitter = _c.splitter;
    var poses = clipPoses.map(function (pos) {
      return pos.pos;
    });

    if (clipType === "polygon") {
      poses.splice(index, 0, [distX, distY]);
    } else if (clipType === "inset") {
      var horizontalIndex = HORIZONTAL_RADIUS_ORDER.indexOf(index);
      var verticalIndex = VERTICAL_RADIUS_ORDER.indexOf(index);
      var length = clipPoses.length;
      addRadiusPos(clipPoses, poses, 8, horizontalIndex, verticalIndex, distX, distY, poses[4][0], poses[4][1], poses[0][0], poses[0][1]);

      if (length === clipPoses.length) {
        return;
      }
    } else {
      return;
    }

    var clipStyles = getClipStyles(moveable, clipPath, poses);
    triggerEvent(moveable, "onClip", fillParams(moveable, e, {
      clipEventType: "added",
      clipType: clipType,
      poses: poses,
      clipStyles: clipStyles,
      clipStyle: clipType + "(" + clipStyles.join(splitter) + ")",
      distX: 0,
      distY: 0
    }));
  }

  function removeClipPath(moveable, e) {
    var _a = e.datas,
        clipPath = _a.clipPath,
        index = _a.index;
    var _b = clipPath,
        clipType = _b.type,
        clipPoses = _b.poses,
        splitter = _b.splitter;
    var poses = clipPoses.map(function (pos) {
      return pos.pos;
    });
    var length = poses.length;

    if (clipType === "polygon") {
      clipPoses.splice(index, 1);
      poses.splice(index, 1);
    } else if (clipType === "inset") {
      if (index < 8) {
        return;
      }

      removeRadiusPos(clipPoses, poses, index, 8, length);

      if (length === clipPoses.length) {
        return;
      }
    } else {
      return;
    }

    var clipStyles = getClipStyles(moveable, clipPath, poses);
    triggerEvent(moveable, "onClip", fillParams(moveable, e, {
      clipEventType: "removed",
      clipType: clipType,
      poses: poses,
      clipStyles: clipStyles,
      clipStyle: clipType + "(" + clipStyles.join(splitter) + ")",
      distX: 0,
      distY: 0
    }));
  }
  /**
   * @namespace Moveable.Clippable
   * @description Whether to clip the target.
   */


  var Clippable = {
    name: "clippable",
    props: {
      clippable: Boolean,
      defaultClipPath: String,
      customClipPath: String,
      clipRelative: Boolean,
      clipArea: Boolean,
      dragWithClip: Boolean,
      clipTargetBounds: Boolean,
      clipVerticalGuidelines: Array,
      clipHorizontalGuidelines: Array,
      clipSnapThreshold: Boolean
    },
    events: {
      onClipStart: "clipStart",
      onClip: "clip",
      onClipEnd: "clipEnd"
    },
    css: [".control.clip-control {\n    background: #6d6;\n    cursor: pointer;\n}\n.control.clip-control.clip-radius {\n    background: #d66;\n}\n.line.clip-line {\n    background: #6e6;\n    cursor: move;\n    z-index: 1;\n}\n.clip-area {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n.clip-ellipse {\n    position: absolute;\n    cursor: move;\n    border: 1px solid #6d6;\n    border: var(--zoompx) solid #6d6;\n    border-radius: 50%;\n    transform-origin: 0px 0px;\n}", ":host {\n    --bounds-color: #d66;\n}", ".guideline {\n    pointer-events: none;\n    z-index: 2;\n}", ".line.guideline.bounds {\n    background: #d66;\n    background: var(--bounds-color);\n}"],
    render: function (moveable, React) {
      var _a = moveable.props,
          customClipPath = _a.customClipPath,
          defaultClipPath = _a.defaultClipPath,
          clipArea = _a.clipArea,
          zoom = _a.zoom;
      var _b = moveable.state,
          target = _b.target,
          width = _b.width,
          height = _b.height,
          allMatrix = _b.allMatrix,
          is3d = _b.is3d,
          left = _b.left,
          top = _b.top,
          pos1 = _b.pos1,
          pos2 = _b.pos2,
          pos3 = _b.pos3,
          pos4 = _b.pos4,
          clipPathState = _b.clipPathState,
          snapBoundInfos = _b.snapBoundInfos;

      if (!target) {
        return [];
      }

      var clipPath = getClipPath(target, width, height, defaultClipPath || "inset", clipPathState || customClipPath);

      if (!clipPath) {
        return [];
      }

      var n = is3d ? 4 : 3;
      var type = clipPath.type;
      var clipPoses = clipPath.poses;
      var poses = clipPoses.map(function (pos) {
        // return [x, y];
        var calculatedPos = calculatePosition(allMatrix, pos.pos, n);
        return [calculatedPos[0] - left, calculatedPos[1] - top];
      });
      var controls = [];
      var lines = [];
      var isRect = type === "rect";
      var isInset = type === "inset";
      var isPolygon = type === "polygon";

      if (isRect || isInset || isPolygon) {
        var linePoses_1 = isInset ? poses.slice(0, 8) : poses;
        lines = linePoses_1.map(function (to, i) {
          var from = i === 0 ? linePoses_1[linePoses_1.length - 1] : linePoses_1[i - 1];
          var rad = getRad$1(from, to);
          var dist = getDiagonalSize(from, to);
          return React.createElement("div", {
            key: "clipLine" + i,
            className: prefix("line", "clip-line", "snap-control"),
            "data-clip-index": i,
            style: {
              width: dist + "px",
              transform: "translate(" + from[0] + "px, " + from[1] + "px) rotate(" + rad + "rad) scaleY(" + zoom + ")"
            }
          });
        });
      }

      controls = poses.map(function (pos, i) {
        return React.createElement("div", {
          key: "clipControl" + i,
          className: prefix("control", "clip-control", "snap-control"),
          "data-clip-index": i,
          style: {
            transform: "translate(" + pos[0] + "px, " + pos[1] + "px) scale(" + zoom + ")"
          }
        });
      });

      if (isInset) {
        controls.push.apply(controls, poses.slice(8).map(function (pos, i) {
          return React.createElement("div", {
            key: "clipRadiusControl" + i,
            className: prefix("control", "clip-control", "clip-radius", "snap-control"),
            "data-clip-index": 8 + i,
            style: {
              transform: "translate(" + pos[0] + "px, " + pos[1] + "px) scale(" + zoom + ")"
            }
          });
        }));
      }

      if (type === "circle" || type === "ellipse") {
        var clipLeft = clipPath.left,
            clipTop = clipPath.top,
            radiusX = clipPath.radiusX,
            radiusY = clipPath.radiusY;

        var _c = minus(calculatePosition(allMatrix, [clipLeft, clipTop], n), calculatePosition(allMatrix, [0, 0], n)),
            distLeft = _c[0],
            distTop = _c[1];

        var ellipseClipPath = "none";

        if (!clipArea) {
          var piece = Math.max(10, radiusX / 5, radiusY / 5);
          var areaPoses = [];

          for (var i = 0; i <= piece; ++i) {
            var rad = Math.PI * 2 / piece * i;
            areaPoses.push([radiusX + (radiusX - zoom) * Math.cos(rad), radiusY + (radiusY - zoom) * Math.sin(rad)]);
          }

          areaPoses.push([radiusX, -2]);
          areaPoses.push([-2, -2]);
          areaPoses.push([-2, radiusY * 2 + 2]);
          areaPoses.push([radiusX * 2 + 2, radiusY * 2 + 2]);
          areaPoses.push([radiusX * 2 + 2, -2]);
          areaPoses.push([radiusX, -2]);
          ellipseClipPath = "polygon(" + areaPoses.map(function (pos) {
            return pos[0] + "px " + pos[1] + "px";
          }).join(", ") + ")";
        }

        controls.push(React.createElement("div", {
          key: "clipEllipse",
          className: prefix("clip-ellipse", "snap-control"),
          style: {
            width: radiusX * 2 + "px",
            height: radiusY * 2 + "px",
            clipPath: ellipseClipPath,
            transform: "translate(" + (-left + distLeft) + "px, " + (-top + distTop) + "px) " + makeMatrixCSS(allMatrix)
          }
        }));
      }

      if (clipArea) {
        var _d = getRect(__spreadArrays$1([pos1, pos2, pos3, pos4], poses)),
            allWidth = _d.width,
            allHeight = _d.height,
            allLeft_1 = _d.left,
            allTop_1 = _d.top;

        if (isPolygon || isRect || isInset) {
          var areaPoses = isInset ? poses.slice(0, 8) : poses;
          controls.push(React.createElement("div", {
            key: "clipArea",
            className: prefix("clip-area", "snap-control"),
            style: {
              width: allWidth + "px",
              height: allHeight + "px",
              transform: "translate(" + allLeft_1 + "px, " + allTop_1 + "px)",
              clipPath: "polygon(" + areaPoses.map(function (pos) {
                return pos[0] - allLeft_1 + "px " + (pos[1] - allTop_1) + "px";
              }).join(", ") + ")"
            }
          }));
        }
      }

      if (snapBoundInfos) {
        ["vertical", "horizontal"].forEach(function (directionType) {
          var info = snapBoundInfos[directionType];
          var isHorizontal = directionType === "horizontal";

          if (info.isSnap) {
            lines.push.apply(lines, info.snap.posInfos.map(function (_a, i) {
              var pos = _a.pos;
              var snapPos1 = minus(calculatePosition(allMatrix, isHorizontal ? [0, pos] : [pos, 0], n), [left, top]);
              var snapPos2 = minus(calculatePosition(allMatrix, isHorizontal ? [width, pos] : [pos, height], n), [left, top]);
              return renderLine(React, "", snapPos1, snapPos2, zoom, "clip" + directionType + "snap" + i, "guideline");
            }));
          }

          if (info.isBound) {
            lines.push.apply(lines, info.bounds.map(function (_a, i) {
              var pos = _a.pos;
              var snapPos1 = minus(calculatePosition(allMatrix, isHorizontal ? [0, pos] : [pos, 0], n), [left, top]);
              var snapPos2 = minus(calculatePosition(allMatrix, isHorizontal ? [width, pos] : [pos, height], n), [left, top]);
              return renderLine(React, "", snapPos1, snapPos2, zoom, "clip" + directionType + "bounds" + i, "guideline", "bounds", "bold");
            }));
          }
        });
      }

      return __spreadArrays$1(controls, lines);
    },
    dragControlCondition: function (e) {
      return e.inputEvent && (e.inputEvent.target.getAttribute("class") || "").indexOf("clip") > -1;
    },
    dragStart: function (moveable, e) {
      var props = moveable.props;
      var _a = props.dragWithClip,
          dragWithClip = _a === void 0 ? true : _a;

      if (dragWithClip) {
        return false;
      }

      return this.dragControlStart(moveable, e);
    },
    drag: function (moveable, e) {
      return this.dragControl(moveable, e);
    },
    dragEnd: function (moveable, e) {
      return this.dragControlEnd(moveable, e);
    },
    dragControlStart: function (moveable, e) {
      var state = moveable.state;
      var _a = moveable.props,
          defaultClipPath = _a.defaultClipPath,
          customClipPath = _a.customClipPath;
      var target = state.target,
          width = state.width,
          height = state.height;
      var inputTarget = e.inputEvent ? e.inputEvent.target : null;
      var className = inputTarget ? inputTarget.getAttribute("class") : "";
      var datas = e.datas;
      var clipPath = getClipPath(target, width, height, defaultClipPath || "inset", customClipPath);

      if (!clipPath) {
        return false;
      }

      var clipText = clipPath.clipText,
          type = clipPath.type,
          poses = clipPath.poses;
      var result = triggerEvent(moveable, "onClipStart", fillParams(moveable, e, {
        clipType: type,
        clipStyle: clipText,
        poses: poses.map(function (pos) {
          return pos.pos;
        })
      }));

      if (result === false) {
        datas.isClipStart = false;
        return false;
      }

      datas.isControl = className.indexOf("clip-control") > -1;
      datas.isLine = className.indexOf("clip-line") > -1;
      datas.isArea = className.indexOf("clip-area") > -1 || className.indexOf("clip-ellipse") > -1;
      datas.index = inputTarget ? parseInt(inputTarget.getAttribute("data-clip-index"), 10) : -1;
      datas.clipPath = clipPath;
      datas.isClipStart = true;
      state.clipPathState = clipText;
      setDragStart(moveable, e);
      return true;
    },
    dragControl: function (moveable, e) {
      var datas = e.datas,
          originalDatas = e.originalDatas;

      if (!datas.isClipStart) {
        return false;
      }

      var draggableData = originalDatas && originalDatas.draggable || {};
      var _a = datas,
          isControl = _a.isControl,
          isLine = _a.isLine,
          isArea = _a.isArea,
          index = _a.index,
          clipPath = _a.clipPath;

      if (!clipPath) {
        return false;
      }

      var _b = draggableData.isDrag ? draggableData.prevDist : getDragDist(e),
          distX = _b[0],
          distY = _b[1];

      var props = moveable.props;
      var state = moveable.state;
      var width = state.width,
          height = state.height;
      var isDragWithTarget = !isArea && !isControl && !isLine;
      var clipType = clipPath.type,
          clipPoses = clipPath.poses,
          splitter = clipPath.splitter;
      var poses = clipPoses.map(function (pos) {
        return pos.pos;
      });

      if (isDragWithTarget) {
        distX = -distX;
        distY = -distY;
      }

      var isAll = !isControl || clipPoses[index].direction === "nesw";
      var isRect = clipType === "inset" || clipType === "rect";
      var dists = clipPoses.map(function () {
        return [0, 0];
      });

      if (isControl && !isAll) {
        var _c = clipPoses[index],
            horizontal = _c.horizontal,
            vertical = _c.vertical;
        var dist = [distX * Math.abs(horizontal), distY * Math.abs(vertical)];
        dists = moveControlPos(clipPoses, index, dist, isRect);
      } else if (isAll) {
        dists = poses.map(function () {
          return [distX, distY];
        });
      }

      var nextPoses = poses.map(function (pos, i) {
        return plus(pos, dists[i]);
      });

      var guidePoses = __spreadArrays$1(nextPoses);

      state.snapBoundInfos = null;
      var isCircle = clipPath.type === "circle";
      var isEllipse = clipPath.type === "ellipse";

      if (isCircle || isEllipse) {
        var guideRect = getRect(nextPoses);
        var ry = Math.abs(guideRect.bottom - guideRect.top);
        var rx = Math.abs(isEllipse ? guideRect.right - guideRect.left : ry);
        var bottom = nextPoses[0][1] + ry;
        var left = nextPoses[0][0] - rx;
        var right = nextPoses[0][0] + rx; // right

        if (isCircle) {
          guidePoses.push([right, guideRect.bottom]);
          dists.push([1, 0]);
        } // bottom


        guidePoses.push([guideRect.left, bottom]);
        dists.push([0, 1]); // left

        guidePoses.push([left, guideRect.bottom]);
        dists.push([1, 0]);
      }

      var guidelines = addGuidelines([], width, height, (props.clipHorizontalGuidelines || []).map(function (v) {
        return convertUnitSize("" + v, height);
      }), (props.clipVerticalGuidelines || []).map(function (v) {
        return convertUnitSize("" + v, width);
      }));
      var guideXPoses = [];
      var guideYPoses = [];

      if (isCircle || isEllipse) {
        guideXPoses = [guidePoses[4][0], guidePoses[2][0]];
        guideYPoses = [guidePoses[1][1], guidePoses[3][1]];
      } else if (isRect) {
        var rectPoses = [guidePoses[0], guidePoses[2], guidePoses[4], guidePoses[6]];
        var rectDists_1 = [dists[0], dists[2], dists[4], dists[6]];
        guideXPoses = rectPoses.filter(function (_, i) {
          return rectDists_1[i][0];
        }).map(function (pos) {
          return pos[0];
        });
        guideYPoses = rectPoses.filter(function (_, i) {
          return rectDists_1[i][1];
        }).map(function (pos) {
          return pos[1];
        });
      } else {
        guideXPoses = guidePoses.filter(function (_, i) {
          return dists[i][0];
        }).map(function (pos) {
          return pos[0];
        });
        guideYPoses = guidePoses.filter(function (_, i) {
          return dists[i][1];
        }).map(function (pos) {
          return pos[1];
        });
      }

      var _loop_1 = function (i) {
        var _a = checkSnapBounds(guidelines, props.clipTargetBounds && {
          left: 0,
          top: 0,
          right: width,
          bottom: height
        }, guideXPoses, guideYPoses, {
          snapThreshold: 5
        }),
            horizontalSnapInfo = _a.horizontal,
            verticalSnapInfo = _a.vertical;

        var snapOffsetY = horizontalSnapInfo.offset;
        var snapOffsetX = verticalSnapInfo.offset;

        if ((isEllipse || isCircle) && dists[0][0] === 0 && dists[0][1] === 0) {
          var guideRect = getRect(nextPoses);
          var cy = guideRect.bottom - guideRect.top;
          var cx = isEllipse ? guideRect.right - guideRect.left : cy;
          var distSnapX = verticalSnapInfo.isBound ? Math.abs(snapOffsetX) : verticalSnapInfo.snapIndex === 0 ? -snapOffsetX : snapOffsetX;
          var distSnapY = horizontalSnapInfo.isBound ? Math.abs(snapOffsetY) : horizontalSnapInfo.snapIndex === 0 ? -snapOffsetY : snapOffsetY;
          cx -= distSnapX;
          cy -= distSnapY;

          if (isCircle) {
            cy = checkSnapBoundPriority(verticalSnapInfo, horizontalSnapInfo) > 0 ? cy : cx;
            cx = cy;
          }

          var center = guidePoses[0];
          guidePoses[1][1] = center[1] - cy;
          guidePoses[2][0] = center[0] + cx;
          guidePoses[3][1] = center[1] + cy;
          guidePoses[4][0] = center[0] - cx;
        } else {
          guidePoses.forEach(function (pos, j) {
            var dist = dists[j];

            if (dist[0]) {
              pos[0] -= snapOffsetX;
            }

            if (dist[1]) {
              pos[1] -= snapOffsetY;
            }
          });
          return "break";
        }
      };

      for (var i = 0; i < 2; ++i) {
        var state_1 = _loop_1();

        if (state_1 === "break") break;
      }

      var nextClipStyles = getClipStyles(moveable, clipPath, nextPoses);
      var clipStyle = clipType + "(" + nextClipStyles.join(splitter) + ")";
      state.clipPathState = clipStyle;

      if (isCircle || isEllipse) {
        guideXPoses = [guidePoses[4][0], guidePoses[2][0]];
        guideYPoses = [guidePoses[1][1], guidePoses[3][1]];
      } else if (isRect) {
        var rectPoses = [guidePoses[0], guidePoses[2], guidePoses[4], guidePoses[6]];
        guideXPoses = rectPoses.map(function (pos) {
          return pos[0];
        });
        guideYPoses = rectPoses.map(function (pos) {
          return pos[1];
        });
      } else {
        guideXPoses = guidePoses.map(function (pos) {
          return pos[0];
        });
        guideYPoses = guidePoses.map(function (pos) {
          return pos[1];
        });
      }

      state.snapBoundInfos = checkSnapBounds(guidelines, props.clipTargetBounds && {
        left: 0,
        top: 0,
        right: width,
        bottom: height
      }, guideXPoses, guideYPoses, {
        snapThreshold: 1
      });
      triggerEvent(moveable, "onClip", fillParams(moveable, e, {
        clipEventType: "changed",
        clipType: clipType,
        poses: nextPoses,
        clipStyle: clipStyle,
        clipStyles: nextClipStyles,
        distX: distX,
        distY: distY
      }));
      return true;
    },
    dragControlEnd: function (moveable, e) {
      this.unset(moveable);
      var isDrag = e.isDrag,
          datas = e.datas,
          isDouble = e.isDouble;
      var isLine = datas.isLine,
          isClipStart = datas.isClipStart,
          isControl = datas.isControl;

      if (!isClipStart) {
        return false;
      }

      triggerEvent(moveable, "onClipEnd", fillEndParams(moveable, e, {}));

      if (isDouble) {
        if (isControl) {
          removeClipPath(moveable, e);
        } else if (isLine) {
          // add
          addClipPath(moveable, e);
        }
      }

      return isDouble || isDrag;
    },
    unset: function (moveable) {
      moveable.state.clipPathState = "";
      moveable.state.snapBoundInfos = null;
    }
  };
  /**
   * Whether to clip the target. (default: false)
   * @name Moveable.Clippable#clippable
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     clippable: true,
   *     defaultClipPath: "inset",
   *     customClipPath: "",
   *     clipRelative: false,
   *     clipArea: false,
   *     dragWithClip: true,
   * });
   * moveable.on("clipStart", e => {
   *     console.log(e);
   * }).on("clip", e => {
   *     if (e.clipType === "rect") {
   *         e.target.style.clip = e.clipStyle;
   *     } else {
   *         e.target.style.clipPath = e.clipStyle;
   *     }
   * }).on("clipEnd", e => {
   *     console.log(e);
   * });
   */

  /**
   *  If clippath is not set, the default value can be set. (defaultClipPath < style < customClipPath < dragging clipPath)
   * @name Moveable.Clippable#defaultClipPath
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     clippable: true,
   *     defaultClipPath: "inset",
   *     customClipPath: "",
   *     clipRelative: false,
   *     clipArea: false,
   *     dragWithClip: true,
   * });
   * moveable.on("clipStart", e => {
   *     console.log(e);
   * }).on("clip", e => {
   *     if (e.clipType === "rect") {
   *         e.target.style.clip = e.clipStyle;
   *     } else {
   *         e.target.style.clipPath = e.clipStyle;
   *     }
   * }).on("clipEnd", e => {
   *     console.log(e);
   * });
   */

  /**
   * % Can be used instead of the absolute px (`rect` not possible) (default: false)
   * @name Moveable.Clippable#clipRelative
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     clippable: true,
   *     defaultClipPath: "inset",
   *     customClipPath: "",
   *     clipRelative: false,
   *     clipArea: false,
   *     dragWithClip: true,
   * });
   * moveable.on("clipStart", e => {
   *     console.log(e);
   * }).on("clip", e => {
   *     if (e.clipType === "rect") {
   *         e.target.style.clip = e.clipStyle;
   *     } else {
   *         e.target.style.clipPath = e.clipStyle;
   *     }
   * }).on("clipEnd", e => {
   *     console.log(e);
   * });
   */

  /**
   * You can force the custom clipPath. (defaultClipPath < style < customClipPath < dragging clipPath)
   * @name Moveable.Clippable#customClipPath
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     clippable: true,
   *     defaultClipPath: "inset",
   *     customClipPath: "",
   *     clipRelative: false,
   *     clipArea: false,
   *     dragWithClip: true,
   * });
   * moveable.on("clipStart", e => {
   *     console.log(e);
   * }).on("clip", e => {
   *     if (e.clipType === "rect") {
   *         e.target.style.clip = e.clipStyle;
   *     } else {
   *         e.target.style.clipPath = e.clipStyle;
   *     }
   * }).on("clipEnd", e => {
   *     console.log(e);
   * });
   */

  /**
   * When dragging the target, the clip also moves. (default: true)
   * @name Moveable.Clippable#dragWithClip
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     clippable: true,
   *     defaultClipPath: "inset",
   *     customClipPath: "",
   *     clipRelative: false,
   *     clipArea: false,
   *     dragWithClip: true,
   * });
   * moveable.on("clipStart", e => {
   *     console.log(e);
   * }).on("clip", e => {
   *     if (e.clipType === "rect") {
   *         e.target.style.clip = e.clipStyle;
   *     } else {
   *         e.target.style.clipPath = e.clipStyle;
   *     }
   * }).on("clipEnd", e => {
   *     console.log(e);
   * });
   */

  /**
   * You can drag the clip by setting clipArea. (default: false)
   * @name Moveable.Clippable#clipArea
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     clippable: true,
   *     defaultClipPath: "inset",
   *     customClipPath: "",
   *     clipRelative: false,
   *     clipArea: false,
   *     dragWithClip: true,
   * });
   * moveable.on("clipStart", e => {
   *     console.log(e);
   * }).on("clip", e => {
   *     if (e.clipType === "rect") {
   *         e.target.style.clip = e.clipStyle;
   *     } else {
   *         e.target.style.clipPath = e.clipStyle;
   *     }
   * }).on("clipEnd", e => {
   *     console.log(e);
   * });
   */

  /**
  * Whether the clip is bound to the target. (default: false)
  * @name Moveable.Clippable#clipTargetBounds
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, {
  *     clippable: true,
  *     defaultClipPath: "inset",
  *     customClipPath: "",
  *     clipRelative: false,
  *     clipArea: false,
  *     dragWithClip: true,
  *     clipTargetBounds: true,
  * });
  * moveable.on("clipStart", e => {
  *     console.log(e);
  * }).on("clip", e => {
  *     if (e.clipType === "rect") {
  *         e.target.style.clip = e.clipStyle;
  *     } else {
  *         e.target.style.clipPath = e.clipStyle;
  *     }
  * }).on("clipEnd", e => {
  *     console.log(e);
  * });
  */

  /**
  * Add clip guidelines in the vertical direction. (default: [])
  * @name Moveable.Clippable#clipVerticalGuidelines
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, {
  *     clippable: true,
  *     defaultClipPath: "inset",
  *     customClipPath: "",
  *     clipRelative: false,
  *     clipArea: false,
  *     dragWithClip: true,
  *     clipVerticalGuidelines: [0, 100, 200],
  *     clipHorizontalGuidelines: [0, 100, 200],
  *     clipSnapThreshold: 5,
  * });
  */

  /**
  * Add clip guidelines in the horizontal direction. (default: [])
  * @name Moveable.Clippable#clipHorizontalGuidelines
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, {
  *     clippable: true,
  *     defaultClipPath: "inset",
  *     customClipPath: "",
  *     clipRelative: false,
  *     clipArea: false,
  *     dragWithClip: true,
  *     clipVerticalGuidelines: [0, 100, 200],
  *     clipHorizontalGuidelines: [0, 100, 200],
  *     clipSnapThreshold: 5,
  * });
  */

  /**
  * istance value that can snap to clip guidelines. (default: 5)
  * @name Moveable.Clippable#clipSnapThreshold
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, {
  *     clippable: true,
  *     defaultClipPath: "inset",
  *     customClipPath: "",
  *     clipRelative: false,
  *     clipArea: false,
  *     dragWithClip: true,
  *     clipVerticalGuidelines: [0, 100, 200],
  *     clipHorizontalGuidelines: [0, 100, 200],
  *     clipSnapThreshold: 5,
  * });
  */

  /**
   * When drag start the clip area or controls, the `clipStart` event is called.
   * @memberof Moveable.Clippable
   * @event clipStart
   * @param {Moveable.Clippable.OnClipStart} - Parameters for the `clipStart` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     clippable: true,
   *     defaultClipPath: "inset",
   *     customClipPath: "",
   *     clipRelative: false,
   *     clipArea: false,
   *     dragWithClip: true,
   * });
   * moveable.on("clipStart", e => {
   *     console.log(e);
   * }).on("clip", e => {
   *     if (e.clipType === "rect") {
   *         e.target.style.clip = e.clipStyle;
   *     } else {
   *         e.target.style.clipPath = e.clipStyle;
   *     }
   * }).on("clipEnd", e => {
   *     console.log(e);
   * });
   */

  /**
   * When drag the clip area or controls, the `clip` event is called.
   * @memberof Moveable.Clippable
   * @event clip
   * @param {Moveable.Clippable.OnClip} - Parameters for the `clip` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     clippable: true,
   *     defaultClipPath: "inset",
   *     customClipPath: "",
   *     clipRelative: false,
   *     clipArea: false,
   *     dragWithClip: true,
   * });
   * moveable.on("clipStart", e => {
   *     console.log(e);
   * }).on("clip", e => {
   *     if (e.clipType === "rect") {
   *         e.target.style.clip = e.clipStyle;
   *     } else {
   *         e.target.style.clipPath = e.clipStyle;
   *     }
   * }).on("clipEnd", e => {
   *     console.log(e);
   * });
   */

  /**
   * When drag end the clip area or controls, the `clipEnd` event is called.
   * @memberof Moveable.Clippable
   * @event clipEnd
   * @param {Moveable.Clippable.OnClipEnd} - Parameters for the `clipEnd` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     clippable: true,
   *     defaultClipPath: "inset",
   *     customClipPath: "",
   *     clipRelative: false,
   *     clipArea: false,
   *     dragWithClip: true,
   * });
   * moveable.on("clipStart", e => {
   *     console.log(e);
   * }).on("clip", e => {
   *     if (e.clipType === "rect") {
   *         e.target.style.clip = e.clipStyle;
   *     } else {
   *         e.target.style.clipPath = e.clipStyle;
   *     }
   * }).on("clipEnd", e => {
   *     console.log(e);
   * });
   */

  /**
   * @namespace OriginDraggable
   * @memberof Moveable
   * @description Whether to drag origin (default: false)
   */

  var OriginDraggable = {
    name: "originDraggable",
    props: {
      originDraggable: Boolean,
      originRelative: Boolean
    },
    events: {
      onDragOriginStart: "dragOriginStart",
      onDragOrigin: "dragOrigin",
      onDragOriginEnd: "dragOriginEnd"
    },
    css: [":host[data-able-origindraggable] .control.origin {\n    pointer-events: auto;\n}"],
    dragControlCondition: function (e) {
      if (e.isRequest) {
        return e.requestAble === "originDraggable";
      }

      return hasClass(e.inputEvent.target, prefix("origin"));
    },
    dragControlStart: function (moveable, e) {
      var datas = e.datas;
      setDragStart(moveable, e);
      var params = fillParams(moveable, e, {
        dragStart: Draggable.dragStart(moveable, new CustomGesto().dragStart([0, 0], e))
      });
      var result = triggerEvent(moveable, "onDragOriginStart", params);
      datas.startOrigin = moveable.state.transformOrigin;
      datas.startTargetOrigin = moveable.state.targetOrigin;
      datas.prevOrigin = [0, 0];
      datas.isDragOrigin = true;

      if (result === false) {
        datas.isDragOrigin = false;
        return false;
      }

      return params;
    },
    dragControl: function (moveable, e) {
      var datas = e.datas,
          isPinch = e.isPinch,
          isRequest = e.isRequest;

      if (!datas.isDragOrigin) {
        return false;
      }

      var _a = getDragDist(e),
          distX = _a[0],
          distY = _a[1];

      var state = moveable.state;
      var width = state.width,
          height = state.height,
          offsetMatrix = state.offsetMatrix,
          targetMatrix = state.targetMatrix,
          is3d = state.is3d;
      var _b = moveable.props.originRelative,
          originRelative = _b === void 0 ? true : _b;
      var n = is3d ? 4 : 3;
      var dist = [distX, distY];

      if (isRequest) {
        var distOrigin = e.distOrigin;

        if (distOrigin[0] || distOrigin[1]) {
          dist = distOrigin;
        }
      }

      var origin = plus(datas.startOrigin, dist);
      var targetOrigin = plus(datas.startTargetOrigin, dist);
      var delta = minus(dist, datas.prevOrigin);
      var nextMatrix = getNextMatrix(offsetMatrix, targetMatrix, origin, n);
      var rect = moveable.getRect();
      var nextRect = getRect(calculatePoses(nextMatrix, width, height, n));
      var dragDelta = [rect.left - nextRect.left, rect.top - nextRect.top];
      datas.prevOrigin = dist;
      var transformOrigin = [convertCSSSize(targetOrigin[0], width, originRelative), convertCSSSize(targetOrigin[1], height, originRelative)].join(" ");
      var params = fillParams(moveable, e, {
        width: width,
        height: height,
        origin: origin,
        dist: dist,
        delta: delta,
        transformOrigin: transformOrigin,
        drag: Draggable.drag(moveable, setCustomDrag(e, moveable.state, dragDelta, !!isPinch, false))
      });
      triggerEvent(moveable, "onDragOrigin", params);
      return params;
    },
    dragControlEnd: function (moveable, e) {
      var datas = e.datas;

      if (!datas.isDragOrigin) {
        return false;
      }

      triggerEvent(moveable, "onDragOriginEnd", fillEndParams(moveable, e, {}));
      return true;
    },
    dragGroupControlCondition: function (e) {
      return this.dragControlCondition(e);
    },
    dragGroupControlStart: function (moveable, e) {
      var params = this.dragControlStart(moveable, e);

      if (!params) {
        return false;
      }

      return true;
    },
    dragGroupControl: function (moveable, e) {
      var params = this.dragControl(moveable, e);

      if (!params) {
        return false;
      }

      moveable.transformOrigin = params.transformOrigin;
      return true;
    },

    /**
    * @method Moveable.OriginDraggable#request
    * @param {object} e - the OriginDraggable's request parameter
    * @param {number} [e.x] - x position
    * @param {number} [e.y] - y position
    * @param {number} [e.deltaX] - x number to move
    * @param {number} [e.deltaY] - y number to move
    * @param {array} [e.deltaOrigin] - left, top number to move transform-origin
    * @param {array} [e.origin] - transform-origin position
    * @param {number} [e.isInstant] - Whether to execute the request instantly
    * @return {Moveable.Requester} Moveable Requester
    * @example
     * // Instantly Request (requestStart - request - requestEnd)
    * // Use Relative Value
    * moveable.request("originDraggable", { deltaX: 10, deltaY: 10 }, true);
    * // Use Absolute Value
    * moveable.request("originDraggable", { x: 200, y: 100 }, true);
    * // Use Transform Value
    * moveable.request("originDraggable", { deltaOrigin: [10, 0] }, true);
    * moveable.request("originDraggable", { origin: [100, 0] }, true);
    * // requestStart
    * const requester = moveable.request("originDraggable");
    *
    * // request
    * // Use Relative Value
    * requester.request({ deltaX: 10, deltaY: 10 });
    * requester.request({ deltaX: 10, deltaY: 10 });
    * requester.request({ deltaX: 10, deltaY: 10 });
    * // Use Absolute Value
    * moveable.request("originDraggable", { x: 200, y: 100 });
    * moveable.request("originDraggable", { x: 220, y: 100 });
    * moveable.request("originDraggable", { x: 240, y: 100 });
    *
    * // requestEnd
    * requester.requestEnd();
    */
    request: function (moveable) {
      var datas = {};
      var rect = moveable.getRect();
      var distX = 0;
      var distY = 0;
      var transformOrigin = rect.transformOrigin;
      var distOrigin = [0, 0];
      return {
        isControl: true,
        requestStart: function () {
          return {
            datas: datas
          };
        },
        request: function (e) {
          if ("deltaOrigin" in e) {
            distOrigin[0] += e.deltaOrigin[0];
            distOrigin[1] += e.deltaOrigin[1];
          } else if ("origin" in e) {
            distOrigin[0] = e.origin[0] - transformOrigin[0];
            distOrigin[1] = e.origin[1] - transformOrigin[1];
          } else {
            if ("x" in e) {
              distX = e.x - rect.left;
            } else if ("deltaX" in e) {
              distX += e.deltaX;
            }

            if ("y" in e) {
              distY = e.y - rect.top;
            } else if ("deltaY" in e) {
              distY += e.deltaY;
            }
          }

          return {
            datas: datas,
            distX: distX,
            distY: distY,
            distOrigin: distOrigin
          };
        },
        requestEnd: function () {
          return {
            datas: datas,
            isDrag: true
          };
        }
      };
    }
  };
  /**
   * Whether to drag origin (default: false)
   * @name Moveable.OriginDraggable#originDraggable
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     originDraggable: true,
   * });
   * let translate = [0, 0];
   * moveable.on("dragOriginStart", e => {
   *     e.dragStart && e.dragStart.set(translate);
   * }).on("dragOrigin", e => {
   *     translate = e.drag.beforeTranslate;
   *     e.target.style.cssText
   *         = `transform-origin: ${e.transformOrigin};`
   *         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;
   * }).on("dragOriginEnd", e => {
   *     console.log(e);
   * });
   */

  /**
   * % Can be used instead of the absolute px (default: true)
   * @name Moveable.OriginDraggable#originRelative
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     originDraggable: true,
   *     originRelative: false,
   * });
   * moveable.originRelative = true;
   */

  /**
  * When drag start the origin, the `dragOriginStart` event is called.
  * @memberof Moveable.OriginDraggable
  * @event dragOriginStart
  * @param {Moveable.OriginDraggable.OnDragOriginStart} - Parameters for the `dragOriginStart` event
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, {
  *     originDraggable: true,
  * });
  * let translate = [0, 0];
  * moveable.on("dragOriginStart", e => {
  *     e.dragStart && e.dragStart.set(translate);
  * }).on("dragOrigin", e => {
  *     translate = e.drag.beforeTranslate;
  *     e.target.style.cssText
  *         = `transform-origin: ${e.transformOrigin};`
  *         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;
  * }).on("dragOriginEnd", e => {
  *     console.log(e);
  * });
  */

  /**
  * When drag the origin, the `dragOrigin` event is called.
  * @memberof Moveable.OriginDraggable
  * @event dragOrigin
  * @param {Moveable.OriginDraggable.OnDragOrigin} - Parameters for the `dragOrigin` event
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, {
  *     originDraggable: true,
  * });
  * let translate = [0, 0];
  * moveable.on("dragOriginStart", e => {
  *     e.dragStart && e.dragStart.set(translate);
  * }).on("dragOrigin", e => {
  *     translate = e.drag.beforeTranslate;
  *     e.target.style.cssText
  *         = `transform-origin: ${e.transformOrigin};`
  *         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;
  * }).on("dragOriginEnd", e => {
  *     console.log(e);
  * });
  */

  /**
  * When drag end the origin, the `dragOriginEnd` event is called.
  * @memberof Moveable.OriginDraggable
  * @event dragOriginEnd
  * @param {Moveable.OriginDraggable.OnDragOriginEnd} - Parameters for the `dragOriginEnd` event
  * @example
  * import Moveable from "moveable";
  *
  * const moveable = new Moveable(document.body, {
  *     originDraggable: true,
  * });
  * let translate = [0, 0];
  * moveable.on("dragOriginStart", e => {
  *     e.dragStart && e.dragStart.set(translate);
  * }).on("dragOrigin", e => {
  *     translate = e.drag.beforeTranslate;
  *     e.target.style.cssText
  *         = `transform-origin: ${e.transformOrigin};`
  *         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;
  * }).on("dragOriginEnd", e => {
  *     console.log(e);
  * });
  */

  function addBorderRadius(controlPoses, poses, lineIndex, distX, distY, width, height) {
    var _a = splitRadiusPoses(controlPoses),
        horizontals = _a.horizontals,
        verticals = _a.verticals;

    var horizontalsLength = horizontals.length;
    var verticalsLength = verticals.length; // lineIndex
    // 0 top
    // 1 right
    // 2 left
    // 3 bottom
    // 0 top - left
    // 1 top - right
    // 2 bottom - right
    // 3 bottom - left
    // 0 left - top
    // 1 right - top
    // 2 right - bottom
    // 3 left - bottom

    var horizontalIndex = -1;
    var verticalIndex = -1;

    if (lineIndex === 0) {
      if (horizontalsLength === 0) {
        horizontalIndex = 0;
      } else if (horizontalsLength === 1) {
        horizontalIndex = 1;
      }
    } else if (lineIndex === 3) {
      if (horizontalsLength <= 2) {
        horizontalIndex = 2;
      } else if (horizontalsLength <= 3) {
        horizontalIndex = 3;
      }
    }

    if (lineIndex === 2) {
      if (verticalsLength === 0) {
        verticalIndex = 0;
      } else if (verticalsLength < 4) {
        verticalIndex = 3;
      }
    } else if (lineIndex === 1) {
      if (verticalsLength <= 1) {
        verticalIndex = 1;
      } else if (verticalsLength <= 2) {
        verticalIndex = 2;
      }
    }

    addRadiusPos(controlPoses, poses, 0, horizontalIndex, verticalIndex, distX, distY, width, height);
  }

  function getBorderRadius(target, width, height, minCounts, state) {
    if (minCounts === void 0) {
      minCounts = [0, 0];
    }

    var borderRadius;
    var values = [];

    if (!state) {
      var style = window.getComputedStyle(target);
      borderRadius = style && style.borderRadius || "";
    } else {
      borderRadius = state;
    }

    if (!borderRadius || !state && borderRadius === "0px") {
      values = [];
    } else {
      values = splitSpace(borderRadius);
    }

    return getRadiusValues(values, width, height, 0, 0, minCounts);
  }

  function triggerRoundEvent(moveable, e, dist, delta, controlPoses, nextPoses) {
    var state = moveable.state;
    var width = state.width,
        height = state.height;

    var _a = getRadiusStyles(nextPoses, controlPoses, moveable.props.roundRelative, width, height),
        raws = _a.raws,
        styles = _a.styles;

    var _b = splitRadiusPoses(controlPoses, raws),
        horizontals = _b.horizontals,
        verticals = _b.verticals;

    var borderRadius = styles.join(" ");
    state.borderRadiusState = borderRadius;
    triggerEvent(moveable, "onRound", fillParams(moveable, e, {
      horizontals: horizontals,
      verticals: verticals,
      borderRadius: borderRadius,
      width: width,
      height: height,
      delta: delta,
      dist: dist
    }));
  }
  /**
   * @namespace Moveable.Roundable
   * @description Whether to show and drag or double click border-radius
   */


  var Roundable = {
    name: "roundable",
    props: {
      roundable: Boolean,
      roundRelative: Boolean,
      minRoundControls: Array,
      maxRoundControls: Array,
      roundClickable: Boolean
    },
    events: {
      onRoundStart: "roundStart",
      onRound: "round",
      onRoundEnd: "roundEnd"
    },
    css: [".control.border-radius {\n    background: #d66;\n    cursor: pointer;\n}", ":host[data-able-roundable] .line.direction {\n    cursor: pointer;\n}"],
    render: function (moveable, React) {
      var _a = moveable.state,
          target = _a.target,
          width = _a.width,
          height = _a.height,
          allMatrix = _a.allMatrix,
          is3d = _a.is3d,
          left = _a.left,
          top = _a.top,
          borderRadiusState = _a.borderRadiusState;
      var _b = moveable.props,
          _c = _b.minRoundControls,
          minRoundControls = _c === void 0 ? [0, 0] : _c,
          _d = _b.maxRoundControls,
          maxRoundControls = _d === void 0 ? [4, 4] : _d,
          zoom = _b.zoom;

      if (!target) {
        return null;
      }

      var n = is3d ? 4 : 3;
      var radiusValues = getBorderRadius(target, width, height, minRoundControls, borderRadiusState);

      if (!radiusValues) {
        return null;
      }

      var verticalCount = 0;
      var horizontalCount = 0;
      return radiusValues.map(function (v, i) {
        horizontalCount += Math.abs(v.horizontal);
        verticalCount += Math.abs(v.vertical);
        var pos = minus(calculatePosition(allMatrix, v.pos, n), [left, top]);
        var isDisplay = v.vertical ? verticalCount <= maxRoundControls[1] : horizontalCount <= maxRoundControls[0];
        return React.createElement("div", {
          key: "borderRadiusControl" + i,
          className: prefix("control", "border-radius"),
          "data-radius-index": i,
          style: {
            display: isDisplay ? "block" : "none",
            transform: "translate(" + pos[0] + "px, " + pos[1] + "px) scale(" + zoom + ")"
          }
        });
      });
    },
    dragControlCondition: function (e) {
      if (!e.inputEvent || e.isRequest) {
        return false;
      }

      var className = e.inputEvent.target.getAttribute("class") || "";
      return className.indexOf("border-radius") > -1 || className.indexOf("moveable-line") > -1 && className.indexOf("moveable-direction") > -1;
    },
    dragControlStart: function (moveable, e) {
      var inputEvent = e.inputEvent,
          datas = e.datas;
      var inputTarget = inputEvent.target;
      var className = inputTarget.getAttribute("class") || "";
      var isControl = className.indexOf("border-radius") > -1;
      var isLine = className.indexOf("moveable-line") > -1 && className.indexOf("moveable-direction") > -1;
      var controlIndex = isControl ? parseInt(inputTarget.getAttribute("data-radius-index"), 10) : -1;
      var lineIndex = isLine ? parseInt(inputTarget.getAttribute("data-line-index"), 10) : -1;

      if (!isControl && !isLine) {
        return false;
      }

      var result = triggerEvent(moveable, "onRoundStart", fillParams(moveable, e, {}));

      if (result === false) {
        return false;
      }

      datas.lineIndex = lineIndex;
      datas.controlIndex = controlIndex;
      datas.isControl = isControl;
      datas.isLine = isLine;
      setDragStart(moveable, e);
      var _a = moveable.props,
          roundRelative = _a.roundRelative,
          _b = _a.minRoundControls,
          minRoundControls = _b === void 0 ? [0, 0] : _b;
      var state = moveable.state;
      var target = state.target,
          width = state.width,
          height = state.height;
      datas.isRound = true;
      datas.prevDist = [0, 0];
      var controlPoses = getBorderRadius(target, width, height, minRoundControls) || [];
      datas.controlPoses = controlPoses;
      state.borderRadiusState = getRadiusStyles(controlPoses.map(function (pos) {
        return pos.pos;
      }), controlPoses, roundRelative, width, height).styles.join(" ");
      return true;
    },
    dragControl: function (moveable, e) {
      var datas = e.datas;

      if (!datas.isRound || !datas.isControl || !datas.controlPoses.length) {
        return false;
      }

      var index = datas.controlIndex;
      var controlPoses = datas.controlPoses;

      var _a = getDragDist(e),
          distX = _a[0],
          distY = _a[1];

      var dist = [distX, distY];
      var delta = minus(dist, datas.prevDist);
      var _b = moveable.props.maxRoundControls,
          maxRoundControls = _b === void 0 ? [4, 4] : _b;
      var _c = moveable.state,
          width = _c.width,
          height = _c.height;
      var selectedControlPose = controlPoses[index];
      var selectedVertical = selectedControlPose.vertical;
      var selectedHorizontal = selectedControlPose.horizontal; // 0: [0, 1, 2, 3] maxCount === 1
      // 0: [0, 2] maxCount === 2
      // 1: [1, 3] maxCount === 2
      // 0: [0] maxCount === 3
      // 1: [1, 3] maxCount === 3

      var dists = controlPoses.map(function (pose) {
        var horizontal = pose.horizontal,
            vertical = pose.vertical;
        var poseDist = [horizontal * selectedHorizontal * dist[0], vertical * selectedVertical * dist[1]];

        if (horizontal) {
          if (maxRoundControls[0] === 1) {
            return poseDist;
          } else if (maxRoundControls[0] < 4 && horizontal !== selectedHorizontal) {
            return poseDist;
          }
        } else if (maxRoundControls[1] === 0) {
          poseDist[1] = vertical * selectedHorizontal * dist[0] / width * height;
          return poseDist;
        } else if (selectedVertical) {
          if (maxRoundControls[1] === 1) {
            return poseDist;
          } else if (maxRoundControls[1] < 4 && vertical !== selectedVertical) {
            return poseDist;
          }
        }

        return [0, 0];
      });
      dists[index] = dist;
      var nextPoses = controlPoses.map(function (pos, i) {
        return plus(pos.pos, dists[i]);
      });
      datas.prevDist = [distX, distY];
      triggerRoundEvent(moveable, e, dist, delta, controlPoses, nextPoses);
      return true;
    },
    dragControlEnd: function (moveable, e) {
      var state = moveable.state;
      state.borderRadiusState = "";
      var datas = e.datas,
          isDouble = e.isDouble;

      if (!datas.isRound) {
        return false;
      }

      var width = state.width,
          height = state.height;
      var isControl = datas.isControl,
          controlIndex = datas.controlIndex,
          isLine = datas.isLine,
          lineIndex = datas.lineIndex;
      var controlPoses = datas.controlPoses;
      var poses = controlPoses.map(function (pos) {
        return pos.pos;
      });
      var length = poses.length;
      var _a = moveable.props.roundClickable,
          roundClickable = _a === void 0 ? true : _a;

      if (isDouble && roundClickable) {
        if (isControl) {
          removeRadiusPos(controlPoses, poses, controlIndex, 0);
        } else if (isLine) {
          var _b = calculatePointerDist(moveable, e),
              distX = _b[0],
              distY = _b[1];

          addBorderRadius(controlPoses, poses, lineIndex, distX, distY, width, height);
        }

        if (length !== controlPoses.length) {
          triggerRoundEvent(moveable, e, [0, 0], [0, 0], controlPoses, poses);
        }

        triggerEvent(moveable, "onRoundEnd", fillEndParams(moveable, e, {}));
      }

      state.borderRadiusState = "";
      return true;
    },
    unset: function (moveable) {
      moveable.state.borderRadiusState = "";
    }
  };
  /**
   * Whether to show and drag or double click border-radius, (default: false)
   * @name Moveable.Roundable#roundable
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     roundable: true,
   *     roundRelative: false,
   * });
   * moveable.on("roundStart", e => {
   *     console.log(e);
   * }).on("round", e => {
   *     e.target.style.borderRadius = e.borderRadius;
   * }).on("roundEnd", e => {
   *     console.log(e);
   * });
   */

  /**
   * % Can be used instead of the absolute px
   * @name Moveable.Roundable#roundRelative
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     roundable: true,
   *     roundRelative: false,
   * });
   * moveable.on("roundStart", e => {
   *     console.log(e);
   * }).on("round", e => {
   *     e.target.style.borderRadius = e.borderRadius;
   * }).on("roundEnd", e => {
   *     console.log(e);
   * });
   */

  /**
   * Minimum number of round controls. It moves in proportion by control. [horizontal, vertical] (default: [0, 0])
   * @name Moveable.Roundable#minRoundControls
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     roundable: true,
   *     roundRelative: false,
   *     minRoundControls: [0, 0],
   * });
   * moveable.maxRoundControls = [1, 0];
   */

  /**
   * Maximum number of round controls. It moves in proportion by control. [horizontal, vertical] (default: [4, 4])
   * @name Moveable.Roundable#maxRoundControls
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     roundable: true,
   *     roundRelative: false,
   *     maxRoundControls: [4, 4],
   * });
   * moveable.maxRoundControls = [1, 0];
   */

  /**
   * @property - Whether you can add/delete round controls by double-clicking a line or control. (default: true)
   * @name Moveable.Roundable#roundClickable
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     roundable: true,
   *     roundRelative: false,
   *     roundClickable: true,
   * });
   * moveable.roundClickable = false;
   */

  /**
   * When drag start the clip area or controls, the `roundStart` event is called.
   * @memberof Moveable.Roundable
   * @event roundStart
   * @param {Moveable.Roundable.OnRoundStart} - Parameters for the `roundStart` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     roundable: true,
   *     roundRelative: false,
   * });
   * moveable.on("roundStart", e => {
   *     console.log(e);
   * }).on("round", e => {
   *     e.target.style.borderRadius = e.borderRadius;
   * }).on("roundEnd", e => {
   *     console.log(e);
   * });
   */

  /**
   * When drag or double click the border area or controls, the `round` event is called.
   * @memberof Moveable.Roundable
   * @event round
   * @param {Moveable.Roundable.OnRound} - Parameters for the `round` event
   * @example
    * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     roundable: true,
   *     roundRelative: false,
   * });
   * moveable.on("roundStart", e => {
   *     console.log(e);
   * }).on("round", e => {
   *     e.target.style.borderRadius = e.borderRadius;
   * }).on("roundEnd", e => {
   *     console.log(e);
   * });
   */

  /**
   * When drag end the border area or controls, the `roundEnd` event is called.
   * @memberof Moveable.Roundable
   * @event roundEnd
   * @param {Moveable.Roundable.onRoundEnd} - Parameters for the `roundEnd` event
   * @example
    * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     roundable: true,
   *     roundRelative: false,
   * });
   * moveable.on("roundStart", e => {
   *     console.log(e);
   * }).on("round", e => {
   *     e.target.style.borderRadius = e.borderRadius;
   * }).on("roundEnd", e => {
   *     console.log(e);
   * });
   */

  var BeforeRenderable = {
    isPinch: true,
    name: "beforeRenderable",
    props: {},
    events: {
      onBeforeRenderStart: "beforeRenderStart",
      onBeforeRender: "beforeRender",
      onBeforeRenderEnd: "beforeRenderEnd",
      onBeforeRenderGroupStart: "beforeRenderGroupStart",
      onBeforeRenderGroup: "beforeRenderGroup",
      onBeforeRenderGroupEnd: "beforeRenderGroupEnd"
    },
    setTransform: function (moveable, e) {
      var _a = moveable.state,
          is3d = _a.is3d,
          targetMatrix = _a.targetMatrix;
      var cssMatrix = is3d ? "matrix3d(" + targetMatrix.join(",") + ")" : "matrix(" + convertMatrixtoCSS(targetMatrix, true) + ")";
      e.datas.startTransforms = [cssMatrix];
    },
    resetTransform: function (moveable, e) {
      e.datas.nextTransforms = e.datas.startTransforms;
      e.datas.nextTransformAppendedIndexes = [];
    },
    fillDragStartParams: function (moveable, e) {
      return fillParams(moveable, e, {
        setTransform: function (transform) {
          e.datas.startTransforms = isArray(transform) ? transform : splitSpace(transform);
        },
        isPinch: !!e.isPinch
      });
    },
    fillDragParams: function (moveable, e) {
      return fillParams(moveable, e, {
        isPinch: !!e.isPinch
      });
    },
    dragStart: function (moveable, e) {
      this.setTransform(moveable, e);
      triggerEvent(moveable, "onBeforeRenderStart", this.fillDragStartParams(moveable, e));
    },
    drag: function (moveable, e) {
      this.resetTransform(moveable, e);
      triggerEvent(moveable, "onBeforeRender", fillParams(moveable, e, {
        isPinch: !!e.isPinch
      }));
    },
    dragEnd: function (moveable, e) {
      triggerEvent(moveable, "onBeforeRenderEnd", fillParams(moveable, e, {
        isPinch: !!e.isPinch,
        isDrag: e.isDrag
      }));
    },
    dragGroupStart: function (moveable, e) {
      var _this = this;

      this.dragStart(moveable, e);
      var events = fillChildEvents(moveable, "beforeRenderable", e);
      var moveables = moveable.moveables;
      var params = events.map(function (childEvent, i) {
        var childMoveable = moveables[i];

        _this.setTransform(childMoveable, childEvent);

        return _this.fillDragStartParams(childMoveable, childEvent);
      });
      triggerEvent(moveable, "onBeforeRenderGroupStart", fillParams(moveable, e, {
        isPinch: !!e.isPinch,
        targets: moveable.props.targets,
        setTransform: function () {},
        events: params
      }));
    },
    dragGroup: function (moveable, e) {
      var _this = this;

      this.drag(moveable, e);
      var events = fillChildEvents(moveable, "beforeRenderable", e);
      var moveables = moveable.moveables;
      var params = events.map(function (childEvent, i) {
        var childMoveable = moveables[i];

        _this.resetTransform(childMoveable, childEvent);

        return _this.fillDragParams(childMoveable, childEvent);
      });
      triggerEvent(moveable, "onBeforeRenderGroup", fillParams(moveable, e, {
        isPinch: !!e.isPinch,
        targets: moveable.props.targets,
        events: params
      }));
    },
    dragGroupEnd: function (moveable, e) {
      this.dragEnd(moveable, e);
      triggerEvent(moveable, "onBeforeRenderGroupEnd", fillParams(moveable, e, {
        isPinch: !!e.isPinch,
        isDrag: e.isDrag,
        targets: moveable.props.targets
      }));
    },
    dragControlStart: function (moveable, e) {
      return this.dragStart(moveable, e);
    },
    dragControl: function (moveable, e) {
      return this.drag(moveable, e);
    },
    dragControlEnd: function (moveable, e) {
      return this.dragEnd(moveable, e);
    },
    dragGroupControlStart: function (moveable, e) {
      return this.dragGroupStart(moveable, e);
    },
    dragGroupControl: function (moveable, e) {
      return this.dragGroup(moveable, e);
    },
    dragGroupControlEnd: function (moveable, e) {
      return this.dragGroupEnd(moveable, e);
    }
  };

  var Renderable = {
    name: "Renderable",
    props: {},
    events: {
      onRenderStart: "renderStart",
      onRender: "render",
      onRenderEnd: "renderEnd",
      onRenderGroupStart: "renderGroupStart",
      onRenderGroup: "renderGroup",
      onRenderGroupEnd: "renderGroupEnd"
    },
    dragStart: function (moveable, e) {
      triggerEvent(moveable, "onRenderStart", fillParams(moveable, e, {
        isPinch: !!e.isPinch
      }));
    },
    drag: function (moveable, e) {
      triggerEvent(moveable, "onRender", fillParams(moveable, e, {
        isPinch: !!e.isPinch
      }));
    },
    dragEnd: function (moveable, e) {
      triggerEvent(moveable, "onRenderEnd", fillParams(moveable, e, {
        isPinch: !!e.isPinch,
        isDrag: e.isDrag
      }));
    },
    dragGroupStart: function (moveable, e) {
      triggerEvent(moveable, "onRenderGroupStart", fillParams(moveable, e, {
        isPinch: !!e.isPinch,
        targets: moveable.props.targets
      }));
    },
    dragGroup: function (moveable, e) {
      triggerEvent(moveable, "onRenderGroup", fillParams(moveable, e, {
        isPinch: !!e.isPinch,
        targets: moveable.props.targets
      }));
    },
    dragGroupEnd: function (moveable, e) {
      triggerEvent(moveable, "onRenderGroupEnd", fillParams(moveable, e, {
        isPinch: !!e.isPinch,
        isDrag: e.isDrag,
        targets: moveable.props.targets
      }));
    },
    dragControlStart: function (moveable, e) {
      return this.dragStart(moveable, e);
    },
    dragControl: function (moveable, e) {
      return this.drag(moveable, e);
    },
    dragControlEnd: function (moveable, e) {
      return this.dragEnd(moveable, e);
    },
    dragGroupControlStart: function (moveable, e) {
      return this.dragGroupStart(moveable, e);
    },
    dragGroupControl: function (moveable, e) {
      return this.dragGroup(moveable, e);
    },
    dragGroupControlEnd: function (moveable, e) {
      return this.dragGroupEnd(moveable, e);
    }
  };

  function triggerAble(moveable, ableType, eventOperation, eventAffix, eventType, e, requestInstant) {
    var isStart = eventType === "Start";
    var target = moveable.state.target;
    var isRequest = e.isRequest;

    if (!target || isStart && eventAffix.indexOf("Control") > -1 && !isRequest && moveable.areaElement === e.inputEvent.target) {
      return false;
    }

    var eventName = "" + eventOperation + eventAffix + eventType;
    var conditionName = "" + eventOperation + eventAffix + "Condition";
    var isEnd = eventType === "End";
    var isAfter = eventType.indexOf("After") > -1;
    var isFirstStart = isStart && (!moveable.targetGesto || !moveable.controlGesto || !moveable.targetGesto.isFlag() || !moveable.controlGesto.isFlag());

    if (isFirstStart) {
      moveable.updateRect(eventType, true, false);
    }

    if (eventType === "" && !isAfter && !isRequest) {
      convertDragDist(moveable.state, e);
    }

    var isGroup = eventAffix.indexOf("Group") > -1;

    var ables = __spreadArrays$1([BeforeRenderable], moveable[ableType].slice(), [Renderable]);

    if (isRequest) {
      var requestAble_1 = e.requestAble;

      if (!ables.some(function (able) {
        return able.name === requestAble_1;
      })) {
        ables.push.apply(ables, moveable.props.ables.filter(function (able) {
          return able.name === requestAble_1;
        }));
      }
    }

    if (!ables.length) {
      return false;
    }

    var events = ables.filter(function (able) {
      return able[eventName];
    });
    var datas = e.datas;

    if (isFirstStart) {
      events.forEach(function (able) {
        able.unset && able.unset(moveable);
      });
    }

    var inputEvent = e.inputEvent;
    var inputTarget;

    if (isEnd && inputEvent) {
      inputTarget = document.elementFromPoint(e.clientX, e.clientY) || inputEvent.target;
    }

    var results = events.filter(function (able) {
      var ableName = able.name;
      var nextDatas = datas[ableName] || (datas[ableName] = {});

      if (isStart) {
        nextDatas.isEventStart = !able[conditionName] || able[conditionName](e, moveable);
      }

      if (nextDatas.isEventStart) {
        return able[eventName](moveable, __assign$2(__assign$2({}, e), {
          datas: nextDatas,
          originalDatas: datas,
          inputTarget: inputTarget
        }));
      }

      return false;
    });
    var isUpdate = results.length;
    var isForceEnd = isStart && events.length && !isUpdate;

    if (isEnd || isForceEnd) {
      moveable.state.gesto = null;

      if (moveable.moveables) {
        moveable.moveables.forEach(function (childMoveable) {
          childMoveable.state.gesto = null;
        });
      }
    }

    if (isFirstStart && isForceEnd) {
      events.forEach(function (able) {
        able.unset && able.unset(moveable);
      });
    }

    if (moveable.isUnmounted || isForceEnd) {
      return false;
    }

    if (!isStart && isUpdate && !requestInstant || isEnd) {
      if (results.some(function (able) {
        return able.updateRect;
      }) && !isGroup) {
        moveable.updateRect(eventType, false, false);
      } else {
        moveable.updateRect(eventType, true, false);
      }

      moveable.forceUpdate();
    }

    if (!isStart && !isEnd && !isAfter && isUpdate && !requestInstant) {
      triggerAble(moveable, ableType, eventOperation, eventAffix, eventType + "After", e);
    }

    return true;
  }
  function getTargetAbleGesto(moveable, moveableTarget, eventAffix) {
    var controlBox = moveable.controlBox.getElement();
    var targets = [];
    targets.push(controlBox);

    if (!moveable.props.dragArea || moveable.props.dragTarget) {
      targets.push(moveableTarget);
    }

    var startFunc = function (e) {
      var eventTarget = e.inputEvent.target;
      var areaElement = moveable.areaElement;
      return eventTarget === areaElement || !moveable.isMoveableElement(eventTarget) || hasClass(eventTarget, "moveable-area") || hasClass(eventTarget, "moveable-padding");
    };

    return getAbleGesto(moveable, targets, "targetAbles", eventAffix, {
      dragStart: startFunc,
      pinchStart: startFunc
    });
  }
  function getAbleGesto(moveable, target, ableType, eventAffix, conditionFunctions) {
    if (conditionFunctions === void 0) {
      conditionFunctions = {};
    }

    var _a = moveable.props,
        pinchOutside = _a.pinchOutside,
        pinchThreshold = _a.pinchThreshold;
    var options = {
      container: window,
      pinchThreshold: pinchThreshold,
      pinchOutside: pinchOutside
    };
    var gesto = new Gesto(target, options);
    ["drag", "pinch"].forEach(function (eventOperation) {
      ["Start", "", "End"].forEach(function (eventType) {
        gesto.on("" + eventOperation + eventType, function (e) {
          var eventName = e.eventType;

          if (conditionFunctions[eventName] && !conditionFunctions[eventName](e)) {
            e.stop();
            return;
          }

          var result = triggerAble(moveable, ableType, eventOperation, eventAffix, eventType, e);

          if (!result) {
            e.stop();
          }
        });
      });
    });
    return gesto;
  }

  var EventManager =
  /*#__PURE__*/
  function () {
    function EventManager(target, moveable, eventName) {
      var _this = this;

      this.target = target;
      this.moveable = moveable;
      this.eventName = eventName;
      this.ables = [];

      this.onEvent = function (e) {
        var eventName = _this.eventName;
        var moveable = _this.moveable;

        _this.ables.forEach(function (able) {
          able[eventName]({
            inputEvent: e
          }, moveable);
        });
      };

      this.target.addEventListener(this.eventName.toLowerCase(), this.onEvent);
    }

    var __proto = EventManager.prototype;

    __proto.setAbles = function (ables) {
      this.ables = ables;
    };

    __proto.destroy = function () {
      this.target.removeEventListener(this.eventName.toLowerCase(), this.onEvent);
      this.target = null;
      this.moveable = null;
    };

    return EventManager;
  }();

  var MoveableManager$1 =
  /*#__PURE__*/
  function (_super) {
    __extends$1(MoveableManager, _super);

    function MoveableManager() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.state = __assign$2({
        container: null,
        target: null,
        gesto: null,
        renderPoses: [[0, 0], [0, 0], [0, 0], [0, 0]]
      }, getTargetInfo(null));
      _this.enabledAbles = [];
      _this.targetAbles = [];
      _this.controlAbles = [];
      _this.rotation = 0;
      _this.scale = [1, 1];
      _this.isUnmounted = false;
      _this.events = {
        "mouseEnter": null,
        "mouseLeave": null
      };
      return _this;
    }

    var __proto = MoveableManager.prototype;

    __proto.render = function () {
      var props = this.props;
      var state = this.state;
      var edge = props.edge,
          parentPosition = props.parentPosition,
          className = props.className,
          propsTarget = props.target,
          zoom = props.zoom,
          cspNonce = props.cspNonce,
          translateZ = props.translateZ,
          ControlBoxElement = props.cssStyled,
          portalContainer = props.portalContainer;
      this.checkUpdate();
      this.updateRenderPoses();

      var _a = parentPosition || {
        left: 0,
        top: 0
      },
          parentLeft = _a.left,
          parentTop = _a.top;

      var left = state.left,
          top = state.top,
          stateTarget = state.target,
          direction = state.direction,
          renderPoses = state.renderPoses;
      var groupTargets = props.targets;
      var isDisplay = (groupTargets && groupTargets.length || propsTarget) && stateTarget;
      var isDragging = this.isDragging();
      var ableAttributes = {};
      var Renderer = {
        createElement: createElement
      };
      this.getEnabledAbles().forEach(function (able) {
        ableAttributes["data-able-" + able.name.toLowerCase()] = true;
      });
      return createElement(ControlBoxElement, __assign$2({
        cspNonce: cspNonce,
        ref: ref(this, "controlBox"),
        className: prefix("control-box", direction === -1 ? "reverse" : "", isDragging ? "dragging" : "") + " " + className
      }, ableAttributes, {
        portalContainer: portalContainer,
        style: {
          "position": "absolute",
          "display": isDisplay ? "block" : "none",
          "transform": "translate3d(" + (left - parentLeft) + "px, " + (top - parentTop) + "px, " + translateZ + ")",
          "--zoom": zoom,
          "--zoompx": zoom + "px"
        }
      }), this.renderAbles(), renderLine(Renderer, edge ? "n" : "", renderPoses[0], renderPoses[1], zoom, 0), renderLine(Renderer, edge ? "e" : "", renderPoses[1], renderPoses[3], zoom, 1), renderLine(Renderer, edge ? "w" : "", renderPoses[0], renderPoses[2], zoom, 2), renderLine(Renderer, edge ? "s" : "", renderPoses[2], renderPoses[3], zoom, 3));
    };

    __proto.componentDidMount = function () {
      this.controlBox.getElement();
      var props = this.props;
      var parentMoveable = props.parentMoveable,
          container = props.container,
          wrapperMoveable = props.wrapperMoveable;
      this.updateEvent(props);
      this.updateNativeEvents(props);

      if (!container && !parentMoveable && !wrapperMoveable) {
        this.updateRect("", false, true);
      }

      this.updateCheckInput();
    };

    __proto.componentDidUpdate = function (prevProps) {
      this.updateNativeEvents(prevProps);
      this.updateEvent(prevProps);
      this.updateCheckInput();
    };

    __proto.componentWillUnmount = function () {
      this.isUnmounted = true;
      unset(this, "targetGesto");
      unset(this, "controlGesto");
      var events = this.events;

      for (var name in events) {
        var manager = events[name];
        manager && manager.destroy();
      }
    };

    __proto.getContainer = function () {
      var _a = this.props,
          parentMoveable = _a.parentMoveable,
          wrapperMoveable = _a.wrapperMoveable,
          container = _a.container;
      return container || wrapperMoveable && wrapperMoveable.getContainer() || parentMoveable && parentMoveable.getContainer() || this.controlBox.getElement().parentElement;
    };
    /**
     * Check if the target is an element included in the moveable.
     * @method Moveable#isMoveableElement
     * @param - the target
     * @example
     * import Moveable from "moveable";
     *
     * const moveable = new Moveable(document.body);
     *
     * window.addEventListener("click", e => {
     *     if (!moveable.isMoveableElement(e.target)) {
     *         moveable.target = e.target;
     *     }
     * });
     */


    __proto.isMoveableElement = function (target) {
      return target && (target.getAttribute("class") || "").indexOf(PREFIX) > -1;
    };
    /**
     * You can drag start the Moveable through the external `MouseEvent`or `TouchEvent`. (Angular: ngDragStart)
     * @method Moveable#dragStart
     * @param - external `MouseEvent`or `TouchEvent`
     * @example
     * import Moveable from "moveable";
     *
     * const moveable = new Moveable(document.body);
     *
     * document.body.addEventListener("mousedown", e => {
     *     if (!moveable.isMoveableElement(e.target)) {
     *          moveable.dragStart(e);
     *     }
     * });
     */


    __proto.dragStart = function (e) {
      if (this.targetGesto) {
        this.targetGesto.triggerDragStart(e);
      }

      return this;
    };
    /**
     * Hit test an element or rect on a moveable target.
     * @method Moveable#hitTest
     * @param - element or rect to test
     * @return - Get hit test rate (rate > 0 is hitted)
     * @example
     * import Moveable from "moveable";
     *
     * const moveable = new Moveable(document.body);
     *
     * document.body.addEventListener("mousedown", e => {
     *     if (moveable.hitTest(e.target) > 0) {
     *          console.log("hiited");
     *     }
     * });
     */


    __proto.hitTest = function (el) {
      var _a = this.state,
          target = _a.target,
          pos1 = _a.pos1,
          pos2 = _a.pos2,
          pos3 = _a.pos3,
          pos4 = _a.pos4,
          targetClientRect = _a.targetClientRect;

      if (!target) {
        return 0;
      }

      var rect;

      if (el instanceof Element) {
        var clientRect = el.getBoundingClientRect();
        rect = {
          left: clientRect.left,
          top: clientRect.top,
          width: clientRect.width,
          height: clientRect.height
        };
      } else {
        rect = __assign$2({
          width: 0,
          height: 0
        }, el);
      }

      var rectLeft = rect.left,
          rectTop = rect.top,
          rectWidth = rect.width,
          rectHeight = rect.height;
      var points = fitPoints([pos1, pos2, pos4, pos3], targetClientRect);
      var size = getOverlapSize(points, [[rectLeft, rectTop], [rectLeft + rectWidth, rectTop], [rectLeft + rectWidth, rectTop + rectHeight], [rectLeft, rectTop + rectHeight]]);
      var totalSize = getAreaSize(points);

      if (!size || !totalSize) {
        return 0;
      }

      return Math.min(100, size / totalSize * 100);
    };
    /**
     * Whether the coordinates are inside Moveable
     * @method Moveable#isInside
     * @param - x coordinate
     * @param - y coordinate
     * @return - True if the coordinate is in moveable or false
     * @example
     * import Moveable from "moveable";
     *
     * const moveable = new Moveable(document.body);
     *
     * document.body.addEventListener("mousedown", e => {
     *     if (moveable.isInside(e.clientX, e.clientY)) {
     *          console.log("inside");
     *     }
     * });
     */


    __proto.isInside = function (clientX, clientY) {
      var _a = this.state,
          target = _a.target,
          pos1 = _a.pos1,
          pos2 = _a.pos2,
          pos3 = _a.pos3,
          pos4 = _a.pos4,
          targetClientRect = _a.targetClientRect;

      if (!target) {
        return false;
      }

      return isInside([clientX, clientY], fitPoints([pos1, pos2, pos4, pos3], targetClientRect));
    };
    /**
     * If the width, height, left, and top of all elements change, update the shape of the moveable.
     * @method Moveable#updateRect
     * @example
     * import Moveable from "moveable";
     *
     * const moveable = new Moveable(document.body);
     *
     * window.addEventListener("resize", e => {
     *     moveable.updateRect();
     * });
     */


    __proto.updateRect = function (type, isTarget, isSetState) {
      if (isSetState === void 0) {
        isSetState = true;
      }

      var props = this.props;
      var parentMoveable = props.parentMoveable;
      var state = this.state;
      var target = state.target || this.props.target;
      var container = this.getContainer();
      var rootContainer = parentMoveable ? parentMoveable.props.rootContainer : props.rootContainer;
      this.updateState(getTargetInfo(this.controlBox && this.controlBox.getElement(), target, container, container, rootContainer || container), parentMoveable ? false : isSetState);
    };

    __proto.isTargetChanged = function (prevProps, useDragArea) {
      var props = this.props;
      var target = props.dragTarget || props.target;
      var prevTarget = prevProps.dragTarget || prevProps.target;
      var dragArea = props.dragArea;
      var prevDragArea = prevProps.dragArea;
      var isTargetChanged = !dragArea && prevTarget !== target;
      return isTargetChanged || (useDragArea || dragArea) && prevDragArea !== dragArea;
    };

    __proto.updateNativeEvents = function (prevProps) {
      var _this = this;

      var props = this.props;
      var target = props.dragArea ? this.areaElement : this.state.target;
      var events = this.events;
      var eventKeys = getKeys(events);

      if (this.isTargetChanged(prevProps)) {
        for (var eventName in events) {
          var manager = events[eventName];
          manager && manager.destroy();
          events[eventName] = null;
        }
      }

      if (!target) {
        return;
      }

      var enabledAbles = this.enabledAbles;
      eventKeys.forEach(function (eventName) {
        var ables = filterAbles(enabledAbles, [eventName]);
        var hasAbles = ables.length > 0;
        var manager = events[eventName];

        if (!hasAbles) {
          if (manager) {
            manager.destroy();
            events[eventName] = null;
          }

          return;
        }

        if (!manager) {
          manager = new EventManager(target, _this, eventName);
          events[eventName] = manager;
        }

        manager.setAbles(ables);
      });
    };

    __proto.updateEvent = function (prevProps) {
      var controlBoxElement = this.controlBox.getElement();
      var hasTargetAble = this.targetAbles.length;
      var hasControlAble = this.controlAbles.length;
      var props = this.props;
      var target = props.dragTarget || props.target;
      var isTargetChanged = this.isTargetChanged(prevProps, true);
      var isUnset = !hasTargetAble && this.targetGesto || isTargetChanged;

      if (isUnset) {
        unset(this, "targetGesto");
        this.updateState({
          gesto: null
        });
      }

      if (!hasControlAble) {
        unset(this, "controlGesto");
      }

      if (target && hasTargetAble && !this.targetGesto) {
        this.targetGesto = getTargetAbleGesto(this, target, "");
      }

      if (!this.controlGesto && hasControlAble) {
        this.controlGesto = getAbleGesto(this, controlBoxElement, "controlAbles", "Control");
      }

      if (isUnset) {
        this.unsetAbles();
      }
    };
    /**
     * Check if the moveable state is being dragged.
     * @method Moveable#isDragging
     * @example
     * import Moveable from "moveable";
     *
     * const moveable = new Moveable(document.body);
     *
     * // false
     * console.log(moveable.isDragging());
     *
     * moveable.on("drag", () => {
     *   // true
     *   console.log(moveable.isDragging());
     * });
     */


    __proto.isDragging = function () {
      return (this.targetGesto ? this.targetGesto.isFlag() : false) || (this.controlGesto ? this.controlGesto.isFlag() : false);
    };
    /**
     * If the width, height, left, and top of the only target change, update the shape of the moveable.
     * @method Moveable#updateTarget
     * @example
     * import Moveable from "moveable";
     *
     * const moveable = new Moveable(document.body);
     *
     * moveable.updateTarget();
     */


    __proto.updateTarget = function (type) {
      this.updateRect(type, true);
    };
    /**
     * You can get the vertex information, position and offset size information of the target based on the container.
     * @method Moveable#getRect
     * @return - The Rect Info
     * @example
     * import Moveable from "moveable";
     *
     * const moveable = new Moveable(document.body);
     *
     * const rectInfo = moveable.getRect();
     */


    __proto.getRect = function () {
      var state = this.state;
      var poses = getAbsolutePosesByState(this.state);
      var pos1 = poses[0],
          pos2 = poses[1],
          pos3 = poses[2],
          pos4 = poses[3];
      var rect = getRect(poses);
      var offsetWidth = state.width,
          offsetHeight = state.height;
      var width = rect.width,
          height = rect.height,
          left = rect.left,
          top = rect.top;
      var statePos = [state.left, state.top];
      var origin = plus(statePos, state.origin);
      var beforeOrigin = plus(statePos, state.beforeOrigin);
      var transformOrigin = state.transformOrigin;
      return {
        width: width,
        height: height,
        left: left,
        top: top,
        pos1: pos1,
        pos2: pos2,
        pos3: pos3,
        pos4: pos4,
        offsetWidth: offsetWidth,
        offsetHeight: offsetHeight,
        beforeOrigin: beforeOrigin,
        origin: origin,
        transformOrigin: transformOrigin,
        rotation: this.getRotation()
      };
    };
    /**
     * Get a manager that manages the moveable's state and props.
     * @method Moveable#getManager
     * @return - The Rect Info
     * @example
     * import Moveable from "moveable";
     *
     * const moveable = new Moveable(document.body);
     *
     * const manager = moveable.getManager(); // real moveable class instance
     */


    __proto.getManager = function () {
      return this;
    };

    __proto.getRotation = function () {
      var _a = this.state,
          pos1 = _a.pos1,
          pos2 = _a.pos2,
          direction = _a.direction;
      return getAbsoluteRotation(pos1, pos2, direction);
    };
    /**
     * Request able through a method rather than an event.
     * At the moment of execution, requestStart is executed,
     * and then request and requestEnd can be executed through Requester.
     * @method Moveable#request
     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Draggable.html#request|Draggable Requester}
     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Resizable.html#request|Resizable Requester}
     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Scalable.html#request|Scalable Requester}
     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Rotatable.html#request|Rotatable Requester}
     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.OriginDraggable.html#request|OriginDraggable Requester}
     * @param - ableName
     * @param - request to be able params.
     * @param - If isInstant is true, request and requestEnd are executed immediately.
     * @return - Able Requester. If there is no request in able, nothing will work.
     * @example
     * import Moveable from "moveable";
     *
     * const moveable = new Moveable(document.body);
     *
     * // Instantly Request (requestStart - request - requestEnd)
     * moveable.request("draggable", { deltaX: 10, deltaY: 10 }, true);
     *
     * // Start move
     * const requester = moveable.request("draggable");
     * requester.request({ deltaX: 10, deltaY: 10 });
     * requester.request({ deltaX: 10, deltaY: 10 });
     * requester.request({ deltaX: 10, deltaY: 10 });
     * requester.requestEnd();
     */


    __proto.request = function (ableName, param, isInstant) {
      if (param === void 0) {
        param = {};
      }

      var _a = this.props,
          ables = _a.ables,
          groupable = _a.groupable;
      var requsetAble = ables.filter(function (able) {
        return able.name === ableName;
      })[0];

      if (this.isDragging() || !requsetAble || !requsetAble.request) {
        return {
          request: function () {
            return this;
          },
          requestEnd: function () {
            return this;
          }
        };
      }

      var self = this;
      var ableRequester = requsetAble.request(this);
      var requestInstant = isInstant || param.isInstant;
      var ableType = ableRequester.isControl ? "controlAbles" : "targetAbles";
      var eventAffix = "" + (groupable ? "Group" : "") + (ableRequester.isControl ? "Control" : "");
      var requester = {
        request: function (ableParam) {
          triggerAble(self, ableType, "drag", eventAffix, "", __assign$2(__assign$2({}, ableRequester.request(ableParam)), {
            requestAble: ableName,
            isRequest: true
          }), requestInstant);
          return this;
        },
        requestEnd: function () {
          triggerAble(self, ableType, "drag", eventAffix, "End", __assign$2(__assign$2({}, ableRequester.requestEnd()), {
            requestAble: ableName,
            isRequest: true
          }), requestInstant);
          return this;
        }
      };
      triggerAble(self, ableType, "drag", eventAffix, "Start", __assign$2(__assign$2({}, ableRequester.requestStart(param)), {
        requestAble: ableName,
        isRequest: true
      }), requestInstant);
      return requestInstant ? requester.request(param).requestEnd() : requester;
    };
    /**
     * Remove the Moveable object and the events.
     * @method Moveable#destroy
     * @example
     * import Moveable from "moveable";
     *
     * const moveable = new Moveable(document.body);
     *
     * moveable.destroy();
     */


    __proto.destroy = function () {
      this.componentWillUnmount();
    };

    __proto.updateRenderPoses = function () {
      var state = this.state;
      var props = this.props;
      var originalBeforeOrigin = state.originalBeforeOrigin,
          transformOrigin = state.transformOrigin,
          allMatrix = state.allMatrix,
          is3d = state.is3d,
          pos1 = state.pos1,
          pos2 = state.pos2,
          pos3 = state.pos3,
          pos4 = state.pos4,
          stateLeft = state.left,
          stateTop = state.top;

      var _a = props.padding || {},
          _b = _a.left,
          left = _b === void 0 ? 0 : _b,
          _c = _a.top,
          top = _c === void 0 ? 0 : _c,
          _d = _a.bottom,
          bottom = _d === void 0 ? 0 : _d,
          _e = _a.right,
          right = _e === void 0 ? 0 : _e;

      var n = is3d ? 4 : 3;
      var absoluteOrigin = props.groupable ? originalBeforeOrigin : plus(originalBeforeOrigin, [stateLeft, stateTop]);
      state.renderPoses = [plus(pos1, calculatePadding(allMatrix, [-left, -top], transformOrigin, absoluteOrigin, n)), plus(pos2, calculatePadding(allMatrix, [right, -top], transformOrigin, absoluteOrigin, n)), plus(pos3, calculatePadding(allMatrix, [-left, bottom], transformOrigin, absoluteOrigin, n)), plus(pos4, calculatePadding(allMatrix, [right, bottom], transformOrigin, absoluteOrigin, n))];
    };

    __proto.checkUpdate = function () {
      var _a = this.props,
          target = _a.target,
          container = _a.container,
          parentMoveable = _a.parentMoveable;
      var _b = this.state,
          stateTarget = _b.target,
          stateContainer = _b.container;

      if (!stateTarget && !target) {
        return;
      }

      this.updateAbles();
      var isChanged = !equals(stateTarget, target) || !equals(stateContainer, container);

      if (!isChanged) {
        return;
      }

      this.updateState({
        target: target,
        container: container
      });

      if (!parentMoveable && (container || this.controlBox)) {
        this.updateRect("End", false, false);
      }
    };

    __proto.triggerEvent = function (name, e) {
      var callback = this.props[name];
      return callback && callback(e);
    };

    __proto.useCSS = function (tag, css) {
      var customStyleMap = this.props.customStyledMap;
      var key = tag + css;

      if (!customStyleMap[key]) {
        customStyleMap[key] = styled(tag, css);
      }

      return customStyleMap[key];
    };

    __proto.unsetAbles = function () {
      var _this = this;

      if (this.targetAbles.filter(function (able) {
        if (able.unset) {
          able.unset(_this);
          return true;
        }

        return false;
      }).length) {
        this.forceUpdate();
      }
    };

    __proto.updateAbles = function (ables, eventAffix) {
      if (ables === void 0) {
        ables = this.props.ables;
      }

      if (eventAffix === void 0) {
        eventAffix = "";
      }

      var props = this.props;
      var triggerAblesSimultaneously = props.triggerAblesSimultaneously;
      var enabledAbles = ables.filter(function (able) {
        return able && (able.always || props[able.name]);
      });
      var dragStart = "drag" + eventAffix + "Start";
      var pinchStart = "pinch" + eventAffix + "Start";
      var dragControlStart = "drag" + eventAffix + "ControlStart";
      var targetAbles = filterAbles(enabledAbles, [dragStart, pinchStart], triggerAblesSimultaneously);
      var controlAbles = filterAbles(enabledAbles, [dragControlStart], triggerAblesSimultaneously);
      this.enabledAbles = enabledAbles;
      this.targetAbles = targetAbles;
      this.controlAbles = controlAbles;
    };

    __proto.updateState = function (nextState, isSetState) {
      if (isSetState) {
        this.setState(nextState);
      } else {
        var state = this.state;

        for (var name in nextState) {
          state[name] = nextState[name];
        }
      }
    };

    __proto.getEnabledAbles = function () {
      var props = this.props;
      var ables = props.ables;
      return ables.filter(function (able) {
        return able && props[able.name];
      });
    };

    __proto.renderAbles = function () {
      var _this = this;

      var props = this.props;
      var triggerAblesSimultaneously = props.triggerAblesSimultaneously;
      var Renderer = {
        createElement: createElement
      };
      return groupByMap(flat(filterAbles(this.getEnabledAbles(), ["render"], triggerAblesSimultaneously).map(function (_a) {
        var render = _a.render;
        return render(_this, Renderer) || [];
      })).filter(function (el) {
        return el;
      }), function (_a) {
        var key = _a.key;
        return key;
      }).map(function (group) {
        return group[0];
      });
    };

    __proto.updateCheckInput = function () {
      this.targetGesto && (this.targetGesto.options.checkInput = this.props.checkInput);
    };

    MoveableManager.defaultProps = {
      target: null,
      dragTarget: null,
      container: null,
      rootContainer: null,
      origin: true,
      edge: false,
      parentMoveable: null,
      wrapperMoveable: null,
      parentPosition: null,
      portalContainer: null,
      ables: [],
      pinchThreshold: 20,
      dragArea: false,
      passDragArea: false,
      transformOrigin: "",
      className: "",
      zoom: 1,
      triggerAblesSimultaneously: false,
      padding: {},
      pinchOutside: true,
      checkInput: false,
      groupable: false,
      cspNonce: "",
      translateZ: 0,
      cssStyled: null,
      customStyledMap: {},
      props: {}
    };
    return MoveableManager;
  }(PureComponent);
  /**
   * The target to indicate Moveable Control Box.
   * @name Moveable#target
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   * moveable.target = document.querySelector(".target");
   */

  /**
   * Zooms in the elements of a moveable. (default: 1)
   * @name Moveable#zoom
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   * moveable.zoom = 2;
   */

  /**
   * Resize, Scale Events at edges
   * @name Moveable#edge
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   * moveable.edge = true;
   */

  /**
   * You can specify the className of the moveable controlbox. (default: "")
   * @name Moveable#className
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *   className: "",
   * });
   *
   * moveable.className = "moveable1";
   */

  /**
   * The target(s) to drag Moveable target(s) (default: target)
   * @name Moveable#dragTarget
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body);
   * moveable.target = document.querySelector(".target");
   * moveable.dragTarget = document.querySelector(".dragTarget");
   */

  /**
   * `renderStart` event occurs at the first start of all events.
   * @memberof Moveable
   * @event renderStart
   * @param {Moveable.OnRenderStart} - Parameters for the `renderStart` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: document.querySelector(".target"),
   * });
   * moveable.on("renderStart", ({ target }) => {
   *     console.log("onRenderStart", target);
   * });
   */

  /**
   * `render` event occurs before the target is drawn on the screen.
   * @memberof Moveable
   * @event render
   * @param {Moveable.OnRender} - Parameters for the `render` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: document.querySelector(".target"),
   * });
   * moveable.on("render", ({ target }) => {
   *     console.log("onRender", target);
   * });
   */

  /**
   * `renderEnd` event occurs at the end of all events.
   * @memberof Moveable
   * @event renderEnd
   * @param {Moveable.OnRenderEnd} - Parameters for the `renderEnd` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: document.querySelector(".target"),
   * });
   * moveable.on("renderEnd", ({ target }) => {
   *     console.log("onRenderEnd", target);
   * });
   */

  /**
   * `renderGroupStart` event occurs at the first start of all events in group.
   * @memberof Moveable
   * @event renderGroupStart
   * @param {Moveable.OnRenderGroupStart} - Parameters for the `renderGroupStart` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: [].slice.call(document.querySelectorAll(".target")),
   * });
   * moveable.on("renderGroupStart", ({ targets }) => {
   *     console.log("onRenderGroupStart", targets);
   * });
   */

  /**
   * `renderGroup` event occurs before the target is drawn on the screen in group.
   * @memberof Moveable
   * @event renderGroup
   * @param {Moveable.OnRenderGroup} - Parameters for the `renderGroup` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: [].slice.call(document.querySelectorAll(".target")),
   * });
   * moveable.on("renderGroup", ({ targets }) => {
   *     console.log("onRenderGroup", targets);
   * });
   */

  /**
   * `renderGroupEnd` event occurs at the end of all events in group.
   * @memberof Moveable
   * @event renderGroupEnd
   * @param {Moveable.OnRenderGroupEnd} - Parameters for the `renderGroupEnd` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: [].slice.call(document.querySelectorAll(".target")),
   * });
   * moveable.on("renderGroupEnd", ({ targets }) => {
   *     console.log("onRenderGroupEnd", targets);
   * });
   */

  var Groupable = {
    name: "groupable",
    props: {
      defaultGroupRotate: Number,
      defaultGroupOrigin: String,
      groupable: Boolean
    },
    events: {},
    render: function (moveable, React) {
      var targets = moveable.props.targets || [];
      moveable.moveables = [];
      var _a = moveable.state,
          left = _a.left,
          top = _a.top;
      var position = {
        left: left,
        top: top
      };
      return targets.map(function (target, i) {
        return React.createElement(MoveableManager$1, {
          key: "moveable" + i,
          ref: refs(moveable, "moveables", i),
          target: target,
          origin: false,
          cssStyled: moveable.props.cssStyled,
          customStyledMap: moveable.props.customStyledMap,
          parentMoveable: moveable,
          parentPosition: position
        });
      });
    }
  };

  var Clickable = {
    name: "clickable",
    props: {},
    events: {
      onClick: "click",
      onClickGroup: "clickGroup"
    },
    always: true,
    dragStart: function () {},
    dragGroupStart: function (moveable, e) {
      e.datas.inputTarget = e.inputEvent && e.inputEvent.target;
    },
    dragEnd: function (moveable, e) {
      var target = moveable.state.target;
      var inputEvent = e.inputEvent;
      var inputTarget = e.inputTarget;

      if (!inputEvent || !inputTarget || e.isDrag || moveable.isMoveableElement(inputTarget) // External event duplicate target or dragAreaElement
      ) {
          return;
        }

      var containsTarget = target.contains(inputTarget);
      triggerEvent(moveable, "onClick", fillParams(moveable, e, {
        isDouble: e.isDouble,
        inputTarget: inputTarget,
        isTarget: target === inputTarget,
        containsTarget: containsTarget
      }));
    },
    dragGroupEnd: function (moveable, e) {
      var inputEvent = e.inputEvent;
      var inputTarget = e.inputTarget;

      if (!inputEvent || !inputTarget || e.isDrag || moveable.isMoveableElement(inputTarget) // External event duplicate target or dragAreaElement
      || e.datas.inputTarget === inputTarget) {
        return;
      }

      var targets = moveable.props.targets;
      var targetIndex = targets.indexOf(inputTarget);
      var isTarget = targetIndex > -1;
      var containsTarget = false;

      if (targetIndex === -1) {
        targetIndex = findIndex(targets, function (parentTarget) {
          return parentTarget.contains(inputTarget);
        });
        containsTarget = targetIndex > -1;
      }

      triggerEvent(moveable, "onClickGroup", fillParams(moveable, e, {
        isDouble: e.isDouble,
        targets: targets,
        inputTarget: inputTarget,
        targetIndex: targetIndex,
        isTarget: isTarget,
        containsTarget: containsTarget
      }));
    }
  };
  /**
   * When you click on the element, the `click` event is called.
   * @memberof Moveable
   * @event click
   * @param {Moveable.OnClick} - Parameters for the `click` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: document.querySelector(".target"),
   * });
   * moveable.on("click", ({ hasTarget, containsTarget, targetIndex }) => {
   *     // If you click on an element other than the target and not included in the target, index is -1.
   *     console.log("onClickGroup", target, hasTarget, containsTarget, targetIndex);
   * });
   */

  /**
   * When you click on the element inside the group, the `clickGroup` event is called.
   * @memberof Moveable
   * @event clickGroup
   * @param {Moveable.OnClickGroup} - Parameters for the `clickGroup` event
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *     target: [].slice.call(document.querySelectorAll(".target")),
   * });
   * moveable.on("clickGroup", ({ inputTarget, isTarget, containsTarget, targetIndex }) => {
   *     // If you click on an element other than the target and not included in the target, index is -1.
   *     console.log("onClickGroup", inputTarget, isTarget, containsTarget, targetIndex);
   * });
   */

  function getDraggableEvent(e) {
    var datas = e.originalDatas.draggable;

    if (!datas) {
      e.originalDatas.draggable = {};
      datas = e.originalDatas.draggable;
    }

    return __assign$2(__assign$2({}, e), {
      datas: datas
    });
  }

  var edgeDraggable = {
    name: "edgeDraggable",
    props: {
      edgeDraggable: Boolean
    },
    events: {},
    dragControlCondition: function (e, moveable) {
      if (!moveable.props.edgeDraggable || !e.inputEvent) {
        return false;
      }

      var target = e.inputEvent.target;
      return hasClass(target, prefix("direction")) && hasClass(target, prefix("line"));
    },
    dragControlStart: function (moveable, e) {
      return Draggable.dragStart(moveable, getDraggableEvent(e));
    },
    dragControl: function (moveable, e) {
      return Draggable.drag(moveable, getDraggableEvent(e));
    },
    dragControlEnd: function (moveable, e) {
      return Draggable.dragEnd(moveable, getDraggableEvent(e));
    },
    dragGroupControlCondition: function (e, moveable) {
      if (!moveable.props.edgeDraggable || !e.inputEvent) {
        return false;
      }

      var target = e.inputEvent.target;
      return hasClass(target, prefix("direction")) && hasClass(target, prefix("line"));
    },
    dragGroupControlStart: function (moveable, e) {
      return Draggable.dragGroupStart(moveable, getDraggableEvent(e));
    },
    dragGroupControl: function (moveable, e) {
      return Draggable.dragGroup(moveable, getDraggableEvent(e));
    },
    dragGroupControlEnd: function (moveable, e) {
      return Draggable.dragGroupEnd(moveable, getDraggableEvent(e));
    },
    unset: function (moveable) {
      moveable.state.dragInfo = null;
    }
  };
  /**
   * Whether to move by dragging the edge line (default: false)
   * @name Moveable.Draggable#edgeDraggable
   * @example
   * import Moveable from "moveable";
   *
   * const moveable = new Moveable(document.body, {
   *  draggable: true,
   *  edgeDraggable: false,
   * });
   *
   * moveable.edgeDraggable = true;
   */

  var IndividualGroupable = {
    name: "individualGroupable",
    props: {
      individualGroupable: Boolean
    },
    events: {}
  };

  var MOVEABLE_ABLES = /*#__PURE__*/[BeforeRenderable, Default, Snappable, Pinchable, Draggable, edgeDraggable, Rotatable, Resizable, Scalable, Warpable, Scrollable, Padding, Origin, OriginDraggable, Clippable, Roundable, Groupable, IndividualGroupable, Clickable, DragArea, Renderable];
  var MOVEABLE_EVENTS_PROPS_MAP = /*#__PURE__*/MOVEABLE_ABLES.reduce(function (current, able) {
    return __assign$2(__assign$2({}, current), able.events);
  }, {});
  var MOVEABLE_PROPS_MAP = /*#__PURE__*/MOVEABLE_ABLES.reduce(function (current, able) {
    return __assign$2(__assign$2({}, current), able.props);
  }, {});
  var MOVEABLE_EVENTS_MAP = /*#__PURE__*/invertObject(MOVEABLE_EVENTS_PROPS_MAP);
  var MOVEABLE_EVENTS = Object.keys(MOVEABLE_EVENTS_MAP);
  var MOVEABLE_PROPS = Object.keys(MOVEABLE_PROPS_MAP);

  function getMaxPos(poses, index) {
    return Math.max.apply(Math, poses.map(function (_a) {
      var pos1 = _a[0],
          pos2 = _a[1],
          pos3 = _a[2],
          pos4 = _a[3];
      return Math.max(pos1[index], pos2[index], pos3[index], pos4[index]);
    }));
  }

  function getMinPos(poses, index) {
    return Math.min.apply(Math, poses.map(function (_a) {
      var pos1 = _a[0],
          pos2 = _a[1],
          pos3 = _a[2],
          pos4 = _a[3];
      return Math.min(pos1[index], pos2[index], pos3[index], pos4[index]);
    }));
  }

  function getGroupRect(moveables, rotation) {
    if (!moveables.length) {
      return [0, 0, 0, 0];
    }

    var moveablePoses = moveables.map(function (_a) {
      var state = _a.state;
      return getAbsolutePosesByState(state);
    });
    var minX = MAX_NUM;
    var minY = MAX_NUM;
    var groupWidth = 0;
    var groupHeight = 0;
    var fixedRotation = throttle(rotation, TINY_NUM);

    if (fixedRotation % 90) {
      var rad_1 = fixedRotation / 180 * Math.PI;
      var a1_1 = Math.tan(rad_1);
      var a2_1 = -1 / a1_1;
      var b1MinMax_1 = [MIN_NUM, MAX_NUM];
      var b2MinMax_1 = [MIN_NUM, MAX_NUM];
      moveablePoses.forEach(function (poses) {
        poses.forEach(function (pos) {
          // ax + b = y
          // b = y - ax
          var b1 = pos[1] - a1_1 * pos[0];
          var b2 = pos[1] - a2_1 * pos[0];
          b1MinMax_1[0] = Math.max(b1MinMax_1[0], b1);
          b1MinMax_1[1] = Math.min(b1MinMax_1[1], b1);
          b2MinMax_1[0] = Math.max(b2MinMax_1[0], b2);
          b2MinMax_1[1] = Math.min(b2MinMax_1[1], b2);
        });
      });
      b1MinMax_1.forEach(function (b1) {
        // a1x + b1 = a2x + b2
        b2MinMax_1.forEach(function (b2) {
          // (a1 - a2)x = b2 - b1
          var x = (b2 - b1) / (a1_1 - a2_1);
          var y = a1_1 * x + b1;
          minX = Math.min(minX, x);
          minY = Math.min(minY, y);
        });
      });
      var rotatePoses = moveablePoses.map(function (_a) {
        var pos1 = _a[0],
            pos2 = _a[1],
            pos3 = _a[2],
            pos4 = _a[3];
        return [rotate(pos1, -rad_1), rotate(pos2, -rad_1), rotate(pos3, -rad_1), rotate(pos4, -rad_1)];
      });
      groupWidth = getMaxPos(rotatePoses, 0) - getMinPos(rotatePoses, 0);
      groupHeight = getMaxPos(rotatePoses, 1) - getMinPos(rotatePoses, 1);
    } else {
      minX = getMinPos(moveablePoses, 0);
      minY = getMinPos(moveablePoses, 1);
      groupWidth = getMaxPos(moveablePoses, 0) - minX;
      groupHeight = getMaxPos(moveablePoses, 1) - minY;

      if (fixedRotation % 180) {
        var changedWidth = groupWidth;
        groupWidth = groupHeight;
        groupHeight = changedWidth;
      }
    }

    return [minX, minY, groupWidth, groupHeight];
  }
  /**
   * @namespace Moveable.Group
   * @description You can make targets moveable.
   */


  var MoveableGroup =
  /*#__PURE__*/
  function (_super) {
    __extends$1(MoveableGroup, _super);

    function MoveableGroup() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.differ = new ChildrenDiffer();
      _this.moveables = [];
      _this.transformOrigin = "50% 50%";
      return _this;
    }

    var __proto = MoveableGroup.prototype;

    __proto.updateEvent = function (prevProps) {
      var state = this.state;
      var props = this.props;
      var prevTarget = prevProps.dragTarget || state.target;
      var nextTarget = props.dragTarget || this.areaElement;

      if (prevTarget !== nextTarget) {
        unset(this, "targetGesto");
        unset(this, "controlGesto");
        state.target = null;
      }

      if (!state.target) {
        state.target = this.areaElement;
        this.controlBox.getElement().style.display = "block";
        this.targetGesto = getTargetAbleGesto(this, nextTarget, "Group");
        this.controlGesto = getAbleGesto(this, this.controlBox.getElement(), "controlAbles", "GroupControl");
      }

      var isContainerChanged = !equals(prevProps.container, props.container);

      if (isContainerChanged) {
        state.container = props.container;
      }

      var _a = this.differ.update(props.targets),
          added = _a.added,
          changed = _a.changed,
          removed = _a.removed;

      if (isContainerChanged || added.length || changed.length || removed.length) {
        this.updateRect();
      }
    };

    __proto.checkUpdate = function () {
      this.updateAbles();
    };

    __proto.updateRect = function (type, isTarget, isSetState) {
      if (isSetState === void 0) {
        isSetState = true;
      }

      if (!this.controlBox) {
        return;
      }

      this.moveables.forEach(function (moveable) {
        moveable.updateRect(type, false, false);
      });
      var state = this.state;
      var props = this.props;
      var target = state.target || props.target;

      if (!isTarget || type !== "" && props.updateGroup) {
        // reset rotataion
        this.rotation = props.defaultGroupRotate;
        this.transformOrigin = props.defaultGroupOrigin || "50% 50%";
        this.scale = [1, 1];
      }

      var rotation = this.rotation;
      var scale = this.scale;

      var _a = getGroupRect(this.moveables, rotation),
          left = _a[0],
          top = _a[1],
          width = _a[2],
          height = _a[3]; // tslint:disable-next-line: max-line-length


      var transform = "rotate(" + rotation + "deg) scale(" + (scale[0] >= 0 ? 1 : -1) + ", " + (scale[1] >= 0 ? 1 : -1) + ")";
      target.style.cssText += "left:0px;top:0px; transform-origin: " + this.transformOrigin + "; width:" + width + "px; height:" + height + "px;" + ("transform:" + transform);
      state.width = width;
      state.height = height;
      var container = this.getContainer();
      var info = getTargetInfo(this.controlBox.getElement(), target, this.controlBox.getElement(), this.getContainer(), this.props.rootContainer || container);
      var pos = [info.left, info.top];

      var _b = getAbsolutePosesByState(info),
          pos1 = _b[0],
          pos2 = _b[1],
          pos3 = _b[2],
          pos4 = _b[3]; // info.left + info.pos(1 ~ 4)


      var minPos = getMinMaxs([pos1, pos2, pos3, pos4]);
      var delta = [minPos.minX, minPos.minY];
      info.pos1 = minus(pos1, delta);
      info.pos2 = minus(pos2, delta);
      info.pos3 = minus(pos3, delta);
      info.pos4 = minus(pos4, delta);
      info.left = left - info.left + delta[0];
      info.top = top - info.top + delta[1];
      info.origin = minus(plus(pos, info.origin), delta);
      info.beforeOrigin = minus(plus(pos, info.beforeOrigin), delta);
      info.originalBeforeOrigin = plus(pos, info.originalBeforeOrigin); // info.transformOrigin = minus(plus(pos, info.transformOrigin!), delta);

      var clientRect = info.targetClientRect;
      var direction = scale[0] * scale[1] > 0 ? 1 : -1;
      clientRect.top += info.top - state.top;
      clientRect.left += info.left - state.left;
      target.style.transform = "translate(" + -delta[0] + "px, " + -delta[1] + "px) " + transform;
      this.updateState(__assign$2(__assign$2({}, info), {
        direction: direction,
        beforeDirection: direction
      }), isSetState);
    };

    __proto.getRect = function () {
      return __assign$2(__assign$2({}, _super.prototype.getRect.call(this)), {
        children: this.moveables.map(function (child) {
          return child.getRect();
        })
      });
    };

    __proto.triggerEvent = function (name, e, isManager) {
      if (isManager || name.indexOf("Group") > -1) {
        return _super.prototype.triggerEvent.call(this, name, e);
      }
    };

    __proto.updateAbles = function () {
      _super.prototype.updateAbles.call(this, __spreadArrays$1(this.props.ables, [Groupable]), "Group");
    };

    MoveableGroup.defaultProps = __assign$2(__assign$2({}, MoveableManager$1.defaultProps), {
      transformOrigin: ["50%", "50%"],
      groupable: true,
      dragArea: true,
      keepRatio: true,
      targets: [],
      defaultGroupRotate: 0,
      defaultGroupOrigin: "50% 50%"
    });
    return MoveableGroup;
  }(MoveableManager$1);

  /**
   * @namespace Moveable.IndividualGroup
   * @description Create targets individually, not as a group.Create targets individually, not as a group.
   */

  var MoveableIndividualGroup =
  /*#__PURE__*/
  function (_super) {
    __extends$1(MoveableIndividualGroup, _super);

    function MoveableIndividualGroup() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.moveables = [];
      return _this;
    }

    var __proto = MoveableIndividualGroup.prototype;

    __proto.render = function () {
      var _this = this;

      var _a = this.props,
          cspNonce = _a.cspNonce,
          ControlBoxElement = _a.cssStyled,
          targets = _a.targets;
      return createElement(ControlBoxElement, {
        cspNonce: cspNonce,
        ref: ref(this, "controlBox"),
        className: prefix("control-box")
      }, targets.map(function (target, i) {
        return createElement(MoveableManager$1, __assign$2({
          key: "moveable" + i,
          ref: refs(_this, "moveables", i)
        }, _this.props, {
          target: target,
          wrapperMoveable: _this
        }));
      }));
    };

    __proto.componentDidUpdate = function () {};

    __proto.updateRect = function (type, isTarget, isSetState) {
      if (isSetState === void 0) {
        isSetState = true;
      }

      this.moveables.forEach(function (moveable) {
        moveable.updateRect(type, isTarget, isSetState);
      });
    };

    __proto.getRect = function () {
      return __assign$2(__assign$2({}, _super.prototype.getRect.call(this)), {
        children: this.moveables.map(function (child) {
          return child.getRect();
        })
      });
    };

    __proto.request = function () {
      return {
        request: function () {
          return this;
        },
        requestEnd: function () {
          return this;
        }
      };
    };

    __proto.dragStart = function () {
      return this;
    };

    __proto.hitTest = function () {
      return 0;
    };

    __proto.isInside = function () {
      return false;
    };

    __proto.isDragging = function () {
      return false;
    };

    __proto.updateRenderPoses = function () {};

    __proto.updateEvent = function () {};

    __proto.checkUpdate = function () {};

    __proto.triggerEvent = function () {};

    __proto.updateAbles = function () {};

    return MoveableIndividualGroup;
  }(MoveableManager$1);

  var InitialMoveable =
  /*#__PURE__*/
  function (_super) {
    __extends$1(InitialMoveable, _super);

    function InitialMoveable() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.refTargets = [];
      _this.selectorMap = {};
      return _this;
    }

    var __proto = InitialMoveable.prototype;

    InitialMoveable.makeStyled = function () {
      var cssMap = {};
      var ables = this.getTotalAbles();
      ables.forEach(function (_a) {
        var css = _a.css;

        if (!css) {
          return;
        }

        css.forEach(function (text) {
          cssMap[text] = true;
        });
      });
      var style = getKeys(cssMap).join("\n");
      this.defaultStyled = styled("div", prefixCSS(PREFIX, MOVEABLE_CSS + style));
    };

    InitialMoveable.getTotalAbles = function () {
      return __spreadArrays$1([Default, Groupable, IndividualGroupable, DragArea], this.defaultAbles);
    };

    __proto.render = function () {
      var moveableContructor = this.constructor;

      if (!moveableContructor.defaultStyled) {
        moveableContructor.makeStyled();
      }

      var _a = this.props,
          userAbles = _a.ables,
          userProps = _a.props,
          props = __rest(_a, ["ables", "props"]);

      var refTargets = getRefTargets(props.target || props.targets);
      var elementTargets = getElementTargets(refTargets, this.selectorMap);
      this.refTargets = refTargets;
      var isGroup = elementTargets.length > 1;
      var totalAbles = moveableContructor.getTotalAbles();

      var ables = __spreadArrays$1(totalAbles, userAbles || []);

      var nextProps = __assign$2(__assign$2(__assign$2({}, props), userProps || {}), {
        ables: ables,
        cssStyled: moveableContructor.defaultStyled,
        customStyledMap: moveableContructor.customStyledMap
      });

      if (isGroup) {
        if (props.individualGroupable) {
          return createElement(MoveableIndividualGroup, __assign$2({
            key: "individual-group",
            ref: ref(this, "moveable")
          }, nextProps, {
            target: null,
            targets: elementTargets
          }));
        }

        return createElement(MoveableGroup, __assign$2({
          key: "group",
          ref: ref(this, "moveable")
        }, nextProps, {
          target: null,
          targets: elementTargets
        }));
      } else {
        return createElement(MoveableManager$1, __assign$2({
          key: "single",
          ref: ref(this, "moveable")
        }, nextProps, {
          target: elementTargets[0]
        }));
      }
    };

    __proto.componentDidMount = function () {
      this.updateRefs();
    };

    __proto.componentDidUpdate = function () {
      this.updateRefs();
    };

    __proto.updateRefs = function (isReset) {
      var refTargets = getRefTargets(this.props.target || this.props.targets);
      var isUpdate = this.refTargets.some(function (target, i) {
        var nextTarget = refTargets[i];

        if (!target && !nextTarget) {
          return false;
        } else if (target !== nextTarget) {
          return true;
        }

        return false;
      });
      var selectorMap = isReset ? {} : this.selectorMap;
      var nextSelectorMap = {};
      this.refTargets.forEach(function (target) {
        if (isString(target)) {
          if (!selectorMap[target]) {
            isUpdate = true;
            nextSelectorMap[target] = [].slice.call(document.querySelectorAll(target));
          } else {
            nextSelectorMap[target] = selectorMap[target];
          }
        }
      });
      this.selectorMap = nextSelectorMap;

      if (isUpdate) {
        this.forceUpdate();
      }
    };

    __proto.getManager = function () {
      return this.moveable;
    };

    InitialMoveable.defaultAbles = [];
    InitialMoveable.customStyledMap = {};
    InitialMoveable.defaultStyled = null;

    __decorate$1([withMethods(MOVEABLE_METHODS)], InitialMoveable.prototype, "moveable", void 0);

    return InitialMoveable;
  }(PureComponent);

  var Moveable$1 =
  /*#__PURE__*/
  function (_super) {
    __extends$1(Moveable, _super);

    function Moveable() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    Moveable.defaultAbles = MOVEABLE_ABLES;
    return Moveable;
  }(InitialMoveable);

  /*
  Copyright (c) 2019 Daybrush
  name: moveable
  license: MIT
  author: Daybrush
  repository: git+https://github.com/daybrush/moveable.git
  version: 0.24.5
  */

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };

  function __extends(d, b) {
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  var __assign = function() {
      __assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };

  function __decorate(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
  }

  var InnerMoveable =
  /*#__PURE__*/
  function (_super) {
    __extends(InnerMoveable, _super);

    function InnerMoveable(props) {
      var _this = _super.call(this, props) || this;

      _this.state = {};
      _this.state = _this.props;
      return _this;
    }

    var __proto = InnerMoveable.prototype;

    __proto.render = function () {
      return createPortal(createElement(Moveable$1, __assign({
        ref: ref(this, "moveable")
      }, this.state)), this.state.parentElement);
    };

    return InnerMoveable;
  }(Component);

  var PROPERTIES = MOVEABLE_PROPS;
  var METHODS = MOVEABLE_METHODS;
  var EVENTS = MOVEABLE_EVENTS;

  /*
  Copyright (c) 2019 Daybrush
  name: @scena/event-emitter
  license: MIT
  author: Daybrush
  repository: git+https://github.com/daybrush/gesture.git
  version: 1.0.3
  */

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __assign$1 = function () {
    __assign$1 = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];

        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }

      return t;
    };

    return __assign$1.apply(this, arguments);
  };
  function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

    return r;
  }

  /**
   * Implement EventEmitter on object or component.
   */

  var EventEmitter =
  /*#__PURE__*/
  function () {
    function EventEmitter() {
      this._events = {};
    }
    /**
     * Add a listener to the registered event.
     * @param - Name of the event to be added
     * @param - listener function of the event to be added
     * @example
     * import EventEmitter from "@scena/event-emitter";
     * cosnt emitter = new EventEmitter();
     *
     * // Add listener in "a" event
     * emitter.on("a", () => {
     * });
     * // Add listeners
     * emitter.on({
     *  a: () => {},
     *  b: () => {},
     * });
     */


    var __proto = EventEmitter.prototype;

    __proto.on = function (eventName, listener) {
      if (isObject(eventName)) {
        for (var name in eventName) {
          this.on(name, eventName[name]);
        }
      } else {
        this._addEvent(eventName, listener, {});
      }

      return this;
    };
    /**
     * Remove listeners registered in the event target.
     * @param - Name of the event to be removed
     * @param - listener function of the event to be removed
     * @example
     * import EventEmitter from "@scena/event-emitter";
     * cosnt emitter = new EventEmitter();
     *
     * // Remove all listeners.
     * emitter.off();
     *
     * // Remove all listeners in "A" event.
     * emitter.off("a");
     *
     *
     * // Remove "listener" listener in "a" event.
     * emitter.off("a", listener);
     */


    __proto.off = function (eventName, listener) {
      if (!eventName) {
        this._events = {};
      } else if (isObject(eventName)) {
        for (var name in eventName) {
          this.off(name);
        }
      } else if (!listener) {
        this._events[eventName] = [];
      } else {
        var events = this._events[eventName];

        if (events) {
          var index = findIndex(events, function (e) {
            return e.listener === listener;
          });

          if (index > -1) {
            events.splice(index, 1);
          }
        }
      }

      return this;
    };
    /**
     * Add a disposable listener and Use promise to the registered event.
     * @param - Name of the event to be added
     * @param - disposable listener function of the event to be added
     * @example
     * import EventEmitter from "@scena/event-emitter";
     * cosnt emitter = new EventEmitter();
     *
     * // Add a disposable listener in "a" event
     * emitter.once("a", () => {
     * });
     *
     * // Use Promise
     * emitter.once("a").then(e => {
     * });
     */


    __proto.once = function (eventName, listener) {
      var _this = this;

      if (listener) {
        this._addEvent(eventName, listener, {
          once: true
        });
      }

      return new Promise(function (resolve) {
        _this._addEvent(eventName, resolve, {
          once: true
        });
      });
    };
    /**
     * Fires an event to call listeners.
     * @param - Event name
     * @param - Event parameter
     * @return If false, stop the event.
     * @example
     *
     * import EventEmitter from "@scena/event-emitter";
     *
     *
     * const emitter = new EventEmitter();
     *
     * emitter.on("a", e => {
     * });
     *
     *
     * emitter.emit("a", {
     *   a: 1,
     * });
     */


    __proto.emit = function (eventName, param) {
      var _this = this;

      if (param === void 0) {
        param = {};
      }

      var events = this._events[eventName];

      if (!eventName || !events) {
        return true;
      }

      var isStop = false;
      param.eventType = eventName;

      param.stop = function () {
        isStop = true;
      };

      param.currentTarget = this;

      __spreadArrays(events).forEach(function (info) {
        info.listener(param);

        if (info.once) {
          _this.off(eventName, info.listener);
        }
      });

      return !isStop;
    };
    /**
     * Fires an event to call listeners.
     * @param - Event name
     * @param - Event parameter
     * @return If false, stop the event.
     * @example
     *
     * import EventEmitter from "@scena/event-emitter";
     *
     *
     * const emitter = new EventEmitter();
     *
     * emitter.on("a", e => {
     * });
     *
     *
     * emitter.emit("a", {
     *   a: 1,
     * });
     */

    /**
    * Fires an event to call listeners.
    * @param - Event name
    * @param - Event parameter
    * @return If false, stop the event.
    * @example
    *
    * import EventEmitter from "@scena/event-emitter";
    *
    *
    * const emitter = new EventEmitter();
    *
    * emitter.on("a", e => {
    * });
    *
    * // emit
    * emitter.trigger("a", {
    *   a: 1,
    * });
    */


    __proto.trigger = function (eventName, param) {
      if (param === void 0) {
        param = {};
      }

      return this.emit(eventName, param);
    };

    __proto._addEvent = function (eventName, listener, options) {
      var events = this._events;
      events[eventName] = events[eventName] || [];
      var listeners = events[eventName];
      listeners.push(__assign$1({
        listener: listener
      }, options));
    };

    return EventEmitter;
  }();

  /**
   * Moveable is Draggable! Resizable! Scalable! Rotatable!
   * @sort 1
   * @alias Moveable
   * @extends EventEmitter
   */

  var MoveableManager =
  /*#__PURE__*/
  function (_super) {
    __extends(MoveableManager, _super);
    /**
     *
     */


    function MoveableManager(parentElement, options) {
      if (options === void 0) {
        options = {};
      }

      var _this = _super.call(this) || this;

      _this.tempElement = document.createElement("div");

      var nextOptions = __assign({
        container: parentElement || document.body
      }, options);

      var events = {};
      EVENTS.forEach(function (name) {
        events[camelize("on " + name)] = function (e) {
          return _this.trigger(name, e);
        };
      });
      render(createElement(InnerMoveable, __assign({
        ref: ref(_this, "innerMoveable"),
        parentElement: parentElement
      }, nextOptions, events)), _this.tempElement);
      var target = nextOptions.target;

      if (isArray(target) && target.length > 1) {
        _this.updateRect();
      }

      return _this;
    }

    var __proto = MoveableManager.prototype;

    __proto.setState = function (state, callback) {
      this.innerMoveable.setState(state, callback);
    };

    __proto.destroy = function () {
      render(null, this.tempElement);
      this.off();
      this.tempElement = null;
      this.innerMoveable = null;
    };

    __proto.getMoveable = function () {
      return this.innerMoveable.moveable;
    };

    MoveableManager = __decorate([Properties(METHODS, function (prototype, property) {
      if (prototype[property]) {
        return;
      }

      prototype[property] = function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        var self = this.getMoveable();

        if (!self || !self[property]) {
          return;
        }

        return self[property].apply(self, args);
      };
    }), Properties(PROPERTIES, function (prototype, property) {
      Object.defineProperty(prototype, property, {
        get: function () {
          return this.getMoveable().props[property];
        },
        set: function (value) {
          var _a;

          this.setState((_a = {}, _a[property] = value, _a));
        },
        enumerable: true,
        configurable: true
      });
    })], MoveableManager);
    return MoveableManager;
  }(EventEmitter);

  var Moveable =
  /*#__PURE__*/
  function (_super) {
    __extends(Moveable, _super);

    function Moveable() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    return Moveable;
  }(MoveableManager);

  var dom$u = new Dom();
  var Image = /*#__PURE__*/function () {
    function Image(builder) {
      var _this2 = this;

      _classCallCheck$1(this, Image);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      var imageTool = builderStuff.querySelector('#divImageTool');
      var imageResizer;

      if (!imageTool) {
        var html = "\n                <div id=\"divImageTool\" class=\"is-tool\" style=\"background:rgba(0, 0, 0, 0.15);border:transparent 1px solid;\">\n                    <div class=\"image-embed\" style=\"".concat(this.builder.opts.imageEmbed ? '' : 'display:none;', "width:40px;height:40px;overflow:hidden;\">\n                        <div style=\"position:absolute;width:100%;height:100%;\"><svg class=\"is-icon-flex\" style=\"position: absolute;top: 13px;left: 15px;width: 14px;height: 14px;fill:rgb(255,255,255);\"><use xlink:href=\"#ion-image\"></use></svg></div>\n                        <input title=\"").concat(util.out('Change Image'), "\" data-title=\"").concat(util.out('Change Image'), "\" id=\"fileEmbedImage\" type=\"file\" accept=\"image/*\" style=\"position:absolute;top:-20px;left:0;width:100%;height:60px;opacity: 0;cursor: pointer;\"/>\n                    </div>\n                    <button title=\"").concat(util.out('Link'), "\" data-title=\"").concat(util.out('Link'), "\" class=\"image-link\" style=\"width:40px;height:40px;background:none;color:#fff;\"><svg class=\"is-icon-flex\" style=\"fill:rgba(255, 255, 255, 0.95);width:17px;height:17px;\"><use xlink:href=\"#ion-link\"></use></svg></button> \n                    <button title=\"").concat(util.out('Edit'), "\" data-title=\"").concat(util.out('Edit'), "\" class=\"image-edit\" style=\"width:40px;height:40px;background:none;color:#fff;\"><svg class=\"is-icon-flex\" style=\"fill:rgb(255,255,255);width:14px;height:14px;\"><use xlink:href=\"#ion-android-create\"></use></svg></button>\n                </div>\n                <div id=\"divImageProgress\">\n                    <div>\n                        <div class=\"dot\"></div>\n                        <div class=\"dot\"></div>\n                        <div class=\"dot\"></div>\n                    </div>\n                </div>\n                \n                <div class=\"is-modal imageedit\">\n                    <div style=\"width:auto;max-width:826px;padding-top:7px;display:flex;flex-direction:column;align-items:center;\">\n                        <div class=\"imageedit-crop\" style=\"display:flex;height:80px;align-items:center;align-self:flex-start;\">\n                            <button title=\"5x5\" data-crop-size=\"1\" style=\"width: 60px;height: 60px;\">5x5</button>\n                            <button title=\"4x3\" data-crop-size=\"1.33333\" style=\"width: 60px;height: 45px;\">4x3</button>\n                            <button title=\"3x4\" data-crop-size=\"0.75\" style=\"width: 45px;height: 60px;\">3x4</button>\n                            <button title=\"6x4\" data-crop-size=\"1.5\" style=\"width: 60px;height: 40px;\">6x4</button>\n                            <button title=\"4x6\" data-crop-size=\"0.6666\" style=\"width: 40px;height: 60px;\">4x6</button>\n                            <button title=\"").concat(util.out('Free'), "\" data-crop-size=\"\" style=\"width: 60px;height: 45px;\">").concat(util.out('Free'), "</button>\n                        </div>\n                        <div class=\"imageedit-preview\" style=\"min-width:200px;\">\n                        </div>\n                        <div style=\"margin-top:7px;text-align:right;align-self:flex-end;\">\n                            <button title=\"").concat(util.out('Cancel'), "\" class=\"input-cancel classic-secondary\">").concat(util.out('Cancel'), "</button>\n                            <button title=\"").concat(util.out('Apply'), "\" class=\"input-ok classic-primary\">").concat(util.out('Apply'), "</button>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class=\"is-modal imagelink\">\n                    <div style=\"max-width:526px;\">\n\n                        <div class=\"image-src\">\n                            <input class=\"input-src\" type=\"text\" placeholder=\"").concat(util.out('Source'), "\"/>\n                            <button title=\"").concat(util.out('Select'), "\" class=\"input-select\" style=\"flex:none;width:50px;height:50px;\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-more\"></use></svg></button>\n                            <div class=\"image-larger1\" style=\"position:relative;flex:none;width:50px;height:50px;box-shadow: 0px 3px 6px -6px rgba(0, 0, 0, 0.32);\">\n                                <form class=\"form-upload-larger\" target=\"frameTargetImageUpload\" method=\"post\" action=\"").concat(this.builder.opts.largerImageHandler, "\" enctype=\"multipart/form-data\" style=\"position:absolute;top:0;left:0;width:100%;height:100%;\">\n\t\t\t\t                    <input id=\"hidRefId1\" name=\"hidRefId\" type=\"hidden\" value=\"\" />\n                                    <svg class=\"is-icon-flex\" style=\"position: absolute;top: 16px;left: 15px;width: 18px;height: 18px;fill:rgb(53, 53, 53);\"><use xlink:href=\"#ion-image\"></use></svg>\n                                    <input title=\"").concat(util.out('Select'), "\" id=\"fileImage1\" name=\"fileImage\" type=\"file\" accept=\"image/*\" style=\"position:absolute;top:-30px;left:0;width:100%;height:80px;opacity: 0;cursor: pointer;\">\n                                </form>\n\n                                <iframe id=\"frameTargetImageUpload\" name=\"frameTargetImageUpload\" src=\"about:blank\" style=\"width:1px;height:1px;position:absolute;top:0;right:-100000px\"></iframe>\n                            </div>\n                        </div>\n\n                        <input class=\"input-title\" type=\"text\" placeholder=\"Title\" style=\"width:100%;border-top: none;\"/>\n\n                        <div class=\"image-link\">\n                            <input class=\"input-link\" type=\"text\" placeholder=\"").concat(util.out('Link'), "\" style=\"width:100%;border-top: none;\"/>\n                            <div class=\"image-larger2\" style=\"position:relative;flex:none;width:50px;height:50px;box-shadow: 0px 3px 6px -6px rgba(0, 0, 0, 0.32);\">\n                                <form class=\"form-upload-larger\" target=\"frameTargetImageUpload\" method=\"post\" action=\"").concat(this.builder.opts.largerImageHandler, "\" enctype=\"multipart/form-data\" style=\"position:absolute;top:0;left:0;width:100%;height:100%;\">\n\t\t\t\t                    <input id=\"hidRefId2\" name=\"hidRefId\" type=\"hidden\" value=\"\" />\n                                    <svg class=\"is-icon-flex\" style=\"position: absolute;top: 16px;left: 15px;width: 18px;height: 18px;fill:rgb(53, 53, 53);\"><use xlink:href=\"#ion-image\"></use></svg>\n                                    <input title=\"").concat(util.out('Select'), "\" id=\"fileImage2\" name=\"fileImage\" type=\"file\" accept=\"image/*\" style=\"position:absolute;top:-30px;left:0;width:100%;height:80px;opacity: 0;cursor: pointer;\">\n                                </form>\n                            </div>\n                        </div>\n\n                        <label style=\"display:inline-block;margin-top:14px;margin-bottom:10px;\">\n                            <input class=\"input-newwindow\" type=\"checkbox\" /> ").concat(util.out('Open New Window'), "&nbsp;\n                        </label>\n                        <div style=\"text-align:right\">\n                            <button title=\"").concat(util.out('Cancel'), "\" class=\"input-cancel classic-secondary\">").concat(util.out('Cancel'), "</button>\n                            <button title=\"").concat(util.out('Ok'), "\" class=\"input-ok classic-primary\">").concat(util.out('Ok'), "</button>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"is-modal imageselect\" style=\"z-index:10005\">\n                    <div style=\"max-width:800px;height:80%;padding:0;\">\n                        <iframe style=\"width:100%;height:100%;border: none;display: block;\" src=\"about:blank\"></iframe>\n                    </div>\n                </div>\n\n                <div id=\"divImageResizer\" data-x=0 data-y=0 class=\"is-tool moveable resizable\">\n                </div>\n                ");
        dom$u.appendHtml(builderStuff, html); // Image Tool (#divImageTool) ~~~~~~~~~~~~

        imageTool = builderStuff.querySelector('#divImageTool');
        this.imageTool = imageTool; // Image Resizer (#divImageResizer)

        imageResizer = document.querySelector('#divImageResizer');
        this.imageResizer = imageResizer; // moveable

        this.builder.moveable = new Moveable(document.body, {
          target: imageResizer,
          //document.querySelector('.resizable'),
          resizable: true,
          throttleResize: 0,
          keepRatio: true
        }).on('resize', function (_ref) {
          var target = _ref.target,
              width = _ref.width,
              height = _ref.height;

          if (width === 0 || height === 0 || isNaN(width) || isNaN(height)) {
            return;
          } // hide image tool


          _this2.imageTool.style.display = ''; // hide element tool

          var elementTool = builderStuff.querySelector('.is-element-tool');
          elementTool.style.display = ''; // get active image

          var activeImage = _this2.builder.activeImage;
          var bCircular = false;

          if (dom$u.hasClass(activeImage.parentNode, 'img-circular')) {
            activeImage = activeImage.parentNode;
            bCircular = true;
          }

          if (!bCircular) {
            activeImage.style.width = "".concat(width, "px");
            activeImage.style.height = 'auto';
          } else {
            var pl = parseFloat(window.getComputedStyle(activeImage.parentNode).getPropertyValue('padding-left'));
            var pr = parseFloat(window.getComputedStyle(activeImage.parentNode).getPropertyValue('padding-right'));
            var maxWidth = activeImage.parentNode.offsetWidth - pl - pr;
            if (width >= maxWidth) width = maxWidth;

            if (height >= width) {
              activeImage.style.width = "".concat(width, "px");
              activeImage.style.height = "".concat(width, "px");
              activeImage.querySelector('img').style.width = "".concat(width, "px");
              activeImage.querySelector('img').style.height = "".concat(width, "px");
            } else {
              activeImage.style.width = "".concat(width, "px");
              activeImage.style.height = "".concat(height, "px");
              activeImage.querySelector('img').style.width = "".concat(width, "px");
              activeImage.querySelector('img').style.height = "".concat(height, "px");
            }
          } // sync (target = imageResizer)


          target.style.top = activeImage.getBoundingClientRect().top + window.pageYOffset + 'px';
          target.style.left = activeImage.getBoundingClientRect().left + window.pageXOffset + 'px';
          target.style.width = activeImage.offsetWidth + 'px';
          target.style.height = activeImage.offsetHeight + 'px';

          _this2.repositionHandler(activeImage.offsetWidth, activeImage.offsetHeight); // https://stackoverflow.com/questions/29908261/prevent-text-selection-on-mouse-drag
          // prevent text selection


          if (document.selection) {
            document.selection.empty();
          } else {
            window.getSelection().removeAllRanges();
          } // Hide column tool


          var columnTool = builderStuff.querySelector('.is-column-tool');
          dom$u.removeClass(columnTool, 'active');
        }).on('resizeEnd', function (_ref2) {
          var target = _ref2.target;
          var activeImage = _this2.builder.activeImage;
          var bCircular = false;

          if (dom$u.hasClass(activeImage.parentNode, 'img-circular')) {
            activeImage = activeImage.parentNode;
            bCircular = true;
          } //target = imageResizer
          // var originalWidth = target.getAttribute('data-width');
          // var currentWidth = activeImage.offsetWidth;
          // var percentage = (currentWidth / originalWidth) * 100;
          // activeImage.style.width = percentage + '%';
          // https://stackoverflow.com/questions/25197184/get-the-height-of-an-element-minus-padding-margin-border-widths


          var cs = getComputedStyle(activeImage.parentNode);
          var paddingX = parseFloat(cs.paddingLeft) + parseFloat(cs.paddingRight); //var paddingY = parseFloat(cs.paddingTop) + parseFloat(cs.paddingBottom);

          var borderX = parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth); //var borderY = parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth);
          // Element width and height minus padding and border

          var elementWidth = activeImage.parentNode.offsetWidth - paddingX - borderX; //var elementHeight = activeImage.parentNode.offsetHeight - paddingY - borderY;

          if (!bCircular) {
            var parentWidth = elementWidth; //activeImage.parentNode.offsetWidth;

            var currentWidth = activeImage.offsetWidth;
            var percentage = currentWidth / parentWidth * 100;
            activeImage.style.width = percentage + '%';
          }

          if (_this2.builder.opts.emailMode) {
            //activeImage.setAttribute('width', percentage + '%');
            activeImage.setAttribute('width', currentWidth);
          }

          target.setAttribute('data-resized', 1);
          setTimeout(function () {
            target.setAttribute('data-resized', 0);
          }, 300); //Trigger Change event

          _this2.builder.opts.onChange(); // Show column tool


          var columnTool = builderStuff.querySelector('.is-column-tool');
          dom$u.addClass(columnTool, 'active');
        });
        document.querySelector('.moveable-control-box').style.display = 'none';
        imageResizer.addEventListener('click', function () {
          _this2.repositionImageTool();

          _this2.builder.elmTool.repositionElementTool();
        }); // Browse local image

        var elm = imageTool.querySelector('#fileEmbedImage');
        dom$u.addEventListener(elm, 'change', function (e) {
          _this2.builder.uo.saveForUndo();

          var input = e.target;
          var img = _this2.builder.activeImage;
          /*
          var canvas = document.getElementById('Canvas'),
          context = canvas.getContext('2d');
          var reader = new FileReader();
          reader.addEventListener("load", (e)=>{
              var src_image = document.querySelector('#_preview');
              src_image.addEventListener("load", ()=>{
                  canvas.height = src_image.height;
                  canvas.width = src_image.width;
                  context.drawImage(src_image, 0, 0);
                  var imageData = canvas.toDataURL("image/png"); 
                  img.src = imageData;
              });
              src_image.src = e.target.result;
          });
          reader.readAsDataURL(input.files[0]);
          return;
          */
          //imageTool.style.display = 'none';

          var imageProgress = builderStuff.querySelector('#divImageProgress');
          imageProgress.style.display = 'table';
          imageProgress.style.width = img.offsetWidth + 'px';
          imageProgress.style.height = img.offsetHeight + 'px';
          imageProgress.style.top = img.getBoundingClientRect().top + window.pageYOffset + 'px';
          imageProgress.style.left = img.getBoundingClientRect().left + window.pageXOffset + 'px'; //The #fileEmbedImage triggered 2 times in IE (because of clearInputs below). This makes input.files[0].name returns error on 2nd trigger. Just add try{}!

          try {
            img.setAttribute('data-filename', input.files[0].name); //needed for saveimage.js | 

            _this2.processImage(input.files[0], img, function () {
              imageProgress.style.display = 'none';
              elm = imageTool.querySelector('#fileEmbedImage');
              elm.value = ''; //clear input
              //Check if image is part of module snippet. If so, refresh the (active) module (hide imageTool). If not, refresh imageTool position

              _this2.refreshIfIsModule(img); //Trigger Change event


              _this2.builder.opts.onChange();

              _this2.builder.elmTool.refresh();
            });
          } catch (e) {
            imageProgress.style.display = 'none';
          }
        }); // Trigger onImageBrowseClick (if set), will cancel browsing local image

        if (this.builder.opts.onImageBrowseClick) {
          elm = imageTool.querySelector('.image-embed');
          dom$u.addEventListener(elm, 'click', function (e) {
            _this2.builder.opts.onImageBrowseClick();

            e.preventDefault();
            return false;
          });
        } // Image Link Dialog (.is-modal.imagelink) ~~~~~~~~~~~~


        var modalImageLink = builderStuff.querySelector('.imagelink');

        if (this.builder.opts.largerImageHandler === '') {
          modalImageLink.querySelector('.image-larger1').style.display = 'none';
          modalImageLink.querySelector('.image-larger2').style.display = 'none';
        }

        if (!this.builder.opts.onImageSelectClick && this.builder.opts.imageselect === '') {
          modalImageLink.querySelector('.input-select').style.display = 'none';
        } // Open Link dialog. Old: 9886


        elm = imageTool.querySelector('.image-link');
        dom$u.addEventListener(elm, 'click', function () {
          //imageTool.style.display = 'none';
          document.querySelector('.moveable-control-box').style.display = 'none'; //needed by Safari (prevent z-index problem)

          if (_this2.builder.opts.onImageSettingClick) {
            _this2.builder.opts.onImageSettingClick();

            return false;
          }

          var img = _this2.builder.activeImage;
          var lnk;

          if (img.parentNode.tagName.toLowerCase() === 'a' && img.parentNode.childElementCount === 1) {
            lnk = img.parentNode;
          } //get values


          var src = img.getAttribute('src'); //img.src;

          var title = img.getAttribute('alt');
          var inputSrc = modalImageLink.querySelector('.input-src');

          if (src.indexOf('base64') === -1) {
            inputSrc.value = src;
          } else {
            inputSrc.value = '[Image Data]';
          }

          var inputTitle = modalImageLink.querySelector('.input-title');
          inputTitle.value = title;
          var inputLink = modalImageLink.querySelector('.input-link');
          inputLink.value = '';
          var inputTarget = modalImageLink.querySelector('.input-newwindow');
          inputTarget.checked = false;

          if (lnk) {
            inputLink.value = lnk.getAttribute('href');

            if (title === '') {
              var lnkTitle = lnk.getAttribute('title');
              if (lnkTitle) inputTitle.value = lnkTitle;
            }

            var target = lnk.getAttribute('target');

            if (target === '_blank') {
              inputTarget.checked = true;
            } else {
              inputTarget.checked = false;
            }
          }

          util.showModal(modalImageLink, true, null, true);
          inputSrc.focus();
        }); // Cancel

        elm = modalImageLink.querySelector('.input-cancel');
        dom$u.addEventListener(elm, 'click', function () {
          util.hideModal(modalImageLink);
          document.querySelector('.moveable-control-box').style.display = 'block'; //needed by Safari (prevent z-index problem)
        }); // Apply link to image

        elm = modalImageLink.querySelector('.input-ok');
        dom$u.addEventListener(elm, 'click', function () {
          _this2.builder.uo.saveForUndo();

          var img = _this2.builder.activeImage;
          var lnk;

          if (img.parentNode.tagName.toLowerCase() === 'a' && img.parentNode.childElementCount === 1) {
            lnk = img.parentNode;
          }

          var src = modalImageLink.querySelector('.input-src').value;
          var title = modalImageLink.querySelector('.input-title').value;
          var link = modalImageLink.querySelector('.input-link').value;

          if (src.indexOf('[Image Data]') === -1) {
            img.setAttribute('src', src);
          }

          img.setAttribute('alt', title);

          if (link !== '') {
            if (lnk) {
              lnk.setAttribute('href', link);
              lnk.setAttribute('title', title);

              if (modalImageLink.querySelector('.input-newwindow').checked) {
                lnk.setAttribute('target', '_blank');
              } else {
                lnk.removeAttribute('target');
              }

              if (link.toLowerCase().indexOf('.jpg') !== -1 || link.toLowerCase().indexOf('.jpeg') !== -1 || link.toLowerCase().indexOf('.png') !== -1 || link.toLowerCase().indexOf('.gif') !== -1) {
                dom$u.addClass(lnk, 'is-lightbox');
              } else {
                dom$u.removeClass(lnk, 'is-lightbox');
              }
            } else {
              //Create link
              lnk = dom$u.createElement('a');
              lnk.setAttribute('href', link);
              lnk.setAttribute('title', title);
              lnk.innerHTML = img.outerHTML;

              if (modalImageLink.querySelector('.input-newwindow').checked) {
                lnk.setAttribute('target', '_blank');
              } else {
                lnk.removeAttribute('target');
              }

              if (link.toLowerCase().indexOf('.jpg') !== -1 || link.toLowerCase().indexOf('.jpeg') !== -1 || link.toLowerCase().indexOf('.png') !== -1 || link.toLowerCase().indexOf('.gif') !== -1) {
                dom$u.addClass(lnk, 'is-lightbox');
              } else {
                dom$u.removeClass(lnk, 'is-lightbox');
              }

              img.outerHTML = lnk.outerHTML;
            }
          } else {
            if (lnk) {
              //Remove link
              lnk.outerHTML = lnk.innerHTML;
            }
          } //Check if image is part of module snippet. If so, refresh the (active) module (hide imageTool). If not, refresh imageTool position


          _this2.refreshIfIsModule(img); //Trigger Change event


          _this2.builder.opts.onChange(); //Trigger Render event


          _this2.builder.opts.onRender();

          util.hideModal(modalImageLink);

          _this2.builder.elmTool.refresh();
        }); // Select image (opens Asset Manager plugin or custom dialog)

        var divImageSrc = modalImageLink.querySelector('.image-src');

        if (this.builder.opts.onImageSelectClick || this.builder.opts.imageselect) {
          elm = modalImageLink.querySelector('.input-select');
          if (elm) dom$u.addEventListener(elm, 'click', function () {
            if (_this2.builder.opts.onImageSelectClick) {
              _this2.builder.opts.onImageSelectClick({
                targetInput: modalImageLink.querySelector('.input-src'),
                theTrigger: elm
              });
            } else {
              var modalImageSelect = builderStuff.querySelector('.is-modal.imageselect');
              var iframe = modalImageSelect.querySelector('iframe');

              if (iframe.src === 'about:blank') {
                iframe.src = _this2.builder.opts.imageselect;
              }

              util.showModal(modalImageSelect);
            }
          });
        } else {
          dom$u.removeClass(divImageSrc, 'image-select');
        }

        var fileLargerImage1 = modalImageLink.querySelector('#fileImage1');
        dom$u.addEventListener(fileLargerImage1, 'change', function (e) {
          var element = fileLargerImage1;

          while (element.nodeName.toLowerCase() !== 'form') {
            element = element.parentNode;
          }

          var frmUpload = element;
          dom$u.addClass(frmUpload, 'please-wait');
          modalImageLink.querySelector('#hidRefId1').value = _this2.builder.opts.customval; // frmUpload.submit();

          if (_this2.builder.opts.onLargerImageUpload) {
            _this2.builder.opts.onLargerImageUpload(e);
          } else {
            frmUpload.submit();
          }
        });
        var fileLargerImage2 = modalImageLink.querySelector('#fileImage2');
        dom$u.addEventListener(fileLargerImage2, 'change', function (e) {
          var element = fileLargerImage2;

          while (element.nodeName.toLowerCase() !== 'form') {
            element = element.parentNode;
          }

          var frmUpload = element;
          dom$u.addClass(frmUpload, 'please-wait');
          modalImageLink.querySelector('#hidRefId2').value = _this2.builder.opts.customval; // frmUpload.submit();

          if (_this2.builder.opts.onLargerImageUpload) {
            _this2.builder.opts.onLargerImageUpload(e);
          } else {
            frmUpload.submit();
          }
        }); // Image Edit Dialog (.is-modal.imageedit) ~~~~~~~~~~~~

        var modalImageEdit = builderStuff.querySelector('.imageedit'); // Edit (crop) image

        elm = imageTool.querySelector('.image-edit');
        dom$u.addEventListener(elm, 'click', function () {
          var img = _this2.builder.activeImage;
          util.showModal(modalImageEdit, true);
          var preview = modalImageEdit.querySelector('.imageedit-preview');
          var maxW = 800;
          var maxH = 550;

          if (img.offsetWidth < maxW && img.offsetHeight < maxH) {
            preview.style.width = img.offsetWidth + 'px';
          } else {
            var h = maxW * img.offsetHeight / img.offsetWidth; // test useing maxW

            if (h <= maxH) {
              //ok
              preview.style.width = maxW + 'px';
            } else {
              preview.style.height = maxH + 'px';
            }
          }

          preview.innerHTML = '<img src="" style="max-width:100%"/>';
          var imagePreview = modalImageEdit.querySelector('img');
          imagePreview.src = img.src;
          _this2.cropper = new Cropper(imagePreview, {
            zoomable: false
          });
          document.querySelector('.moveable-control-box').style.display = 'none'; //needed by Safari (prevent z-index problem)
        }); // Set crop proportion

        var cropOptions = modalImageEdit.querySelector('.imageedit-crop');
        var btns = cropOptions.querySelectorAll('button');
        Array.prototype.forEach.call(btns, function (btn) {
          dom$u.addEventListener(btn, 'click', function () {
            var aspectRatio = btn.getAttribute('data-crop-size') * 1;

            _this2.cropper.setAspectRatio(aspectRatio);
          });
        }); // Cancel image edit

        var btnCancel = modalImageEdit.querySelector('.input-cancel');
        dom$u.addEventListener(btnCancel, 'click', function () {
          util.hideModal(modalImageEdit);
          document.querySelector('.moveable-control-box').style.display = 'block'; //needed by Safari (prevent z-index problem)
        }); // Apply (crop) image

        elm = modalImageEdit.querySelector('.input-ok');
        dom$u.addEventListener(elm, 'click', function () {
          _this2.builder.uo.saveForUndo();

          var img = _this2.builder.activeImage;
          var attr = img.getAttribute('data-filename');
          var extension = 'jpg';

          if (attr) {
            extension = attr.substr(attr.lastIndexOf('.') + 1).toLowerCase();
          } else {
            // no data-filename found (image from snippets)
            var f = img.src;
            if (f.indexOf('/') > -1) img.setAttribute('data-filename', f.substr(f.lastIndexOf('/') + 1));else img.setAttribute('data-filename', f);
            extension = f.substr(f.lastIndexOf('.') + 1).toLowerCase();
          }

          if (extension === 'jpg') {
            img.src = _this2.cropper.getCroppedCanvas({
              fillColor: '#fff'
            }).toDataURL('image/jpeg');
          } else {
            img.src = _this2.cropper.getCroppedCanvas({}).toDataURL();
          } //Check if image is part of module snippet. If so, refresh the (active) module (hide imageTool). If not, refresh imageTool position


          _this2.refreshIfIsModule(img); //Trigger Change event


          _this2.builder.opts.onChange();

          util.hideModal(modalImageEdit);

          _this2.builder.elmTool.refresh();
        });
      }
    }

    _createClass$1(Image, [{
      key: "refreshIfIsModule",
      value: function refreshIfIsModule(elm) {
        var _this3 = this;

        var isModule = dom$u.parentsHasAttribute(elm, 'data-html');

        if (isModule) {
          this.imageTool.style.display = ''; // Extra: make image[data-image-embed] clickable/editable

          if (elm.hasAttribute('data-sync')) {
            var originalSrc = elm.getAttribute('data-src');
            var originalFilename = elm.getAttribute('data-filename');

            if (originalSrc) {
              var element = elm;

              while (!element.getAttribute('data-html')) {
                element = element.parentNode;
              }

              var module = element;
              var imgs = module.querySelectorAll('img');
              Array.prototype.forEach.call(imgs, function (img) {
                if (img.src === originalSrc) {
                  img.src = elm.src;
                  img.removeAttribute('data-src');
                  img.setAttribute('data-filename', originalFilename);
                }
              });
              elm.removeAttribute('data-src');
            }
          }

          setTimeout(function () {
            _this3.util.refreshModule();

            _this3.imageTool.style.display = '';
          }, 1000);
        } else {
          this.refresh();
        }
      }
    }, {
      key: "refresh",
      value: function refresh() {
        var _this4 = this;

        if (this.builder.activeImage) {
          var imageTool = this.imageTool;
          imageTool.style.display = '';
          setTimeout(function () {
            var elm = _this4.builder.activeImage;

            if (dom$u.hasClass(elm.parentNode, 'img-circular')) {
              elm = elm.parentNode;
            }

            imageTool.style.display = 'flex';
            var _toolwidth = imageTool.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

            var w = elm.offsetWidth;
            var top = elm.getBoundingClientRect().top + window.pageYOffset;
            var left = elm.getBoundingClientRect().left;
            left = left + (w / 2 - _toolwidth / 2); //Adjust left in case an element is outside the screen

            var _screenwidth = window.innerWidth;
            if (_toolwidth + left > _screenwidth) left = elm.getBoundingClientRect().left;
            imageTool.style.top = top + 'px';
            imageTool.style.left = left + 'px';
            var imageResizer = _this4.imageResizer;
            imageResizer.style.top = elm.getBoundingClientRect().top + window.pageYOffset + 'px';
            imageResizer.style.left = elm.getBoundingClientRect().left + window.pageXOffset + 'px';
            imageResizer.style.width = elm.offsetWidth + 'px';
            imageResizer.style.height = elm.offsetHeight + 'px';
            imageResizer.style.display = 'block';

            _this4.repositionHandler(elm.offsetWidth, elm.offsetHeight); // moveable


            _this4.builder.moveable.updateRect();

            document.querySelector('.moveable-control-box').style.display = 'block';

            if (elm.offsetWidth === 0) {
              // when there is image link applied
              // let imageTool = this.imageTool;
              imageTool.style.display = '';
              _this4.builder.activeImage = null; // let imageResizer = this.imageResizer;

              imageResizer.style.display = 'none'; // moveable

              imageResizer.style.top = '-10px';
              imageResizer.style.left = '-10px';
              imageResizer.style.width = '1px';
              imageResizer.style.height = '1px';

              _this4.builder.moveable.updateRect();

              document.querySelector('.moveable-control-box').style.display = 'none';
            }
          }, 300);
        }
      }
    }, {
      key: "repositionImageTool",
      value: function repositionImageTool() {
        // = refresh(), but without delay
        if (this.builder.activeImage) {
          var imageTool = this.imageTool;
          var elm = this.builder.activeImage;

          if (dom$u.hasClass(elm.parentNode, 'img-circular')) {
            elm = elm.parentNode;
          }

          imageTool.style.display = 'flex';
          var _toolwidth = imageTool.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

          var w = elm.offsetWidth;
          var top = elm.getBoundingClientRect().top + window.pageYOffset;
          var left = elm.getBoundingClientRect().left;
          left = left + (w / 2 - _toolwidth / 2); //Adjust left in case an element is outside the screen

          var _screenwidth = window.innerWidth;
          if (_toolwidth + left > _screenwidth) left = elm.getBoundingClientRect().left;
          imageTool.style.top = top + 'px';
          imageTool.style.left = left + 'px';
          var imageResizer = this.imageResizer;
          imageResizer.style.top = elm.getBoundingClientRect().top + window.pageYOffset + 'px';
          imageResizer.style.left = elm.getBoundingClientRect().left + window.pageXOffset + 'px';
          imageResizer.style.width = elm.offsetWidth + 'px';
          imageResizer.style.height = elm.offsetHeight + 'px';
          imageResizer.style.display = 'block';
          this.repositionHandler(elm.offsetWidth, elm.offsetHeight); // moveable

          this.builder.moveable.updateRect();
          document.querySelector('.moveable-control-box').style.display = 'block';
        }
      }
    }, {
      key: "click",
      value: function click(e) {
        var elm = e.target; //Image

        if (elm.tagName.toLowerCase() === 'img') {
          /* <img data-fixed src=".." /> (image must be fixed, cannot be replaced) */
          var fixedImage = false;

          if (elm.hasAttribute('data-fixed')) {
            fixedImage = true;
          }

          if (!fixedImage) {
            this.builder.activeImage = elm;

            if (dom$u.hasClass(elm.parentNode, 'img-circular')) {
              elm = elm.parentNode;
            }

            var imageTool = this.imageTool;
            imageTool.style.display = 'flex';
            var _toolwidth = imageTool.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

            var w = elm.offsetWidth;
            var top = elm.getBoundingClientRect().top + window.pageYOffset; // let left = elm.getBoundingClientRect().left - 2;
            // left = left + (w - _toolwidth);

            var left = elm.getBoundingClientRect().left;
            left = left + (w / 2 - _toolwidth / 2); //Adjust left in case an element is outside the screen

            var _screenwidth = window.innerWidth;
            if (_toolwidth + left > _screenwidth) left = elm.getBoundingClientRect().left;
            imageTool.style.top = top + 'px';
            imageTool.style.left = left + 'px'; // Image Resizer

            if (!elm.hasAttribute('data-noresize')) {
              var imageResizer = this.imageResizer;
              imageResizer.style.top = elm.getBoundingClientRect().top + window.pageYOffset + 'px';
              imageResizer.style.left = elm.getBoundingClientRect().left + window.pageXOffset + 'px';
              imageResizer.style.width = elm.offsetWidth + 'px';
              imageResizer.style.height = elm.offsetHeight + 'px';
              imageResizer.style.display = 'block';
              this.repositionHandler(elm.offsetWidth, elm.offsetHeight); //Get & save original image width

              var imgwidth = elm.style.width;
              var imgwidthpx;

              if (imgwidth.indexOf('%') !== -1) {
                imgwidth = imgwidth.replace('%', '') * 1;
                imgwidthpx = elm.offsetWidth * 100 / imgwidth;
              } else {
                imgwidthpx = elm.offsetWidth;
              }

              imageResizer.setAttribute('data-width', Math.round(imgwidthpx)); // moveable

              this.builder.moveable.updateRect();
              document.querySelector('.moveable-control-box').style.display = 'block';
            } else {
              var _imageResizer = this.imageResizer;
              _imageResizer.style.display = 'none'; // moveable

              _imageResizer.style.top = '-10px';
              _imageResizer.style.left = '-10px';
              _imageResizer.style.width = '1px';
              _imageResizer.style.height = '1px';
              this.builder.moveable.updateRect();
              document.querySelector('.moveable-control-box').style.display = 'none';
            }

            var prog = false;

            if (e.screenX && e.screenX !== 0 && e.screenY && e.screenY !== 0) ; else {
              // console.log('Programmatically');
              prog = true;
            }

            if (prog) {
              imageTool.style.display = '';
              var _imageResizer2 = this.imageResizer;
              _imageResizer2.style.display = 'none'; // moveable

              _imageResizer2.style.top = '-10px';
              _imageResizer2.style.left = '-10px';
              _imageResizer2.style.width = '1px';
              _imageResizer2.style.height = '1px';
              this.builder.moveable.updateRect();
              document.querySelector('.moveable-control-box').style.display = 'none';
            } // NOTE:
            // if(this.builder.isTouchSupport) { //prevent keyboard open
            //     const builderStuff = this.util.builderStuff();
            //     const rteTool = builderStuff.querySelector('#divRteTool');
            //     const btnFocus = rteTool.querySelector('button'); 
            //     btnFocus.focus();
            //     setTimeout(()=>{
            //         btnFocus.focus();
            //     },100);
            // }

          } else {
            var _imageTool = this.imageTool;
            _imageTool.style.display = '';
            this.builder.activeImage = null;
            var _imageResizer3 = this.imageResizer;
            _imageResizer3.style.display = 'none'; // moveable

            _imageResizer3.style.top = '-10px';
            _imageResizer3.style.left = '-10px';
            _imageResizer3.style.width = '1px';
            _imageResizer3.style.height = '1px';
            this.builder.moveable.updateRect();
            document.querySelector('.moveable-control-box').style.display = 'none';
          }
        } else {
          var _imageTool2 = this.imageTool;
          _imageTool2.style.display = '';
          this.builder.activeImage = null;
          var _imageResizer4 = this.imageResizer;
          _imageResizer4.style.display = 'none'; // moveable

          _imageResizer4.style.top = '-10px';
          _imageResizer4.style.left = '-10px';
          _imageResizer4.style.width = '1px';
          _imageResizer4.style.height = '1px';
          this.builder.moveable.updateRect();
          document.querySelector('.moveable-control-box').style.display = 'none';
        }
      } // Image Resizer

    }, {
      key: "repositionHandler",
      value: function repositionHandler(width, height) {
        var imageResizer = document.querySelector('#divImageResizer');
        imageResizer.style.width = width + 'px';
        imageResizer.style.height = height + 'px';
      }
    }, {
      key: "processImage",
      value: function processImage(file, targetImg, processImageDone) {
        var _this5 = this;

        //file can also be an URL (from the same host), ex. file = "/assets/image.jpg";
        if (!file) {
          processImageDone();
          return false;
        }

        if (!document.getElementById('myTmpCanvasNoCrop')) {
          var new_canvas = document.createElement('canvas');
          new_canvas.id = 'myTmpCanvasNoCrop';
          new_canvas.style.display = 'none';
          document.querySelector('body').appendChild(new_canvas);
        }

        if (this.builder.opts.autoResizeImageEmbed) {
          // var imgName;
          var extension;

          if (!file.name) {
            //file is an URL
            // imgName = file.substr((file.lastIndexOf('/') + 1));
            extension = file.substr(file.lastIndexOf('.') + 1).toLowerCase();
          } else {
            //file is an image file
            // imgName = file.name;
            extension = file.name.substr(file.name.lastIndexOf('.') + 1).toLowerCase();
          }

          var type, quality;

          if (extension === 'jpg' || extension === 'jpeg') {
            type = 'image/jpeg';
            quality = this.builder.opts.imageQuality;
          } else {
            type = 'image/png';
            quality = 1;
          }

          loadImage(file, function (img, data) {
            var orientation;

            if (data.exif) {
              orientation = data.exif.get('Orientation');
            } //Check orientation
            //http://stackoverflow.com/questions/20600800/js-client-side-exif-orientation-rotate-and-mirror-jpeg-images


            var initialWidth;
            var initialHeight;

            if (4 < orientation && orientation < 9) {
              //potrait          
              initialWidth = img.height;
              initialHeight = img.width;
            } else {
              //landscape
              initialWidth = img.width;
              initialHeight = img.height;
            } // Use normal process for small images
            // if(initialWidth <200 && initialHeight<200) {


            if (initialWidth < 1200 && initialHeight < 1200) {
              var reader = new FileReader();
              reader.addEventListener('load', function (e) {
                if (!document.getElementById('__preview')) {
                  var previewImage = document.createElement('img');
                  previewImage.id = '__preview';
                  previewImage.style.display = 'none';

                  var builderStuff = _this5.util.builderStuff();

                  dom$u.appendChild(builderStuff, previewImage);
                }

                var src_image = document.querySelector('#__preview');

                src_image.onload = function () {
                  var tmpCanvasNoCrop = document.getElementById('myTmpCanvasNoCrop');
                  var context = tmpCanvasNoCrop.getContext('2d');
                  tmpCanvasNoCrop.height = src_image.height;
                  tmpCanvasNoCrop.width = src_image.width;
                  context.drawImage(src_image, 0, 0);
                  var imageData = tmpCanvasNoCrop.toDataURL('image/png');
                  targetImg.src = imageData;
                  src_image.onload = null;
                  tmpCanvasNoCrop.parentNode.removeChild(tmpCanvasNoCrop);
                  processImageDone();
                };

                src_image.src = e.target.result;
              });
              reader.readAsDataURL(file);
              return;
            } //Specify target dimension: 2 times bigger than placement, but not more than 1200px


            var targetWidth = targetImg.clientWidth * 2;
            if (targetWidth > 1200) targetWidth = 1200;
            targetWidth = 1200; //force target width to 1200px

            var targetHeight = targetWidth * initialHeight / initialWidth; //Adjust target dimension (in case image is smaller than targeted dimension)

            var resize = false; // var targetWidth; var targetHeight;

            if (initialHeight <= targetHeight && initialWidth > targetWidth) {
              //Original height is smaller than placeholder height. Original width is bigger than placeholder width.
              //targetWidth = targetWidth;
              targetHeight = initialHeight * targetWidth / initialWidth;

              if (initialHeight <= targetHeight) {
                targetHeight = initialHeight;
                targetWidth = initialHeight * targetWidth / targetHeight;
              }

              resize = true;
            } else if (initialWidth <= targetWidth && initialHeight > targetHeight) {
              //Original width is smaller than placeholder width. Original height is bigger than placeholder height.
              //targetHeight = targetHeight;
              targetWidth = initialWidth * targetHeight / initialHeight;

              if (initialWidth <= targetWidth) {
                targetWidth = initialWidth;
                targetHeight = initialWidth * targetHeight / targetWidth;
              }

              resize = true;
            } else if (initialWidth <= targetWidth && initialHeight <= targetHeight) {
              //no resize (original image is smaller than placeholder)
              targetWidth = initialWidth;
              targetHeight = initialHeight;
            } else {
              //targetWidth = targetWidth;
              targetHeight = initialHeight * targetWidth / initialWidth;
              resize = true;
            }

            if (type === 'image/png') {
              resize = false;
            }

            if (!resize) {
              // NEW: this is to prevent using MegaPixImage (problem with some PNG. PNG doesn't need to resize, so no need to use MegaPixImage)
              var _tmpCanvasNoCrop = document.getElementById('myTmpCanvasNoCrop');

              var context = _tmpCanvasNoCrop.getContext('2d');

              _tmpCanvasNoCrop.height = initialHeight;
              _tmpCanvasNoCrop.width = initialWidth;
              context.drawImage(img, 0, 0);

              targetImg.onload = function () {
                targetImg.onload = null;
                targetImg.src = _tmpCanvasNoCrop.toDataURL(type, quality); //finished

                _tmpCanvasNoCrop.parentNode.removeChild(_tmpCanvasNoCrop);

                processImageDone();
              };

              targetImg.src = _tmpCanvasNoCrop.toDataURL(type, quality);
              return;
            } //RENDER (tmpCanvasNoCrop)                    


            var mpImg = new MegaPixImage(img);
            var tmpCanvasNoCrop = document.getElementById('myTmpCanvasNoCrop');
            mpImg.render(tmpCanvasNoCrop, {
              width: initialWidth,
              height: initialHeight,
              orientation: orientation
            }, function () {
              if (resize) {
                //RESIZE (tmpCanvasNoCrop) with good quality.  
                //var tmpImg = new Image();
                var iW = initialWidth;
                var iH = initialHeight;

                targetImg.onload = function () {
                  _this5.count++; // count increment

                  iW /= 2;
                  iH /= 2;

                  if (iW < targetWidth || iH < targetHeight) {
                    iW = targetWidth;
                    iH = targetHeight;
                  }

                  var mpImg = new MegaPixImage(targetImg); //console.log(iW + ' ' + iH)

                  mpImg.render(tmpCanvasNoCrop, {
                    width: iW,
                    height: iH
                  }, function () {
                    // must specify both width & height correctly (proportionally) 
                    if (iW <= targetWidth || iH <= targetHeight) {
                      targetImg.src = tmpCanvasNoCrop.toDataURL(type, quality); //finished
                      //console.log(this.count); // count check

                      if (_this5.count === 3) {
                        targetImg.onload = null;

                        try {
                          tmpCanvasNoCrop.parentNode.removeChild(tmpCanvasNoCrop);
                        } catch (e) {// Do Nothing
                        }

                        processImageDone();
                      }

                      try {
                        tmpCanvasNoCrop.parentNode.removeChild(tmpCanvasNoCrop);
                      } catch (e) {// Do Nothing
                      }

                      processImageDone();
                      return false;
                    }

                    targetImg.src = tmpCanvasNoCrop.toDataURL(type, quality); //console.log(this.count); // count check

                    if (_this5.count === 3) {
                      targetImg.onload = null;

                      try {
                        tmpCanvasNoCrop.parentNode.removeChild(tmpCanvasNoCrop);
                      } catch (e) {// Do Nothing
                      }

                      processImageDone();
                    }
                  });
                };

                targetImg.src = tmpCanvasNoCrop.toDataURL(type, quality);
                _this5.count = 0; //console.log(this.count); // count start
              } else {
                targetImg.src = tmpCanvasNoCrop.toDataURL(type, quality); //finished

                tmpCanvasNoCrop.parentNode.removeChild(tmpCanvasNoCrop);
                processImageDone();
              }
            });
          }, {
            canvas: false,
            meta: true
          });
        } else {
          var reader = new FileReader();
          reader.addEventListener('load', function (e) {
            //Problem: image not fully rendered
            // targetImg.onload = ()=> {
            //     let tmpCanvasNoCrop = document.getElementById('myTmpCanvasNoCrop');
            //     let context = tmpCanvasNoCrop.getContext('2d');
            //     tmpCanvasNoCrop.height = targetImg.height;
            //     tmpCanvasNoCrop.width = targetImg.width;
            //     context.drawImage(targetImg, 0, 0);
            //     let imageData = tmpCanvasNoCrop.toDataURL("image/png"); 
            //     targetImg.src = imageData;
            //     targetImg.onload = null;
            //     //tmpCanvasNoCrop.parentNode.removeChild(tmpCanvasNoCrop);
            //     processImageDone();
            // }
            // targetImg.src = e.target.result;
            //Fix:
            if (!document.getElementById('__preview')) {
              var previewImage = document.createElement('img');
              previewImage.id = '__preview';
              previewImage.style.display = 'none';

              var builderStuff = _this5.util.builderStuff();

              dom$u.appendChild(builderStuff, previewImage);
            }

            var src_image = document.querySelector('#__preview');

            src_image.onload = function () {
              var tmpCanvasNoCrop = document.getElementById('myTmpCanvasNoCrop');
              var context = tmpCanvasNoCrop.getContext('2d');
              tmpCanvasNoCrop.height = src_image.height;
              tmpCanvasNoCrop.width = src_image.width;
              context.drawImage(src_image, 0, 0);
              var imageData = tmpCanvasNoCrop.toDataURL('image/png');
              targetImg.src = imageData;
              src_image.onload = null;
              tmpCanvasNoCrop.parentNode.removeChild(tmpCanvasNoCrop);
              processImageDone();
            };

            src_image.src = e.target.result;
          });
          reader.readAsDataURL(file);
          return;
        }
      }
    }]);

    return Image;
  }();
  /*! Mega pixel image rendering library for iOS6 Safari | Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com> | MIT license | https://github.com/stomita/ios-imagefile-megapixel */

  /**
   * Mega pixel image rendering library for iOS6 Safari
   *
   * Fixes iOS6 Safari's image file rendering issue for large size image (over mega-pixel),
   * which causes unexpected subsampling when drawing it in canvas.
   * By using this library, you can safely render the image with proper stretching.
   *
   * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>
   * Released under the MIT license
   */

  /**
   * Detect subsampling in loaded image.
   * In iOS, larger images than 2M pixels may be subsampled in rendering.
   */

  function detectSubsampling(img) {
    var iw = img.naturalWidth,
        ih = img.naturalHeight;

    if (iw * ih > 1024 * 1024) {
      // subsampling may happen over megapixel image
      var canvas = document.createElement('canvas');
      canvas.width = canvas.height = 1;
      var ctx = canvas.getContext('2d');
      ctx.drawImage(img, -iw + 1, 0); // subsampled image becomes half smaller in rendering size.
      // check alpha channel value to confirm image is covering edge pixel or not.
      // if alpha value is 0 image is not covering, hence subsampled.

      return ctx.getImageData(0, 0, 1, 1).data[3] === 0;
    } else {
      return false;
    }
  }
  /**
   * Detecting vertical squash in loaded image.
   * Fixes a bug which squash image vertically while drawing into canvas for some images.
   */


  function detectVerticalSquash(img, iw, ih) {
    var canvas = document.createElement('canvas');
    canvas.width = 1;
    canvas.height = ih;
    var ctx = canvas.getContext('2d');
    ctx.drawImage(img, 0, 0);
    var data = ctx.getImageData(0, 0, 1, ih).data; // search image edge pixel position in case it is squashed vertically.

    var sy = 0;
    var ey = ih;
    var py = ih;

    while (py > sy) {
      var alpha = data[(py - 1) * 4 + 3];

      if (alpha === 0) {
        ey = py;
      } else {
        sy = py;
      }

      py = ey + sy >> 1;
    }

    var ratio = py / ih;
    return ratio === 0 ? 1 : ratio;
  }
  /**
   * Rendering image element (with resizing) and get its data URL
   */


  function renderImageToDataURL(img, options, doSquash) {
    var canvas = document.createElement('canvas');
    renderImageToCanvas(img, canvas, options, doSquash);
    return canvas.toDataURL('image/jpeg', options.quality || 0.8);
  }
  /**
   * Rendering image element (with resizing) into the canvas element
   */


  function renderImageToCanvas(img, canvas, options, doSquash) {
    var iw = img.naturalWidth,
        ih = img.naturalHeight;
    if (!(iw + ih)) return;
    var width = options.width,
        height = options.height;
    var ctx = canvas.getContext('2d');
    ctx.save();
    transformCoordinate(canvas, ctx, width, height, options.orientation);
    var subsampled = detectSubsampling(img);

    if (subsampled) {
      iw /= 2;
      ih /= 2;
    }

    var d = 1024; // size of tiling canvas

    var tmpCanvas = document.createElement('canvas');
    tmpCanvas.width = tmpCanvas.height = d;
    var tmpCtx = tmpCanvas.getContext('2d');
    var vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1;
    var dw = Math.ceil(d * width / iw);
    var dh = Math.ceil(d * height / ih / vertSquashRatio);
    var sy = 0;
    var dy = 0;

    while (sy < ih) {
      var sx = 0;
      var dx = 0;

      while (sx < iw) {
        tmpCtx.clearRect(0, 0, d, d);
        tmpCtx.drawImage(img, -sx, -sy);
        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);
        sx += d;
        dx += dw;
      }

      sy += d;
      dy += dh;
    }

    ctx.restore();
    tmpCanvas = tmpCtx = null;
  }
  /**
   * Transform canvas coordination according to specified frame size and orientation
   * Orientation value is from EXIF tag
   */


  function transformCoordinate(canvas, ctx, width, height, orientation) {
    switch (orientation) {
      case 5:
      case 6:
      case 7:
      case 8:
        canvas.width = height;
        canvas.height = width;
        break;

      default:
        canvas.width = width;
        canvas.height = height;
    }

    switch (orientation) {
      case 2:
        // horizontal flip
        ctx.translate(width, 0);
        ctx.scale(-1, 1);
        break;

      case 3:
        // 180 rotate left
        ctx.translate(width, height);
        ctx.rotate(Math.PI);
        break;

      case 4:
        // vertical flip
        ctx.translate(0, height);
        ctx.scale(1, -1);
        break;

      case 5:
        // vertical flip + 90 rotate right
        ctx.rotate(0.5 * Math.PI);
        ctx.scale(1, -1);
        break;

      case 6:
        // 90 rotate right
        ctx.rotate(0.5 * Math.PI);
        ctx.translate(0, -height);
        break;

      case 7:
        // horizontal flip + 90 rotate right
        ctx.rotate(0.5 * Math.PI);
        ctx.translate(width, -height);
        ctx.scale(-1, 1);
        break;

      case 8:
        // 90 rotate left
        ctx.rotate(-0.5 * Math.PI);
        ctx.translate(-width, 0);
        break;
    }
  }

  var URL = window.URL && window.URL.createObjectURL ? window.URL : window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;
  /**
   * MegaPixImage class
   */

  function MegaPixImage(srcImage) {
    if (window.Blob && srcImage instanceof Blob) {
      if (!URL) {
        throw Error('No createObjectURL function found to create blob url');
      }

      var img = new Image();
      img.src = URL.createObjectURL(srcImage);
      this.blob = srcImage;
      srcImage = img;
    }

    if (!srcImage.naturalWidth && !srcImage.naturalHeight) {
      var _this = this;

      srcImage.onload = srcImage.onerror = function () {
        var listeners = _this.imageLoadListeners;

        if (listeners) {
          _this.imageLoadListeners = null;

          for (var i = 0, len = listeners.length; i < len; i++) {
            listeners[i]();
          }
        }
      };

      this.imageLoadListeners = [];
    }

    this.srcImage = srcImage;
  }
  /**
   * Rendering megapix image into specified target element
   */


  MegaPixImage.prototype.render = function (target, options, callback) {
    if (this.imageLoadListeners) {
      var _this = this;

      this.imageLoadListeners.push(function () {
        _this.render(target, options, callback);
      });
      return;
    }

    options = options || {};
    var imgWidth = this.srcImage.naturalWidth,
        imgHeight = this.srcImage.naturalHeight,
        width = options.width,
        height = options.height,
        maxWidth = options.maxWidth,
        maxHeight = options.maxHeight,
        doSquash = !this.blob || this.blob.type === 'image/jpeg';

    if (width && !height) {
      height = imgHeight * width / imgWidth << 0;
    } else if (height && !width) {
      width = imgWidth * height / imgHeight << 0;
    } else {
      width = imgWidth;
      height = imgHeight;
    }

    if (maxWidth && width > maxWidth) {
      width = maxWidth;
      height = imgHeight * width / imgWidth << 0;
    }

    if (maxHeight && height > maxHeight) {
      height = maxHeight;
      width = imgWidth * height / imgHeight << 0;
    }

    var opt = {
      width: width,
      height: height
    };

    for (var k in options) {
      opt[k] = options[k];
    }

    var tagName = target.tagName.toLowerCase();

    if (tagName === 'img') {
      target.src = renderImageToDataURL(this.srcImage, opt, doSquash);
    } else if (tagName === 'canvas') {
      renderImageToCanvas(this.srcImage, target, opt, doSquash);
    }

    if (typeof this.onrender === 'function') {
      this.onrender(target);
    }

    if (callback) {
      callback();
    }

    if (this.blob) {
      this.blob = null;
      URL.revokeObjectURL(this.srcImage.src);
    }
  };
  /*
   * JavaScript Load Image
   * https://github.com/blueimp/JavaScript-Load-Image
   *
   * Copyright 2011, Sebastian Tschan
   * https://blueimp.net
   *
   * Licensed under the MIT license:
   * https://opensource.org/licenses/MIT
   */

  /**
   * Loads an image for a given File object.
   * Invokes the callback with an img or optional canvas element
   * (if supported by the browser) as parameter:.
   *
   * @param {File|Blob|string} file File or Blob object or image URL
   * @param {Function} [callback] Image load event callback
   * @param {object} [options] Options object
   * @returns {HTMLImageElement|HTMLCanvasElement|FileReader} image object
   */


  function loadImage(file, callback, options) {
    var img = document.createElement('img');
    var url;

    img.onerror = function (event) {
      return loadImage.onerror(img, event, file, callback, options);
    };

    img.onload = function (event) {
      return loadImage.onload(img, event, file, callback, options);
    };

    if (typeof file === 'string') {
      loadImage.fetchBlob(file, function (blob) {
        if (blob) {
          // eslint-disable-next-line no-param-reassign
          file = blob;
          url = loadImage.createObjectURL(file);
        } else {
          url = file;

          if (options && options.crossOrigin) {
            img.crossOrigin = options.crossOrigin;
          }
        }

        img.src = url;
      }, options);
      return img;
    } else if (loadImage.isInstanceOf('Blob', file) || // Files are also Blob instances, but some browsers
    // (Firefox 3.6) support the File API but not Blobs:
    loadImage.isInstanceOf('File', file)) {
      url = img._objectURL = loadImage.createObjectURL(file);

      if (url) {
        img.src = url;
        return img;
      }

      return loadImage.readFile(file, function (e) {
        var target = e.target;

        if (target && target.result) {
          img.src = target.result;
        } else if (callback) {
          callback(e);
        }
      });
    }
  } // The check for URL.revokeObjectURL fixes an issue with Opera 12,
  // which provides URL.createObjectURL but doesn't properly implement it:
  // var urlAPI =  (URL.revokeObjectURL && URL) || webkitURL;


  var urlAPI = URL.revokeObjectURL && URL; // Oct 29, 2019

  /**
   * Helper function to revoke an object URL
   *
   * @param {HTMLImageElement} img Image element
   * @param {object} [options] Options object
   */

  function revokeHelper(img, options) {
    if (img._objectURL && !(options && options.noRevoke)) {
      loadImage.revokeObjectURL(img._objectURL);
      delete img._objectURL;
    }
  } // If the callback given to this function returns a blob, it is used as image
  // source instead of the original url and overrides the file argument used in
  // the onload and onerror event callbacks:


  loadImage.fetchBlob = function (url, callback) {
    callback();
  };

  loadImage.isInstanceOf = function (type, obj) {
    // Cross-frame instanceof check
    return Object.prototype.toString.call(obj) === '[object ' + type + ']';
  };

  loadImage.transform = function (img, options, callback, file, data) {
    callback(img, data);
  };

  loadImage.onerror = function (img, event, file, callback, options) {
    revokeHelper(img, options);

    if (callback) {
      callback.call(img, event);
    }
  };

  loadImage.onload = function (img, event, file, callback, options) {
    revokeHelper(img, options);

    if (callback) {
      loadImage.transform(img, options, callback, file, {
        originalWidth: img.naturalWidth || img.width,
        originalHeight: img.naturalHeight || img.height
      });
    }
  };

  loadImage.createObjectURL = function (file) {
    return urlAPI ? urlAPI.createObjectURL(file) : false;
  };

  loadImage.revokeObjectURL = function (url) {
    return urlAPI ? urlAPI.revokeObjectURL(url) : false;
  }; // Loads a given File object via FileReader interface,
  // invokes the callback with the event object (load or error).
  // The result can be read via event.target.result:


  loadImage.readFile = function (file, callback, method) {
    if (FileReader) {
      var fileReader = new FileReader();
      fileReader.onload = fileReader.onerror = callback; // eslint-disable-next-line no-param-reassign

      method = method || 'readAsDataURL';

      if (fileReader[method]) {
        fileReader[method](file);
        return fileReader;
      }
    }

    return false;
  };
  /*
  load-image-meta.js
  */


  var hasblobSlice = typeof Blob !== 'undefined' && (Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice);

  loadImage.blobSlice = hasblobSlice && function () {
    var slice = this.slice || this.webkitSlice || this.mozSlice;
    return slice.apply(this, arguments);
  };

  loadImage.metaDataParsers = {
    jpeg: {
      0xffe1: [],
      // APP1 marker
      0xffed: [] // APP13 marker

    }
  }; // Parses image meta data and calls the callback with an object argument
  // with the following properties:
  // * imageHead: The complete image head as ArrayBuffer (Uint8Array for IE10)
  // The options argument accepts an object and supports the following
  // properties:
  // * maxMetaDataSize: Defines the maximum number of bytes to parse.
  // * disableImageHead: Disables creating the imageHead property.

  loadImage.parseMetaData = function (file, callback, options, data) {
    // eslint-disable-next-line no-param-reassign
    options = options || {}; // eslint-disable-next-line no-param-reassign

    data = data || {};
    var that = this; // 256 KiB should contain all EXIF/ICC/IPTC segments:

    var maxMetaDataSize = options.maxMetaDataSize || 262144;
    var noMetaData = !(typeof DataView !== 'undefined' && file && file.size >= 12 && file.type === 'image/jpeg' && loadImage.blobSlice); //callback(data);return;
    //noMetaData=true;

    if (noMetaData || !loadImage.readFile(loadImage.blobSlice.call(file, 0, maxMetaDataSize), function (e) {
      if (e.target.error) {
        // FileReader error
        // eslint-disable-next-line no-console
        console.log(e.target.error);
        callback(data);
        return;
      } // Note on endianness:
      // Since the marker and length bytes in JPEG files are always
      // stored in big endian order, we can leave the endian parameter
      // of the DataView methods undefined, defaulting to big endian.


      var buffer = e.target.result;
      var dataView = new DataView(buffer);
      var offset = 2;
      var maxOffset = dataView.byteLength - 4;
      var headLength = offset;
      var markerBytes;
      var markerLength;
      var parsers;
      var i; // Check for the JPEG marker (0xffd8):

      if (dataView.getUint16(0) === 0xffd8) {
        while (offset < maxOffset) {
          markerBytes = dataView.getUint16(offset); // Search for APPn (0xffeN) and COM (0xfffe) markers,
          // which contain application-specific meta-data like
          // Exif, ICC and IPTC data and text comments:

          if (markerBytes >= 0xffe0 && markerBytes <= 0xffef || markerBytes === 0xfffe) {
            // The marker bytes (2) are always followed by
            // the length bytes (2), indicating the length of the
            // marker segment, which includes the length bytes,
            // but not the marker bytes, so we add 2:
            markerLength = dataView.getUint16(offset + 2) + 2;

            if (offset + markerLength > dataView.byteLength) {
              // eslint-disable-next-line no-console
              console.log('Invalid meta data: Invalid segment size.');
              break;
            }

            parsers = loadImage.metaDataParsers.jpeg[markerBytes];

            if (parsers) {
              for (i = 0; i < parsers.length; i += 1) {
                parsers[i].call(that, dataView, offset, markerLength, data, options);
              }
            }

            offset += markerLength;
            headLength = offset;
          } else {
            // Not an APPn or COM marker, probably safe to
            // assume that this is the end of the meta data
            break;
          }
        } // Meta length must be longer than JPEG marker (2)
        // plus APPn marker (2), followed by length bytes (2):


        if (!options.disableImageHead && headLength > 6) {
          if (buffer.slice) {
            data.imageHead = buffer.slice(0, headLength);
          } else {
            // Workaround for IE10, which does not yet
            // support ArrayBuffer.slice:
            data.imageHead = new Uint8Array(buffer).subarray(0, headLength);
          }
        }
      } else {
        // eslint-disable-next-line no-console
        console.log('Invalid JPEG file: Missing JPEG marker.');
      }

      callback(data);
    }, 'readAsArrayBuffer')) {
      callback(data);
    }
  }; // Determines if meta data should be loaded automatically:


  loadImage.hasMetaOption = function (options) {
    return options && options.meta;
  };

  var originalTransform = loadImage.transform;

  loadImage.transform = function (img, options, callback, file, data) {
    if (loadImage.hasMetaOption(options)) {
      loadImage.parseMetaData(file, function (data) {
        originalTransform.call(loadImage, img, options, callback, file, data);
      }, options, data);
    } else {
      originalTransform.apply(loadImage, arguments);
    }
  };
  /*
  load-image-exif.js
  */


  loadImage.ExifMap = function () {
    return this;
  };

  loadImage.ExifMap.prototype.map = {
    Orientation: 0x0112
  };

  loadImage.ExifMap.prototype.get = function (id) {
    return this[id] || this[this.map[id]];
  };

  loadImage.getExifThumbnail = function (dataView, offset, length) {
    if (!length || offset + length > dataView.byteLength) {
      console.log('Invalid Exif data: Invalid thumbnail data.');
      return;
    }

    return loadImage.createObjectURL(new Blob([dataView.buffer.slice(offset, offset + length)]));
  };

  loadImage.exifTagTypes = {
    // byte, 8-bit unsigned int:
    1: {
      getValue: function getValue(dataView, dataOffset) {
        return dataView.getUint8(dataOffset);
      },
      size: 1
    },
    // ascii, 8-bit byte:
    2: {
      getValue: function getValue(dataView, dataOffset) {
        return String.fromCharCode(dataView.getUint8(dataOffset));
      },
      size: 1,
      ascii: true
    },
    // short, 16 bit int:
    3: {
      getValue: function getValue(dataView, dataOffset, littleEndian) {
        return dataView.getUint16(dataOffset, littleEndian);
      },
      size: 2
    },
    // long, 32 bit int:
    4: {
      getValue: function getValue(dataView, dataOffset, littleEndian) {
        return dataView.getUint32(dataOffset, littleEndian);
      },
      size: 4
    },
    // rational = two long values, first is numerator, second is denominator:
    5: {
      getValue: function getValue(dataView, dataOffset, littleEndian) {
        return dataView.getUint32(dataOffset, littleEndian) / dataView.getUint32(dataOffset + 4, littleEndian);
      },
      size: 8
    },
    // slong, 32 bit signed int:
    9: {
      getValue: function getValue(dataView, dataOffset, littleEndian) {
        return dataView.getInt32(dataOffset, littleEndian);
      },
      size: 4
    },
    // srational, two slongs, first is numerator, second is denominator:
    10: {
      getValue: function getValue(dataView, dataOffset, littleEndian) {
        return dataView.getInt32(dataOffset, littleEndian) / dataView.getInt32(dataOffset + 4, littleEndian);
      },
      size: 8
    }
  }; // undefined, 8-bit byte, value depending on field:

  loadImage.exifTagTypes[7] = loadImage.exifTagTypes[1];

  loadImage.getExifValue = function (dataView, tiffOffset, offset, type, length, littleEndian) {
    var tagType = loadImage.exifTagTypes[type];
    var tagSize;
    var dataOffset;
    var values;
    var i;
    var str;
    var c;

    if (!tagType) {
      console.log('Invalid Exif data: Invalid tag type.');
      return;
    }

    tagSize = tagType.size * length; // Determine if the value is contained in the dataOffset bytes,
    // or if the value at the dataOffset is a pointer to the actual data:

    dataOffset = tagSize > 4 ? tiffOffset + dataView.getUint32(offset + 8, littleEndian) : offset + 8;

    if (dataOffset + tagSize > dataView.byteLength) {
      console.log('Invalid Exif data: Invalid data offset.');
      return;
    }

    if (length === 1) {
      return tagType.getValue(dataView, dataOffset, littleEndian);
    }

    values = [];

    for (i = 0; i < length; i += 1) {
      values[i] = tagType.getValue(dataView, dataOffset + i * tagType.size, littleEndian);
    }

    if (tagType.ascii) {
      str = ''; // Concatenate the chars:

      for (i = 0; i < values.length; i += 1) {
        c = values[i]; // Ignore the terminating NULL byte(s):

        if (c === "\0") {
          break;
        }

        str += c;
      }

      return str;
    }

    return values;
  };

  loadImage.parseExifTag = function (dataView, tiffOffset, offset, littleEndian, data) {
    var tag = dataView.getUint16(offset, littleEndian);
    data.exif[tag] = loadImage.getExifValue(dataView, tiffOffset, offset, dataView.getUint16(offset + 2, littleEndian), dataView.getUint32(offset + 4, littleEndian), littleEndian);
  };

  loadImage.parseExifTags = function (dataView, tiffOffset, dirOffset, littleEndian, data) {
    var tagsNumber, dirEndOffset, i;

    if (dirOffset + 6 > dataView.byteLength) {
      console.log('Invalid Exif data: Invalid directory offset.');
      return;
    }

    tagsNumber = dataView.getUint16(dirOffset, littleEndian);
    dirEndOffset = dirOffset + 2 + 12 * tagsNumber;

    if (dirEndOffset + 4 > dataView.byteLength) {
      console.log('Invalid Exif data: Invalid directory size.');
      return;
    }

    for (i = 0; i < tagsNumber; i += 1) {
      this.parseExifTag(dataView, tiffOffset, dirOffset + 2 + 12 * i, littleEndian, data);
    } // Return the offset to the next directory:


    return dataView.getUint32(dirEndOffset, littleEndian);
  };

  loadImage.parseExifData = function (dataView, offset, length, data, options) {
    if (options.disableExif) {
      return;
    }

    var tiffOffset = offset + 10;
    var littleEndian;
    var dirOffset;
    var thumbnailData; // Check for the ASCII code for "Exif" (0x45786966):

    if (dataView.getUint32(offset + 4) !== 0x45786966) {
      // No Exif data, might be XMP data instead
      return;
    }

    if (tiffOffset + 8 > dataView.byteLength) {
      console.log('Invalid Exif data: Invalid segment size.');
      return;
    } // Check for the two null bytes:


    if (dataView.getUint16(offset + 8) !== 0x0000) {
      console.log('Invalid Exif data: Missing byte alignment offset.');
      return;
    } // Check the byte alignment:


    switch (dataView.getUint16(tiffOffset)) {
      case 0x4949:
        littleEndian = true;
        break;

      case 0x4d4d:
        littleEndian = false;
        break;

      default:
        console.log('Invalid Exif data: Invalid byte alignment marker.');
        return;
    } // Check for the TIFF tag marker (0x002A):


    if (dataView.getUint16(tiffOffset + 2, littleEndian) !== 0x002a) {
      console.log('Invalid Exif data: Missing TIFF marker.');
      return;
    } // Retrieve the directory offset bytes, usually 0x00000008 or 8 decimal:


    dirOffset = dataView.getUint32(tiffOffset + 4, littleEndian); // Create the exif object to store the tags:

    data.exif = new loadImage.ExifMap(); // Parse the tags of the main image directory and retrieve the
    // offset to the next directory, usually the thumbnail directory:

    dirOffset = loadImage.parseExifTags(dataView, tiffOffset, tiffOffset + dirOffset, littleEndian, data);

    if (dirOffset && !options.disableExifThumbnail) {
      thumbnailData = {
        exif: {}
      };
      dirOffset = loadImage.parseExifTags(dataView, tiffOffset, tiffOffset + dirOffset, littleEndian, thumbnailData); // Check for JPEG Thumbnail offset:

      if (thumbnailData.exif[0x0201]) {
        data.exif.Thumbnail = loadImage.getExifThumbnail(dataView, tiffOffset + thumbnailData.exif[0x0201], thumbnailData.exif[0x0202]);
      }
    } // Check for Exif Sub IFD Pointer:


    if (data.exif[0x8769] && !options.disableExifSub) {
      loadImage.parseExifTags(dataView, tiffOffset, tiffOffset + data.exif[0x8769], littleEndian, data);
    } // Check for GPS Info IFD Pointer:


    if (data.exif[0x8825] && !options.disableExifGps) {
      loadImage.parseExifTags(dataView, tiffOffset, tiffOffset + data.exif[0x8825], littleEndian, data);
    }
  }; // Registers the Exif parser for the APP1 JPEG meta data segment:


  loadImage.metaDataParsers.jpeg[0xffe1].push(loadImage.parseExifData); // Adds the following properties to the parseMetaData callback data:
  // * exif: The exif tags, parsed by the parseExifData method
  // Adds the following options to the parseMetaData method:
  // * disableExif: Disables Exif parsing.
  // * disableExifThumbnail: Disables parsing of the Exif Thumbnail.
  // * disableExifSub: Disables parsing of the Exif Sub IFD.
  // * disableExifGps: Disables parsing of the Exif GPS Info IFD.

  var dom$t = new Dom();

  var Hyperlink = /*#__PURE__*/function () {
    function Hyperlink(builder) {
      var _this = this;

      _classCallCheck$1(this, Hyperlink);

      this.builder = builder;
      var util = new Util(builder);
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var linkTool = builderStuff.querySelector('#divLinkTool');

      if (!linkTool) {
        var html = "<div id=\"divLinkTool\" class=\"is-tool\">\n                <button title=\"".concat(util.out('Link'), "\" data-title=\"").concat(util.out('Link'), "\" class=\"link-edit\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#ion-link\"></use></svg></button>\n                <button title=\"").concat(util.out('Duplicate'), "\" data-title=\"").concat(util.out('Duplicate'), "\" class=\"link-duplicate\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#ion-ios-photos-outline\"></use></svg></button>\n                <button title=\"").concat(util.out('Delete'), "\" data-title=\"").concat(util.out('Delete'), "\" class=\"link-remove\"><svg class=\"is-icon-flex\" style=\"width:22px;height:22px;\"><use xlink:href=\"#ion-ios-close-empty\"></use></svg></button>\n            </div>\n            <div class=\"is-modal createlink\">\n                <div style=\"max-width:526px;\">                    \n                    <div class=\"link-src\">\n                        <input class=\"input-url\" type=\"text\" placeholder=\"Url\"/>\n                        <button title=\"").concat(util.out('Select'), "\" class=\"input-select\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-more\"></use></svg></button>\n                    </div>\n                    <label style=\"display:inline-block;margin-top:14px;margin-bottom:10px;float:left;\">\n                        <input class=\"input-newwindow\" type=\"checkbox\" />  ").concat(util.out('Open New Window'), "&nbsp;\n                    </label>\n                    <input class=\"input-text\" type=\"text\" placeholder=\"").concat(util.out('Text'), "\" style=\"width:100%;\"/>\n                    <input class=\"input-title\" type=\"text\" placeholder=\"").concat(util.out('Title'), "\" style=\"width:100%;border-top: none;margin-bottom:12px;\"/>\n                    <div style=\"text-align:right\">\n                        <button title=\"").concat(util.out('Cancel'), "\" class=\"input-cancel classic-secondary\">").concat(util.out('Cancel'), "</button>\n                        <button title=\"").concat(util.out('Ok'), "\" class=\"input-ok classic-primary\">").concat(util.out('Ok'), "</button>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"is-modal fileselect\">\n                <div style=\"max-width:800px;height:80%;padding:0;\">\n                    <iframe style=\"width:100%;height:100%;border: none;display: block;\" src=\"about:blank\"></iframe>\n                </div>\n            </div>\n            ");
        dom$t.appendHtml(builderStuff, html);
        linkTool = builderStuff.querySelector('#divLinkTool');
        var linkEdit = linkTool.querySelector('.link-edit');
        dom$t.addEventListener(linkEdit, 'click', function () {
          // old: 10853
          _this.editLink();
        });
        var linkDuplicate = linkTool.querySelector('.link-duplicate');
        dom$t.addEventListener(linkDuplicate, 'click', function () {
          if (_this.builder.activeLink) {
            _this.builder.uo.saveForUndo();

            if (_this.builder.opts.emailMode) {
              var element = _this.builder.activeLink;

              while (element.tagName.toLowerCase() !== 'table' && !dom$t.hasClass(element, 'button')) {
                element = element.parentNode;
              }

              element = element.parentNode;
              var activeLinkTD = element;
              var newlinkTD = activeLinkTD.cloneNode(true); // if there is active icon class, do not copy the class

              var iconActive = newlinkTD.querySelector('.icon-active');
              if (iconActive) dom$t.removeClass(iconActive, 'icon-active');
              newlinkTD.style.paddingRight = '15px';
              activeLinkTD.parentNode.insertBefore(newlinkTD, activeLinkTD);

              _this.showTool(_this.builder.activeLink);
            } else {
              var newlink = _this.builder.activeLink.cloneNode(true); // if there is active icon class, do not copy the class


              var _iconActive = newlink.querySelector('.icon-active');

              if (_iconActive) dom$t.removeClass(_iconActive, 'icon-active');

              _this.builder.activeLink.parentNode.insertBefore(newlink, _this.builder.activeLink);

              _this.showTool(_this.builder.activeLink);
            }
          }
        });
        var linkRemove = linkTool.querySelector('.link-remove');
        dom$t.addEventListener(linkRemove, 'click', function () {
          _this.builder.uo.saveForUndo();

          if (_this.builder.opts.emailMode) {
            var element = _this.builder.activeLink;

            while (element.tagName.toLowerCase() !== 'table' && !dom$t.hasClass(element, 'button')) {
              element = element.parentNode;
            }

            element = element.parentNode;
            var activeLinkTD = element;
            if (activeLinkTD) activeLinkTD.parentNode.removeChild(activeLinkTD);
            linkTool.style.display = '';
          } else {
            if (_this.builder.activeLink) _this.builder.activeLink.parentNode.removeChild(_this.builder.activeLink);
            linkTool.style.display = '';
          } // if there is active icon, set null.


          var iconActive = _this.builder.activeLink.querySelector('.icon-active');

          if (iconActive) _this.builder.activeIcon = null;
        });
        var modal = this.builderStuff.querySelector('.is-modal.createlink');
        var inputOk = modal.querySelector('.input-ok');
        dom$t.addEventListener(inputOk, 'click', function () {
          _this.builder.uo.saveForUndo();

          var link = _this.builder.activeLink;

          if (link) {
            // Edit Existing Link
            var url = modal.querySelector('.input-url').value;
            var title = modal.querySelector('.input-title').value;
            var linktext = modal.querySelector('.input-text').value;
            if (linktext === '') linktext = url;

            if (url !== '') {
              link.setAttribute('href', url);

              if (modal.querySelector('.input-newwindow').checked) {
                link.setAttribute('target', '_blank');
              } else {
                link.removeAttribute('target');
              }

              if (_this.builder.activeIcon) ; else {
                link.innerHTML = linktext;
              }

              link.setAttribute('title', title);
            } else {
              var el = link;
              dom$t.selectElementContents(el);
              document.execCommand('unlink', false, null);
            } //Trigger Change event


            _this.builder.opts.onChange();
          } else {
            // Create New Link
            util.restoreSelection();
            var _url = modal.querySelector('.input-url').value;
            var _title = modal.querySelector('.input-title').value;
            var _linktext = modal.querySelector('.input-text').value;
            if (_linktext === '') _linktext = _url;

            if (_url !== '') {
              _this.builder.uo.saveForUndo();

              var activeLink;

              if (_this.builder.activeIcon) {
                // Icon is selected
                var iconhtml = _this.builder.activeIcon.outerHTML;
                _this.builder.activeIcon.outerHTML = "<a class=\"__dummy\" href=\"".concat(_url, "\">").concat(iconhtml, "</a>");
                activeLink = document.querySelector('.__dummy');
                dom$t.removeClass(activeLink, '__dummy');

                if (modal.querySelector('.input-newwindow').checked) {
                  activeLink.setAttribute('target', '_blank');
                } else {
                  activeLink.removeAttribute('target');
                }

                activeLink.setAttribute('title', _title);
                _this.builder.activeIcon = activeLink.childNodes[0];
                if (!util.appleMobile) dom$t.selectElementContents(_this.builder.activeIcon);
              } else {
                // if(this.builder.isIE) {
                //     util.hideModal(modal);
                //     return;
                // }
                document.execCommand('createLink', false, 'http://dummy');

                var _activeLink = document.querySelector('a[href="http://dummy"]');

                _activeLink.setAttribute('href', _url);

                _activeLink.innerHTML = _linktext;

                if (modal.querySelector('.input-newwindow').checked) {
                  _activeLink.setAttribute('target', '_blank');
                } else {
                  _activeLink.removeAttribute('target');
                }

                _activeLink.setAttribute('title', _title);

                if (!util.appleMobile) dom$t.selectElementContents(_activeLink);
              }
            } //save selection


            util.saveSelection(); //Trigger Change event

            _this.builder.opts.onChange(); //Trigger Render event


            _this.builder.opts.onRender();
          }

          util.hideModal(modal);
        });
        var inputCancel = modal.querySelector('.input-cancel');
        dom$t.addEventListener(inputCancel, 'click', function () {
          util.hideModal(modal);
          if (!util.appleMobile) util.restoreSelection();
        });
      }

      this.linkTool = linkTool;
    }

    _createClass$1(Hyperlink, [{
      key: "click",
      value: function click(col, e) {
        var customcode = false;

        if (col.hasAttribute('data-html')) {
          // Column contains custom code.
          customcode = true;
        }

        var elm = e.target;
        this.builder.activeLink = null;

        if ((elm.tagName.toLowerCase() === 'a' || dom$t.parentsHasTag(elm, 'a')) && !customcode) {
          if (elm.childNodes.length > 0) {
            // Sometimes happens when click a link icon, but not exactly on the icon <i>, but the link <a>
            if (elm.childNodes[0].tagName) if (elm.childNodes[0].tagName.toLowerCase() === 'i' && elm.childNodes.length === 1 && elm.childNodes[0].innerHTML === '') {
              var icons = document.querySelectorAll('.icon-active');
              Array.prototype.forEach.call(icons, function (icon) {
                dom$t.removeClass(icon, 'icon-active');
              });
              dom$t.addClass(elm.childNodes[0], 'icon-active');
              dom$t.selectElementContents(elm.childNodes[0]);
              this.builder.activeIcon = elm.childNodes[0];
            }
          }

          if (elm.tagName.toLowerCase() === 'img') {
            return;
          }

          var link;

          if (elm.tagName.toLowerCase() === 'a') {
            link = elm;
          } else {
            var element = elm;

            while (element.tagName.toLowerCase() !== 'a') {
              element = element.parentNode;
            }

            link = element;
          }

          this.builder.activeLink = link;
          this.showTool(link);
          e.preventDefault();
        } else {
          this.hideTool();
        }
      }
    }, {
      key: "showTool",
      value: function showTool(link) {
        // Link tool
        var linkTool = this.linkTool;
        var linkDisplay = dom$t.getStyle(link, 'display');

        if (linkDisplay === 'inline-block') {
          linkTool.querySelector('.link-duplicate').style.display = 'block';
          linkTool.querySelector('.link-remove').style.display = 'block';
        } else {
          if (this.builder.activeIcon) {
            linkTool.querySelector('.link-duplicate').style.display = 'block';
            linkTool.querySelector('.link-remove').style.display = 'block';
          } else {
            linkTool.querySelector('.link-duplicate').style.display = 'none';
            linkTool.querySelector('.link-remove').style.display = 'none';
          }
        }

        var top = link.getBoundingClientRect().top;
        var left = link.getBoundingClientRect().left;
        linkTool.style.display = 'flex';
        var w = linkTool.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

        var h = linkTool.offsetHeight;
        linkTool.style.top = top - h + window.pageYOffset - 3 + 'px';
        linkTool.style.left = left + link.offsetWidth - w + 'px';
      }
    }, {
      key: "hideTool",
      value: function hideTool() {
        this.linkTool.style.display = '';
      }
    }, {
      key: "createLink",
      value: function createLink() {
        var _this2 = this;

        var util = new Util(this.builder);
        var link;

        if (this.builder.activeLink) {
          link = this.builder.activeLink;
        } else {
          //Adjust selection: If cursor is on existing link, set active link (select the link if it is not icon)
          var elm;

          try {
            var curr;

            if (window.getSelection) {
              curr = window.getSelection().getRangeAt(0).commonAncestorContainer;

              if (curr.nodeType === 3) {
                //text node
                elm = curr.parentNode;
              } else {
                elm = curr;
              }
            } else if (document.selection) {
              curr = document.selection.createRange();
              elm = document.selection.createRange().parentElement();
            }
          } catch (e) {
            return;
          }

          if (elm.nodeName.toLowerCase() === 'a') {
            link = elm;
          } else {
            var element = elm;

            while (element.nodeName.toLowerCase() !== 'a') {
              if (element.tagName === 'BODY' || element.tagName === 'HTML') break;
              if (element.parentNode) element = element.parentNode;
            }

            if (element.nodeName.toLowerCase() === 'a') {
              link = element;
            }
          }

          if (link) {
            this.builder.activeLink = link;

            if (elm.nodeName.toLowerCase() === 'i' && elm.innerHTML === '') ; else {
              dom$t.selectElementContents(this.builder.activeLink);
              util.saveSelection();
            }
          }
        }

        var text = dom$t.getSelected();
        var modal = this.builderStuff.querySelector('.is-modal.createlink');

        if (this.builder.opts.onFileSelectClick || this.builder.opts.fileselect !== '') {
          modal.querySelector('.input-select').style.display = 'block';
          modal.querySelector('.input-url').style.width = '444px';
          var inputSelect = modal.querySelector('.input-select');
          dom$t.addEventListener(inputSelect, 'click', function (e) {
            if (_this2.builder.opts.onFileSelectClick) {
              _this2.builder.opts.onFileSelectClick({
                targetInput: modal.querySelector('.input-url'),
                theTrigger: modal.querySelector('.input-select')
              });
            } else {
              var modalFileSelect = _this2.builderStuff.querySelector('.is-modal.fileselect');

              if (modalFileSelect.querySelector('iframe').src === 'about:blank') {
                modalFileSelect.querySelector('iframe').src = _this2.builder.opts.fileselect;
              }

              util.showModal(modalFileSelect, false, null, false);
            }

            e.preventDefault();
            e.stopImmediatePropagation();
          });
        } else {
          modal.querySelector('.input-select').style.display = 'none';
          modal.querySelector('.input-url').style.width = '100%';
        }

        modal.querySelector('.input-url').value = '';
        modal.querySelector('.input-newwindow').checked = false;
        modal.querySelector('.input-title').value = '';
        modal.querySelector('.input-text').value = '';

        if (link) {
          modal.querySelector('.input-url').value = link.href;
          modal.querySelector('.input-title').value = link.title;
          modal.querySelector('.input-text').value = link.innerHTML;

          if (link.target === '_blank') {
            modal.querySelector('.input-newwindow').checked = true;
          } else {
            modal.querySelector('.input-newwindow').checked = false;
          }
        } else {
          modal.querySelector('.input-text').value = text;
        } // Show modal


        util.showModal(modal, true, function () {
          if (!util.appleMobile) util.restoreSelection();
        }, true);
        modal.querySelector('.input-url').focus();
      }
    }, {
      key: "editLink",
      value: function editLink() {
        var _this3 = this;

        var util = new Util(this.builder);
        var link = this.builder.activeLink;
        var modal = this.builderStuff.querySelector('.is-modal.createlink');

        if (this.builder.opts.onFileSelectClick || this.builder.opts.fileselect !== '') {
          modal.querySelector('.input-select').style.display = 'block';
          modal.querySelector('.input-url').style.width = '444px';
          var inputSelect = modal.querySelector('.input-select');
          dom$t.addEventListener(inputSelect, 'click', function () {
            if (_this3.builder.opts.onFileSelectClick) {
              _this3.builder.opts.onFileSelectClick({
                targetInput: modal.querySelector('.input-url'),
                theTrigger: modal.querySelector('.input-select')
              });
            } else {
              var modalFileSelect = _this3.builderStuff.querySelector('.is-modal.fileselect');

              if (modalFileSelect.querySelector('iframe').src === 'about:blank') {
                modalFileSelect.querySelector('iframe').src = _this3.builder.opts.fileselect;
              }

              util.showModal(modalFileSelect, false, null, false);
            }
          });
        } else {
          modal.querySelector('.input-select').style.display = 'none';
          modal.querySelector('.input-url').style.width = '100%';
        } // Get values


        var url = link.getAttribute('href');
        var target = link.getAttribute('target');
        var title = link.getAttribute('title');
        var linktext = link.innerHTML;
        modal.querySelector('.input-url').value = url;

        if (target === '_blank') {
          modal.querySelector('.input-newwindow').checked = true;
        } else {
          modal.querySelector('.input-newwindow').checked = false;
        }

        modal.querySelector('.input-title').value = title;
        modal.querySelector('.input-text').value = linktext; // Show modal

        util.showModal(modal, true, null, true);
        modal.querySelector('.input-url').focus();
      }
    }]);

    return Hyperlink;
  }();

  var dom$s = new Dom();

  var Spacer = /*#__PURE__*/function () {
    function Spacer(builder) {
      var _this = this;

      _classCallCheck$1(this, Spacer);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var spacerTool = builderStuff.querySelector('.is-spacer-tool');

      if (!spacerTool) {
        var html = "\n            <div id=\"divSpacerTool\" class=\"is-tool is-spacer-tool\">\n                <button title=\"".concat(util.out('Decrease'), "\" data-value=\"-\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-ios-minus-empty\"></use></svg></button>\n                <button title=\"").concat(util.out('Increase'), "\" data-value=\"+\" style=\"border-left: none;\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-ios-plus-empty\"></use></svg></button>\n            </div>\n            ");
        dom$s.appendHtml(builderStuff, html);
        spacerTool = builderStuff.querySelector('.is-spacer-tool');
        var btns = spacerTool.querySelectorAll('button');
        Array.prototype.forEach.call(btns, function (btn) {
          dom$s.addEventListener(btn, 'click', function () {
            _this.builder.uo.saveForUndo();

            var command = btn.getAttribute('data-value');
            var spacer = _this.builder.activeSpacer;

            if (command === '-') {
              if (dom$s.hasClass(spacer, 'height-300')) {
                dom$s.removeClass(spacer, 'height-300');
                dom$s.addClass(spacer, 'height-280');
              } else if (dom$s.hasClass(spacer, 'height-280')) {
                dom$s.removeClass(spacer, 'height-280');
                dom$s.addClass(spacer, 'height-260');
              } else if (dom$s.hasClass(spacer, 'height-260')) {
                dom$s.removeClass(spacer, 'height-260');
                dom$s.addClass(spacer, 'height-240');
              } else if (dom$s.hasClass(spacer, 'height-240')) {
                dom$s.removeClass(spacer, 'height-240');
                dom$s.addClass(spacer, 'height-220');
              } else if (dom$s.hasClass(spacer, 'height-220')) {
                dom$s.removeClass(spacer, 'height-220');
                dom$s.addClass(spacer, 'height-200');
              } else if (dom$s.hasClass(spacer, 'height-200')) {
                dom$s.removeClass(spacer, 'height-200');
                dom$s.addClass(spacer, 'height-180');
              } else if (dom$s.hasClass(spacer, 'height-180')) {
                dom$s.removeClass(spacer, 'height-180');
                dom$s.addClass(spacer, 'height-160');
              } else if (dom$s.hasClass(spacer, 'height-160')) {
                dom$s.removeClass(spacer, 'height-160');
                dom$s.addClass(spacer, 'height-140');
              } else if (dom$s.hasClass(spacer, 'height-140')) {
                dom$s.removeClass(spacer, 'height-140');
                dom$s.addClass(spacer, 'height-120');
              } else if (dom$s.hasClass(spacer, 'height-120')) {
                dom$s.removeClass(spacer, 'height-120');
                dom$s.addClass(spacer, 'height-100');
              } else if (dom$s.hasClass(spacer, 'height-100')) {
                dom$s.removeClass(spacer, 'height-100');
                dom$s.addClass(spacer, 'height-80');
              } else if (dom$s.hasClass(spacer, 'height-80')) {
                dom$s.removeClass(spacer, 'height-80');
                dom$s.addClass(spacer, 'height-60');
              } else if (dom$s.hasClass(spacer, 'height-60')) {
                dom$s.removeClass(spacer, 'height-60');
                dom$s.addClass(spacer, 'height-40');
              } else if (dom$s.hasClass(spacer, 'height-40')) {
                dom$s.removeClass(spacer, 'height-40');
                dom$s.addClass(spacer, 'height-20');
              } // else { }

            } else {
              if (dom$s.hasClass(spacer, 'height-20')) {
                dom$s.removeClass(spacer, 'height-20');
                dom$s.addClass(spacer, 'height-40');
              } else if (dom$s.hasClass(spacer, 'height-40')) {
                dom$s.removeClass(spacer, 'height-40');
                dom$s.addClass(spacer, 'height-60');
              } else if (dom$s.hasClass(spacer, 'height-60')) {
                dom$s.removeClass(spacer, 'height-60');
                dom$s.addClass(spacer, 'height-80');
              } else if (dom$s.hasClass(spacer, 'height-80')) {
                dom$s.removeClass(spacer, 'height-80');
                dom$s.addClass(spacer, 'height-100');
              } else if (dom$s.hasClass(spacer, 'height-100')) {
                dom$s.removeClass(spacer, 'height-100');
                dom$s.addClass(spacer, 'height-120');
              } else if (dom$s.hasClass(spacer, 'height-120')) {
                dom$s.removeClass(spacer, 'height-120');
                dom$s.addClass(spacer, 'height-140');
              } else if (dom$s.hasClass(spacer, 'height-140')) {
                dom$s.removeClass(spacer, 'height-140');
                dom$s.addClass(spacer, 'height-160');
              } else if (dom$s.hasClass(spacer, 'height-160')) {
                dom$s.removeClass(spacer, 'height-160');
                dom$s.addClass(spacer, 'height-180');
              } else if (dom$s.hasClass(spacer, 'height-180')) {
                dom$s.removeClass(spacer, 'height-180');
                dom$s.addClass(spacer, 'height-200');
              } else if (dom$s.hasClass(spacer, 'height-200')) {
                dom$s.removeClass(spacer, 'height-200');
                dom$s.addClass(spacer, 'height-220');
              } else if (dom$s.hasClass(spacer, 'height-220')) {
                dom$s.removeClass(spacer, 'height-220');
                dom$s.addClass(spacer, 'height-240');
              } else if (dom$s.hasClass(spacer, 'height-240')) {
                dom$s.removeClass(spacer, 'height-240');
                dom$s.addClass(spacer, 'height-260');
              } else if (dom$s.hasClass(spacer, 'height-260')) {
                dom$s.removeClass(spacer, 'height-260');
                dom$s.addClass(spacer, 'height-280');
              } else if (dom$s.hasClass(spacer, 'height-280')) {
                dom$s.removeClass(spacer, 'height-280');
                dom$s.addClass(spacer, 'height-300');
              } // else { }

            }

            _this.showTool(spacer); //Trigger Change event


            _this.builder.opts.onChange(); //Trigger Render event


            _this.builder.opts.onRender();
          });
        });
      }

      this.spacerTool = spacerTool;
    }

    _createClass$1(Spacer, [{
      key: "click",
      value: function click(e) {
        var elm = e.target;

        if (dom$s.hasClass(elm, 'spacer')) {
          this.builder.activeSpacer = elm;
          this.showTool(elm);
        } else {
          this.hideTool();
        }
      }
    }, {
      key: "showTool",
      value: function showTool(elm) {
        var top = elm.getBoundingClientRect().top + window.pageYOffset;
        var left = elm.getBoundingClientRect().left;
        this.spacerTool.style.display = 'flex';
        var w = this.spacerTool.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

        var h = this.spacerTool.offsetHeight;
        this.spacerTool.style.top = top + (elm.offsetHeight - h) / 2 + 'px';
        this.spacerTool.style.left = left + (elm.offsetWidth - w) / 2 + 'px';
      }
    }, {
      key: "hideTool",
      value: function hideTool() {
        this.spacerTool.style.display = '';
      }
    }]);

    return Spacer;
  }();

  var dom$r = new Dom();

  var Module = /*#__PURE__*/function () {
    function Module(builder) {
      var _this = this;

      _classCallCheck$1(this, Module);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var moduleTool = builderStuff.querySelector('.is-module-tool');
      var moduleModal;

      if (!moduleTool) {
        var html = "\n            <div class=\"is-tool is-module-tool\">\n                <button title=\"".concat(util.out('Settings'), "\" data-title=\"").concat(util.out('Settings'), "\" style=\"width:40px;height:40px;background:none;\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-ios-gear\"></use></svg></button>\n            </div>\n\n            <input id=\"hidContentModuleCode\" type=\"hidden\" />\n            <input id=\"hidContentModuleSettings\" type=\"hidden\" />\n            \n            <div class=\"is-modal custommodule\">\n                <div style=\"max-width:900px;height:570px;padding:0;box-sizing:border-box;position:relative;\">\n                    <div class=\"is-modal-bar is-draggable\" style=\"position: absolute;top: 0;left: 0;width: 100%;z-index:1;\">").concat(util.out('Module Settings'), "</div>\n                    <iframe style=\"position: absolute;top: 0;left: 0;width:100%;height:100%;border:none;border-bottom:60px solid transparent;border-top:40px solid transparent;margin:0;box-sizing:border-box;\" src=\"about:blank\"></iframe>\n                    <div style=\"width:100%;height:50px;position:absolute;left:0;bottom:0;border-top: #efefef 1px solid;overflow:hidden;text-align:right\">\n                        <button title=\"").concat(util.out('Cancel'), "\" class=\"input-cancel classic-secondary\">").concat(util.out('Cancel'), "</button>\n                        <button title=\"").concat(util.out('Ok'), "\" class=\"input-ok classic-primary\">").concat(util.out('Ok'), "</button>\n                    </div>\n                </div>\n            </div> \n            ");
        dom$r.appendHtml(builderStuff, html);
        moduleTool = builderStuff.querySelector('.is-module-tool');
        moduleModal = builderStuff.querySelector('.is-modal.custommodule');
        var btn = moduleTool.querySelector('button');
        dom$r.addEventListener(btn, 'click', function () {
          // old: 10100
          var module = _this.builder.activeModule; //-------- Set a flag to indicate active module -----------

          dom$r.removeAttributes(document.querySelectorAll('[data-module-active]'), 'data-module-active');
          module.setAttribute('data-module-active', '1'); //-------- /Set a flag to indicate active module -----------
          //show modal

          var modulename = module.getAttribute('data-module');
          var moduleDesc = module.getAttribute('data-module-desc');

          if (moduleDesc) {
            moduleModal.querySelector('.is-modal-bar').innerHTML = moduleDesc;
          } else {
            moduleModal.querySelector('.is-modal-bar').innerHTML = _this.util.out('Module Settings');
          }

          var w = module.getAttribute('data-dialog-width');

          if (!w || w === '') {
            w = '900px';
          }

          var h = module.getAttribute('data-dialog-height');

          if (!h || h === '') {
            h = '570px';
          }

          moduleModal.querySelector('div').style.maxWidth = w;
          moduleModal.querySelector('div').style.height = h; // OLD
          // Find subblocks (previously is-builder) in custom code blocks and save them to data-html-1, data-html-2, and so on.
          // let tmpbuilder = this.builderStuff.querySelector('#tmp_buildercontent'); 
          // if(tmpbuilder) tmpbuilder.parentNode.removeChild(tmpbuilder);
          // dom.appendHtml(this.builderStuff, '<div id="tmp_buildercontent" style="position:absolute;top:0;left:0;width:1px;height:1px;overflow:hidden;visibility:hidden;"></div>');
          // tmpbuilder = this.builderStuff.querySelector('#tmp_buildercontent'); 
          // NEW

          var index = 1;
          var builders = module.querySelectorAll('[data-subblock]');
          Array.prototype.forEach.call(builders, function (builder) {
            var builderhtml = builder.innerHTML;
            module.setAttribute('data-html-' + index, encodeURIComponent(builderhtml));
            index++;
          });
          /* OLD
          var index = 1;
          const builders = module.querySelectorAll('is-builder'); // OLD
          Array.prototype.forEach.call(builders, (builder) => {
               //if(dom.parentsHasClass(builder,'slick-cloned')) return; // direct (LATER)
              
              //Cleaning ( builder cleaning commented because its content that's matter => will be saved. See below.. )
              // builder.style.transform = '';
              // builder.style.WebkitTransform= '';
              // builder.style.MozTransform= '';
              // builder.removeAttribute('data-sort');
               // builder.removeAttribute('hidesnippetaddtool');
              // builder.removeAttribute('gray');
              // builder.removeAttribute('rowoutline');
              // builder.removeAttribute('grayoutline');
              // builder.removeAttribute('hideoutline');
              // builder.removeAttribute('leftrowtool');
              // builder.removeAttribute('minimal');
              // builder.removeAttribute('clean');
              // builder.removeAttribute('grideditor');
              // builder.removeAttribute('gridoutline');
                   // builder.removeAttribute('gridoutline'); // old
              // builder.removeAttribute('draggridoutline'); // old
              // builder.removeAttribute('between-blocks-left'); // old
              // builder.removeAttribute('between-blocks-center'); // old  
              // builder.removeAttribute('hideelementhighlight'); 
              
              let builderhtml = builder.innerHTML;
              tmpbuilder.innerHTML = builderhtml;
                   let elms = tmpbuilder.querySelectorAll('.elm-active');
              dom.removeClasses(elms, 'elm-active');
              elms = tmpbuilder.querySelectorAll('.elm-inspected');
              dom.removeClasses(elms, 'elm-inspected');
              elms = tmpbuilder.querySelectorAll('.cell-active');
              dom.removeClasses(elms, 'cell-active');
              elms = tmpbuilder.querySelectorAll('.row-active');
              dom.removeClasses(elms, 'row-active');
              elms = tmpbuilder.querySelectorAll('.row-outline');
              dom.removeClasses(elms, 'row-outline');
              //elms = tmpbuilder.querySelectorAll('.is-builder');
              //dom.removeClasses(elms, 'is-builder');
              elms = tmpbuilder.querySelectorAll('.row-outline');
              dom.removeClasses(elms, 'row-outline');
              elms = tmpbuilder.querySelectorAll('[data-click]');
              dom.removeAttributes(elms, 'data-click');
              elms = tmpbuilder.querySelectorAll('[contenteditable]');
              dom.removeAttributes(elms, 'contenteditable');
              elms = tmpbuilder.querySelectorAll('[data-module-active]');
              dom.removeAttributes(elms, 'data-module-active');
               dom.removeElements( tmpbuilder.querySelectorAll('.is-row-tool') );
              dom.removeElements( tmpbuilder.querySelectorAll('.is-rowadd-tool') );
              dom.removeElements( tmpbuilder.querySelectorAll('.ovl') );
              dom.removeElements( tmpbuilder.querySelectorAll('.irow-add-initial') );
             
              elms = tmpbuilder.querySelectorAll('[data-keep]');
              dom.removeAttributes(elms, 'data-keep');
               builderhtml = tmpbuilder.innerHTML.trim();
              builderhtml = builderhtml.replace(/<font/g, '<span').replace(/<\/font/g, '</span');
               module.setAttribute('data-html-' + index, encodeURIComponent(builderhtml));
              index++;
          });
          */

          _this.util.showModal(moduleModal, true);

          var d = new Date();
          moduleModal.querySelector('iframe').src = _this.builder.opts.modulePath + modulename + '.html?' + d.getTime(); //always refreshed
        });
        var btnOk = moduleModal.querySelector('.input-ok');
        dom$r.addEventListener(btnOk, 'click', function () {
          //Save for Undo
          _this.builder.uo.saveForUndo();

          var module = _this.builder.activeModule; //Save Html (original)

          module.setAttribute('data-html', encodeURIComponent(_this.builderStuff.querySelector('#hidContentModuleCode').value)); //Save Settings (original)

          module.setAttribute('data-settings', encodeURIComponent(_this.builderStuff.querySelector('#hidContentModuleSettings').value)); //Render (programmatically)
          //$block.html(jQuery('#hidContentModuleCode').val());
          //plugin.renderCustomCodeBlock($block, jQuery('#hidContentModuleCode').val());

          var html = _this.builderStuff.querySelector('#hidContentModuleCode').value;

          html = html.replace(/{id}/g, _this.util.makeId());
          /* OLD
          for(var i=1;i<=20;i++){ // OLD
              html = html.replace('[%HTML'+i+'%]', (module.getAttribute('data-html-'+i) === undefined ? '' : decodeURIComponent(module.getAttribute('data-html-'+i))));//render editable area
          }
           module.innerHTML = html;
          */
          // NEW

          module.innerHTML = ''; // Use createContextualFragment() to make embedded script executable
          // https://ghinda.net/article/script-tags/

          var range = document.createRange();
          range.setStart(module, 0);
          module.appendChild(range.createContextualFragment(html));
          var subblocks = module.querySelectorAll('[data-subblock]');
          var i = 1;
          Array.prototype.forEach.call(subblocks, function (subblock) {
            if (module.getAttribute('data-html-' + i)) {
              subblock.innerHTML = decodeURIComponent(module.getAttribute('data-html-' + i));
            }

            i++;
          });

          _this.builder.applyBehavior(); //Trigger Change event


          _this.builder.opts.onChange(); //Trigger Render event


          _this.builder.opts.onRender();

          _this.util.hideModal(moduleModal);

          _this.util.hideControls();
        });
        var btnCancel = moduleModal.querySelector('.input-cancel');
        dom$r.addEventListener(btnCancel, 'click', function () {
          _this.util.hideModal(moduleModal);
        });
      }

      this.moduleTool = moduleTool;
      this.moduleModal = moduleModal;
    }

    _createClass$1(Module, [{
      key: "click",
      value: function click(col) {
        var custommodule = false;

        if (col.hasAttribute('data-module')) {
          // Column contains custom module.
          custommodule = true;
        }

        if (custommodule) {
          this.builder.activeModule = col;
          var elm = col;
          this.moduleTool.style.display = 'flex';
          var _toolwidth = this.moduleTool.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

          var w = elm.offsetWidth;
          var top = elm.getBoundingClientRect().top + window.pageYOffset;
          var left = elm.getBoundingClientRect().left - 2;
          left = left + (w - _toolwidth); //Adjust left in case an element is outside the screen

          var _screenwidth = window.innerWidth;
          if (_toolwidth + left > _screenwidth) left = elm.getBoundingClientRect().left;
          this.moduleTool.style.top = top + 'px';
          this.moduleTool.style.left = left + 'px';
        } else {
          this.builder.activeModule = null;
          this.moduleTool.style.display = '';
        }
      }
    }]);

    return Module;
  }();

  var dom$q = new Dom();

  var Code = /*#__PURE__*/function () {
    function Code(builder) {
      var _this = this;

      _classCallCheck$1(this, Code);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var htmlUtil = new HtmlUtil(builder);
      this.htmlUtil = htmlUtil;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var codeTool = builderStuff.querySelector('.is-code-tool');
      var codeModal;

      if (!codeTool) {
        var html = "\n            <div class=\"is-tool is-code-tool\">\n                <button title=\"".concat(util.out('Settings'), "\" data-title=\"").concat(util.out('Settings'), "\" style=\"width:40px;height:40px;background:none;\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-ios-gear\"></use></svg></button>\n            </div>\n            \n            <div class=\"is-modal customcode\">\n                <div style=\"max-width:900px;height:570px;padding:0;box-sizing:border-box;position:relative;\">\n                    <div class=\"is-modal-bar is-draggable\" style=\"position: absolute;top: 0;left: 0;width: 100%;z-index:1;\">").concat(util.out('Custom Code (Javascript Allowed)'), "</div>\n                    <textarea class=\"input-customcode\" type=\"text\" style=\"background: #fff;position: absolute;top: 0;left: 0;width:100%;height:100%;border:none;border-bottom:60px solid transparent;border-top:40px solid transparent;box-sizing:border-box;\"></textarea>\n                    <div style=\"width:100%;height:50px;position:absolute;left:0;bottom:0;border-top: #efefef 1px solid;overflow:hidden;text-align:right\">\n                        <button title=\"").concat(util.out('Cancel'), "\" class=\"input-cancel classic-secondary\">").concat(util.out('Cancel'), "</button>\n                        <button title=\"").concat(util.out('Ok'), "\" class=\"input-ok classic-primary\">").concat(util.out('Ok'), "</button>\n                    </div>\n                </div>\n            </div> \n            "); // <input id="hidContentModuleCode" type="hidden" />
        // <input id="hidContentModuleSettings" type="hidden" />

        dom$q.appendHtml(builderStuff, html);
        codeTool = builderStuff.querySelector('.is-code-tool');
        codeModal = builderStuff.querySelector('.is-modal.customcode');
        var btn = codeTool.querySelector('button');
        dom$q.addEventListener(btn, 'click', function () {
          var codeblock = _this.builder.activeCodeBlock; // var html = plugin.readCustomCodeBlock($block);
          // Find editable areas (is-builder) in custom code blocks and save them to data-html-1, data-html-2, and so on.

          var tmpbuilder = _this.builderStuff.querySelector('#tmp_buildercontent');

          if (tmpbuilder) tmpbuilder.parentNode.removeChild(tmpbuilder);
          dom$q.appendHtml(_this.builderStuff, '<div id="tmp_buildercontent" style="position:absolute;top:0;left:0;width:1px;height:1px;overflow:hidden;visibility:hidden;"></div>');
          tmpbuilder = _this.builderStuff.querySelector('#tmp_buildercontent');
          var index = 1;
          var builders = codeblock.querySelectorAll('is-builder');
          Array.prototype.forEach.call(builders, function (builder) {
            // if(dom.parentsHasClass(builder,'slick-cloned')) return;
            //Cleaning ( builder cleaning commented because its content that's matter => will be saved. See below.. )
            // builder.style.transform = '';
            // builder.style.WebkitTransform= '';
            // builder.style.MozTransform= '';
            // builder.removeAttribute('data-sort');
            // builder.removeAttribute('hidesnippetaddtool');
            // builder.removeAttribute('gray');
            // builder.removeAttribute('rowoutline');
            // builder.removeAttribute('grayoutline');
            // builder.removeAttribute('hideoutline');
            // builder.removeAttribute('leftrowtool');
            // builder.removeAttribute('minimal');
            // builder.removeAttribute('clean');
            // builder.removeAttribute('grideditor');
            // builder.removeAttribute('gridoutline');
            // builder.removeAttribute('gridoutline'); // old
            // builder.removeAttribute('draggridoutline'); // old
            // builder.removeAttribute('between-blocks-left'); // old
            // builder.removeAttribute('between-blocks-center'); // old  
            // builder.removeAttribute('hideelementhighlight'); 
            var builderhtml = builder.innerHTML;
            tmpbuilder = _this.builderStuff.querySelector('#tmp_buildercontent');
            tmpbuilder.innerHTML = builderhtml;
            var elms = tmpbuilder.querySelectorAll('.elm-active');
            dom$q.removeClasses(elms, 'elm-active');
            elms = tmpbuilder.querySelectorAll('.elm-inspected');
            dom$q.removeClasses(elms, 'elm-inspected');
            elms = tmpbuilder.querySelectorAll('.cell-active');
            dom$q.removeClasses(elms, 'cell-active');
            elms = tmpbuilder.querySelectorAll('.row-active');
            dom$q.removeClasses(elms, 'row-active');
            elms = tmpbuilder.querySelectorAll('.row-outline');
            dom$q.removeClasses(elms, 'row-outline'); //elms = tmpbuilder.querySelectorAll('.is-builder');
            //dom.removeClasses(elms, 'is-builder');

            elms = tmpbuilder.querySelectorAll('.row-outline');
            dom$q.removeClasses(elms, 'row-outline');
            elms = tmpbuilder.querySelectorAll('[data-click]');
            dom$q.removeAttributes(elms, 'data-click');
            elms = tmpbuilder.querySelectorAll('[contenteditable]');
            dom$q.removeAttributes(elms, 'contenteditable');
            elms = tmpbuilder.querySelectorAll('[data-module-active]');
            dom$q.removeAttributes(elms, 'data-module-active');
            dom$q.removeElements(tmpbuilder.querySelectorAll('.is-row-tool'));
            dom$q.removeElements(tmpbuilder.querySelectorAll('.is-rowadd-tool'));
            dom$q.removeElements(tmpbuilder.querySelectorAll('.ovl'));
            dom$q.removeElements(tmpbuilder.querySelectorAll('.row-add-initial'));
            elms = tmpbuilder.querySelectorAll('[data-keep]');
            dom$q.removeAttributes(elms, 'data-keep');
            builderhtml = tmpbuilder.innerHTML.trim();
            builderhtml = builderhtml.replace(/<font/g, '<span').replace(/<\/font/g, '</span');
            codeblock.setAttribute('data-html-' + index, encodeURIComponent(builderhtml));
            index++;
          });
          var html = decodeURIComponent(codeblock.getAttribute('data-html'));
          html = html.replace(/{id}/g, _this.util.makeId());
          tmpbuilder.parentNode.removeChild(tmpbuilder); // this.util.showModal(codeModal, true);
          // codeModal.querySelector('.input-customcode').value = html;
          // codeModal.querySelector('.input-customcode').focus(); 
          // Use existing modal

          var viewhtml;

          if (_this.builder.opts.htmlSyntaxHighlighting) {
            viewhtml = _this.builderStuff.querySelector('.viewhtmlformatted');
          } else {
            viewhtml = _this.builderStuff.querySelector('.viewhtml');
          }

          viewhtml.querySelector('.is-modal-footer').innerHTML = "<button title=\"".concat(util.out('Cancel'), "\" class=\"input-cancel classic-secondary\">").concat(util.out('Cancel'), "</button>\n                    <button title=\"").concat(util.out('Ok'), "\" class=\"input-ok classic-primary\">").concat(util.out('Ok'), "</button>");
          util.showModal(viewhtml, true);
          var textarea = viewhtml.querySelector('textarea');
          textarea.value = html;
          var elm = viewhtml.querySelector('.input-ok');
          dom$q.addEventListener(elm, 'click', function () {
            //Save for Undo
            _this.builder.uo.saveForUndo();

            var textarea = viewhtml.querySelector('textarea');
            var html = textarea.value; //this.builder.renderCustomCodeBlock($block, html);

            codeblock.setAttribute('data-html', encodeURIComponent(html)); // => important

            html = html.replace(/{id}/g, _this.util.makeId());

            for (var i = 1; i <= 20; i++) {
              html = html.replace('[%HTML' + i + '%]', codeblock.getAttribute('data-html-' + i) === undefined ? '' : decodeURIComponent(codeblock.getAttribute('data-html-' + i))); //render editable area
            } //codeblock.innerHTML = html;


            codeblock.innerHTML = ''; // Use createContextualFragment() to make embedded script executable
            // https://ghinda.net/article/script-tags/

            var range = document.createRange();
            range.setStart(codeblock, 0);
            codeblock.appendChild(range.createContextualFragment(html));

            _this.builder.applyBehavior(); //Trigger Change event


            _this.builder.opts.onChange(); //Trigger Render event


            _this.builder.opts.onRender();

            util.hideModal(viewhtml);
            util.hideControls();
          });
          elm = viewhtml.querySelector('.input-cancel');
          dom$q.addEventListener(elm, 'click', function () {
            util.hideModal(viewhtml);
          });

          if (_this.builder.opts.htmlSyntaxHighlighting) {
            var _textarea = viewhtml.querySelector('textarea'); // Used  by html dialog (syntaxhighlighting)
            // let elms = document.querySelectorAll('[data-source-active]');
            // Array.prototype.forEach.call(elms, (elm) => {
            //     elm.removeAttribute('data-source-active');
            //     elm.removeAttribute('data-source-ok');
            //     elm.removeAttribute('data-source-cancel');
            // });


            _textarea.setAttribute('data-source-active', '1');

            _textarea.setAttribute('data-source-ok', '.viewhtmlformatted .input-ok');

            _textarea.setAttribute('data-source-cancel', '.viewhtmlformatted .input-cancel');

            var iframe = viewhtml.querySelector('iframe');
            iframe.outerHTML = '<iframe id="ifrHtmlFormatted" style="width:100%;height:100%;border: none;" src="about:blank"></iframe>'; //clear

            var doc = viewhtml.querySelector('iframe').contentWindow.document;
            doc.open();
            doc.write(_this.htmlUtil.getIframeHtml());
            doc.close();
          }
        });
        var btnCancel = codeModal.querySelector('.input-cancel');
        dom$q.addEventListener(btnCancel, 'click', function () {
          _this.util.hideModal(codeModal);
        });
      }

      this.codeTool = codeTool;
      this.codeModal = codeModal;
    }

    _createClass$1(Code, [{
      key: "click",
      value: function click(col) {
        var customcode = false;

        if (col.hasAttribute('data-html') && !col.hasAttribute('data-module')) {
          // Column contains custom code.
          customcode = true;
        }

        if (customcode) {
          this.builder.activeCodeBlock = col;
          var elm = col;
          this.codeTool.style.display = 'flex';
          var _toolwidth = this.codeTool.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

          var w = elm.offsetWidth;
          var top = elm.getBoundingClientRect().top + window.pageYOffset;
          var left = elm.getBoundingClientRect().left - 2;
          left = left + (w - _toolwidth); //Adjust left in case an element is outside the screen

          var _screenwidth = window.innerWidth;
          if (_toolwidth + left > _screenwidth) left = elm.getBoundingClientRect().left;
          this.codeTool.style.top = top + 'px';
          this.codeTool.style.left = left + 'px';
        } else {
          this.builder.activeCodeBlock = null;
          this.codeTool.style.display = '';
        }
      }
    }]);

    return Code;
  }();

  var dom$p = new Dom();

  var Iframe = /*#__PURE__*/function () {
    function Iframe(builder) {
      var _this = this;

      _classCallCheck$1(this, Iframe);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var iframeTool = builderStuff.querySelector('.is-iframe-tool');
      var iframeModal;

      if (!iframeTool) {
        var html = "\n            <div class=\"is-tool is-iframe-tool\">\n                <button title=\"".concat(util.out('Settings'), "\" data-title=\"").concat(util.out('Settings'), "\" style=\"width:40px;height:40px;background:none;\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-ios-gear\"></use></svg></button>\n            </div>\n            \n            <div class=\"is-modal iframelink\">\n                <div style=\"max-width:550px;\">\n                    <input class=\"input-src\" type=\"text\" placeholder=\"Source\" style=\"width:100%;margin-bottom:12px;\"/>\n                    <textarea class=\"input-embedcode\" type=\"text\" placeholder=\"Embed Code\" style=\"width:100%;height:300px;margin-bottom:12px;display:none;\"></textarea>\n                    <div style=\"text-align:right\">\n                        <button title=\"").concat(util.out('Cancel'), "\" class=\"input-cancel classic-secondary\">").concat(util.out('Cancel'), "</button>\n                        <button title=\"").concat(util.out('Ok'), "\" class=\"input-ok classic-primary\">").concat(util.out('Ok'), "</button>\n                    </div>\n                </div>\n            </div>\n            \n            ");
        dom$p.appendHtml(builderStuff, html);
        iframeTool = builderStuff.querySelector('.is-iframe-tool');
        iframeModal = builderStuff.querySelector('.is-modal.iframelink');
        var btn = iframeTool.querySelector('button');
        dom$p.addEventListener(btn, 'click', function () {
          var iframe = _this.builder.activeIframe; //get values                    

          var src = iframe.src;
          var embeddedYoutubeRegex = /^.*\/\/www.youtube.com\/embed\//;
          var embeddedVimeoRegex = /^.*\/\/player.vimeo.com\/video\//;
          iframeModal.querySelector('.input-src').value = '';
          iframeModal.querySelector('.input-embedcode').value = '';

          if (embeddedYoutubeRegex.exec(src) != null || embeddedVimeoRegex.exec(src) != null) {
            iframeModal.querySelector('.input-embedcode').style.display = 'none';
            iframeModal.querySelector('.input-src').style.display = 'block';
            iframeModal.querySelector('.input-src').value = src;
            iframeModal.querySelector('.input-src').focus();
          } else {
            iframeModal.querySelector('.input-src').style.display = 'none';
            iframeModal.querySelector('.input-embedcode').style.display = 'block';
            iframeModal.querySelector('.input-embedcode').value = iframe.outerHTML;
          }

          _this.util.showModal(iframeModal, true);
        });
        var btnOk = iframeModal.querySelector('.input-ok');
        dom$p.addEventListener(btnOk, 'click', function () {
          _this.builder.uo.saveForUndo();

          var iframe = _this.builder.activeIframe;
          var iframeParent = iframe.parentNode;

          _this.builder.uo.saveForUndo();

          if (iframeModal.querySelector('.input-src').value !== '') {
            var src = iframeModal.querySelector('.input-src').value;
            var youRegex = /^http[s]?:\/\/(((www.youtube.com\/watch\?(feature=player_detailpage&)?)v=)|(youtu.be\/))([^#&?]*)/;
            var vimeoRegex = /^.*(vimeo\.com\/)((channels\/[A-z]+\/)|(groups\/[A-z]+\/videos\/)|(video\/))?([0-9]+)\/?/;
            var youRegexMatches = youRegex.exec(src);
            var vimeoRegexMatches = vimeoRegex.exec(src);

            if ((youRegexMatches !== null || vimeoRegexMatches !== null) && src.indexOf('player.vimeo.com') === -1 && src.indexOf('youtube.com/embed/') === -1) {
              if (youRegexMatches != null && youRegexMatches.length >= 7) {
                var youMatch = youRegexMatches[6];
                src = '//www.youtube.com/embed/' + youMatch + '?rel=0';
              }

              if (vimeoRegexMatches != null && vimeoRegexMatches.length >= 7) {
                var vimeoMatch = vimeoRegexMatches[6];
                src = '//player.vimeo.com/video/' + vimeoMatch;
              }

              iframe.src = src;
            } else {
              iframe.src = src;
            } //Trigger Change event


            _this.builder.opts.onChange();
          } else {
            var embedcode = iframeModal.querySelector('.input-embedcode').value;

            if (embedcode !== '') {
              iframe.outerHTML = embedcode;
            }

            _this.builder.activeIframe = iframeParent.querySelector('iframe');

            _this.builder.applyBehavior(); //Trigger Change event


            _this.builder.opts.onChange();
          }

          _this.util.hideModal(iframeModal);
        });
        var btnCancel = iframeModal.querySelector('.input-cancel');
        dom$p.addEventListener(btnCancel, 'click', function () {
          _this.util.hideModal(iframeModal);
        });
      }

      this.iframeTool = iframeTool;
      this.iframeModal = iframeModal;
    }

    _createClass$1(Iframe, [{
      key: "click",
      value: function click(e) {
        if (dom$p.hasClass(e.target, 'ovl')) {
          //iframe overlay
          e.target.style.display = 'none';
          this.builder.activeIframe = e.target.parentNode.querySelector('iframe');
          var elm = this.builder.activeIframe;
          this.iframeTool.style.display = 'flex';
          var _toolwidth = this.iframeTool.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

          var w = elm.offsetWidth;
          var top = elm.getBoundingClientRect().top + window.pageYOffset;
          var left = elm.getBoundingClientRect().left - 2;
          left = left + (w - _toolwidth); //Adjust left in case an element is outside the screen

          var _screenwidth = window.innerWidth;
          if (_toolwidth + left > _screenwidth) left = elm.getBoundingClientRect().left;
          this.iframeTool.style.top = top + 'px';
          this.iframeTool.style.left = left + 'px';
        } else {
          var ovls = document.querySelectorAll('.ovl');
          Array.prototype.forEach.call(ovls, function (ovl) {
            ovl.style.display = 'block';
          });
          this.builder.activeIframe = null;
          this.iframeTool.style.display = '';
        }
      }
    }]);

    return Iframe;
  }();

  var dom$o = new Dom();

  var Table = /*#__PURE__*/function () {
    function Table(builder) {
      var _this = this;

      _classCallCheck$1(this, Table);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var tableTool = builderStuff.querySelector('.is-table-tool');
      var tableModal;

      if (!tableTool) {
        //
        //<div class="is-modal-bar is-draggable" style="background:#f9f9f9;"></div>
        var html = "\n            <div class=\"is-tool is-table-tool\">\n                <button title=\"".concat(util.out('Settings'), "\" style=\"width:40px;height:40px;background:none;\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-ios-gear\"></use></svg></button>\n            </div>\n            <div class=\"is-modal edittable\" style=\"z-index:10002;\">\n                <div class=\"is-modal-bar is-draggable\" style=\"position: absolute;top: 0;left: 0;width: 100%;z-index:1;line-height:30px;height:30px;border:none;\">\n                    ").concat(util.out('Table'), "\n                    <div class=\"is-modal-close\" style=\"z-index:1;width:20px;height:20px;position:absolute;top:0px;right:0px;box-sizing:border-box;padding:0;line-height:20px;font-size:10px;color:#777;text-align:center;cursor:pointer;\">&#10005;</div>\n                </div>\n                <div style=\"padding:0\">\n                    <div class=\"is-tabs clearfix\" data-group=\"table\">\n                        <a title=\"").concat(util.out('Style'), "\" id=\"tabTableGeneral\" href=\"\" data-content=\"divTableGeneral\" class=\"active\">").concat(util.out('Style'), "</a>\n                        <a title=\"").concat(util.out('Layout'), "\" id=\"tabTableLayout\" href=\"\" data-content=\"divTableLayout\">").concat(util.out('Layout'), "</a>\n                    </div>\n                    <div id=\"divTableGeneral\" class=\"is-tab-content\" data-group=\"table\" style=\"display:block\">\n\n                        <div style=\"display:flex;padding-bottom:12px\">\n                            <div style=\"padding-right:15px\">\n                                <div>").concat(util.out('Background'), ":</div>\n                                <div>\n                                    <button title=\"").concat(util.out('Background Color'), "\" class=\"input-table-bgcolor is-btn-color\"></button>\n                                </div>\n                            </div>\n                            <div>\n                                <div>").concat(util.out('Text Color'), ":</div>\n                                <div>\n                                    <button title=\"").concat(util.out('Text Color'), "\" class=\"input-table-textcolor is-btn-color\"></button>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div style=\"padding-bottom:12px;\">\n                            <div>").concat(util.out('Border Thickness'), ":</div>\n                            <div>\n                                <select id=\"selCellBorderWidth\" style=\"width:120px;\"><option value=\"0\">No Border</option><option value=\"1\">1</option><option value=\"2\">2</option><option value=\"3\">3</option></select>  \n                            </div>\n                        </div>\n                        \n                        <div style=\"padding-bottom:12px;\">\n                            <div>").concat(util.out('Border Color'), ":</div>\n                            <div>\n                                <button title=\"").concat(util.out('Border Color'), "\" class=\"input-table-bordercolor is-btn-color\"></button>\n                            </div>\n                        </div>\n                        \n                        <div style=\"padding-bottom:12px;\">\n                            <div>").concat(util.out('Apply To'), ":</div>\n                            <div>\n                                <select id=\"selTableApplyTo\" style=\"width:120px;\">\n                                    <option value=\"table\">").concat(util.out('Table'), "</option>\n                                    <option value=\"currentrow\">").concat(util.out('Current Row'), "</option>\n                                    <option value=\"currentcol\">").concat(util.out('Current Column'), "</option>\n                                    <option value=\"evenrows\">").concat(util.out('Even Rows'), "</option>\n                                    <option value=\"oddrows\">").concat(util.out('Odd Rows'), "</option>  \n                                    <option value=\"currentcell\">").concat(util.out('Current Cell'), "</option>  \n                                </select>\n                            </div>\n                        </div>\n\n                    </div>\n\n                    <div id=\"divTableLayout\" class=\"is-tab-content\" data-group=\"table\">\n                    \n                        <div style=\"padding-bottom:12px;\">\n                            <div>").concat(util.out('Insert Row'), ":</div>\n                            <div style=\"display:flex\">\n                                <button title=\"").concat(util.out('Above'), "\" data-table-cmd=\"rowabove\" title=\"").concat(util.out('Above'), "\" style=\"width:90px;margin-right:5px\"> ").concat(util.out('Above'), " </button>\n                                <button title=\"").concat(util.out('Below'), "\" data-table-cmd=\"rowbelow\" title=\"").concat(util.out('Below'), "\" style=\"width:90px;\"> ").concat(util.out('Below'), " </button>\n                            </div> \n                        </div>\n                        \n                        <div style=\"padding-bottom:12px;\">\n                            <div>").concat(util.out('Insert Column'), ":</div>\n                            <div style=\"display:flex\">\n                                <button title=\"").concat(util.out('Left'), "\" data-table-cmd=\"columnleft\" title=\"").concat(util.out('Left'), "\" style=\"width:90px;margin-right:5px\"> ").concat(util.out('Left'), " </button> \n                                <button title=\"").concat(util.out('Right'), "\" data-table-cmd=\"columnright\" title=\"").concat(util.out('Right'), "\" style=\"width:90px;\"> ").concat(util.out('Right'), " </button> \n                            </div> \n                        </div>\n\n                        <div style=\"padding-bottom:12px;\">\n                            <button title=\"").concat(util.out('Delete Row'), "\" data-table-cmd=\"delrow\" title=\"Delete Row\" style=\"width:205px;margin-right:5px\"> ").concat(util.out('Delete Row'), " </button> \n                        </div>\n\n                        <div style=\"padding-bottom:12px;\">    \n                            <button title=\"").concat(util.out('Delete Column'), "\" data-table-cmd=\"delcolumn\" title=\"Delete Column\" style=\"width:205px;\"> ").concat(util.out('Delete Column'), " </button> \n                        </div>\n                        \n                        <div style=\"padding-bottom:12px;\">    \n                            <button title=\"").concat(util.out('Merge Cell'), "\" data-table-cmd=\"mergecell\" style=\"width:205px\">").concat(util.out('Merge Cell'), "</button> \n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            ");
        dom$o.appendHtml(builderStuff, html);
        tableTool = builderStuff.querySelector('.is-table-tool');
        tableModal = builderStuff.querySelector('.is-modal.edittable');
        var btn = tableTool.querySelector('button');
        dom$o.addEventListener(btn, 'click', function () {
          // old 10317
          if (dom$o.hasClass(tableModal, 'active')) {
            dom$o.removeClass(tableModal, 'active');
          } else {
            dom$o.addClass(tableModal, 'active');
          }
        });
        var btnClose = tableModal.querySelector('.is-modal-close');
        dom$o.addEventListener(btnClose, 'click', function () {
          dom$o.removeClass(tableModal, 'active');
        });
        btn = tableModal.querySelector('.input-table-bgcolor');
        btn.addEventListener('click', function (e) {
          _this.builder.uo.saveForUndo();

          var elm = e.target;

          _this.builder.colorPicker.open(function (color) {
            if (!_this.builder.activeTd) return; //Apply format

            var applyto = tableModal.querySelector('#selTableApplyTo').value;
            var oTable = _this.builder.activeTable;
            var oRow = _this.builder.activeTd.parentNode;
            var oCell = _this.builder.activeTd;

            if (applyto === 'currentcell') {
              _this.builder.activeTd.style.backgroundColor = color;
            }

            for (var i = 0; i < oTable.rows.length; i++) {
              var oTR = oTable.rows[i];

              for (var j = 0; j < oTR.cells.length; j++) {
                var oTD = oTR.cells[j];

                if (applyto === 'table' || applyto === 'evenrows' && isEven(i + 1) || applyto === 'oddrows' && !isEven(i + 1) || applyto === 'currentrow' && oTR === _this.builder.activeTd.parentNode || applyto === 'currentcol' && j === getCellIndex(oTable, oRow, oCell)) {
                  oTD.style.backgroundColor = color;
                }
              }
            }

            elm.style.backgroundColor = color; // preview
          }, btn.style.backgroundColor);
        });
        btn = tableModal.querySelector('.input-table-textcolor');
        btn.addEventListener('click', function (e) {
          _this.builder.uo.saveForUndo();

          var elm = e.target;

          _this.builder.colorPicker.open(function (color) {
            if (!_this.builder.activeTd) return; //Apply format

            var applyto = tableModal.querySelector('#selTableApplyTo').value;
            var oTable = _this.builder.activeTable;
            var oRow = _this.builder.activeTd.parentNode;
            var oCell = _this.builder.activeTd;

            if (applyto === 'currentcell') {
              _this.builder.activeTd.style.color = color;
            }

            for (var i = 0; i < oTable.rows.length; i++) {
              var oTR = oTable.rows[i];

              for (var j = 0; j < oTR.cells.length; j++) {
                var oTD = oTR.cells[j];

                if (applyto === 'table' || applyto === 'evenrows' && isEven(i + 1) || applyto === 'oddrows' && !isEven(i + 1) || applyto === 'currentrow' && oTR === _this.builder.activeTd.parentNode || applyto === 'currentcol' && j === getCellIndex(oTable, oRow, oCell)) {
                  oTD.style.color = color;
                }
              }
            }

            elm.style.backgroundColor = color; // preview
          }, btn.style.backgroundColor);
        });
        btn = tableModal.querySelector('.input-table-bordercolor');
        btn.addEventListener('click', function (e) {
          _this.builder.uo.saveForUndo();

          var elm = e.target;

          _this.builder.colorPicker.open(function (color) {
            if (!_this.builder.activeTd) return;
            var borderwidth = tableModal.querySelector('#selCellBorderWidth').value;

            if (borderwidth === '0') {
              tableModal.querySelector('#selCellBorderWidth').value = 1;
              borderwidth = 1;
            } //Apply format


            var applyto = tableModal.querySelector('#selTableApplyTo').value;
            var oTable = _this.builder.activeTable;
            var oRow = _this.builder.activeTd.parentNode;
            var oCell = _this.builder.activeTd;

            if (applyto === 'currentcell') {
              _this.builder.activeTd.style.borderWidth = borderwidth + 'px';
              _this.builder.activeTd.style.borderStyle = 'solid';
              _this.builder.activeTd.style.borderColor = color;
            }

            for (var i = 0; i < oTable.rows.length; i++) {
              var oTR = oTable.rows[i];

              for (var j = 0; j < oTR.cells.length; j++) {
                var oTD = oTR.cells[j];

                if (applyto === 'table' || applyto === 'evenrows' && isEven(i + 1) || applyto === 'oddrows' && !isEven(i + 1) || applyto === 'currentrow' && oTR === _this.builder.activeTd.parentNode || applyto === 'currentcol' && j === getCellIndex(oTable, oRow, oCell)) {
                  oTD.style.borderWidth = borderwidth + 'px';
                  oTD.style.borderStyle = 'solid';
                  oTD.style.borderColor = color;
                }
              }
            }

            elm.style.backgroundColor = color; // preview
          }, btn.style.backgroundColor);
        });
        var selBorderWidth = tableModal.querySelector('#selCellBorderWidth');
        selBorderWidth.addEventListener('change', function () {
          if (!_this.builder.activeTd) return;

          _this.builder.uo.saveForUndo();

          var val = selBorderWidth.value;
          var bordercolor = tableModal.querySelector('.input-table-bordercolor').style.backgroundColor;

          if (bordercolor === '') {
            bordercolor = '#000000';
          } //Apply format


          var applyto = tableModal.querySelector('#selTableApplyTo').value;
          var oTable = _this.builder.activeTable;
          var oRow = _this.builder.activeTd.parentNode;
          var oCell = _this.builder.activeTd;

          if (applyto === 'currentcell') {
            _this.builder.activeTd.style.borderWidth = val + 'px';
            _this.builder.activeTd.style.borderStyle = 'solid';
            _this.builder.activeTd.style.borderColor = bordercolor;

            if (val === '0') {
              _this.builder.activeTd.style.borderWidth = '';
              _this.builder.activeTd.style.borderStyle = '';
              _this.builder.activeTd.style.borderColor = '';
              tableModal.querySelector('.input-table-bordercolor').style.backgroundColor = '';
            }
          }

          for (var i = 0; i < oTable.rows.length; i++) {
            var oTR = oTable.rows[i];

            for (var j = 0; j < oTR.cells.length; j++) {
              var oTD = oTR.cells[j];

              if (applyto === 'table' || applyto === 'evenrows' && isEven(i + 1) || applyto === 'oddrows' && !isEven(i + 1) || applyto === 'currentrow' && oTR === _this.builder.activeTd.parentNode || applyto === 'currentcol' && j === getCellIndex(oTable, oRow, oCell)) {
                oTD.style.borderWidth = val + 'px';
                oTD.style.borderStyle = 'solid';
                oTD.style.borderColor = bordercolor;

                if (val === '0') {
                  oTD.style.borderWidth = '';
                  oTD.style.borderStyle = '';
                  oTD.style.borderColor = '';
                  tableModal.querySelector('.input-table-bordercolor').style.backgroundColor = '';
                }
              }
            }
          } //Trigger Change event


          _this.builder.opts.onChange();
        }); //Table Layout

        btn = tableModal.querySelector('[data-table-cmd="rowabove"]');
        btn.addEventListener('click', function () {
          if (!_this.builder.activeTd) return; //Save for Undo

          _this.builder.uo.saveForUndo();

          var oTable = _this.builder.activeTable;
          var oRow = _this.builder.activeTd.parentNode;
          var oNewRow = oTable.insertRow(oRow.rowIndex);

          for (var i = 0; i < oRow.cells.length; i++) {
            var oNewCell = oNewRow.insertCell(oNewRow.cells.length);
            oNewCell.setAttribute('style', _this.builder.activeTd.getAttribute('style'));
            oNewCell.setAttribute('valign', 'top');
            oNewCell.innerHTML = '<br>';
          } //Trigger Change event


          _this.builder.opts.onChange();
        });
        btn = tableModal.querySelector('[data-table-cmd="rowbelow"]');
        btn.addEventListener('click', function () {
          if (!_this.builder.activeTd) return; //Save for Undo

          _this.builder.uo.saveForUndo();

          var oTable = _this.builder.activeTable;
          var oRow = _this.builder.activeTd.parentNode;
          var oNewRow = oTable.insertRow(oRow.rowIndex + 1);

          for (var i = 0; i < oRow.cells.length; i++) {
            var oNewCell = oNewRow.insertCell(oNewRow.cells.length);
            oNewCell.setAttribute('style', _this.builder.activeTd.getAttribute('style'));
            oNewCell.setAttribute('valign', 'top');
            oNewCell.innerHTML = '<br>';
          } //Trigger Change event


          _this.builder.opts.onChange();
        });
        btn = tableModal.querySelector('[data-table-cmd="columnleft"]');
        btn.addEventListener('click', function () {
          if (!_this.builder.activeTd) return; //Save for Undo

          _this.builder.uo.saveForUndo();

          var oTable = _this.builder.activeTable;
          var oCell = _this.builder.activeTd;
          var nCellIndex = oCell.cellIndex;

          for (var i = 0; i < oTable.rows.length; i++) {
            var oRowTmp = oTable.rows[i];
            var oNewCell = oRowTmp.insertCell(nCellIndex);
            oNewCell.setAttribute('style', _this.builder.activeTd.getAttribute('style'));
            oNewCell.setAttribute('valign', 'top');
            oNewCell.innerHTML = '<br>';
          } //Trigger Change event


          _this.builder.opts.onChange();
        });
        btn = tableModal.querySelector('[data-table-cmd="columnright"]');
        btn.addEventListener('click', function () {
          if (!_this.builder.activeTd) return; //Save for Undo

          _this.builder.uo.saveForUndo();

          var oTable = _this.builder.activeTable;
          var oCell = _this.builder.activeTd;
          var nCellIndex = oCell.cellIndex;

          for (var i = 0; i < oTable.rows.length; i++) {
            var oRowTmp = oTable.rows[i];
            var oNewCell = oRowTmp.insertCell(nCellIndex + 1);
            oNewCell.setAttribute('style', _this.builder.activeTd.getAttribute('style'));
            oNewCell.setAttribute('valign', 'top');
            oNewCell.innerHTML = '<br>';
          } //Trigger Change event


          _this.builder.opts.onChange();
        });
        btn = tableModal.querySelector('[data-table-cmd="delrow"]');
        btn.addEventListener('click', function () {
          if (!_this.builder.activeTd) return; //Save for Undo

          _this.builder.uo.saveForUndo();

          var oTable = _this.builder.activeTable;
          var oRow = _this.builder.activeTd.parentNode;
          oTable.deleteRow(oRow.rowIndex);
          _this.builder.activeTable = null;
          _this.builder.activeTd = null;

          if (oTable.rows.length === 0) {
            oTable.parentNode.removeChild(oTable);
          } //Trigger Change event


          _this.builder.opts.onChange();
        });
        btn = tableModal.querySelector('[data-table-cmd="delcolumn"]');
        btn.addEventListener('click', function () {
          if (!_this.builder.activeTd) return; //Save for Undo

          _this.builder.uo.saveForUndo();

          var oTable = _this.builder.activeTable;
          var oCell = _this.builder.activeTd;
          var nCellIndex = oCell.cellIndex;

          for (var i = 0; i < oTable.rows.length; i++) {
            oTable.rows[i].deleteCell(nCellIndex);
          }

          _this.builder.activeTable = null;
          _this.builder.activeTd = null;

          if (oTable.rows[0].cells.length === 0) {
            oTable.parentNode.removeChild(oTable);
          } //Trigger Change event


          _this.builder.opts.onChange();
        });
        btn = tableModal.querySelector('[data-table-cmd="mergecell"]');
        btn.addEventListener('click', function () {
          if (!_this.builder.activeTd) return; //Save for Undo

          _this.builder.uo.saveForUndo();

          var oTable = _this.builder.activeTable;
          var oRow = _this.builder.activeTd.parentNode;
          var oCell = _this.builder.activeTd;
          oCell.colSpan = oCell.colSpan + 1;
          /*LATER: Merge 2 cell which has already colspan.*/

          if (oCell.cellIndex + 1 < oTable.rows[oRow.rowIndex].cells.length) {
            oTable.rows[oRow.rowIndex].deleteCell(oCell.cellIndex + 1);
          } //Trigger Change event


          _this.builder.opts.onChange();
        });
      }

      this.tableTool = tableTool;
      this.tableModal = tableModal;
    }

    _createClass$1(Table, [{
      key: "click",
      value: function click(e) {
        if (dom$o.parentsHasElement(e.target, 'table')) {
          // only edit table.default
          var element = e.target;
          var td;
          var table;

          if (element.tagName.toLowerCase() === 'td') {
            td = element;
          } else {
            while (element.tagName.toLowerCase() !== 'td') {
              element = element.parentNode;
            }

            td = element;
          }

          while (element.tagName.toLowerCase() !== 'table') {
            element = element.parentNode;
          }

          table = element;

          if (dom$o.hasClass(table, 'default')) {
            // only edit table.default
            this.builder.activeTd = td;
            this.builder.activeTable = table;
            var elm = table;
            this.tableTool.style.display = 'flex';
            var _toolwidth = this.tableTool.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

            var w = elm.offsetWidth;
            var top = elm.getBoundingClientRect().top + window.pageYOffset;
            var left = elm.getBoundingClientRect().left - 2;
            left = left + (w - _toolwidth); //Adjust left in case an element is outside the screen

            var _screenwidth = window.innerWidth;
            if (_toolwidth + left > _screenwidth) left = elm.getBoundingClientRect().left;
            this.tableTool.style.top = top + 'px';
            this.tableTool.style.left = left + 'px';
          } else {
            this.builder.activeTd = null;
            this.builder.activeTable = null;
            this.tableTool.style.display = '';
          }
        } else {
          this.builder.activeTd = null;
          this.builder.activeTable = null;
          this.tableTool.style.display = '';
        }

        if (dom$o.hasClass(this.tableModal, 'active') && this.builder.activeTable) {
          var activeTd = this.builder.activeTd;
          this.tableModal.querySelector('.input-table-bgcolor').style.backgroundColor = activeTd.style.backgroundColor;
          this.tableModal.querySelector('.input-table-textcolor').style.backgroundColor = activeTd.style.color;
          this.tableModal.querySelector('.input-table-bordercolor').style.backgroundColor = activeTd.style.borderColor;
          this.tableModal.querySelector('#selCellBorderWidth').value = parseInt(activeTd.style.borderWidth);
        } else {
          this.tableModal.querySelector('.input-table-bgcolor').style.backgroundColor = '';
          this.tableModal.querySelector('.input-table-textcolor').style.backgroundColor = '';
          this.tableModal.querySelector('.input-table-bordercolor').style.backgroundColor = '';
          this.tableModal.querySelector('#selCellBorderWidth').value = 0;
        }
      }
    }]);

    return Table;
  }(); // Table


  function isEven(someNumber) {
    return someNumber % 2 === 0 ? true : false;
  }

  function getCellIndex(oTable, oTR, oTD) {
    var nCount = 0;
    var bFinish = false;

    for (var i = 0; i < oTR.cells.length; i++) {
      if (bFinish === false) {
        nCount += oTR.cells[i].colSpan;
      }

      if (oTD === oTR.cells[i]) bFinish = true;
    }

    nCount = nCount - (oTD.colSpan - 1);
    var nCellIndex = nCount - 1;
    return nCellIndex;
  }

  var dom$n = new Dom();
  var Element$1 = /*#__PURE__*/function () {
    function Element(builder) {
      var _this = this;

      _classCallCheck$1(this, Element);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      this.hyperlink = new Hyperlink(builder);
      this.image = new Image(builder);
      this.spacer = new Spacer(builder);
      this.module = new Module(builder);
      this.code = new Code(builder);
      this.iframe = new Iframe(builder);
      this.table = new Table(builder);
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      window.addEventListener('keydown', function (e) {
        if (e.keyCode === 46) {
          //delete
          if (_this.builder.activeIcon) {
            if (dom$n.parentsHasClass(e.target, 'is-builder')) {
              // Delete icon
              if (_this.builder.activeIcon.parentNode.tagName.toLowerCase() === 'a' && _this.builder.activeIcon.parentNode.childNodes.length === 1) {
                var link = _this.builder.activeIcon.parentNode;
                link.parentNode.removeChild(link); // direct

                var linkTool = builderStuff.querySelector('#divLinkTool');
                linkTool.style.display = '';
              } else {
                _this.builder.activeIcon.parentNode.removeChild(_this.builder.activeIcon);
              }

              e.preventDefault();
            }
          }
        }

        if (e.keyCode === 8) {
          //backspace                
          if (_this.builder.activeIcon) {
            if (dom$n.parentsHasClass(e.target, 'is-builder')) {
              // Delete icon
              if (_this.builder.activeIcon.parentNode.tagName.toLowerCase() === 'a' && _this.builder.activeIcon.parentNode.childNodes.length === 1) {
                var _link = _this.builder.activeIcon.parentNode;

                _link.parentNode.removeChild(_link); // direct


                var _linkTool = builderStuff.querySelector('#divLinkTool');

                _linkTool.style.display = '';
              } else {
                _this.builder.activeIcon.parentNode.removeChild(_this.builder.activeIcon);
              }

              e.preventDefault();
            }
          }
        }
      }, false);
    }

    _createClass$1(Element, [{
      key: "applyBehavior",
      value: function applyBehavior(col) {
        // Set contentEditable FALSE on special elements
        var sociallinks = col.querySelectorAll('.is-social');
        Array.prototype.forEach.call(sociallinks, function (sociallink) {
          sociallink.contentEditable = false;
        });
        var spacers = col.querySelectorAll('.spacer');
        Array.prototype.forEach.call(spacers, function (spacer) {
          spacer.contentEditable = false;
        });
        var lines = col.querySelectorAll('hr');
        Array.prototype.forEach.call(lines, function (line) {
          line.contentEditable = false;
        }); // Others

        var links = col.querySelectorAll('a');
        Array.prototype.forEach.call(links, function (link) {
          var linkDisplay = dom$n.getStyle(link, 'display');

          if (linkDisplay === 'inline-block') {
            //link button
            link.contentEditable = true;

            if (link.parentNode.tagName.toLowerCase() !== 'span') {
              link.outerHTML = '<span contenteditable="false">' + link.outerHTML + '</span>';
            } else {
              // has span
              if (link.parentNode.childElementCount === 1) {
                link.parentNode.contentEditable = false;
              }
            }
          }
        }); //iframe overlay (need to be added so that embeded video, map, etc can be selected). First click will disable/hide the overlay. Outside click will re-enable it.

        var divs = col.querySelectorAll('.embed-responsive');
        Array.prototype.forEach.call(divs, function (div) {
          var overlay = div.querySelector('.ovl');

          if (!overlay) {
            dom$n.appendHtml(div, '<div class="ovl" style="position:absolute;background:#fff;opacity:0.01;cursor:pointer;top:0;left:0px;width:100%;height:100%;z-index:1"></div>');
            overlay = div.querySelector('.ovl');
            dom$n.addEventListener(overlay, 'click', function () {
              overlay.style.display = 'none';
            });
          }
        });
      }
    }, {
      key: "click",
      value: function click(col, e) {
        var elm = e.target;
        /*
        let noedit = false;
        if (col.hasAttribute('data-noedit')) { // Column is not (text) editable.
            noedit = true;
        }
         let _protected = false;
        if (col.hasAttribute('data-protected')) { // Column is not (text) editable and also: cannot be deleted, moved or duplicated.
            _protected = true;
        }
        */

        var customcode = false;
        var subblock = false;

        if (col.hasAttribute('data-html')) {
          // Column contains custom code.
          customcode = true;

          if (dom$n.parentsHasAttribute(elm, 'data-subblock')) {
            subblock = true;
          }
        }

        if (!customcode
        /*&& !noedit && !_protected*/
        || subblock) {
          // spacer
          this.spacer.click(e); // Icon

          var icons = document.querySelectorAll('.icon-active');
          Array.prototype.forEach.call(icons, function (icon) {
            dom$n.removeClass(icon, 'icon-active');
          });
          this.builder.activeIcon = null;

          if (elm.tagName.toLowerCase() === 'i' && elm.innerHTML === '') {
            dom$n.addClass(elm, 'icon-active');
            dom$n.selectElementContents(elm);
            this.builder.activeIcon = elm;
          } // Image (must be placed before //Link)


          this.image.click(e); // Link

          this.hyperlink.click(col, e);

          if ((elm.tagName.toLowerCase() === 'a' || dom$n.parentsHasTag(elm, 'a')) && !customcode) {
            e.preventDefault();
          } //Table


          this.table.click(e); //Iframe

          this.iframe.click(e);
        } else {
          this.util.hideControls(); // Extra: make image[data-image-embed] clickable/editable

          if (e.target.tagName.toLowerCase() === 'img' && e.target.hasAttribute('data-image-embed')) {
            this.image.click(e);

            if (e.target.hasAttribute('data-sync')) {
              var img = e.target;
              img.setAttribute('data-src', img.src);
            }
          }
        } //Custom Code


        this.code.click(col, e); //Module

        this.module.click(col, e);
      }
    }]);

    return Element;
  }();

  var dom$m = new Dom();
  var RowTool = /*#__PURE__*/function () {
    function RowTool(builder) {
      var _this = this;

      _classCallCheck$1(this, RowTool);

      this.builder = builder;
      this.grid = new Grid(builder);
      var util = new Util(this.builder);
      var htmlutil = new HtmlUtil(builder);
      var builderstuff = util.builderStuff();
      var rowMore = builderstuff.querySelector('.rowmore');
      var htmlbutton = '';
      if (builder.opts.rowHtmlEditor) htmlbutton = "<button type=\"button\" title=\"".concat(util.out('HTML'), "\" class=\"row-html\">\n                <span><svg class=\"is-icon-flex\" style=\"margin-right:-3px;width:12px;height:12px;\"><use xlink:href=\"#ion-ios-arrow-left\"></use></svg><svg class=\"is-icon-flex\" style=\"margin-left:-2px;fill:rgba(0, 0, 0, 0.65);width:12px;height:12px;\"><use xlink:href=\"#ion-ios-arrow-right\"></use></svg></span>").concat(util.out('HTML'), "\n            </button>");

      if (!rowMore) {
        var html = "<div class=\"is-pop rowmore\" style=\"z-index:10002;\">\n                <div style=\"display:flex;flex-flow:wrap;padding-top:3px;\">\n                    <button type=\"button\" title=\"".concat(util.out('Move Up'), "\" class=\"row-up\"><span><svg class=\"is-icon-flex\" style=\"width:15px;height:15px;\"><use xlink:href=\"#ion-ios-arrow-thin-up\"></use></svg></span>").concat(util.out('Move Up'), "</button>\n                    <button type=\"button\" title=\"").concat(util.out('Move Down'), "\" class=\"row-down\"><span><svg class=\"is-icon-flex\" style=\"width:15px;height:15px;\"><use xlink:href=\"#ion-ios-arrow-thin-down\"></use></svg></span>").concat(util.out('Move Down'), "</button>\n                    <button type=\"button\" title=\"").concat(util.out('Duplicate'), "\" class=\"row-duplicate\"><span><svg class=\"is-icon-flex\" style=\"width:12px;height:12px;\"><use xlink:href=\"#ion-ios-photos-outline\"></use></svg></span>").concat(util.out('Duplicate'), "</button>\n                    ").concat(htmlbutton, "\n                </div>\n            </div>");
        dom$m.appendHtml(builderstuff, html);
        rowMore = builderstuff.querySelector('.rowmore');
        var elm = rowMore.querySelector('.row-up');
        if (elm) dom$m.addEventListener(elm, 'click', function () {
          _this.grid.moveRowUp();

          util.clearControls();
        });
        elm = rowMore.querySelector('.row-down');
        if (elm) dom$m.addEventListener(elm, 'click', function () {
          _this.grid.moveRowDown();

          util.clearControls();
        });
        elm = rowMore.querySelector('.row-duplicate');
        if (elm) dom$m.addEventListener(elm, 'click', function () {
          _this.grid.duplicateRow();

          _this.rowMore.style.display = '';
          util.clearControls();
        });
        elm = rowMore.querySelector('.row-html');
        if (elm) dom$m.addEventListener(elm, 'click', function () {
          var cell = util.cellSelected();
          if (!cell) return;
          htmlutil.view('row');
        });
      }

      this.rowMore = rowMore; // Click anywhere will hide Column tool

      document.addEventListener('mousedown', function (e) {
        e = e || window.event;
        var target = e.target || e.srcElement;

        if (rowMore.style.display === 'flex') {
          var a = dom$m.parentsHasClass(target, 'rowmore');
          var b = dom$m.parentsHasClass(target, 'row-more');

          if (a || b) {
            return;
          } else {
            rowMore.style.display = '';
          }
        }
      });
    }

    _createClass$1(RowTool, [{
      key: "render",
      value: function render(row) {
        var _this2 = this;

        var util = new Util(this.builder);
        var builderstuff = util.builderStuff();
        var rowMore = this.rowMore;
        var rowtool = row.querySelector('.is-row-tool');

        if (!rowtool) {
          var html = "<div class=\"is-tool is-row-tool\">\n                <div title=\"Move\" class=\"row-handle\" style=\"width:100%;cursor:move;text-align:center;\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-move\"></use></svg></div>\n                <button type=\"button\" title=\"".concat(util.out('More'), "\" class=\"row-more\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-more\"></use></svg></button>\n                <button type=\"button\" title=\"").concat(util.out('Grid Editor'), "\" class=\"row-grideditor\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-grid\"></use></svg></button>\n                <button type=\"button\" title=\"").concat(util.out('Delete'), "\" class=\"row-remove\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-ios-close-empty\"></use></svg></button>\n            </div>");
          dom$m.appendHtml(row, html);
          rowtool = row.querySelector('.is-row-tool'); // Prepare for tooltip

          var elms = rowtool.querySelectorAll('[title]');
          Array.prototype.forEach.call(elms, function (elm) {
            elm.setAttribute('data-title', elm.getAttribute('title'));

            _this2.builder.tooltip.set(elm, 5, 3);
          });
          var elm = rowtool.querySelector('.row-grideditor');
          if (elm) dom$m.addEventListener(elm, 'click', function () {
            var grideditor = builderstuff.querySelector('.grideditor');

            if (dom$m.hasClass(grideditor, 'active')) {
              dom$m.removeClass(grideditor, 'active');
              var builders = document.querySelectorAll(_this2.builder.opts.container);
              Array.prototype.forEach.call(builders, function (builder) {
                builder.removeAttribute('grideditor');
              });
            } else {
              dom$m.addClass(grideditor, 'active');

              var _builders = document.querySelectorAll(_this2.builder.opts.container);

              Array.prototype.forEach.call(_builders, function (builder) {
                builder.setAttribute('grideditor', '');
              });
            }
          });
          elm = rowtool.querySelector('.row-more');
          if (elm) dom$m.addEventListener(elm, 'click', function () {
            var cell = util.cellSelected();
            if (!cell) return;
            var row = cell.parentNode; //Change to row selection

            dom$m.removeClass(row, 'row-outline'); //Hide Column tool

            var columnTool = builderstuff.querySelector('.is-column-tool');
            dom$m.removeClass(columnTool, 'active');
            var elm = rowtool.querySelector('.row-more');
            var top = elm.getBoundingClientRect().top + window.pageYOffset;
            var left = elm.getBoundingClientRect().left + window.pageXOffset;
            rowMore.style.display = 'flex'; //const w = rowMore.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.
            //const h = rowMore.offsetHeight;

            rowMore.style.top = top - 8 + 'px';
            dom$m.removeClass(rowMore, 'arrow-bottom');
            dom$m.removeClass(rowMore, 'arrow-left');
            dom$m.removeClass(rowMore, 'arrow-right');
            dom$m.removeClass(rowMore, 'center');
            dom$m.removeClass(rowMore, 'right');
            dom$m.removeClass(rowMore, 'left');

            if (_this2.builder.opts.rowTool === 'right') {
              rowMore.style.left = left - rowMore.offsetWidth - 10 + 'px';
              dom$m.addClass(rowMore, 'arrow-right');
              dom$m.addClass(rowMore, 'left');
            } else {
              rowMore.style.left = left + 35 + 'px';
              dom$m.addClass(rowMore, 'arrow-left');
              dom$m.addClass(rowMore, 'left');
            }

            var btnRowHtml = rowMore.querySelector('.row-html');
            var btnRowDuplicate = rowMore.querySelector('.row-duplicate');

            if (cell.getAttribute('data-html')) {
              if (btnRowHtml) btnRowHtml.style.display = 'none';
              if (btnRowDuplicate) btnRowDuplicate.style.display = 'none';
            } else {
              if (btnRowHtml) btnRowHtml.style.display = '';
              if (btnRowDuplicate) btnRowDuplicate.style.display = '';
            }
          });
          elm = rowtool.querySelector('.row-remove');
          if (elm) dom$m.addEventListener(elm, 'click', function () {
            _this2.grid.removeRow();

            util.clearControls();
          });
        }
      }
    }]);

    return RowTool;
  }();

  var dom$l = new Dom();
  var RowAddTool = /*#__PURE__*/function () {
    function RowAddTool(builder) {
      _classCallCheck$1(this, RowAddTool);

      this.builder = builder;
    }

    _createClass$1(RowAddTool, [{
      key: "render",
      value: function render(row) {
        var _this = this;

        var util = new Util(this.builder);
        var quickadd = renderQuickAdd(this.builder);
        var rowaddtool = row.querySelector('.is-rowadd-tool');

        if (!rowaddtool) {
          var html = "<div class=\"is-rowadd-tool\" style=\"height:0\">\n                <button type=\"button\" title=\"".concat(util.out('Add'), "\" title=\"").concat(util.out('Add'), "\" style=\"outline:none;line-height:1;margin:0;padding:0;cursor:pointer;background-color:rgba(255,255,255,0.9);\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.8);width:17px;height:17px;\"><use xlink:href=\"#ion-ios-plus-empty\"></use></svg></button>\n            </div>");
          dom$l.appendHtml(row, html);
          rowaddtool = row.querySelector('.is-rowadd-tool'); // Prepare for tooltip

          var elms = rowaddtool.querySelectorAll('[title]');
          Array.prototype.forEach.call(elms, function (elm) {
            elm.setAttribute('data-title', elm.getAttribute('title'));

            _this.builder.tooltip.set(elm, 5, 3);
          });
        }

        var elm = rowaddtool.querySelector('button');
        dom$l.addEventListener(elm, 'click', function () {
          var tabs = quickadd.querySelector('.is-pop-tabs');
          tabs.style.display = 'none';
          var viewportHeight = window.innerHeight;
          var top = elm.getBoundingClientRect().top;
          var left = elm.getBoundingClientRect().left;
          quickadd.style.display = 'flex';
          var w = quickadd.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

          var h = quickadd.offsetHeight;

          if (viewportHeight - top > h) {
            quickadd.style.top = top + window.pageYOffset + 27 + 'px';
            quickadd.style.left = left - w / 2 + 7 + 'px';
            dom$l.removeClass(quickadd, 'arrow-bottom');
            dom$l.removeClass(quickadd, 'arrow-right');
            dom$l.removeClass(quickadd, 'arrow-left');
            dom$l.removeClass(quickadd, 'center');
            dom$l.addClass(quickadd, 'arrow-top');
            dom$l.addClass(quickadd, 'center');
          } else {
            quickadd.style.top = top + window.pageYOffset - h - 8 + 'px';
            quickadd.style.left = left - w / 2 + 7 + 'px';
            dom$l.removeClass(quickadd, 'arrow-top');
            dom$l.removeClass(quickadd, 'arrow-right');
            dom$l.removeClass(quickadd, 'arrow-left');
            dom$l.removeClass(quickadd, 'center');
            dom$l.addClass(quickadd, 'arrow-bottom');
            dom$l.addClass(quickadd, 'center');
          }

          quickadd.setAttribute('data-mode', 'row');
          return false;
        });
      }
    }]);

    return RowAddTool;
  }();

  var dom$k = new Dom();
  var ColumnTool = /*#__PURE__*/function () {
    function ColumnTool(builder) {
      var _this = this;

      _classCallCheck$1(this, ColumnTool);

      this.builder = builder;
      this.grid = new Grid(builder);
      var util = new Util(builder);
      var builderstuff = util.builderStuff();
      var columnTool = builderstuff.querySelector('.is-column-tool');
      var columnMore;
      var htmlbutton = '';
      if (builder.opts.columnHtmlEditor) htmlbutton = "<button type=\"button\" title=\"".concat(util.out('HTML'), "\" class=\"cell-html\">\n                <span><svg class=\"is-icon-flex\" style=\"margin-right:-3px;width:12px;height:12px;\"><use xlink:href=\"#ion-ios-arrow-left\"></use></svg><svg class=\"is-icon-flex\" style=\"margin-left:-2px;fill:rgba(0, 0, 0, 0.65);width:12px;height:12px;\"><use xlink:href=\"#ion-ios-arrow-right\"></use></svg></span>").concat(util.out('HTML'), "\n            </button>");

      if (!columnTool) {
        var html = "<div class=\"is-tool is-column-tool\">\n                <button type=\"button\" title=\"".concat(util.out('Add'), "\" class=\"cell-add\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-ios-plus-empty\"></use></svg></button>\n                <button type=\"button\" title=\"").concat(util.out('More'), "\" class=\"cell-more\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-more\"></use></svg></button>\n                <button type=\"button\" title=\"").concat(util.out('Delete'), "\" class=\"cell-remove\"><svg class=\"is-icon-flex\" style=\"margin-left:-1px\"><use xlink:href=\"#ion-ios-close-empty\"></use></svg></button>\n            </div>\n            \n            <div class=\"is-pop columnmore\">\n                <div style=\"display:flex;flex-flow:wrap;padding-top:3px;\">\n                    <button type=\"button\" title=\"").concat(util.out('Move Left'), "\" class=\"cell-prev\"><span><svg class=\"is-icon-flex\" style=\"width:15px;height:15px;\"><use xlink:href=\"#ion-ios-arrow-thin-left\"></use></svg></span>").concat(util.out('Move Left'), "</button>\n                    <button type=\"button\" title=\"").concat(util.out('Move Right'), "\" class=\"cell-next\"><span><svg class=\"is-icon-flex\" style=\"width:15px;height:15px;\"><use xlink:href=\"#ion-ios-arrow-thin-right\"></use></svg></span>").concat(util.out('Move Right'), "</button>\n                    <button type=\"button\" title=\"").concat(util.out('Move Up'), "\" class=\"cell-up\"><span><svg class=\"is-icon-flex\" style=\"width:15px;height:15px;\"><use xlink:href=\"#ion-ios-arrow-thin-up\"></use></svg></span>").concat(util.out('Move Up'), "</button>\n                    <button type=\"button\" title=\"").concat(util.out('Move Down'), "\" class=\"cell-down\"><span><svg class=\"is-icon-flex\" style=\"width:15px;height:15px;\"><use xlink:href=\"#ion-ios-arrow-thin-down\"></use></svg></span>").concat(util.out('Move Down'), "</button>\n                    <button type=\"button\" title=\"").concat(util.out('Increase'), "\" class=\"cell-increase\"><span><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#icon-increase\"></use></svg></span>").concat(util.out('Increase'), "</button>\n                    <button type=\"button\" title=\"").concat(util.out('Decrease'), "\" class=\"cell-decrease\"><span><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#icon-decrease\"></use></svg></span>").concat(util.out('Decrease'), "</button>\n                    <button type=\"button\" title=\"").concat(util.out('Duplicate'), "\" class=\"cell-duplicate\"><span><svg class=\"is-icon-flex\" style=\"width:12px;height:12px;\"><use xlink:href=\"#ion-ios-photos-outline\"></use></svg></span>").concat(util.out('Duplicate'), "</button>\n                    ").concat(htmlbutton, "\n                </div>\n            </div>\n            ");
        dom$k.appendHtml(builderstuff, html);
        columnTool = builderstuff.querySelector('.is-column-tool');
        columnMore = builderstuff.querySelector('.columnmore');
        var quickadd = renderQuickAdd(builder); // Prepare for tooltip

        var elms = columnTool.querySelectorAll('[title]');
        Array.prototype.forEach.call(elms, function (elm) {
          elm.setAttribute('data-title', elm.getAttribute('title'));
        }); // elms = columnMore.querySelectorAll('[title]');
        // Array.prototype.forEach.call(elms, (elm) => {
        //     elm.setAttribute('data-title',elm.getAttribute('title'));
        // });
        // Add column

        var elm = columnTool.querySelector('.cell-add');
        dom$k.addEventListener(elm, 'click', function () {
          var cell = util.cellSelected();
          if (!cell) return;
          var tabs = quickadd.querySelector('.is-pop-tabs');
          tabs.style.display = 'flex';
          var elm = columnTool.querySelector('.cell-add');
          var top = elm.getBoundingClientRect().top + window.pageYOffset;
          var left = elm.getBoundingClientRect().left + window.pageXOffset;
          quickadd.style.display = 'flex'; //const w = quickadd.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.
          //const h = quickadd.offsetHeight;

          quickadd.style.top = top + 35 + 'px';
          quickadd.style.left = left + 'px';
          dom$k.removeClass(quickadd, 'arrow-bottom');
          dom$k.removeClass(quickadd, 'arrow-left');
          dom$k.removeClass(quickadd, 'arrow-right');
          dom$k.removeClass(quickadd, 'center');
          dom$k.removeClass(quickadd, 'right');
          dom$k.addClass(quickadd, 'arrow-top');
          dom$k.addClass(quickadd, 'left');
          var val = quickadd.querySelector('.active').getAttribute('data-value');

          if (val === 'left') {
            quickadd.setAttribute('data-mode', 'cell-left');
          } else {
            quickadd.setAttribute('data-mode', 'cell-right');
          }
        }); // More

        elm = columnTool.querySelector('.cell-more');
        dom$k.addEventListener(elm, 'click', function () {
          var cell = util.cellSelected();
          if (!cell) return;
          var elm = columnTool.querySelector('.cell-more');
          var top = elm.getBoundingClientRect().top + window.pageYOffset;
          var left = elm.getBoundingClientRect().left + window.pageXOffset;
          columnMore.style.display = 'flex'; //const w = columnMore.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.
          //const h = columnMore.offsetHeight;

          columnMore.style.top = top + 35 + 'px';
          columnMore.style.left = left - 7 + 'px';
          dom$k.removeClass(columnMore, 'arrow-bottom');
          dom$k.removeClass(columnMore, 'arrow-left');
          dom$k.removeClass(columnMore, 'arrow-right');
          dom$k.removeClass(columnMore, 'center');
          dom$k.removeClass(columnMore, 'right');
          dom$k.addClass(columnMore, 'arrow-top');
          dom$k.addClass(columnMore, 'left');
        }); // Delete column

        elm = columnTool.querySelector('.cell-remove');
        dom$k.addEventListener(elm, 'click', function () {
          _this.grid.removeColumn();

          util.clearControls();
        }); // Move Previous

        elm = columnMore.querySelector('.cell-prev');
        dom$k.addEventListener(elm, 'click', function () {
          _this.grid.moveColumnPrevious();

          util.clearControls();
        }); // Move Next

        elm = columnMore.querySelector('.cell-next');
        dom$k.addEventListener(elm, 'click', function () {
          _this.grid.moveColumnNext();

          util.clearControls();
        }); // Move Up

        elm = columnMore.querySelector('.cell-up');
        dom$k.addEventListener(elm, 'click', function () {
          _this.grid.moveColumnUp();

          util.clearControls();
        }); // Move Down

        elm = columnMore.querySelector('.cell-down');
        dom$k.addEventListener(elm, 'click', function () {
          _this.grid.moveColumnDown();

          util.clearControls();
        }); // Increase

        elm = columnMore.querySelector('.cell-increase');
        dom$k.addEventListener(elm, 'click', function () {
          _this.grid.increaseColumn();

          util.clearControls();
        }); // Decrease

        elm = columnMore.querySelector('.cell-decrease');
        dom$k.addEventListener(elm, 'click', function () {
          _this.grid.decreaseColumn();

          util.clearControls();
        }); // Duplicate

        elm = columnMore.querySelector('.cell-duplicate');
        dom$k.addEventListener(elm, 'click', function () {
          _this.grid.duplicateColumn();

          _this.columnMore.style.display = '';
          util.clearControls();
        }); // View HTML

        elm = columnMore.querySelector('.cell-html');
        if (elm) dom$k.addEventListener(elm, 'click', function () {
          var cell = util.cellSelected();
          if (!cell) return;
          var htmlutil = new HtmlUtil(_this.builder);
          htmlutil.view('cell');
        });
        document.addEventListener('mousedown', function (e) {
          e = e || window.event;
          var target = e.target || e.srcElement;

          if (columnMore.style.display === 'flex') {
            var a = dom$k.parentsHasClass(target, 'columnmore');
            var b = dom$k.parentsHasClass(target, 'cell-more');

            if (a || b) {
              return;
            } else {
              columnMore.style.display = '';
            }
          }
        });
      }

      this.columnTool = columnTool;
      this.columnMore = columnMore;
    }

    _createClass$1(ColumnTool, [{
      key: "click",
      value: function click(col) {
        dom$k.addClass(this.columnTool, 'active');
        this.columnTool.style.top = col.getBoundingClientRect().top - 29 + window.pageYOffset + 'px';
        this.columnTool.style.left = col.getBoundingClientRect().left - 1 + 'px';
        var nogrid = dom$k.parentsHasAttribute(col, 'nogrid');

        if (nogrid) {
          this.columnMore.querySelector('.cell-prev').style.display = 'none';
          this.columnMore.querySelector('.cell-next').style.display = 'none';
          this.columnMore.querySelector('.cell-up').style.display = 'none';
          this.columnMore.querySelector('.cell-down').style.display = 'none';
          this.columnMore.querySelector('.cell-increase').style.display = 'none';
          this.columnMore.querySelector('.cell-decrease').style.display = 'none';
          this.columnMore.querySelector('.cell-duplicate').style.display = 'none';
          var btnColHtml = this.columnMore.querySelector('.cell-html');
          if (btnColHtml) btnColHtml.style.display = '';
          this.columnTool.querySelector('.cell-add').style.display = 'none';
          this.columnTool.querySelector('.cell-remove').style.display = 'none';

          if (col.getAttribute('data-html')) {
            this.columnMore.querySelector('.cell-html').style.display = 'none';
            this.columnTool.querySelector('.cell-more').style.display = 'none';
          }
        } else {
          this.columnMore.querySelector('.cell-prev').style.display = '';
          this.columnMore.querySelector('.cell-next').style.display = '';
          this.columnMore.querySelector('.cell-up').style.display = '';
          this.columnMore.querySelector('.cell-down').style.display = '';
          this.columnMore.querySelector('.cell-increase').style.display = '';
          this.columnMore.querySelector('.cell-decrease').style.display = '';
          this.columnMore.querySelector('.cell-duplicate').style.display = '';

          var _btnColHtml = this.columnMore.querySelector('.cell-html');

          if (_btnColHtml) _btnColHtml.style.display = '';
          this.columnTool.querySelector('.cell-add').style.display = '';
          this.columnTool.querySelector('.cell-remove').style.display = '';
          var row = col.parentNode;

          if (row.childElementCount - 2 === 1) {
            //-2 => minus is-row-tool & is-rowadd-tool
            this.columnMore.querySelector('.cell-prev').style.display = 'none';
            this.columnMore.querySelector('.cell-next').style.display = 'none';
            this.columnMore.querySelector('.cell-increase').style.display = 'none';
            this.columnMore.querySelector('.cell-decrease').style.display = 'none';
          } else {
            this.columnMore.querySelector('.cell-prev').style.display = '';
            this.columnMore.querySelector('.cell-next').style.display = '';
            this.columnMore.querySelector('.cell-increase').style.display = '';
            this.columnMore.querySelector('.cell-decrease').style.display = '';
          } // let btnColHtml = this.columnMore.querySelector('.cell-html');


          var btnColDuplicate = this.columnMore.querySelector('.cell-duplicate');

          if (col.getAttribute('data-html')) {
            if (_btnColHtml) _btnColHtml.style.display = 'none';
            if (btnColDuplicate) btnColDuplicate.style.display = 'none';
          } else {
            if (_btnColHtml) _btnColHtml.style.display = '';
            if (btnColDuplicate) btnColDuplicate.style.display = '';
          } //data-protected


          if (row.hasAttribute('data-protected')) {
            row.querySelector('.is-row-tool').style.display = 'none';
            this.columnTool.style.display = 'none'; // if row protected, then all column protected
          } else {
            if (row.querySelectorAll('[data-protected]').length > 0) {
              row.querySelector('.is-row-tool').style.display = 'none';
            } else {
              row.querySelector('.is-row-tool').style.display = '';
            }

            this.columnTool.style.display = ''; //check columnTool buttons if need to show or hide

            var _protected = dom$k.parentsHasAttribute(col, 'data-protected');

            if (_protected) {
              this.columnTool.querySelector('.cell-remove').style.display = 'none';
              this.columnTool.querySelector('.cell-more').style.display = 'none';
            } else {
              this.columnTool.querySelector('.cell-remove').style.display = '';
              this.columnTool.querySelector('.cell-more').style.display = '';
            }
          }
        }
      }
    }, {
      key: "refreshColumnTool",
      value: function refreshColumnTool(cell) {
        this.grid.refreshColumnTool(cell);
      }
    }, {
      key: "showColumnTool",
      value: function showColumnTool(cell) {
        this.grid.showColumnTool(cell);
      }
    }, {
      key: "hideColumnTool",
      value: function hideColumnTool() {
        this.grid.hideColumnTool();
      }
    }]);

    return ColumnTool;
  }();

  var Modal = /*#__PURE__*/function () {
    function Modal() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck$1(this, Modal);

      var defaults = {
        animateModal: false,
        elementToAnimate: '',
        stuffPlacement: '#_cbhtml'
      };
      this.opts = Object.assign(this, defaults, opts);
      this.id = this.makeId();
      var builderStuff = document.querySelector(this.opts.stuffPlacement);

      if (!builderStuff) {
        builderStuff = document.createElement('div');
        builderStuff.id = '_cbhtml';
        document.body.appendChild(builderStuff);
      }

      this.builderStuff = builderStuff; // Stuff placement for this (single) instance

      var objStuff = document.createElement('div');
      objStuff.id = this.id;
      builderStuff.appendChild(objStuff);
      this.objStuff = objStuff;
    }

    _createClass$1(Modal, [{
      key: "confirm",
      value: function confirm(message, callback, animated) {
        var _this = this;

        var html = "<div class=\"is-modal is-confirm\">\n            <div style=\"max-width:526px;text-align:center;\">\n                <p>".concat(message, "</p>\n                <button title=\"").concat(this.out('Delete'), "\" class=\"input-ok classic\">").concat(this.out('Delete'), "</button>\n            </div>\n        </div>");
        var confirmModal = this.objStuff.querySelector('.is-confirm');

        if (!confirmModal) {
          this.objStuff.insertAdjacentHTML('beforeend', html);
          confirmModal = this.builderStuff.querySelector('.is-confirm');
        }

        this.show(confirmModal, false, function () {
          //this function runs when overlay is clicked. Remove modal.
          confirmModal.parentNode.removeChild(confirmModal); //do task

          callback(false);
        }, animated);
        var buttonok = confirmModal.querySelector('.is-confirm .input-ok');
        this.addEventListener(buttonok, 'click', function () {
          _this.hide(confirmModal);

          confirmModal.parentNode.removeChild(confirmModal); //remove modal
          //do task

          callback(true);
        });
      }
    }, {
      key: "show",
      value: function show(modal, overlayStay, cancelCallback, animated) {
        var _this2 = this;

        this.addClass(modal, 'active'); // animated param (if set) will overide global setting

        var animate = false;

        if (!(typeof animated === 'undefined' || animated === null)) {
          // animated param is set
          animate = animated;
        } else {
          // if animated param is not set
          animate = this.opts.animateModal; // use global setting
        }

        if (animate) {
          var buildercontainers = document.querySelectorAll(this.opts.elementToAnimate);
          Array.prototype.forEach.call(buildercontainers, function (buildercontainer) {
            buildercontainer.style.transform = 'scale(0.98)';
            buildercontainer.style.WebkitTransform = 'scale(0.98)';
            buildercontainer.style.MozTransform = 'scale(0.98)';
          });
        }

        if (!modal.querySelector('.is-modal-overlay')) {
          var html;

          if (overlayStay) {
            html = '<div class="is-modal-overlay" style="position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(255,255,255,0.3);z-index:-1;"></div>';
          } else {
            html = '<div class="is-modal-overlay" style="position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(255,255,255,0.000001);z-index:-1;"></div>';
          }

          modal.insertAdjacentHTML('afterbegin', html);

          if (!overlayStay) {
            var overlay = modal.querySelector('.is-modal-overlay');
            this.addEventListener(overlay, 'click', function () {
              //cancelCallback
              if (cancelCallback) cancelCallback();

              _this2.hide(modal);
            });
          }
        }
      }
    }, {
      key: "hide",
      value: function hide(modal) {
        if (this.opts.elementToAnimate !== '') {
          var buildercontainers = document.querySelectorAll(this.opts.elementToAnimate);
          Array.prototype.forEach.call(buildercontainers, function (buildercontainer) {
            buildercontainer.style.transform = '';
            buildercontainer.style.WebkitTransform = '';
            buildercontainer.style.MozTransform = '';
          });
        }

        this.removeClass(modal, 'active');
      } // http://stackoverflow.com/questions/1349404/generate-a-string-of-5-random-characters-in-javascript

    }, {
      key: "makeId",
      value: function makeId() {
        var text = '';
        var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';

        for (var i = 0; i < 2; i++) {
          text += possible.charAt(Math.floor(Math.random() * possible.length));
        }

        var text2 = '';
        var possible2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

        for (var _i = 0; _i < 5; _i++) {
          text2 += possible2.charAt(Math.floor(Math.random() * possible2.length));
        }

        return text + text2;
      }
    }, {
      key: "addClass",
      value: function addClass(element, classname) {
        if (!element) return;
        if (this.hasClass(element, classname)) return;
        if (element.classList.length === 0) element.className = classname;else element.className = element.className + ' ' + classname;
      }
    }, {
      key: "removeClass",
      value: function removeClass(element, classname) {
        if (!element) return;

        if (element.classList.length > 0) {
          element.className = element.className.replace(classname, '');
        }
      }
    }, {
      key: "hasClass",
      value: function hasClass(element, classname) {
        if (!element) return false;
        return element.classList ? element.classList.contains(classname) : new RegExp('\\b' + classname + '\\b').test(element.className);
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(parent, type, listener) {
        parent.addEventListener(type, listener);
      }
    }]);

    return Modal;
  }();

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn) {
    var module = { exports: {} };
  	return fn(module, module.exports), module.exports;
  }

  var rangeSlider = createCommonjsModule(function (module, exports) {
  (function webpackUniversalModuleDefinition(root, factory) {
  	module.exports = factory();
  })(window, function() {
  return /******/ (function(modules) { // webpackBootstrap
  /******/ 	// The module cache
  /******/ 	var installedModules = {};
  /******/
  /******/ 	// The require function
  /******/ 	function __webpack_require__(moduleId) {
  /******/
  /******/ 		// Check if module is in cache
  /******/ 		if(installedModules[moduleId]) {
  /******/ 			return installedModules[moduleId].exports;
  /******/ 		}
  /******/ 		// Create a new module (and put it into the cache)
  /******/ 		var module = installedModules[moduleId] = {
  /******/ 			i: moduleId,
  /******/ 			l: false,
  /******/ 			exports: {}
  /******/ 		};
  /******/
  /******/ 		// Execute the module function
  /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
  /******/
  /******/ 		// Flag the module as loaded
  /******/ 		module.l = true;
  /******/
  /******/ 		// Return the exports of the module
  /******/ 		return module.exports;
  /******/ 	}
  /******/
  /******/
  /******/ 	// expose the modules object (__webpack_modules__)
  /******/ 	__webpack_require__.m = modules;
  /******/
  /******/ 	// expose the module cache
  /******/ 	__webpack_require__.c = installedModules;
  /******/
  /******/ 	// define getter function for harmony exports
  /******/ 	__webpack_require__.d = function(exports, name, getter) {
  /******/ 		if(!__webpack_require__.o(exports, name)) {
  /******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
  /******/ 		}
  /******/ 	};
  /******/
  /******/ 	// define __esModule on exports
  /******/ 	__webpack_require__.r = function(exports) {
  /******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
  /******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
  /******/ 		}
  /******/ 		Object.defineProperty(exports, '__esModule', { value: true });
  /******/ 	};
  /******/
  /******/ 	// create a fake namespace object
  /******/ 	// mode & 1: value is a module id, require it
  /******/ 	// mode & 2: merge all properties of value into the ns
  /******/ 	// mode & 4: return value when already ns object
  /******/ 	// mode & 8|1: behave like require
  /******/ 	__webpack_require__.t = function(value, mode) {
  /******/ 		if(mode & 1) value = __webpack_require__(value);
  /******/ 		if(mode & 8) return value;
  /******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
  /******/ 		var ns = Object.create(null);
  /******/ 		__webpack_require__.r(ns);
  /******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
  /******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
  /******/ 		return ns;
  /******/ 	};
  /******/
  /******/ 	// getDefaultExport function for compatibility with non-harmony modules
  /******/ 	__webpack_require__.n = function(module) {
  /******/ 		var getter = module && module.__esModule ?
  /******/ 			function getDefault() { return module['default']; } :
  /******/ 			function getModuleExports() { return module; };
  /******/ 		__webpack_require__.d(getter, 'a', getter);
  /******/ 		return getter;
  /******/ 	};
  /******/
  /******/ 	// Object.prototype.hasOwnProperty.call
  /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
  /******/
  /******/ 	// __webpack_public_path__
  /******/ 	__webpack_require__.p = "";
  /******/
  /******/
  /******/ 	// Load entry module and return exports
  /******/ 	return __webpack_require__(__webpack_require__.s = "./src/range-slider.js");
  /******/ })
  /************************************************************************/
  /******/ ({

  /***/ "./src/range-slider.css":
  /*!******************************!*\
    !*** ./src/range-slider.css ***!
    \******************************/
  /*! no static exports found */
  /***/ (function(module, exports, __webpack_require__) {

  // extracted by mini-css-extract-plugin

  /***/ }),

  /***/ "./src/range-slider.js":
  /*!*****************************!*\
    !*** ./src/range-slider.js ***!
    \*****************************/
  /*! no static exports found */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _dom = __webpack_require__(/*! ./utils/dom */ "./src/utils/dom.js");

  var dom = _interopRequireWildcard(_dom);

  var _functions = __webpack_require__(/*! ./utils/functions */ "./src/utils/functions.js");

  var func = _interopRequireWildcard(_functions);

  __webpack_require__(/*! ./range-slider.css */ "./src/range-slider.css");

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var newLineAndTabRegexp = new RegExp('/[\\n\\t]/', 'g');
  var MAX_SET_BY_DEFAULT = 100;
  var HANDLE_RESIZE_DELAY = 300;
  var HANDLE_RESIZE_DEBOUNCE = 50;

  var pluginName = 'rangeSlider';
  var inputrange = dom.supportsRange();
  var defaults = {
    polyfill: true,
    root: document,
    rangeClass: 'rangeSlider',
    disabledClass: 'rangeSlider--disabled',
    fillClass: 'rangeSlider__fill',
    bufferClass: 'rangeSlider__buffer',
    handleClass: 'rangeSlider__handle',
    startEvent: ['mousedown', 'touchstart', 'pointerdown'],
    moveEvent: ['mousemove', 'touchmove', 'pointermove'],
    endEvent: ['mouseup', 'touchend', 'pointerup'],
    min: null,
    max: null,
    step: null,
    value: null,
    buffer: null,
    stick: null,
    borderRadius: 10,
    vertical: false
  };

  var verticalSlidingFixRegistered = false;

  /**
   * Plugin
   * @param {HTMLElement} element
   * @param {this} options
   */

  var RangeSlider = function () {
    function RangeSlider(element, options) {
      _classCallCheck(this, RangeSlider);

      var minSetByDefault = void 0;
      var maxSetByDefault = void 0;
      var stepSetByDefault = void 0;
      var stickAttribute = void 0;
      var stickValues = void 0;

      RangeSlider.instances.push(this);

      this.element = element;
      this.options = func.simpleExtend(defaults, options);
      this.polyfill = this.options.polyfill;
      this.vertical = this.options.vertical;
      this.onInit = this.options.onInit;
      this.onSlide = this.options.onSlide;
      this.onSlideStart = this.options.onSlideStart;
      this.onSlideEnd = this.options.onSlideEnd;
      this.onSlideEventsCount = -1;
      this.isInteractsNow = false;
      this.needTriggerEvents = false;

      this._addVerticalSlideScrollFix();

      // Plugin should only be used as a polyfill
      if (!this.polyfill) {
        // Input range support?
        if (inputrange) {
          return;
        }
      }

      this.options.buffer = this.options.buffer || parseFloat(this.element.getAttribute('data-buffer'));

      this.identifier = 'js-' + pluginName + '-' + func.uuid();

      this.min = func.getFirsNumberLike(this.options.min, parseFloat(this.element.getAttribute('min')), minSetByDefault = 0);

      this.max = func.getFirsNumberLike(this.options.max, parseFloat(this.element.getAttribute('max')), maxSetByDefault = MAX_SET_BY_DEFAULT);

      this.value = func.getFirsNumberLike(this.options.value, this.element.value, parseFloat(this.element.value || this.min + (this.max - this.min) / 2));

      this.step = func.getFirsNumberLike(this.options.step, parseFloat(this.element.getAttribute('step')) || (stepSetByDefault = 1));

      this.percent = null;

      if (func.isArray(this.options.stick) && this.options.stick.length >= 1) {
        this.stick = this.options.stick;
      } else if (stickAttribute = this.element.getAttribute('stick')) {
        stickValues = stickAttribute.split(' ');
        if (stickValues.length >= 1) {
          this.stick = stickValues.map(parseFloat);
        }
      }
      if (this.stick && this.stick.length === 1) {
        this.stick.push(this.step * 1.5);
      }
      this._updatePercentFromValue();

      this.toFixed = this._toFixed(this.step);

      var directionClass = void 0;

      this.container = document.createElement('div');
      dom.addClass(this.container, this.options.fillClass);

      directionClass = this.vertical ? this.options.fillClass + '__vertical' : this.options.fillClass + '__horizontal';
      dom.addClass(this.container, directionClass);

      this.handle = document.createElement('div');
      dom.addClass(this.handle, this.options.handleClass);

      directionClass = this.vertical ? this.options.handleClass + '__vertical' : this.options.handleClass + '__horizontal';
      dom.addClass(this.handle, directionClass);

      this.range = document.createElement('div');
      dom.addClass(this.range, this.options.rangeClass);
      this.range.id = this.identifier;

      var elementTitle = element.getAttribute('title');
      if (elementTitle && elementTitle.length > 0) {
        this.range.setAttribute('title', elementTitle);
      }

      if (this.options.bufferClass) {
        this.buffer = document.createElement('div');
        dom.addClass(this.buffer, this.options.bufferClass);
        this.range.appendChild(this.buffer);

        directionClass = this.vertical ? this.options.bufferClass + '__vertical' : this.options.bufferClass + '__horizontal';
        dom.addClass(this.buffer, directionClass);
      }

      this.range.appendChild(this.container);
      this.range.appendChild(this.handle);

      directionClass = this.vertical ? this.options.rangeClass + '__vertical' : this.options.rangeClass + '__horizontal';
      dom.addClass(this.range, directionClass);

      if (func.isNumberLike(this.options.value)) {
        this._setValue(this.options.value, true);
        this.element.value = this.options.value;
      }

      if (func.isNumberLike(this.options.buffer)) {
        this.element.setAttribute('data-buffer', this.options.buffer);
      }

      if (func.isNumberLike(this.options.min) || minSetByDefault) {
        this.element.setAttribute('min', '' + this.min);
      }

      if (func.isNumberLike(this.options.max) || maxSetByDefault) {
        this.element.setAttribute('max', '' + this.max);
      }

      if (func.isNumberLike(this.options.step) || stepSetByDefault) {
        this.element.setAttribute('step', '' + this.step);
      }

      dom.insertAfter(this.element, this.range);

      // hide the input visually
      dom.setCss(this.element, {
        'position': 'absolute',
        'width': '1px',
        'height': '1px',
        'overflow': 'hidden',
        'opacity': '0'
      });

      // Store context
      this._handleDown = this._handleDown.bind(this);
      this._handleMove = this._handleMove.bind(this);
      this._handleEnd = this._handleEnd.bind(this);
      this._startEventListener = this._startEventListener.bind(this);
      this._changeEventListener = this._changeEventListener.bind(this);
      this._handleResize = this._handleResize.bind(this);

      this._init();

      // Attach Events
      window.addEventListener('resize', this._handleResize, false);

      dom.addEventListeners(this.options.root, this.options.startEvent, this._startEventListener);

      // Listen to programmatic value changes
      this.element.addEventListener('change', this._changeEventListener, false);
    }

    /**
     * A lightweight plugin wrapper around the constructor,preventing against multiple instantiations
     * @param {Element} el
     * @param {Object} options
     */


    _createClass(RangeSlider, [{
      key: 'update',


      /* public methods */

      /**
       * @param {Object} obj like {min : Number, max : Number, value : Number, step : Number, buffer : [String|Number]}
       * @param {Boolean} triggerEvents
       * @returns {RangeSlider}
       */
      value: function update(obj, triggerEvents) {
        if (triggerEvents) {
          this.needTriggerEvents = true;
        }
        if (func.isObject(obj)) {
          if (func.isNumberLike(obj.min)) {
            this.element.setAttribute('min', '' + obj.min);
            this.min = obj.min;
          }

          if (func.isNumberLike(obj.max)) {
            this.element.setAttribute('max', '' + obj.max);
            this.max = obj.max;
          }

          if (func.isNumberLike(obj.step)) {
            this.element.setAttribute('step', '' + obj.step);
            this.step = obj.step;
            this.toFixed = this._toFixed(obj.step);
          }

          if (func.isNumberLike(obj.buffer)) {
            this._setBufferPosition(obj.buffer);
          }

          if (func.isNumberLike(obj.value)) {
            this._setValue(obj.value);
          }
        }
        this._update();
        this.onSlideEventsCount = 0;
        this.needTriggerEvents = false;
        return this;
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        var _this = this;

        dom.removeAllListenersFromEl(this, this.options.root);
        window.removeEventListener('resize', this._handleResize, false);
        this.element.removeEventListener('change', this._changeEventListener, false);

        this.element.style.cssText = '';
        delete this.element[pluginName];

        // Remove the generated markup
        if (this.range) {
          this.range.parentNode.removeChild(this.range);
        }

        RangeSlider.instances = RangeSlider.instances.filter(function (plugin) {
          return plugin !== _this;
        });

        if (!RangeSlider.instances.some(function (plugin) {
          return plugin.vertical;
        })) {
          this._removeVerticalSlideScrollFix();
        }
      }

      /* private methods */

    }, {
      key: '_toFixed',
      value: function _toFixed(step) {
        return (step + '').replace('.', '').length - 1;
      }
    }, {
      key: '_init',
      value: function _init() {
        if (this.onInit && typeof this.onInit === 'function') {
          this.onInit();
        }
        this._update(false);
      }
    }, {
      key: '_updatePercentFromValue',
      value: function _updatePercentFromValue() {
        this.percent = (this.value - this.min) / (this.max - this.min);
      }

      /**
       * This method check if this.identifier exists in ev.target's ancestors
       * @param ev
       * @param data
       */

    }, {
      key: '_startEventListener',
      value: function _startEventListener(ev, data) {
        var _this2 = this;

        var el = ev.target;
        var isEventOnSlider = false;

        if (ev.which !== 1 && !('touches' in ev)) {
          return;
        }

        dom.forEachAncestors(el, function (el) {
          return isEventOnSlider = el.id === _this2.identifier && !dom.hasClass(el, _this2.options.disabledClass);
        }, true);

        if (isEventOnSlider) {
          this._handleDown(ev, data);
        }
      }
    }, {
      key: '_changeEventListener',
      value: function _changeEventListener(ev, data) {
        if (data && data.origin === this.identifier) {
          return;
        }

        var value = ev.target.value;
        var pos = this._getPositionFromValue(value);

        this._setPosition(pos);
      }
    }, {
      key: '_update',
      value: function _update(triggerEvent) {
        var sizeProperty = this.vertical ? 'offsetHeight' : 'offsetWidth';

        this.handleSize = dom.getDimension(this.handle, sizeProperty);
        this.rangeSize = dom.getDimension(this.range, sizeProperty);
        this.maxHandleX = this.rangeSize - this.handleSize;
        this.grabX = this.handleSize / 2;
        this.position = this._getPositionFromValue(this.value);

        // Consider disabled state
        if (this.element.disabled) {
          dom.addClass(this.range, this.options.disabledClass);
        } else {
          dom.removeClass(this.range, this.options.disabledClass);
        }

        this._setPosition(this.position);
        if (this.options.bufferClass && this.options.buffer) {
          this._setBufferPosition(this.options.buffer);
        }
        this._updatePercentFromValue();
        if (triggerEvent !== false) {
          dom.triggerEvent(this.element, 'change', { origin: this.identifier });
        }
      }
    }, {
      key: '_addVerticalSlideScrollFix',
      value: function _addVerticalSlideScrollFix() {
        if (this.vertical && !verticalSlidingFixRegistered) {
          document.addEventListener('touchmove', RangeSlider._touchMoveScrollHandler, { passive: false });
          verticalSlidingFixRegistered = true;
        }
      }
    }, {
      key: '_removeVerticalSlideScrollFix',
      value: function _removeVerticalSlideScrollFix() {
        document.removeEventListener('touchmove', RangeSlider._touchMoveScrollHandler);
        verticalSlidingFixRegistered = false;
      }
    }, {
      key: '_handleResize',
      value: function _handleResize() {
        var _this3 = this;

        return func.debounce(function () {
          // Simulate resizeEnd event.
          func.delay(function () {
            _this3._update();
          }, HANDLE_RESIZE_DELAY);
        }, HANDLE_RESIZE_DEBOUNCE)();
      }
    }, {
      key: '_handleDown',
      value: function _handleDown(e) {
        this.isInteractsNow = true;
        e.preventDefault();
        dom.addEventListeners(this.options.root, this.options.moveEvent, this._handleMove);
        dom.addEventListeners(this.options.root, this.options.endEvent, this._handleEnd);

        // If we click on the handle don't set the new position
        if ((' ' + e.target.className + ' ').replace(newLineAndTabRegexp, ' ').indexOf(this.options.handleClass) > -1) {
          return;
        }

        var boundingClientRect = this.range.getBoundingClientRect();

        var posX = this._getRelativePosition(e);
        var rangeX = this.vertical ? boundingClientRect.bottom : boundingClientRect.left;
        var handleX = this._getPositionFromNode(this.handle) - rangeX;
        var position = posX - this.grabX;

        this._setPosition(position);

        if (posX >= handleX && posX < handleX + this.options.borderRadius * 2) {
          this.grabX = posX - handleX;
        }
        this._updatePercentFromValue();
      }
    }, {
      key: '_handleMove',
      value: function _handleMove(e) {
        var posX = this._getRelativePosition(e);

        this.isInteractsNow = true;
        e.preventDefault();
        this._setPosition(posX - this.grabX);
      }
    }, {
      key: '_handleEnd',
      value: function _handleEnd(e) {
        e.preventDefault();
        dom.removeEventListeners(this.options.root, this.options.moveEvent, this._handleMove);
        dom.removeEventListeners(this.options.root, this.options.endEvent, this._handleEnd);

        // Ok we're done fire the change event
        dom.triggerEvent(this.element, 'change', { origin: this.identifier });

        if (this.isInteractsNow || this.needTriggerEvents) {
          if (this.onSlideEnd && typeof this.onSlideEnd === 'function') {
            this.onSlideEnd(this.value, this.percent, this.position);
          }

          if (this.vertical) {
            RangeSlider.slidingVertically = false;
          }
        }
        this.onSlideEventsCount = 0;
        this.isInteractsNow = false;
      }
    }, {
      key: '_setPosition',
      value: function _setPosition(pos) {
        var position = void 0;
        var stickRadius = void 0;
        var restFromValue = void 0;
        var stickTo = void 0;

        // Snapping steps
        var value = this._getValueFromPosition(func.between(pos, 0, this.maxHandleX));

        // Stick to stick[0] in radius stick[1]
        if (this.stick) {
          stickTo = this.stick[0];
          stickRadius = this.stick[1] || 0.1;
          restFromValue = value % stickTo;
          if (restFromValue < stickRadius) {
            value = value - restFromValue;
          } else if (Math.abs(stickTo - restFromValue) < stickRadius) {
            value = value - restFromValue + stickTo;
          }
        }
        position = this._getPositionFromValue(value);

        // Update ui
        if (this.vertical) {
          this.container.style.height = position + this.grabX + 'px';
          this.handle.style['webkitTransform'] = 'translateY(-' + position + 'px)';
          this.handle.style['msTransform'] = 'translateY(-' + position + 'px)';
          this.handle.style.transform = 'translateY(-' + position + 'px)';
        } else {
          this.container.style.width = position + this.grabX + 'px';
          this.handle.style['webkitTransform'] = 'translateX(' + position + 'px)';
          this.handle.style['msTransform'] = 'translateX(' + position + 'px)';
          this.handle.style.transform = 'translateX(' + position + 'px)';
        }

        this._setValue(value);

        // Update globals
        this.position = position;
        this.value = value;
        this._updatePercentFromValue();

        if (this.isInteractsNow || this.needTriggerEvents) {
          if (this.onSlideStart && typeof this.onSlideStart === 'function' && this.onSlideEventsCount === 0) {
            this.onSlideStart(this.value, this.percent, this.position);
          }

          if (this.onSlide && typeof this.onSlide === 'function') {
            this.onSlide(this.value, this.percent, this.position);
          }

          if (this.vertical) {
            RangeSlider.slidingVertically = true;
          }
        }

        this.onSlideEventsCount++;
      }
    }, {
      key: '_setBufferPosition',
      value: function _setBufferPosition(pos) {
        var isPercent = true;

        if (isFinite(pos)) {
          pos = parseFloat(pos);
        } else if (func.isString(pos)) {
          if (pos.indexOf('px') > 0) {
            isPercent = false;
          }
          pos = parseFloat(pos);
        } else {
          console.warn('New position must be XXpx or XX%');
          return;
        }

        if (isNaN(pos)) {
          console.warn('New position is NaN');
          return;
        }
        if (!this.options.bufferClass) {
          console.warn('You disabled buffer, it\'s className is empty');
          return;
        }
        var bufferSize = isPercent ? pos : pos / this.rangeSize * 100;

        if (bufferSize < 0) {
          bufferSize = 0;
        }
        if (bufferSize > 100) {
          bufferSize = 100;
        }
        this.options.buffer = bufferSize;

        var paddingSize = this.options.borderRadius / this.rangeSize * 100;
        var bufferSizeWithPadding = bufferSize - paddingSize;

        if (bufferSizeWithPadding < 0) {
          bufferSizeWithPadding = 0;
        }

        if (this.vertical) {
          this.buffer.style.height = bufferSizeWithPadding + '%';
          this.buffer.style.bottom = paddingSize * 0.5 + '%';
        } else {
          this.buffer.style.width = bufferSizeWithPadding + '%';
          this.buffer.style.left = paddingSize * 0.5 + '%';
        }

        this.element.setAttribute('data-buffer', bufferSize);
      }

      /**
       *
       * @param {Element} node
       * @returns {*} Returns element position relative to the parent
       * @private
       */

    }, {
      key: '_getPositionFromNode',
      value: function _getPositionFromNode(node) {
        var i = this.vertical ? this.maxHandleX : 0;

        while (node !== null) {
          i += this.vertical ? node.offsetTop : node.offsetLeft;
          node = node.offsetParent;
        }
        return i;
      }

      /**
       *
       * @param {(MouseEvent|TouchEvent)}e
       * @returns {number}
       */

    }, {
      key: '_getRelativePosition',
      value: function _getRelativePosition(e) {
        var boundingClientRect = this.range.getBoundingClientRect();

        // Get the offset relative to the viewport
        var rangeSize = this.vertical ? boundingClientRect.bottom : boundingClientRect.left;
        var pageOffset = 0;

        var pagePositionProperty = this.vertical ? 'pageY' : 'pageX';

        if (typeof e[pagePositionProperty] !== 'undefined') {
          pageOffset = e.touches && e.touches.length ? e.touches[0][pagePositionProperty] : e[pagePositionProperty];
        } else if (typeof e.originalEvent !== 'undefined') {
          if (typeof e.originalEvent[pagePositionProperty] !== 'undefined') {
            pageOffset = e.originalEvent[pagePositionProperty];
          } else if (e.originalEvent.touches && e.originalEvent.touches[0] && typeof e.originalEvent.touches[0][pagePositionProperty] !== 'undefined') {
            pageOffset = e.originalEvent.touches[0][pagePositionProperty];
          }
        } else if (e.touches && e.touches[0] && typeof e.touches[0][pagePositionProperty] !== 'undefined') {
          pageOffset = e.touches[0][pagePositionProperty];
        } else if (e.currentPoint && (typeof e.currentPoint.x !== 'undefined' || typeof e.currentPoint.y !== 'undefined')) {
          pageOffset = this.vertical ? e.currentPoint.y : e.currentPoint.x;
        }

        if (this.vertical) {
          pageOffset -= window.pageYOffset;
        }

        return this.vertical ? rangeSize - pageOffset : pageOffset - rangeSize;
      }
    }, {
      key: '_getPositionFromValue',
      value: function _getPositionFromValue(value) {
        var percentage = (value - this.min) / (this.max - this.min);
        var pos = percentage * this.maxHandleX;

        return isNaN(pos) ? 0 : pos;
      }
    }, {
      key: '_getValueFromPosition',
      value: function _getValueFromPosition(pos) {
        var percentage = pos / (this.maxHandleX || 1);
        var value = this.step * Math.round(percentage * (this.max - this.min) / this.step) + this.min;

        return Number(value.toFixed(this.toFixed));
      }
    }, {
      key: '_setValue',
      value: function _setValue(value, force) {
        if (value === this.value && !force) {
          return;
        }

        // Set the new value and fire the `input` event
        this.element.value = value;
        this.value = value;
        dom.triggerEvent(this.element, 'input', { origin: this.identifier });
      }
    }], [{
      key: 'create',
      value: function create(el, options) {
        var createInstance = function createInstance(el) {
          var data = el[pluginName];

          // Create a new instance.
          if (!data) {
            data = new RangeSlider(el, options);
            el[pluginName] = data;
          }
        };

        if (el.length) {
          Array.prototype.slice.call(el).forEach(function (el) {
            createInstance(el);
          });
        } else {
          createInstance(el);
        }
      }
    }, {
      key: '_touchMoveScrollHandler',
      value: function _touchMoveScrollHandler(event) {
        if (RangeSlider.slidingVertically) {
          event.preventDefault();
        }
      }
    }]);

    return RangeSlider;
  }();

  exports.default = RangeSlider;


  RangeSlider.version = "0.4.11";
  RangeSlider.dom = dom;
  RangeSlider.functions = func;
  RangeSlider.instances = [];
  RangeSlider.slidingVertically = false;
  module.exports = exports['default'];

  /***/ }),

  /***/ "./src/utils/dom.js":
  /*!**************************!*\
    !*** ./src/utils/dom.js ***!
    \**************************/
  /*! no static exports found */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.supportsRange = exports.removeAllListenersFromEl = exports.removeEventListeners = exports.addEventListeners = exports.insertAfter = exports.triggerEvent = exports.forEachAncestors = exports.removeClass = exports.addClass = exports.hasClass = exports.setCss = exports.getDimension = exports.getHiddenParentNodes = exports.isHidden = exports.detectIE = undefined;

  var _functions = __webpack_require__(/*! ./functions */ "./src/utils/functions.js");

  var func = _interopRequireWildcard(_functions);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  var EVENT_LISTENER_LIST = 'eventListenerList';

  var detectIE = exports.detectIE = function detectIE() {
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf('MSIE ');

    if (msie > 0) {
      return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
    }

    var trident = ua.indexOf('Trident/');

    if (trident > 0) {
      var rv = ua.indexOf('rv:');

      return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
    }

    var edge = ua.indexOf('Edge/');

    if (edge > 0) {
      return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
    }

    return false;
  };

  var ieVersion = detectIE();
  var eventCaptureParams = window.PointerEvent && !ieVersion ? { passive: false } : false;

  /**
   * Check if a `element` is visible in the DOM
   *
   * @param  {Element}  element
   * @return {Boolean}
   */
  var isHidden = exports.isHidden = function isHidden(element) {
    return element.offsetWidth === 0 || element.offsetHeight === 0 || element.open === false;
  };

  /**
   * Get hidden parentNodes of an `element`
   *
   * @param {Element} element
   * @return {Element[]}
   */
  var getHiddenParentNodes = exports.getHiddenParentNodes = function getHiddenParentNodes(element) {
    var parents = [];
    var node = element.parentNode;

    while (node && isHidden(node)) {
      parents.push(node);
      node = node.parentNode;
    }
    return parents;
  };

  /**
   * Returns dimensions for an element even if it is not visible in the DOM.
   *
   * @param  {Element} element
   * @param  {string}  key     (e.g. offsetWidth …)
   * @return {Number}
   */
  exports.getDimension = function getDimension(element, key) {
    var hiddenParentNodes = getHiddenParentNodes(element);
    var hiddenParentNodesLength = hiddenParentNodes.length;
    var hiddenParentNodesStyle = [];
    var dimension = element[key];

    // Used for native `<details>` elements
    var toggleOpenProperty = function toggleOpenProperty(element) {
      if (typeof element.open !== 'undefined') {
        element.open = !element.open;
      }
    };

    if (hiddenParentNodesLength) {
      for (var i = 0; i < hiddenParentNodesLength; i++) {
        // Cache the styles to restore then later.
        hiddenParentNodesStyle.push({
          display: hiddenParentNodes[i].style.display,
          height: hiddenParentNodes[i].style.height,
          overflow: hiddenParentNodes[i].style.overflow,
          visibility: hiddenParentNodes[i].style.visibility
        });

        hiddenParentNodes[i].style.display = 'block';
        hiddenParentNodes[i].style.height = '0';
        hiddenParentNodes[i].style.overflow = 'hidden';
        hiddenParentNodes[i].style.visibility = 'hidden';
        toggleOpenProperty(hiddenParentNodes[i]);
      }

      dimension = element[key];

      for (var j = 0; j < hiddenParentNodesLength; j++) {
        toggleOpenProperty(hiddenParentNodes[j]);
        hiddenParentNodes[j].style.display = hiddenParentNodesStyle[j].display;
        hiddenParentNodes[j].style.height = hiddenParentNodesStyle[j].height;
        hiddenParentNodes[j].style.overflow = hiddenParentNodesStyle[j].overflow;
        hiddenParentNodes[j].style.visibility = hiddenParentNodesStyle[j].visibility;
      }
    }
    return dimension;
  };

  /**
   *
   * @param {HTMLElement} el
   * @param {Object} cssObj
   * @returns {*}
   */
  exports.setCss = function setCss(el, cssObj) {
    for (var key in cssObj) {
      el.style[key] = cssObj[key];
    }
    return el.style;
  };

  /**
   *
   * @param {HTMLElement} elem
   * @param {string} className
   */
  var hasClass = exports.hasClass = function hasClass(elem, className) {
    return new RegExp(' ' + className + ' ').test(' ' + elem.className + ' ');
  };

  /**
   *
   * @param {HTMLElement} elem
   * @param {string} className
   */
  exports.addClass = function addClass(elem, className) {
    if (!hasClass(elem, className)) {
      elem.className += ' ' + className;
    }
  };

  /**
   *
   * @param {HTMLElement} elem
   * @param {string} className
   */
  exports.removeClass = function removeClass(elem, className) {
    var newClass = ' ' + elem.className.replace(/[\t\r\n]/g, ' ') + ' ';

    if (hasClass(elem, className)) {
      while (newClass.indexOf(' ' + className + ' ') >= 0) {
        newClass = newClass.replace(' ' + className + ' ', ' ');
      }
      elem.className = newClass.replace(/^\s+|\s+$/g, '');
    }
  };

  /**
   *
   * @param {HTMLElement} el
   * @param {Function} callback
   * @param {boolean} andForElement - apply callback for el
   * @returns {HTMLElement}
   */
  exports.forEachAncestors = function forEachAncestors(el, callback, andForElement) {
    if (andForElement) {
      callback(el);
    }

    while (el.parentNode && !callback(el)) {
      el = el.parentNode;
    }

    return el;
  };

  /**
   *
   * @param {HTMLElement} el
   * @param {string} name event name
   * @param {Object} data
   */
  exports.triggerEvent = function triggerEvent(el, name, data) {
    if (!func.isString(name)) {
      throw new TypeError('event name must be String');
    }
    if (!(el instanceof HTMLElement)) {
      throw new TypeError('element must be HTMLElement');
    }
    name = name.trim();
    var event = document.createEvent('CustomEvent');

    event.initCustomEvent(name, false, false, data);
    el.dispatchEvent(event);
  };

  /**
   * @param {Object} referenceNode after this
   * @param {Object} newNode insert this
   */
  exports.insertAfter = function insertAfter(referenceNode, newNode) {
    return referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
  };

  /**
   * Add event listeners and push them to el[EVENT_LISTENER_LIST]
   * @param {HTMLElement|Node|Document} el DOM element
   * @param {Array} events
   * @param {Function} listener
   */
  exports.addEventListeners = function addEventListeners(el, events, listener) {
    events.forEach(function (eventName) {
      if (!el[EVENT_LISTENER_LIST]) {
        el[EVENT_LISTENER_LIST] = {};
      }
      if (!el[EVENT_LISTENER_LIST][eventName]) {
        el[EVENT_LISTENER_LIST][eventName] = [];
      }

      el.addEventListener(eventName, listener, eventCaptureParams);
      if (el[EVENT_LISTENER_LIST][eventName].indexOf(listener) < 0) {
        el[EVENT_LISTENER_LIST][eventName].push(listener);
      }
    });
  };

  /**
   * Remove event listeners and remove them from el[EVENT_LISTENER_LIST]
   * @param {HTMLElement} el DOM element
   * @param {Array} events
   * @param {Function} listener
   */
  exports.removeEventListeners = function removeEventListeners(el, events, listener) {
    events.forEach(function (eventName) {
      var index = void 0;

      el.removeEventListener(eventName, listener, false);

      if (el[EVENT_LISTENER_LIST] && el[EVENT_LISTENER_LIST][eventName] && (index = el[EVENT_LISTENER_LIST][eventName].indexOf(listener)) > -1) {
        el[EVENT_LISTENER_LIST][eventName].splice(index, 1);
      }
    });
  };

  /**
   * Remove ALL event listeners which exists in el[EVENT_LISTENER_LIST]
   * @param {RangeSlider} instance
   * @param {HTMLElement} el DOM element
   */
  exports.removeAllListenersFromEl = function removeAllListenersFromEl(instance, el) {
    if (!el[EVENT_LISTENER_LIST]) {
      return;
    }

    /* jshint ignore:start */

    /**
     *
     * @callback listener
     * @this {Object} event name
     */
    function rm(listener) {
      if (listener === instance._startEventListener) {
        this.el.removeEventListener(this.eventName, listener, false);
      }
    }

    for (var eventName in el[EVENT_LISTENER_LIST]) {
      el[EVENT_LISTENER_LIST][eventName].forEach(rm, { eventName: eventName, el: el });
    }

    el[EVENT_LISTENER_LIST] = {};
    /* jshint ignore:end */
  };

  /**
   * Range feature detection
   * @return {Boolean}
   */
  exports.supportsRange = function supportsRange() {
    var input = document.createElement('input');

    input.setAttribute('type', 'range');
    return input.type !== 'text';
  };

  /***/ }),

  /***/ "./src/utils/functions.js":
  /*!********************************!*\
    !*** ./src/utils/functions.js ***!
    \********************************/
  /*! no static exports found */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  /**
   * Create a random uuid
   */
  exports.uuid = function uuid() {
    var s4 = function s4() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
  };

  /**
   * Delays a function for the given number of milliseconds, and then calls
   * it with the arguments supplied.
   *
   * @param  {Function} fn   function
   * @param  {Number}   wait delay
   * @param  {Number}   args arguments
   * @return {Function}
   */
  exports.delay = function delay(fn, wait) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    return setTimeout(function () {
      return fn.apply(null, args);
    }, wait);
  };

  /**
   * Returns a debounced function that will make sure the given
   * function is not triggered too much.
   *
   * @param  {Function} fn Function to debounce.
   * @param  {Number}   debounceDuration OPTIONAL. The amount of time in milliseconds for which we will debounce the
   *         function. (defaults to 100ms)
   * @return {Function}
   */
  exports.debounce = function debounce(fn) {
    var debounceDuration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      if (!fn.debouncing) {
        fn.lastReturnVal = fn.apply(window, args);
        fn.debouncing = true;
      }
      clearTimeout(fn.debounceTimeout);
      fn.debounceTimeout = setTimeout(function () {
        fn.debouncing = false;
      }, debounceDuration);
      return fn.lastReturnVal;
    };
  };

  var isString = exports.isString = function isString(obj) {
    return obj === '' + obj;
  };

  exports.isArray = function isArray(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  };

  var isNumberLike = exports.isNumberLike = function isNumberLike(obj) {
    return obj !== null && obj !== undefined && (isString(obj) && isFinite(parseFloat(obj)) || isFinite(obj));
  };

  exports.getFirsNumberLike = function getFirsNumberLike() {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    if (!args.length) {
      return null;
    }

    for (var i = 0, len = args.length; i < len; i++) {
      if (isNumberLike(args[i])) {
        return args[i];
      }
    }

    return null;
  };

  exports.isObject = function isObject(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
  };

  exports.simpleExtend = function simpleExtend(defaultOpt, options) {
    var opt = {};

    for (var key in defaultOpt) {
      opt[key] = defaultOpt[key];
    }
    for (var _key4 in options) {
      opt[_key4] = options[_key4];
    }

    return opt;
  };

  exports.between = function between(pos, min, max) {
    if (pos < min) {
      return min;
    }
    if (pos > max) {
      return max;
    }
    return pos;
  };

  /***/ })

  /******/ });
  });
  //# sourceMappingURL=range-slider.js.map
  });

  var RangeSlider = /*@__PURE__*/getDefaultExportFromCjs(rangeSlider);

  var ColorPicker = /*#__PURE__*/function () {
    function ColorPicker() {
      var _this = this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck$1(this, ColorPicker);

      var defaults = {
        onPick: function onPick() {},
        color: '',
        colors: ['#ff9f01', '#f57c00', '#e64918', '#d32f2f', '#5d4038', '#37474f', '#353535', '#fbc02c', '#b0b42a', '#689f39', '#c21f5b', '#7b21a2', '#522da8', '#616161', '#01b8c9', '#009688', '#388d3c', '#0388d0', '#1465c0', '#2f3f9e', '#9e9e9e'],
        renderOn: '',
        animateModal: false,
        elementToAnimate: '',
        stuffPlacement: '#_cbhtml',
        lang: []
      };
      this.opts = Object.assign(this, defaults, opts);
      this.id = makeid$1();
      var builderStuff = document.querySelector(this.opts.stuffPlacement);

      if (!builderStuff) {
        builderStuff = document.createElement('div');
        builderStuff.id = '_cbhtml';
        builderStuff.className = 'is-ui';
        document.body.appendChild(builderStuff);
      }

      this.builderStuff = builderStuff; // Stuff placement for this (single) instance

      var objStuff = document.createElement('div');
      objStuff.id = this.id;
      builderStuff.appendChild(objStuff);
      this.objStuff = objStuff;
      var modal = new Modal({
        animateModal: this.opts.animateModal,
        elementToAnimate: this.opts.elementToAnimate,
        stuffPlacement: this.opts.stuffPlacement
      });
      this.modal = modal;
      var html_colors = '';

      if (this.opts.colors.length > 0) {
        html_colors += '<div class="color-default clearfix">';

        for (var i = 0; i < this.opts.colors.length; i++) {
          if (this.opts.colors[i] === '#ffffff') {
            html_colors += '<button title="' + this.opts.colors[i] + '" data-color="' + this.opts.colors[i] + '" style="background:' + this.opts.colors[i] + ';outline:rgba(222,222,222,0.75) 1px solid"></button>';
          } else {
            html_colors += '<button title="' + this.opts.colors[i] + '" data-color="' + this.opts.colors[i] + '" style="background:' + this.opts.colors[i] + ';"></button>';
          }
        }

        html_colors += '</div>';
      }

      var html_opacbg = '';

      for (i = 0; i < 106; i++) {
        if (i % 2 === 0) {
          html_opacbg += '<div style="background:#eee;width:7px;height:7px"></div>';
        } else {
          html_opacbg += '<div style="background:#fff;width:7px;height:7px"></div>';
        }
      }

      var html_previewbg = '';

      for (i = 0; i < 25; i++) {
        if (i % 2 === 0) {
          html_previewbg += '<div style="background:#eee;width:7px;height:7px"></div>';
        } else {
          html_previewbg += '<div style="background:#fff;width:7px;height:7px"></div>';
        }
      }

      var html = "<div class=\"pickcolor\" style=\"width:269px;padding:12px;box-sizing:border-box;\">\n            ".concat(html_colors, "\n            <div class=\"color-gradient clearfix\"></div>\n\n            <div class=\"div-color-opacity\" style=\"height: 10px; margin: 12px 0px 17px;position:relative;\">\n                <div style=\"position:absolute;top:0;left:0;width:100%;height:23px;display:flex;flex-direction:column;flex-flow:wrap\">\n                    ").concat(html_opacbg, "\n                </div>\n                <input class=\"color-opacity\" type=\"range\" />\n            </div>\n            <div class=\"clearfix\" style=\"margin:25px 0 3px;\">\n                <button title=\"").concat(this.out('B'), "\" data-color=\"#000000\" style=\"background:#111111;color:#f3f3f3;border:transparent 1px solid;width:35px;height:35px;line-height:35px;font-size:10px;border-right:none;\">").concat(this.out('B'), "</button>\n                <button title=\"").concat(this.out('W'), "\" data-color=\"#ffffff\" style=\"background:#ffffff;width:35px;height:35px;line-height:35px;font-size:10px;\">").concat(this.out('W'), "</button>\n                <button title=\"").concat(this.out('Clear'), "\" data-color=\"\" class=\"clear\" style=\"width:140px;height:35px;line-height:35px;border-right:none;\">").concat(this.out('Clear'), "</button>\n                <button title=\"").concat(this.out('More'), "\" class=\"input-hsl\" style=\"background:#ffffff;width:35px;height:35px;line-height:35px;font-size:10px;\"><svg class=\"is-icon-flex\" style=\"fill: rgba(0, 0, 0, 0.45);width:13px;height:13px;\"><use xlink:href=\"#ion-more\"></use></svg></button>\n            </div>\n            <div style=\"display:flex\">\n                <div style=\"border: rgba(231, 231, 231, 0.87) 1px solid;flex-grow: 0;flex-shrink: 0;flex-basis: 37px;height:35px;box-sizing:border-box;margin-top:8px;position:relative;\">\n                    <div style=\"position:absolute;top:0;left:0;width:100%;height:100%;display:flex;flex-direction:column;flex-flow:wrap;overflow:hidden;\">\n                        ").concat(html_previewbg, "\n                    </div>\n                    <button class=\"is-color-preview\" style=\"position:absolute;top:0;left:0;width:100%;height:100%;transition:none;\"></button>\n                </div>\n                <input class=\"input-text\" type=\"text\" style=\"width:209px;height:35px;margin-top:8px;font-size:13px;\"/>\n                <button title=\"").concat(this.out('Apply'), "\" class=\"input-ok\" style=\"height:35px;margin-top:8px;\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.7);\"><use xlink:href=\"#icon-ok\"></use></svg></use></svg></svg></button>\n            </div>\n        </div>");
      var html_modal = "<div class=\"is-modal pickcolor\" style=\"background: rgba(255,255,255,0.001);\">\n            <div style=\"max-width:271px;padding:0;\">\n                <div class=\"is-modal-bar is-draggable\" style=\"position: absolute;top: 0;left: 0;height:11px;width: 100%;background: transparent;\"></div>\n                <div style=\"padding:12px 12px 12px\">\n\n                    ".concat(html_colors, "\n                    <div class=\"color-gradient clearfix\"></div>\n        \n                    <div class=\"div-color-opacity\" style=\"height: 10px; margin: 12px 0px 17px;position:relative;\">\n                        <div style=\"position:absolute;top:0;left:0;width:100%;height:23px;display:flex;flex-direction:column;flex-flow:wrap\">\n                            ").concat(html_opacbg, "\n                        </div>\n                        <input class=\"color-opacity\" type=\"range\" />\n                    </div>\n                    <div class=\"clearfix\" style=\"margin:25px 0 3px;\">\n                        <button title=\"").concat(this.out('B'), "\" data-color=\"#000000\" style=\"background:#111111;color:#f3f3f3;border:transparent 1px solid;width:35px;height:35px;line-height:35px;font-size:10px;border-right:none;\">").concat(this.out('B'), "</button>\n                        <button title=\"").concat(this.out('W'), "\" data-color=\"#ffffff\" style=\"background:#ffffff;width:35px;height:35px;line-height:35px;font-size:10px;\">").concat(this.out('W'), "</button>\n                        <button title=\"").concat(this.out('Clear'), "\" data-color=\"\" class=\"clear\" style=\"width:140px;height:35px;line-height:35px;border-right:none;\">").concat(this.out('Clear'), "</button>\n                        <button title=\"").concat(this.out('More'), "\" class=\"input-hsl\" style=\"background:#ffffff;width:35px;height:35px;line-height:35px;font-size:10px;\"><svg class=\"is-icon-flex\" style=\"fill: rgba(0, 0, 0, 0.45);width:13px;height:13px;\"><use xlink:href=\"#ion-more\"></use></svg></button>\n                    </div>\n                    <div style=\"display:flex\">\n                        <div style=\"border: rgba(231, 231, 231, 0.87) 1px solid;flex-grow: 0;flex-shrink: 0;flex-basis: 37px;height:35px;box-sizing:border-box;margin-top:8px;position:relative;\">\n                            <div style=\"position:absolute;top:0;left:0;width:100%;height:100%;display:flex;flex-direction:column;flex-flow:wrap;overflow:hidden;\">\n                                ").concat(html_previewbg, "\n                            </div>\n                            <button class=\"is-color-preview\" style=\"position:absolute;top:0;left:0;width:100%;height:100%;transition:none;\"></button>\n                        </div>\n                        <input class=\"input-text\" type=\"text\" style=\"width:209px;height:35px;margin-top:8px;font-size:13px;\"/>\n                        <button title=\"").concat(this.out('Apply'), "\" class=\"input-ok\" style=\"height:35px;margin-top:8px;\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.7);\"><use xlink:href=\"#icon-ok\"></use></svg></use></svg></svg></button>\n                    </div>\n                    \n                </div>\n            </div>\n        </div>");
      var html_more = "<div class=\"is-modal pickcolormore\" style=\"background: rgba(255,255,255,0.001);\">\n            <div style=\"max-width:341px;padding:0;/*transform:translate3d(323px, 0px, 0px)*/\">\n                <div class=\"is-modal-bar is-draggable\" style=\"position: absolute;top: 0;left: 0;height:11px;width: 100%;background: transparent;\"></div>\n                <div style=\"padding:12px 12px 12px\">\n                    \n                    <div class=\"color-swatch clearfix\"></div>\n                    \n                    <div class=\"div-color-hue\" style=\"height: 23px;margin: 10px 0 0;\">\n                        <input class=\"color-hue\" type=\"range\" />\n                    </div>\n\n                </div>\n            </div>\n        </div>";
      var pickcolor;

      if (this.opts.renderOn !== '') {
        pickcolor = document.querySelector(this.opts.renderOn);
        pickcolor.insertAdjacentHTML('beforeend', html);
      } else {
        objStuff.insertAdjacentHTML('beforeend', html_modal);
        pickcolor = objStuff.querySelector('.is-modal.pickcolor');
      }

      objStuff.insertAdjacentHTML('beforeend', html_more);
      var pickcolormore = objStuff.querySelector('.is-modal.pickcolormore');
      this.pickcolor = pickcolor;
      this.pickcolormore = pickcolormore;
      new Draggable$1({
        selector: '#' + this.id + ' .is-draggable'
      });
      var tmp = document.createElement('div');
      tmp.style.backgroundColor = this.opts.color; //hex will be converted to rgb

      var s = tmp.style.backgroundColor; //rgb

      var rgb;

      if (s !== '') {
        rgb = RGBvalues.color(s);
        this.baseRGB = rgb;
      }

      var colorswatch = pickcolormore.querySelector('.color-swatch');
      var colorgradient = pickcolor.querySelector('.color-gradient');

      if (rgb) {
        var hueValue;

        if (s !== '') {
          hueValue = rgbToHue(rgb.r, rgb.g, rgb.b);
        } else {
          hueValue = 0;
        }
        hslSwatch(colorswatch, hueValue);
        var hsl = rgbToHsl(rgb.r, rgb.g, rgb.b);
        colorSwatch(colorgradient, hueValue, hsl[1]);
      } else {
        var _hueValue;

        _hueValue = 0;
        hslSwatch(colorswatch, _hueValue);

        var _hsl = rgbToHsl(255, 255, 255);

        colorSwatch(colorgradient, _hueValue, _hsl[1]);
      }

      var elm = pickcolor.querySelector('.input-hsl');
      this.addEventListener(elm, 'click', function () {
        _this.modal.show(pickcolormore, false, null, false);
      });
      var colorHue = pickcolormore.querySelector('.color-hue');
      new RangeSlider(colorHue, {
        min: 0,
        max: 360,
        step: 1,
        value: 0,
        onSlide: function onSlide(position, value) {
          var hue = value * 361;
          hslSwatch(colorswatch, hue);
        }
      });
      var hueswatch = document.createElement('div'); //hueswatch.style = 'display:flex;position:absolute;top:0;left:0;'; //not working in IE11

      hueswatch.style.display = 'flex';
      hueswatch.style.position = 'absolute';
      hueswatch.style.top = 0;
      hueswatch.style.left = 0;
      var hslacolors = generateHslaColors(45, 100, 1.0, 315);

      for (i = 0; i < hslacolors.length - 1; i++) {
        var item = document.createElement('div');
        item.style.backgroundColor = hslacolors[i];
        item.style.width = '1px';
        item.style.height = '23px';
        hueswatch.appendChild(item);
      }

      pickcolormore.querySelector('.div-color-hue .rangeSlider').appendChild(hueswatch);
      var colorOpacity = pickcolor.querySelector('.color-opacity');
      var colorOpacitySlider = new RangeSlider(colorOpacity, {
        min: 0,
        max: 1,
        step: 0.01,
        onSlide: function onSlide(position, value) {
          var rgb = _this.baseRGB;

          if (rgb) {
            var _val;

            if (value === 1) {
              _val = 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';
            } else {
              _val = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + value + ')';
            }

            var _inputPreview = pickcolor.querySelector('.is-color-preview');

            _inputPreview.style.backgroundColor = _val;

            var _inputColor = pickcolor.querySelector('.input-text');

            _inputColor.value = _val; // Out

            _this.opts.onPick(_val);
          }
        }
      });
      this.colorOpacitySlider = colorOpacitySlider;
      if (rgb) if (rgb.a) {
        colorOpacity.value = rgb.a;
      } else {
        colorOpacity.value = 1;
      }

      colorOpacitySlider._update(); // Preview


      var transp = colorOpacity.value;
      var val = '';
      var bgImage = '';

      if (rgb) {
        if (transp * 1 === 1) {
          val = 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';
        } else {
          val = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + transp + ')';
        }

        bgImage = 'linear-gradient(90deg, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',0), rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',1))';
      }

      pickcolor.querySelector('.div-color-opacity .rangeSlider').style.backgroundImage = bgImage; //initial preview

      var inputPreview = pickcolor.querySelector('.is-color-preview');
      inputPreview.style.background = 'none';
      if (val !== '') inputPreview.style.backgroundColor = val;
      var inputColor = pickcolor.querySelector('.input-text');
      inputColor.value = val;
      var userAgentString = navigator.userAgent;
      var firefoxAgent = userAgentString.indexOf('Firefox') > -1;

      if (!firefoxAgent) {
        this.addEventListener(inputColor, 'keydown', function (e) {
          if (e.which === 13 || e.keyCode === 13 || e.key === 'Enter') {
            _this.setColor(e.target.value);

            e.preventDefault();
            e.stopImmediatePropagation();
          }
        });
      }

      var inputOk = pickcolor.querySelector('.input-ok');
      this.addEventListener(inputOk, 'click', function () {
        _this.setColor(inputColor.value);
      });
      var elms = pickcolor.querySelectorAll('[data-color]');
      Array.prototype.forEach.call(elms, function (elm) {
        _this.addEventListener(elm, 'click', function (e) {
          var elm = e.target;
          var base = elm.getAttribute('data-color');
          var rgb = hexToRgb(base);
          _this.baseRGB = rgb;

          if (!_this.parentsHasClass(elm, 'color-gradient') && base !== '') {
            if (rgb.r === rgb.g && rgb.g === rgb.b) {
              graySwatch(colorgradient);
            } else {
              var hue = rgbToHue(rgb.r, rgb.g, rgb.b);
              hslSwatch(colorswatch, hue);

              var _colorgradient = pickcolor.querySelector('.color-gradient');

              var _hsl2 = rgbToHsl(rgb.r, rgb.g, rgb.b);

              colorSwatch(_colorgradient, hue, _hsl2[1]);
            }
          } // Preview


          var transp = colorOpacity.value;
          var val = '';
          var bgImage = '';

          if (rgb) {
            if (transp * 1 === 1) {
              val = 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';
            } else {
              val = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + transp + ')';
            }

            bgImage = 'linear-gradient(90deg, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',0), rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',1))';
          }

          pickcolor.querySelector('.div-color-opacity .rangeSlider').style.backgroundImage = bgImage;
          var inputPreview = pickcolor.querySelector('.is-color-preview');
          inputPreview.style.backgroundColor = val;
          var inputColor = pickcolor.querySelector('.input-text');
          inputColor.value = val; // Out

          _this.opts.onPick(val);
        });
      });
      elms = pickcolormore.querySelectorAll('[data-color]');
      Array.prototype.forEach.call(elms, function (elm) {
        _this.addEventListener(elm, 'click', function () {
          var base = elm.getAttribute('data-color');
          var rgb = hexToRgb(base);
          _this.baseRGB = rgb;
          var hue = rgbToHue(rgb.r, rgb.g, rgb.b);
          var hsl = rgbToHsl(rgb.r, rgb.g, rgb.b);
          colorSwatch(colorgradient, hue, hsl[1]); // Preview

          var transp = colorOpacity.value;
          var val = '';
          var bgImage = '';

          if (rgb) {
            if (transp * 1 === 1) {
              val = 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';
            } else {
              val = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + transp + ')';
            }

            bgImage = 'linear-gradient(90deg, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',0), rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',1))';
          }

          pickcolor.querySelector('.div-color-opacity .rangeSlider').style.backgroundImage = bgImage;
          var inputPreview = pickcolor.querySelector('.is-color-preview');
          inputPreview.style.backgroundColor = val;
          var inputColor = pickcolor.querySelector('.input-text');
          inputColor.value = val; // Out

          _this.opts.onPick(val);
        });
      });
    } //constructor


    _createClass$1(ColorPicker, [{
      key: "out",
      value: function out(s) {
        if (this.opts.lang) {
          var val = this.opts.lang[s];
          if (val) return val;else {
            return s;
          }
        } else {
          return s;
        }
      }
    }, {
      key: "open",
      value: function open(onPick, color) {
        if (onPick) {
          this.opts.onPick = onPick;
        }

        if (color) {
          this.opts.color = color;
          this.setColor(color);
        }

        this.modal.show(this.pickcolor, false, null, false);
      }
    }, {
      key: "setColor",
      value: function setColor(color) {
        var pickcolor = this.pickcolor;
        var pickcolormore = this.pickcolormore;
        var colorOpacity = pickcolor.querySelector('.color-opacity');
        var colorgradient = pickcolor.querySelector('.color-gradient');
        var base = color;
        var rgb;

        if (base.indexOf('rgb') !== -1) {
          //rgb
          rgb = RGBvalues.color(base);
        }

        if (base.indexOf('#') !== -1) {
          //hex
          rgb = hexToRgb(base);
        }

        if (!rgb) {
          graySwatch(colorgradient);
          colorOpacity.value = 1;

          this.colorOpacitySlider._update();

          pickcolor.querySelector('.div-color-opacity .rangeSlider').style.backgroundImage = '';

          var _inputPreview2 = pickcolor.querySelector('.is-color-preview');

          _inputPreview2.style.background = 'none';

          var _inputColor2 = pickcolor.querySelector('.input-text');

          _inputColor2.value = '';
          return;
        }

        this.baseRGB = rgb;

        if (rgb.r === rgb.g && rgb.g === rgb.b) {
          graySwatch(colorgradient);
        } else {
          var colorswatch = pickcolormore.querySelector('.color-swatch');
          var hue = rgbToHue(rgb.r, rgb.g, rgb.b);
          hslSwatch(colorswatch, hue);
          var hsl = rgbToHsl(rgb.r, rgb.g, rgb.b);
          colorSwatch(colorgradient, hue, hsl[1]);
        }

        if (rgb.a || rgb.a === 0) {
          colorOpacity.value = rgb.a;
        } else {
          colorOpacity.value = 1;
        }

        this.colorOpacitySlider._update(); // Preview


        var transp = colorOpacity.value;
        var val = '';
        var bgImage = '';

        if (rgb) {
          if (transp * 1 === 1) {
            val = 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';
          } else {
            val = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + transp + ')';
          }

          bgImage = 'linear-gradient(90deg, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',0), rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',1))';
        }

        pickcolor.querySelector('.div-color-opacity .rangeSlider').style.backgroundImage = bgImage;
        var inputPreview = pickcolor.querySelector('.is-color-preview');
        inputPreview.style.backgroundColor = val;
        var inputColor = pickcolor.querySelector('.input-text');
        inputColor.value = val; // Out

        this.opts.onPick(val);
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(parent, type, listener) {
        parent.addEventListener(type, listener);
      }
    }, {
      key: "parentsHasClass",
      value: function parentsHasClass(element, classname) {
        while (element) {
          if (element.tagName === 'BODY' || element.tagName === 'HTML') return false;
          if (!element.classList) return false;

          if (element.classList.contains(classname)) {
            return true;
          }

          element = element.parentNode;
        }
      }
    }]);

    return ColorPicker;
  }(); // source: http://stackoverflow.com/questions/1349404/generate-a-string-of-5-random-characters-in-javascript


  function makeid$1() {
    var text = '';
    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';

    for (var i = 0; i < 2; i++) {
      text += possible.charAt(Math.floor(Math.random() * possible.length));
    }

    var text2 = '';
    var possible2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

    for (var _i = 0; _i < 5; _i++) {
      text2 += possible2.charAt(Math.floor(Math.random() * possible2.length));
    }

    return text + text2;
  } // source: https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb


  function hexToRgb(hex) {
    if (hex === '') return null;
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : null;
  } // https://stackoverflow.com/questions/3080421/javascript-color-gradient


  function hex(c) {
    var s = '0123456789abcdef';
    var i = parseInt(c);
    if (i === 0 || isNaN(c)) return '00';
    i = Math.round(Math.min(Math.max(0, i), 255));
    return s.charAt((i - i % 16) / 16) + s.charAt(i % 16);
  }

  function rgbToHex(rgb) {
    return hex(rgb[0]) + hex(rgb[1]) + hex(rgb[2]);
  }

  function generateHslaColors(saturation, lightness, alpha, amount) {
    var colors = [];
    var huedelta = Math.trunc(360 / amount);

    for (var i = 0; i < amount; i++) {
      var hue = i * huedelta;
      colors.push("hsla(".concat(hue, ",").concat(lightness, "%,").concat(saturation, "%,").concat(alpha, ")"));
    }

    return colors;
  } // https://css-tricks.com/hsl-hsla-is-great-for-programmatic-color-control/
  // https://codepen.io/chriscoyier/pen/YvPLRg


  function hslSwatch(elm, hue) {
    var x, y;
    var len = 10;
    var step = 2 * (100 / len) - 100 / len;
    var adj = step / 2;

    if (elm.innerHTML === '') {
      for (x = 0; x < len; ++x) {
        var tr = document.createElement('div');
        tr.style.width = '100%';
        tr.id = 'row-' + x;
        elm.appendChild(tr);

        for (y = 0; y < len; ++y) {
          var sat = x * (100 / (len - 1)) + adj;
          var light = y * (100 / len) + adj; //Rounded values

          if (light > 50 && light <= 55) light = 50;
          if (sat > 100) sat = 100; //if(x===0)sat=0;

          var rgb = hslToRgb(hue, sat, light);

          var _hex = '#' + rgbToHex(rgb);

          var td = document.createElement('div');
          td.title = _hex;
          td.style.background = _hex;
          td.setAttribute('data-color', _hex);
          var row = elm.querySelector('#row-' + x);
          row.appendChild(td);
        }
      }
    } else {
      for (x = 0; x < len; ++x) {
        var _tr = elm.childNodes[x];

        for (y = 0; y < len; ++y) {
          var _td = _tr.childNodes[y];

          var _sat = x * (100 / (len - 1)) + adj; //adj makes 0 (dark) to 9 become 0.x (not too dark) to 9.x (close to 10 / white)


          var _light = y * (100 / len) + adj; //Rounded values


          if (_light > 50 && _light <= 55) _light = 50;
          if (_sat > 100) _sat = 100; //if(x===0)sat=0;

          var _rgb = hslToRgb(hue, _sat, _light);

          var _hex2 = '#' + rgbToHex(_rgb);

          _td.title = _hex2;
          _td.style.background = _hex2;

          _td.setAttribute('data-color', _hex2);
        }
      }
    }
  }

  function colorSwatch(elm, hue, sat) {
    var x, y;
    var rownum = 5;
    var colnum = 7;
    var step = 2 * (100 / colnum) - 100 / colnum; //let adj = step/2;

    if (elm.innerHTML === '') {
      for (x = 0; x < rownum; ++x) {
        var tr = document.createElement('div');
        tr.style.width = '100%';
        tr.id = 'row-' + x;
        elm.appendChild(tr);

        for (y = 0; y < colnum; ++y) {
          var z = (x - rownum) * -1 - 1; //convert 0 to 11 become 11 to 0

          var light = y * (100 / colnum);
          light = light + z * (step / rownum); //Rounded values

          if (y === 0) light = y * (100 / colnum);
          var rgb = hslToRgb(hue, sat, light);

          var _hex3 = '#' + rgbToHex(rgb);

          var td = document.createElement('div');
          td.title = _hex3;
          td.style.background = _hex3;
          td.setAttribute('data-color', _hex3);
          var row = elm.querySelector('#row-' + x);
          row.appendChild(td);
        }
      }
    } else {
      var _tr2, _td2;

      for (x = 0; x < rownum; ++x) {
        _tr2 = elm.childNodes[x];

        for (y = 0; y < colnum; ++y) {
          _td2 = _tr2.childNodes[y];

          var _z = (x - rownum) * -1 - 1; //convert 0 to 11 become 11 to 0


          var _light2 = y * (100 / colnum);

          _light2 = _light2 + _z * (step / rownum); //Rounded values

          if (x === colnum - 1 && y === 0) {
            _light2 = 0;
          }

          var _rgb2 = hslToRgb(hue, sat, _light2);

          var _hex4 = '#' + rgbToHex(_rgb2);

          _td2.title = _hex4;
          _td2.style.background = _hex4;

          _td2.setAttribute('data-color', _hex4);
        }
      }
    }
  }

  function graySwatch(elm) {
    var x, y;
    var rownum = 5;
    var colnum = 7;
    var step = 2 * (100 / colnum) - 100 / colnum;

    if (elm.innerHTML === '') {
      for (x = 0; x < rownum; ++x) {
        var tr = document.createElement('div');
        tr.style.width = '100%';
        tr.id = 'row-' + x;
        elm.appendChild(tr);

        for (y = 0; y < colnum; ++y) {
          var z = (x - rownum) * -1 - 1; //convert 0 to 11 become 11 to 0

          var light = y * (100 / colnum);
          light = light + z * (step / rownum);
          if (y === 0) light = y * (100 / colnum);
          var rgb = hslToRgb(0, 0, light);

          var _hex5 = '#' + rgbToHex(rgb);

          var td = document.createElement('div');
          td.title = _hex5;
          td.style.background = _hex5;
          td.setAttribute('data-color', _hex5);
          var row = elm.querySelector('#row-' + x);
          row.appendChild(td);
        }
      }
    } else {
      var _tr3, _td3;

      for (x = 0; x < rownum; ++x) {
        _tr3 = elm.childNodes[x];

        for (y = 0; y < colnum; ++y) {
          _td3 = _tr3.childNodes[y];

          var _z2 = (x - rownum) * -1 - 1; //convert 0 to 11 become 11 to 0


          var _light3 = y * (100 / colnum);

          _light3 = _light3 + _z2 * (step / rownum);

          if (x === colnum - 1 && y === 0) {
            _light3 = 0;
          }

          var _rgb3 = hslToRgb(0, 0, _light3);

          var _hex6 = '#' + rgbToHex(_rgb3);

          _td3.title = _hex6;
          _td3.style.background = _hex6;

          _td3.setAttribute('data-color', _hex6);
        }
      }
    }
  }

  function hueToRgb(m1, m2, h) {
    if (h < 0) h = h + 1;else if (h > 1) h = h - 1;
    if (h * 6 < 1) return m1 + (m2 - m1) * h * 6;else if (h * 2 < 1) return m2;else if (h * 3 < 2) return m1 + (m2 - m1) * (2 / 3 - h) * 6;else return m1;
  }

  function hslToRgb(h, s, l) {
    h /= 360;
    s /= 100;
    l /= 100;
    var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s,
        m1 = l * 2 - m2,
        r = parseInt(hueToRgb(m1, m2, h + 1 / 3) * 255),
        g = parseInt(hueToRgb(m1, m2, h) * 255),
        b = parseInt(hueToRgb(m1, m2, h - 1 / 3) * 255);
    return [r, g, b];
  } // https://stackoverflow.com/questions/39118528/rgb-to-hsl-conversion


  function rgbToHue(r, g, b) {
    r /= 255;
    g /= 255;
    b /= 255;
    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var c = max - min;
    var hue;
    var segment;
    var shift;

    if (c === 0) {
      hue = 0;
    } else {
      switch (max) {
        case r:
          segment = (g - b) / c;
          shift = 0 / 60; // R° / (360° / hex sides)

          if (segment < 0) {
            // hue > 180, full rotation
            shift = 360 / 60; // R° / (360° / hex sides)
          }

          hue = segment + shift;
          break;

        case g:
          segment = (b - r) / c;
          shift = 120 / 60; // G° / (360° / hex sides)

          hue = segment + shift;
          break;

        case b:
          segment = (r - g) / c;
          shift = 240 / 60; // B° / (360° / hex sides)

          hue = segment + shift;
          break;
      }
    }

    return hue * 60; // hue is in [0,6], scale it up
  } // https://stackoverflow.com/questions/10970958/get-a-color-component-from-an-rgb-string-in-javascript


  var RGBvalues = function () {
    var _hex2dec = function _hex2dec(v) {
      return parseInt(v, 16);
    };

    var _splitHEX = function _splitHEX(hex) {
      var c;

      if (hex.length === 4) {
        c = hex.replace('#', '').split('');
        return {
          r: _hex2dec(c[0] + c[0]),
          g: _hex2dec(c[1] + c[1]),
          b: _hex2dec(c[2] + c[2])
        };
      } else {
        return {
          r: _hex2dec(hex.slice(1, 3)),
          g: _hex2dec(hex.slice(3, 5)),
          b: _hex2dec(hex.slice(5))
        };
      }
    };

    var _splitRGB = function _splitRGB(rgb) {
      var c = rgb.slice(rgb.indexOf('(') + 1, rgb.indexOf(')')).split(',');
      var flag = false,
          obj;
      c = c.map(function (n, i) {
        // return (i !== 3) ? parseInt(n, 10) : flag = true, parseFloat(n);
        if (i !== 3) {
          return parseInt(n, 10);
        } else {
          flag = true;
          return parseFloat(n);
        }
      });
      obj = {
        r: c[0],
        g: c[1],
        b: c[2]
      };
      if (flag) obj.a = c[3];
      return obj;
    };

    var color = function color(col) {
      var slc = col.slice(0, 1);

      if (slc === '#') {
        return _splitHEX(col);
      } else if (slc.toLowerCase() === 'r') {
        return _splitRGB(col);
      } else {
        console.log('!Ooops! RGBvalues.color(' + col + ') : HEX, RGB, or RGBa strings only');
      }
    };

    return {
      color: color
    };
  }(); // https://codepen.io/pankajparashar/pen/oFzIg


  function rgbToHsl(r, g, b) {
    //r /= 255, g /= 255, b /= 255;
    r = r / 255;
    g = g / 255;
    b = b / 255;
    var max = Math.max(r, g, b),
        min = Math.min(r, g, b);
    var h,
        s,
        l = (max + min) / 2;

    if (max === min) {
      h = s = 0;
    } else {
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;

        case g:
          h = (b - r) / d + 2;
          break;

        case b:
          h = (r - g) / d + 4;
          break;
      }

      h /= 6;
    }

    return [h * 100 + 0.5 | 0, s * 100 + 0.5 | 0, l * 100 + 0.5 | 0];
  }

  var GradientPicker = /*#__PURE__*/function () {
    function GradientPicker() {
      var _this = this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck$1(this, GradientPicker);

      var defaults = {
        colors: ['#ff9f01', '#f57c00', '#e64918', '#d32f2f', '#5d4038', '#37474f', '#353535', '#fbc02c', '#b0b42a', '#689f39', '#c21f5b', '#7b21a2', '#522da8', '#616161', '#01b8c9', '#009688', '#388d3c', '#0388d0', '#1465c0', '#2f3f9e', '#9e9e9e'],
        gradientcolors: [['linear-gradient(0deg, rgb(255, 57, 25), rgb(249, 168, 37))'], ['linear-gradient(0deg, rgb(255, 57, 25), rgb(255, 104, 15))'], ['linear-gradient(0deg, #FF5722, #FF9800)'], ['linear-gradient(0deg, #613ca2, rgb(110, 123, 217))'], ['linear-gradient(0deg, rgb(65, 70, 206), rgb(236, 78, 130))'], ['linear-gradient(0deg, rgb(0, 150, 102), rgb(90, 103, 197))'], ['linear-gradient(30deg, rgb(249, 119, 148), rgb(98, 58, 162))'], ['linear-gradient(0deg, rgb(223, 70, 137), rgb(90, 103, 197))'], ['linear-gradient(0deg, rgb(40, 53, 147), rgb(90, 103, 197))'], ['linear-gradient(0deg, rgb(21, 101, 192), rgb(52, 169, 239))'], ['linear-gradient(0deg, rgb(32, 149, 219), rgb(139, 109, 230))'], ['linear-gradient(0deg, rgb(90, 103, 197), rgb(0, 184, 201))'], ['linear-gradient(0deg, rgb(0, 184, 201), rgb(253, 187, 45))'], ['linear-gradient(0deg, rgb(255, 208, 100), rgb(239, 98, 159))'], ['linear-gradient(0deg, rgb(0, 214, 223), rgb(130, 162, 253))'], ['linear-gradient(0deg, rgb(50, 234, 251), rgb(248, 247, 126))'], ['linear-gradient(0deg, rgb(141, 221, 255), rgb(255, 227, 255))'], ['linear-gradient(0deg, rgb(255, 170, 170), rgb(255, 255, 200))'], ['linear-gradient(0deg, rgb(239, 239, 239), rgb(252, 252, 252))']],
        animateModal: false,
        elementToAnimate: '',
        stuffPlacement: '#_cbhtml',
        lang: []
      };
      this.opts = Object.assign(this, defaults, opts);
      this.id = makeid();
      var builderStuff = document.querySelector(this.opts.stuffPlacement);

      if (!builderStuff) {
        builderStuff = document.createElement('div');
        builderStuff.id = '_cbhtml';
        builderStuff.className = 'is-ui';
        document.body.appendChild(builderStuff);
      }

      this.builderStuff = builderStuff; // Stuff placement for this (single) instance

      var objStuff = document.createElement('div');
      objStuff.id = this.id;
      builderStuff.appendChild(objStuff);
      this.objStuff = objStuff;
      var modal = new Modal({
        animateModal: this.opts.animateModal,
        elementToAnimate: this.opts.elementToAnimate,
        stuffPlacement: this.opts.stuffPlacement
      });
      this.modal = modal;
      var html_gradcolors = '';

      for (var i = 0; i < this.opts.gradientcolors.length; i++) {
        html_gradcolors += "<button data-elmgradient=\"".concat(this.opts.gradientcolors[i][0], "\" data-textcolor=\"").concat(this.opts.gradientcolors[i][1] ? this.opts.gradientcolors[i][1] : '', "\" style=\"background-image:").concat(this.opts.gradientcolors[i][0], ";width:35px;height:35px;border:none;\"></button>");
      }

      var html = "\n            <div class=\"is-modal pickgradientcolor\">\n            <div style=\"max-width:201px;padding:0;\">\n                <div class=\"is-modal-bar is-draggable\" style=\"position: absolute;top: 0;left: 0;height:11px;width: 100%;background: transparent;\"></div>\n                <div style=\"padding:12px 12px 12px\">\n                    <div class=\"div-gradients\" style=\"display: flex;flex-flow: wrap;margin-bottom:10px;\">\n                        ".concat(html_gradcolors, "\n                        <button class=\"input-gradient-clear\" title=\"").concat(this.out('Clear'), "\" data-value=\"\" style=\"width:35px;height:35px;border:rgba(0,0,0,0.09) 1px solid;border-left: none;border-top: none;\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.8);width:23px;height:23px;\"><use xlink:href=\"#ion-ios-close-empty\"></use></svg></button>\n                    </div>\n                    <div class=\"is-settings\" style=\"margin-bottom:0\">\n                        <div class=\"is-label\" style=\"margin-top:0\">").concat(this.out('Custom'), ":</div>\n                        <div class=\"div-custom-gradients clearfix\" style=\"height:auto;display: flex;flex-flow: wrap;\"></div>\n                        <div>\n                            <button title=\"").concat(this.out('Select Color'), "\" class=\"input-gradient-color1 is-btn-color\" data-value=\"dark\" style=\"border-right:none\"></button>\n                            <button title=\"").concat(this.out('Select Color'), "\" class=\"input-gradient-color2 is-btn-color\" data-value=\"dark\"></button>\n                            <input type=\"text\" class=\"input-gradient-deg\" value=\"0\" style=\"width:60px;height:35px;margin-left:7px;margin-right:5px;font-size:14px;\"/> deg\n                        </div>\n                    </div>\n                    <div class=\"is-settings clearfix\" style=\"margin-bottom:0\">\n                        <button title=\"").concat(this.out('Add'), "\" class=\"input-gradient-save\" style=\"width:100%;border:none;\"> ").concat(this.out('Add'), " </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        ");
      objStuff.insertAdjacentHTML('beforeend', html);
      var pickGradient = objStuff.querySelector('.is-modal.pickgradientcolor');
      this.pickGradient = pickGradient;
      new Draggable$1({
        selector: '#' + this.id + ' .is-draggable'
      });
      var colorPicker = new ColorPicker({
        colors: this.opts.colors,
        animateModal: this.opts.animateModal,
        elementToAnimate: this.opts.container,
        lang: this.opts.lang
      });
      var btnColor1 = objStuff.querySelector('.input-gradient-color1');
      btnColor1.addEventListener('click', function () {
        colorPicker.open(function (color) {
          // set element style
          var color1 = color;
          var color2 = objStuff.querySelector('.input-gradient-color2').style.backgroundColor;
          var deg = objStuff.querySelector('.input-gradient-deg').value;
          if (color2 === '') color2 = '#ffffff';
          var css = "linear-gradient(".concat(deg, "deg, ").concat(color1, ", ").concat(color2, ")");
          _this.targetElement.style.backgroundImage = css;
          if (_this.opts.onChange) _this.opts.onChange(css); // update preview

          btnColor1.style.backgroundColor = color;
        }, btnColor1.style.backgroundColor);
      });
      var btnColor2 = objStuff.querySelector('.input-gradient-color2');
      btnColor2.addEventListener('click', function () {
        colorPicker.open(function (color) {
          // set element style
          var color1 = objStuff.querySelector('.input-gradient-color1').style.backgroundColor;
          var color2 = color;
          var deg = objStuff.querySelector('.input-gradient-deg').value;
          if (color1 === '') color1 = '#ffffff';
          var css = "linear-gradient(".concat(deg, "deg, ").concat(color1, ", ").concat(color2, ")");
          _this.targetElement.style.backgroundImage = css;
          if (_this.opts.onChange) _this.opts.onChange(css); // update preview

          btnColor2.style.backgroundColor = color;
        }, btnColor2.style.backgroundColor);
      }); // Apply default gradient

      var btns = objStuff.querySelectorAll('.div-gradients [data-elmgradient]');
      Array.prototype.forEach.call(btns, function (btn) {
        var grad = btn.getAttribute('data-elmgradient');
        var textcolor = btn.getAttribute('data-textcolor');
        btn.addEventListener('click', function () {
          _this.targetElement.style.backgroundImage = grad;
          if (_this.opts.onChange) _this.opts.onChange(grad, textcolor); // Read gradient

          var s = _this.targetElement.style.backgroundImage;

          if (s.indexOf('linear-gradient') !== -1) {
            var result = getGradient(s);

            if (result !== null) {
              try {
                var color1 = result.colorStopList[0].color;
                var color2 = result.colorStopList[1].color;
                var line = result.line;
                _this.objStuff.querySelector('.input-gradient-color1').style.backgroundColor = color1;
                _this.objStuff.querySelector('.input-gradient-color2').style.backgroundColor = color2;

                if (line.indexOf('deg') !== -1) {
                  _this.objStuff.querySelector('.input-gradient-deg').value = line.replace('deg', '');
                }
              } catch (e) {// Do Nothing
              }
            }
          }

          var btns = objStuff.querySelectorAll('.div-gradients [data-elmgradient]');
          Array.prototype.forEach.call(btns, function (btn) {
            _this.removeClass(btn, 'active');
          });

          _this.addClass(btn, 'active');
        });
      });
      var btnClear = objStuff.querySelector('.input-gradient-clear');
      btnClear.addEventListener('click', function () {
        _this.targetElement.style.backgroundImage = '';
        if (_this.opts.onChange) _this.opts.onChange('');
        _this.objStuff.querySelector('.input-gradient-color1').style.backgroundColor = '';
        _this.objStuff.querySelector('.input-gradient-color2').style.backgroundColor = '';
        _this.objStuff.querySelector('.input-gradient-deg').value = '0';
      });
      var inputDeg = objStuff.querySelector('.input-gradient-deg');
      inputDeg.addEventListener('keyup', function () {
        // set element style
        var color1 = objStuff.querySelector('.input-gradient-color1').style.backgroundColor;
        var color2 = objStuff.querySelector('.input-gradient-color2').style.backgroundColor;
        var deg = inputDeg.value;
        if (color1 === '') color1 = '#ffffff';
        if (color2 === '') color2 = '#ffffff';
        var css = "linear-gradient(".concat(deg, "deg, ").concat(color1, ", ").concat(color2, ")");
        _this.targetElement.style.backgroundImage = css;
        if (_this.opts.onChange) _this.opts.onChange(css);
      });
      var btnSave = objStuff.querySelector('.input-gradient-save');
      btnSave.addEventListener('click', function () {
        var color1 = objStuff.querySelector('.input-gradient-color1').style.backgroundColor;
        var color2 = objStuff.querySelector('.input-gradient-color2').style.backgroundColor;
        var deg = inputDeg.value;
        if (color1 === '') color1 = '#ffffff';
        if (color2 === '') color2 = '#ffffff';
        var css = "linear-gradient(".concat(deg, "deg, ").concat(color1, ", ").concat(color2, ")"); // Save

        var customgradcolors = [];

        if (localStorage.getItem('_customgradcolors') !== null) {
          customgradcolors = JSON.parse(localStorage.getItem('_customgradcolors'));
        }

        customgradcolors.push(css);
        localStorage.setItem('_customgradcolors', JSON.stringify(customgradcolors)); // Render custom gradients

        if (localStorage.getItem('_customgradcolors') !== null) {
          var _customgradcolors = JSON.parse(localStorage.getItem('_customgradcolors'));

          var _html_gradcolors = '';

          for (var i = 0; i < _customgradcolors.length; i++) {
            _html_gradcolors += "<button class=\"is-elmgrad-item\" data-elmgradient=\"".concat(_customgradcolors[i], "\" style=\"background-image:").concat(_customgradcolors[i], ";width:35px;height:35px;padding:0;border:none;\"><div class=\"is-elmgrad-remove\"><svg class=\"is-icon-flex\" style=\"fill:rgba(255, 255, 255, 1);width:20px;height:20px;\"><use xlink:href=\"#ion-ios-close-empty\"></use></svg></div></button>");
          }

          _this.objStuff.querySelector('.div-custom-gradients').innerHTML = _html_gradcolors;
        } // Apply custom gradient


        var btns = _this.objStuff.querySelectorAll('.div-custom-gradients [data-elmgradient]');

        Array.prototype.forEach.call(btns, function (btn) {
          var grad = btn.getAttribute('data-elmgradient');
          btn.addEventListener('click', function () {
            _this.targetElement.style.backgroundImage = grad;
            if (_this.opts.onChange) _this.opts.onChange(grad); // Read gradient

            var s = _this.targetElement.style.backgroundImage;

            if (s.indexOf('linear-gradient') !== -1) {
              var result = getGradient(s);

              if (result !== null) {
                try {
                  var _color = result.colorStopList[0].color;
                  var _color2 = result.colorStopList[1].color;
                  var line = result.line;
                  _this.objStuff.querySelector('.input-gradient-color1').style.backgroundColor = _color;
                  _this.objStuff.querySelector('.input-gradient-color2').style.backgroundColor = _color2;

                  if (line.indexOf('deg') !== -1) {
                    _this.objStuff.querySelector('.input-gradient-deg').value = line.replace('deg', '');
                  }
                } catch (e) {// Do Nothing
                }
              }
            }

            var btns = objStuff.querySelectorAll('.div-custom-gradients [data-elmgradient]');
            Array.prototype.forEach.call(btns, function (btn) {
              _this.removeClass(btn, 'active');
            });

            _this.addClass(btn, 'active');
          });
        }); // Delete custom gradient

        var btnsRemoveGrad = _this.objStuff.querySelectorAll('.div-custom-gradients .is-elmgrad-remove');

        Array.prototype.forEach.call(btnsRemoveGrad, function (btnRemoveGrad) {
          btnRemoveGrad.addEventListener('click', function () {
            //Custom grad colors
            var customgradcolors = [];

            if (localStorage.getItem('_customgradcolors') !== null) {
              customgradcolors = JSON.parse(localStorage.getItem('_customgradcolors'));
            }

            var css = btnRemoveGrad.parentNode.getAttribute('data-elmgradient');

            for (var i = 0; i < customgradcolors.length; i++) {
              if (customgradcolors[i] === css) {
                customgradcolors.splice(i, 1);
              }
            }

            localStorage.setItem('_customgradcolors', JSON.stringify(customgradcolors));
            btnRemoveGrad.parentNode.parentNode.removeChild(btnRemoveGrad.parentNode);
            return false;
          });
        });
      });
    }

    _createClass$1(GradientPicker, [{
      key: "out",
      value: function out(s) {
        if (this.opts.lang) {
          var val = this.opts.lang[s];
          if (val) return val;else {
            return s;
          }
        } else {
          return s;
        }
      }
    }, {
      key: "open",
      value: function open(elm, onChange, onFinish) {
        var _this2 = this;

        this.opts.onChange = onChange;
        this.opts.onFinish = onFinish;
        this.targetElement = elm; // Read gradient

        this.objStuff.querySelector('.input-gradient-color1').style.backgroundColor = '';
        this.objStuff.querySelector('.input-gradient-color2').style.backgroundColor = '';
        this.objStuff.querySelector('.input-gradient-deg').value = '0';
        var s = elm.style.backgroundImage;

        if (s.indexOf('linear-gradient') !== -1) {
          var result = getGradient(s);

          if (result !== null) {
            try {
              var color1 = result.colorStopList[0].color;
              var color2 = result.colorStopList[1].color;
              var line = result.line;
              this.objStuff.querySelector('.input-gradient-color1').style.backgroundColor = color1;
              this.objStuff.querySelector('.input-gradient-color2').style.backgroundColor = color2;

              if (line.indexOf('deg') !== -1) {
                this.objStuff.querySelector('.input-gradient-deg').value = line.replace('deg', '');
              }
            } catch (e) {// Do Nothing
            }
          }
        } // Save original style


        this.original = s; // Render custom gradients

        var customgradcolors = [];

        if (localStorage.getItem('_customgradcolors') !== null) {
          customgradcolors = JSON.parse(localStorage.getItem('_customgradcolors'));
          var html_gradcolors = '';

          for (var i = 0; i < customgradcolors.length; i++) {
            html_gradcolors += "<button class=\"is-elmgrad-item\" data-elmgradient=\"".concat(customgradcolors[i], "\" style=\"background-image:").concat(customgradcolors[i], ";width:35px;height:35px;padding:0;border:none;\"><div class=\"is-elmgrad-remove\"><svg class=\"is-icon-flex\" style=\"fill:rgba(255, 255, 255, 1);width:20px;height:20px;\"><use xlink:href=\"#ion-ios-close-empty\"></use></svg></div></button>");
          }

          this.objStuff.querySelector('.div-custom-gradients').innerHTML = html_gradcolors;
        } // Apply custom gradient


        var btns = this.objStuff.querySelectorAll('.div-custom-gradients [data-elmgradient]');
        Array.prototype.forEach.call(btns, function (btn) {
          var grad = btn.getAttribute('data-elmgradient');
          btn.addEventListener('click', function () {
            _this2.targetElement.style.backgroundImage = grad;
            if (_this2.opts.onChange) _this2.opts.onChange(grad); // Read gradient

            var s = _this2.targetElement.style.backgroundImage;

            if (s.indexOf('linear-gradient') !== -1) {
              var _result = getGradient(s);

              if (_result !== null) {
                try {
                  var _color3 = _result.colorStopList[0].color;
                  var _color4 = _result.colorStopList[1].color;
                  var _line = _result.line;
                  _this2.objStuff.querySelector('.input-gradient-color1').style.backgroundColor = _color3;
                  _this2.objStuff.querySelector('.input-gradient-color2').style.backgroundColor = _color4;

                  if (_line.indexOf('deg') !== -1) {
                    _this2.objStuff.querySelector('.input-gradient-deg').value = _line.replace('deg', '');
                  }
                } catch (e) {// Do Nothing
                }
              }
            }

            var btns = _this2.objStuff.querySelectorAll('.div-custom-gradients [data-elmgradient]');

            Array.prototype.forEach.call(btns, function (btn) {
              _this2.removeClass(btn, 'active');
            });

            _this2.addClass(btn, 'active');
          });
        }); // Delete custom gradient

        var btnsRemoveGrad = this.objStuff.querySelectorAll('.div-custom-gradients .is-elmgrad-remove');
        Array.prototype.forEach.call(btnsRemoveGrad, function (btnRemoveGrad) {
          btnRemoveGrad.addEventListener('click', function () {
            //Custom grad colors
            var customgradcolors = [];

            if (localStorage.getItem('_customgradcolors') !== null) {
              customgradcolors = JSON.parse(localStorage.getItem('_customgradcolors'));
            }

            var css = btnRemoveGrad.parentNode.getAttribute('data-elmgradient');

            for (var i = 0; i < customgradcolors.length; i++) {
              if (customgradcolors[i] === css) {
                customgradcolors.splice(i, 1);
              }
            }

            localStorage.setItem('_customgradcolors', JSON.stringify(customgradcolors));
            btnRemoveGrad.parentNode.parentNode.removeChild(btnRemoveGrad.parentNode);
            return false;
          });
        });
        this.modal.show(this.pickGradient, false, function () {
          if (_this2.original === _this2.targetElement.style.backgroundImage) {
            // no change
            if (_this2.opts.onFinish) {
              _this2.opts.onFinish(false);
            }
          } else {
            // changed
            if (_this2.opts.onFinish) {
              _this2.opts.onFinish(true);
            }
          }
        }, false);
      }
    }, {
      key: "addClass",
      value: function addClass(element, classname) {
        if (!element) return;
        if (this.hasClass(element, classname)) return;
        if (element.classList.length === 0) element.className = classname;else element.className = element.className + ' ' + classname; //else element.classList.add(classname); //error if there is -
      }
    }, {
      key: "removeClass",
      value: function removeClass(element, classname) {
        if (!element) return;

        if (element.classList.length > 0) {
          element.className = element.className.replace(classname, '');
        }
      }
    }, {
      key: "hasClass",
      value: function hasClass(element, classname) {
        if (!element) return false;
        return element.classList ? element.classList.contains(classname) : new RegExp('\\b' + classname + '\\b').test(element.className);
      }
    }]);

    return GradientPicker;
  }(); // source: http://stackoverflow.com/questions/1349404/generate-a-string-of-5-random-characters-in-javascript


  function makeid() {
    var text = '';
    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';

    for (var i = 0; i < 2; i++) {
      text += possible.charAt(Math.floor(Math.random() * possible.length));
    }

    var text2 = '';
    var possible2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

    for (var _i = 0; _i < 5; _i++) {
      text2 += possible2.charAt(Math.floor(Math.random() * possible2.length));
    }

    return text + text2;
  } // source: https://stackoverflow.com/questions/20215440/parse-css-gradient-rule-with-javascript-regex 


  function getGradient(input) {
    var result,
        regExpLib = generateRegExp(),
        //rGradientEnclosedInBrackets = /.*gradient\s*\(((?:\([^\)]*\)|[^\)\(]*)*)\)/,// Captures inside brackets - max one additional inner set.
    rGradientEnclosedInBrackets = /.*gradient\s*\(((?:\([^)]*\)|[^)(]*)*)\)/,
        // Oct 29, 2019
    match = rGradientEnclosedInBrackets.exec(input);

    if (match !== null) {
      // Get the parameters for the gradient
      result = parseGradient(regExpLib, match[1]);

      if (result.original.trim() !== match[1].trim()) {
        // Did not match the input exactly - possible parsing error.
        result.parseWarning = true;
      }
    } else {
      result = 'Failed to find gradient';
    }

    return result;
  }

  var combineRegExp = function combineRegExp(regexpList, flags) {
    var i,
        source = '';

    for (i = 0; i < regexpList.length; i++) {
      if (typeof regexpList[i] === 'string') {
        source += regexpList[i];
      } else {
        source += regexpList[i].source;
      }
    }

    return new RegExp(source, flags);
  };

  var generateRegExp = function generateRegExp() {
    // Note any variables with "Capture" in name include capturing bracket set(s).
    var searchFlags = 'gi',
        // ignore case for angles, "rgb" etc
    rAngle = /(?:[+-]?\d*\.?\d+)(?:deg|grad|rad|turn)/,
        // Angle +ive, -ive and angle types
    rSideCornerCapture = /to\s+((?:(?:left|right)(?:\s+(?:top|bottom))?))/,
        // optional 2nd part
    rComma = /\s*,\s*/,
        // Allow space around comma.
    //rColorHex = /\#(?:[a-f0-9]{6}|[a-f0-9]{3})/, // 3 or 6 character form
    rColorHex = /#(?:[a-f0-9]{6}|[a-f0-9]{3})/,
        // 3 or 6 character form // Oct 29, 2019
    rDigits3 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*\)/,
        // "(1, 2, 3)"
    rDigits4 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*,\s*\d*\.?\d+\)/,
        // "(1, 2, 3, 4)"
    rValue = /(?:[+-]?\d*\.?\d+)(?:%|[a-z]+)?/,
        // ".9", "-5px", "100%".
    rKeyword = /[_a-z-][_a-z0-9-]*/,
        // "red", "transparent", "border-collapse".
    rColor = combineRegExp(['(?:', rColorHex, '|', '(?:rgb|hsl)', rDigits3, '|', '(?:rgba|hsla)', rDigits4, '|', rKeyword, ')'], ''),
        rColorStop = combineRegExp([rColor, '(?:\\s+', rValue, '(?:\\s+', rValue, ')?)?'], ''),
        // Single Color Stop, optional %, optional length.
    rColorStopList = combineRegExp(['(?:', rColorStop, rComma, ')*', rColorStop], ''),
        // List of color stops min 1.
    rLineCapture = combineRegExp(['(?:(', rAngle, ')|', rSideCornerCapture, ')'], ''),
        // Angle or SideCorner
    rGradientSearch = combineRegExp(['(?:(', rLineCapture, ')', rComma, ')?(', rColorStopList, ')'], searchFlags),
        // Capture 1:"line", 2:"angle" (optional), 3:"side corner" (optional) and 4:"stop list".
    rColorStopSearch = combineRegExp(['\\s*(', rColor, ')', '(?:\\s+', '(', rValue, '))?', '(?:', rComma, '\\s*)?'], searchFlags); // Capture 1:"color" and 2:"position" (optional).

    return {
      gradientSearch: rGradientSearch,
      colorStopSearch: rColorStopSearch
    };
  };

  var parseGradient = function parseGradient(regExpLib, input) {
    var result, matchGradient, matchColorStop, stopResult; // reset search position, because we reuse regex.

    regExpLib.gradientSearch.lastIndex = 0;
    matchGradient = regExpLib.gradientSearch.exec(input);

    if (matchGradient !== null) {
      result = {
        original: matchGradient[0],
        colorStopList: []
      }; // // Line (Angle or Side-Corner).
      // if (!!matchGradient[1]) {
      //     result.line = matchGradient[1];
      // }
      // // Angle or undefined if side-corner.
      // if (!!matchGradient[2]) {
      //     result.angle = matchGradient[2];
      // }
      // // Side-corner or undefined if angle.
      // if (!!matchGradient[3]) {
      //     result.sideCorner = matchGradient[3];
      // }
      // Oct 29, 2019
      // Line (Angle or Side-Corner).

      if (matchGradient[1]) {
        result.line = matchGradient[1];
      } // Angle or undefined if side-corner.


      if (matchGradient[2]) {
        result.angle = matchGradient[2];
      } // Side-corner or undefined if angle.


      if (matchGradient[3]) {
        result.sideCorner = matchGradient[3];
      } // reset search position, because we reuse regex.


      regExpLib.colorStopSearch.lastIndex = 0; // Loop though all the color-stops.

      matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);

      while (matchColorStop !== null) {
        stopResult = {
          color: matchColorStop[1]
        }; // // Position (optional).
        // if (!!matchColorStop[2]) {
        //     stopResult.position = matchColorStop[2];
        // }
        // Oct 29, 2019
        // Position (optional).

        if (matchColorStop[2]) {
          stopResult.position = matchColorStop[2];
        }

        result.colorStopList.push(stopResult); // Continue searching from previous position.

        matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);
      }
    } // Can be undefined if match not found.


    return result;
  };

  var dom$j = new Dom();

  var ELementStyleEditor = /*#__PURE__*/function () {
    function ELementStyleEditor(builder) {
      var _this = this;

      _classCallCheck$1(this, ELementStyleEditor);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var modalStyles = builderStuff.querySelector('.editstyles');

      if (!modalStyles) {
        var html = "\n            <div class=\"is-modal editstyles\">\n                <div class=\"is-modal-bar is-draggable\" style=\"\">\n                    <div class=\"is-modal-close\" style=\"z-index:1;width:20px;height:20px;position:absolute;top:0px;right:0px;box-sizing:border-box;padding:0;line-height:20px;font-size:10px;color:#777;text-align:center;cursor:pointer;\">&#10005;</div>\n                </div>\n                <div style=\"padding:12px\">\n                    <div class=\"is-settings clearfix\" style=\"display:inline-block;width:100%;margin-bottom:0;\">\n                        <div>".concat(util.out('Style'), ":</div>\n                        <div>\n                            <textarea id=\"inpElmInlineStyle\" style=\"width:100%;height:256px;margin:0px;border:none;background:#f3f3f3;font-size: 14px;line-height: 1.5;letter-spacing: 0;\"></textarea>\n                        </div>\n                    </div>\n                    <div class=\"is-settings clearfix\" style=\"display:inline-block;width:100%;margin-bottom:0;\">\n                        <div>").concat(util.out('Class'), ":</div>\n                        <div>\n                            <input type=\"text\" id=\"inpElmClassName\" value=\"\" style=\"width:100%;padding-left: 16px;font-family: courier;font-size: 17px;line-height: 2;letter-spacing: 1px;border:none;background:#f3f3f3;\"/>\n                        </div>\n                    </div>\n                </div>\n            </div>           \n            ");
        dom$j.appendHtml(builderStuff, html);
        modalStyles = builderStuff.querySelector('.editstyles');
        var btn = modalStyles.querySelector('.is-modal-close');
        dom$j.addEventListener(btn, 'click', function () {
          dom$j.removeClass(modalStyles, 'active');

          var panel = _this.builderStuff.querySelector('.is-side.elementstyles'); // if all close


          if (!dom$j.hasClass(panel, 'active')) {
            var elms = document.querySelectorAll('[data-saveforundo]');
            Array.prototype.forEach.call(elms, function (elm) {
              elm.removeAttribute('data-saveforundo');
            });
            elms = document.querySelectorAll('.elm-inspected');
            Array.prototype.forEach.call(elms, function (elm) {
              dom$j.removeClass(elm, 'elm-inspected');
            });
          }
        });
        var inp = modalStyles.querySelector('#inpElmClassName');
        inp.addEventListener('keyup', function () {
          var elm = _this.builder.inspectedElement;
          var val = modalStyles.querySelector('#inpElmClassName').value; //builder classes

          var bElmActive = false;

          if (dom$j.hasClass(elm, 'elm-active')) {
            bElmActive = true;
          }

          var bCellActive = false;

          if (dom$j.hasClass(elm, 'elm-active')) {
            bCellActive = true;
          }

          var bRowActive = false;

          if (dom$j.hasClass(elm, 'row-active')) {
            bRowActive = true;
          }

          elm.setAttribute('class', val); //update
          //builder classes

          if (bElmActive) dom$j.addClass(elm, 'elm-active');
          if (bCellActive) dom$j.addClass(elm, 'cell-active');
          if (bRowActive) dom$j.addClass(elm, 'row-active');
          dom$j.addClass(elm, 'elm-inspected'); //Trigger Change event

          _this.builder.opts.onChange();
        });
        inp = modalStyles.querySelector('#inpElmInlineStyle');
        inp.addEventListener('keyup', function () {
          _this.builder.inspectedElement.style.cssText = modalStyles.querySelector('#inpElmInlineStyle').value; //Trigger Change event

          _this.builder.opts.onChange();
        });
      }

      this.modalStyles = modalStyles;
    }

    _createClass$1(ELementStyleEditor, [{
      key: "toggleStyleEditor",
      value: function toggleStyleEditor() {
        if (!dom$j.hasClass(this.modalStyles, 'active')) {
          dom$j.addClass(this.modalStyles, 'active');
        } else {
          dom$j.removeClass(this.modalStyles, 'active');
        }
      }
    }, {
      key: "refresh",
      value: function refresh() {
        this.modalStyles.querySelector('#inpElmInlineStyle').value = this.builder.inspectedElement.style.cssText;
        var s = this.builder.inspectedElement.getAttribute('class');

        if (s) {
          s = s.replace('elm-active', '');
          s = s.replace('cell-active', '');
          s = s.replace('row-active', '');
          s = s.replace('elm-inspected', '');
          s = s.replace('  ', ' ').trim();
        }

        this.modalStyles.querySelector('#inpElmClassName').value = s;
      }
    }]);

    return ELementStyleEditor;
  }();

  var dom$i = new Dom();

  var ElementBoxStyles = /*#__PURE__*/function () {
    function ElementBoxStyles(builder) {
      var _this = this;

      _classCallCheck$1(this, ElementBoxStyles);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var elementStyleEditor = new ELementStyleEditor(builder);
      var panelStuff = builderStuff.querySelector('#divElementBox');
      this.panelStuff = panelStuff;
      var html = "\n                <div class=\"is-settings clearfix\">\n                    <div class=\"is-label\">".concat(util.out('Background Color'), ":</div>\n                    <div>\n                        <button title=\"").concat(util.out('Background Color'), "\" class=\"input-elm-bgcolor is-btn-color\"></button>\n                        <button title=\"").concat(util.out('Gradient'), "\" class=\"input-elm-gradient\" data-value=\"+\"> ").concat(util.out('Gradient'), " </button>\n                    </div>\n                </div>\n\n                <div style=\"margin-top: 25px;font-weight:bold;width:100%;\">").concat(util.out('Dimension'), "</div>\n                \n                <div class=\"is-settings clearfix\" style=\"width:110px\">\n                    <div>").concat(util.out('Width'), ":</div>\n                    <div style=\"display:flex\">\n                        <input type=\"text\" id=\"inpElmWidth\" value=\"\" style=\"width:45px\"/>\n                        <select id=\"inpElmWidthUnit\"\">\n                            <option value=\"px\">px</option>\n                            <option value=\"em\">em</option>\n                            <option value=\"vw\">vw</option>\n                            <option value=\"vh\">vh</option>\n                            <option value=\"%\">%</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                    <div>").concat(util.out('Height'), ":</div>\n                    <div style=\"display:flex\">\n                        <input type=\"text\" id=\"inpElmHeight\" value=\"\" style=\"width:45px\"/>\n                        <select id=\"inpElmHeightUnit\"\">\n                            <option value=\"px\">px</option>\n                            <option value=\"em\">em</option>\n                            <option value=\"vw\">vw</option>\n                            <option value=\"vh\">vh</option>\n                            <option value=\"%\">%</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                    <div>").concat(util.out('Max Width'), ":</div>\n                    <div style=\"display:flex\">\n                        <input type=\"text\" id=\"inpElmMaxWidth\" value=\"\" style=\"width:45px\"/>\n                        <select id=\"inpElmMaxWidthUnit\"\">\n                            <option value=\"px\">px</option>\n                            <option value=\"em\">em</option>\n                            <option value=\"vw\">vw</option>\n                            <option value=\"vh\">vh</option>\n                            <option value=\"%\">%</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                    <div>").concat(util.out('Max Height'), ":</div>\n                    <div style=\"display:flex\">\n                        <input type=\"text\" id=\"inpElmMaxHeight\" value=\"\" style=\"width:45px\"/>\n                        <select id=\"inpElmMaxHeightUnit\"\">\n                            <option value=\"px\">px</option>\n                            <option value=\"em\">em</option>\n                            <option value=\"vw\">vw</option>\n                            <option value=\"vh\">vh</option>\n                            <option value=\"%\">%</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                    <div>").concat(util.out('Min Width'), ":</div>\n                    <div style=\"display:flex\">\n                        <input type=\"text\" id=\"inpElmMinWidth\" value=\"\" style=\"width:45px\"/>\n                        <select id=\"inpElmMinWidthUnit\"\">\n                            <option value=\"px\">px</option>\n                            <option value=\"em\">em</option>\n                            <option value=\"vw\">vw</option>\n                            <option value=\"vh\">vh</option>\n                            <option value=\"%\">%</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                    <div>").concat(util.out('Min Height'), ":</div>\n                    <div style=\"display:flex\">\n                        <input type=\"text\" id=\"inpElmMinHeight\" value=\"\" style=\"width:45px\"/>\n                        <select id=\"inpElmMinHeightUnit\"\">\n                            <option value=\"px\">px</option>\n                            <option value=\"em\">em</option>\n                            <option value=\"vw\">vw</option>\n                            <option value=\"vh\">vh</option>\n                            <option value=\"%\">%</option>\n                        </select>\n                    </div>\n                </div>\n                \n                <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                    <div>").concat(util.out('Overflow x'), ":</div>\n                    <div>\n                        <select id=\"inpElmOverflowX\"\">\n                            <option value=\"\"></option>\n                            <option value=\"auto\">Auto</option>\n                            <option value=\"hidden\">Hidden</option>\n                        </select>\n                    </div>\n                </div>\n                <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                    <div>").concat(util.out('Overflow y'), ":</div>\n                    <div>\n                        <select id=\"inpElmOverflowY\"\">\n                            <option value=\"\"></option>\n                            <option value=\"auto\">Auto</option>\n                            <option value=\"hidden\">Hidden</option>\n                        </select>\n                    </div>\n                </div>\n        ");
      dom$i.appendHtml(panelStuff, html); // Background color

      var btnElmBgColor = panelStuff.querySelector('.input-elm-bgcolor');
      btnElmBgColor.addEventListener('click', function (e) {
        _this.builder.uo.saveForUndo(true); // checkLater = true


        var elm = e.target;

        _this.builder.colorPicker.open(function (color) {
          _this.builder.inspectedElement.style.backgroundColor = color;
          elm.style.backgroundColor = color; // preview

          elementStyleEditor.refresh(); //Trigger Change event

          _this.builder.opts.onChange();
        }, panelStuff.querySelector('.input-elm-bgcolor').style.backgroundColor);
      }); // Background gradient

      var gradientPicker = new GradientPicker({
        colors: this.builder.colors,
        gradientcolors: this.builder.opts.gradientcolors,
        lang: this.builder.opts.lang
      });
      var btnElmGradient = panelStuff.querySelector('.input-elm-gradient');
      btnElmGradient.addEventListener('click', function () {
        _this.builder.uo.saveForUndo(true); // checkLater = true


        gradientPicker.open(_this.builder.inspectedElement, function () {
          elementStyleEditor.refresh(); //Trigger Change event

          _this.builder.opts.onChange();
        }, function (isChanged) {
          if (isChanged) {
            elementStyleEditor.refresh();
          }
        });
      }); // Others

      var inpElmMaxWidth = panelStuff.querySelector('#inpElmMaxWidth');
      inpElmMaxWidth.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmMaxWidth.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmMaxWidth').value;
        var unit = panelStuff.querySelector('#inpElmMaxWidthUnit').value;

        if (!isNaN(val) && val !== '') {
          elm.style.maxWidth = val + unit;
        } else {
          elm.style.maxWidth = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmMaxWidthUnit = panelStuff.querySelector('#inpElmMaxWidthUnit');
      inpElmMaxWidthUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmMaxWidth').value;
        var unit = panelStuff.querySelector('#inpElmMaxWidthUnit').value;

        if (!isNaN(val) && val !== '') {
          elm.style.maxWidth = val + unit;
        } else {
          elm.style.maxWidth = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmMaxHeight = panelStuff.querySelector('#inpElmMaxHeight');
      inpElmMaxHeight.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmMaxHeight.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmMaxHeight').value;
        var unit = panelStuff.querySelector('#inpElmMaxHeightUnit').value;

        if (!isNaN(val) && val !== '') {
          elm.style.maxHeight = val + unit;
        } else {
          elm.style.maxHeight = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmMaxHeightUnit = panelStuff.querySelector('#inpElmMaxHeightUnit');
      inpElmMaxHeightUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmMaxHeight').value;
        var unit = panelStuff.querySelector('#inpElmMaxHeightUnit').value;

        if (!isNaN(val) && val !== '') {
          elm.style.maxHeight = val + unit;
        } else {
          elm.style.maxHeight = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmMinWidth = panelStuff.querySelector('#inpElmMinWidth');
      inpElmMinWidth.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmMinWidth.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmMinWidth').value;
        var unit = panelStuff.querySelector('#inpElmMinWidthUnit').value;

        if (!isNaN(val) && val !== '') {
          elm.style.minWidth = val + unit;
        } else {
          elm.style.minWidth = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmMinWidthUnit = panelStuff.querySelector('#inpElmMinWidthUnit');
      inpElmMinWidthUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmMinWidth').value;
        var unit = panelStuff.querySelector('#inpElmMinWidthUnit').value;

        if (!isNaN(val) && val !== '') {
          elm.style.minWidth = val + unit;
        } else {
          elm.style.minWidth = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmMinHeight = panelStuff.querySelector('#inpElmMinHeight');
      inpElmMinHeight.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmMinHeight.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmMinHeight').value;
        var unit = panelStuff.querySelector('#inpElmMinHeightUnit').value;

        if (!isNaN(val) && val !== '') {
          elm.style.minHeight = val + unit;
        } else {
          elm.style.minHeight = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmMinHeightUnit = panelStuff.querySelector('#inpElmMinHeightUnit');
      inpElmMinHeightUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmMinHeight').value;
        var unit = panelStuff.querySelector('#inpElmMinHeightUnit').value;

        if (!isNaN(val) && val !== '') {
          elm.style.minHeight = val + unit;
        } else {
          elm.style.minHeight = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmWidth = panelStuff.querySelector('#inpElmWidth');
      inpElmWidth.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmWidth.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmWidth').value;
        var unit = panelStuff.querySelector('#inpElmWidthUnit').value;

        if (!isNaN(val) && val !== '') {
          elm.style.width = val + unit;
        } else {
          elm.style.width = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmWidthUnit = panelStuff.querySelector('#inpElmWidthUnit');
      inpElmWidthUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmWidth').value;
        var unit = panelStuff.querySelector('#inpElmWidthUnit').value;

        if (!isNaN(val) && val !== '') {
          elm.style.width = val + unit;
        } else {
          elm.style.width = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmHeight = panelStuff.querySelector('#inpElmHeight');
      inpElmHeight.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmHeight.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmHeight').value;
        var unit = panelStuff.querySelector('#inpElmHeightUnit').value;

        if (!isNaN(val) && val !== '') {
          elm.style.height = val + unit;
        } else {
          elm.style.height = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmHeightUnit = panelStuff.querySelector('#inpElmHeightUnit');
      inpElmHeightUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmHeight').value;
        var unit = panelStuff.querySelector('#inpElmHeightUnit').value;

        if (!isNaN(val) && val !== '') {
          elm.style.height = val + unit;
        } else {
          elm.style.height = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmOverflowX = panelStuff.querySelector('#inpElmOverflowX');
      inpElmOverflowX.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmOverflowX').value;
        elm.style.overflowX = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmOverflowY = panelStuff.querySelector('#inpElmOverflowY');
      inpElmOverflowY.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmOverflowY').value;
        elm.style.overflowY = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
    }

    _createClass$1(ElementBoxStyles, [{
      key: "readElementStyles",
      value: function readElementStyles(elm) {
        var panelStuff = this.panelStuff; // Background color

        var s = elm.style.backgroundColor;
        var btn = panelStuff.querySelector('.input-elm-bgcolor');
        if (s) btn.style.backgroundColor = s;else btn.style.backgroundColor = 'transparent'; // Max Width

        var inpElmMaxWidth = panelStuff.querySelector('#inpElmMaxWidth');
        var inpElmMaxWidthUnit = panelStuff.querySelector('#inpElmMaxWidthUnit');
        inpElmMaxWidth.value = '';
        inpElmMaxWidthUnit.value = 'px';
        s = elm.style.maxWidth;
        var nMaxWidth = parseInt(s);

        if (!isNaN(nMaxWidth)) {
          if (s.indexOf('%') !== -1) inpElmMaxWidthUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmMaxWidthUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmMaxWidthUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmMaxWidthUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmMaxWidthUnit.value = 'em';
          inpElmMaxWidth.value = nMaxWidth;
        } // Max Height


        var inpElmMaxHeight = panelStuff.querySelector('#inpElmMaxHeight');
        var inpElmMaxHeightUnit = panelStuff.querySelector('#inpElmMaxHeightUnit');
        inpElmMaxHeight.value = '';
        inpElmMaxHeightUnit.value = 'px';
        s = elm.style.maxHeight;
        var nMaxHeight = parseInt(s);

        if (!isNaN(nMaxHeight)) {
          if (s.indexOf('%') !== -1) inpElmMaxHeightUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmMaxHeightUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmMaxHeightUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmMaxHeightUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmMaxHeightUnit.value = 'em';
          inpElmMaxHeight.value = nMaxHeight;
        } // Min Width


        var inpElmMinWidth = panelStuff.querySelector('#inpElmMinWidth');
        var inpElmMinWidthUnit = panelStuff.querySelector('#inpElmMinWidthUnit');
        inpElmMinWidth.value = '';
        inpElmMinWidthUnit.value = 'px';
        s = elm.style.minWidth;
        var nMinWidth = parseInt(s);

        if (!isNaN(nMinWidth)) {
          if (s.indexOf('%') !== -1) inpElmMinWidthUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmMinWidthUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmMinWidthUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmMinWidthUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmMinWidthUnit.value = 'em';
          inpElmMinWidth.value = nMinWidth;
        } // Min Height


        var inpElmMinHeight = panelStuff.querySelector('#inpElmMinHeight');
        var inpElmMinHeightUnit = panelStuff.querySelector('#inpElmMinHeightUnit');
        inpElmMinHeight.value = '';
        inpElmMinHeightUnit.value = 'px';
        s = elm.style.minHeight;
        var nMinHeight = parseInt(s);

        if (!isNaN(nMinHeight)) {
          if (s.indexOf('%') !== -1) inpElmMinHeightUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmMinHeightUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmMinHeightUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmMinHeightUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmMinHeightUnit.value = 'em';
          inpElmMinHeight.value = nMinHeight;
        } // Width


        var inpElmWidth = panelStuff.querySelector('#inpElmWidth');
        var inpElmWidthUnit = panelStuff.querySelector('#inpElmWidthUnit');
        inpElmWidth.value = '';
        inpElmWidthUnit.value = 'px';
        s = elm.style.width;
        var nWidth = parseInt(s);

        if (!isNaN(nWidth)) {
          if (s.indexOf('%') !== -1) inpElmWidthUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmWidthUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmWidthUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmWidthUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmWidthUnit.value = 'em';
          inpElmWidth.value = nWidth;
        } // Height


        var inpElmHeight = panelStuff.querySelector('#inpElmHeight');
        var inpElmHeightUnit = panelStuff.querySelector('#inpElmHeightUnit');
        inpElmHeight.value = '';
        inpElmHeightUnit.value = 'px';
        s = elm.style.height;
        var nHeight = parseInt(s);

        if (!isNaN(nHeight)) {
          if (s.indexOf('%') !== -1) inpElmHeightUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmHeightUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmHeightUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmHeightUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmHeightUnit.value = 'em';
          inpElmHeight.value = nHeight;
        } // Overflow X


        var inpElmOverflowX = panelStuff.querySelector('#inpElmOverflowX');
        s = elm.style.overflowX;
        inpElmOverflowX.value = s; // Overflow Y

        var inpElmOverflowY = panelStuff.querySelector('#inpElmOverflowY');
        s = elm.style.overflowY;
        inpElmOverflowY.value = s;
      }
    }]);

    return ElementBoxStyles;
  }();

  var dom$h = new Dom();

  var ElementSpacingStyles = /*#__PURE__*/function () {
    function ElementSpacingStyles(builder) {
      var _this = this;

      _classCallCheck$1(this, ElementSpacingStyles);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var elementStyleEditor = new ELementStyleEditor(builder);
      var panelStuff = builderStuff.querySelector('#divElementSpacing');
      this.panelStuff = panelStuff;
      var html = "\n            <div style=\"margin-top: 13px;font-weight: bold;width:100%\">".concat(util.out('Padding'), "</div>\n            \n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Top'), ":</div>\n                <div style=\"display:flex;\">\n                    <input type=\"text\" id=\"inpElmPaddingTop\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmPaddingTopUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                        <option value=\"vw\">vw</option>\n                        <option value=\"vh\">vh</option>\n                        <option value=\"%\">%</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Bottom'), ":</div>\n                <div style=\"display:flex;\">\n                    <input type=\"text\" id=\"inpElmPaddingBottom\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmPaddingBottomUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                        <option value=\"vw\">vw</option>\n                        <option value=\"vh\">vh</option>\n                        <option value=\"%\">%</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Left'), ":</div>\n                <div style=\"display:flex;\">\n                    <input type=\"text\" id=\"inpElmPaddingLeft\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmPaddingLeftUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                        <option value=\"vw\">vw</option>\n                        <option value=\"vh\">vh</option>\n                        <option value=\"%\">%</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Right'), ":</div>\n                <div style=\"display:flex;\">\n                    <input type=\"text\" id=\"inpElmPaddingRight\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmPaddingRightUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                        <option value=\"vw\">vw</option>\n                        <option value=\"vh\">vh</option>\n                        <option value=\"%\">%</option>\n                    </select>\n                </div>\n            </div>\n            \n            <div style=\"margin-top: 25px;font-weight: bold;width:100%\">").concat(util.out('Margin'), "</div>\n            \n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Top'), ":</div>\n                <div style=\"display:flex;\">\n                    <input type=\"text\" id=\"inpElmMarginTop\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmMarginTopUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                        <option value=\"vw\">vw</option>\n                        <option value=\"vh\">vh</option>\n                        <option value=\"%\">%</option>\n                        <option value=\"auto\">auto</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Bottom'), ":</div>\n                <div style=\"display:flex;\">\n                    <input type=\"text\" id=\"inpElmMarginBottom\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmMarginBottomUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                        <option value=\"vw\">vw</option>\n                        <option value=\"vh\">vh</option>\n                        <option value=\"%\">%</option>\n                        <option value=\"auto\">auto</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Left'), ":</div>\n                <div style=\"display:flex;\">\n                    <input type=\"text\" id=\"inpElmMarginLeft\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmMarginLeftUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                        <option value=\"vw\">vw</option>\n                        <option value=\"vh\">vh</option>\n                        <option value=\"%\">%</option>\n                        <option value=\"auto\">auto</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Right'), ":</div>\n                <div style=\"display:flex;\">\n                    <input type=\"text\" id=\"inpElmMarginRight\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmMarginRightUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                        <option value=\"vw\">vw</option>\n                        <option value=\"vh\">vh</option>\n                        <option value=\"%\">%</option>\n                        <option value=\"auto\">auto</option>\n                    </select>\n                </div>\n            </div>\n            \n            <div style=\"margin-top: 25px;font-weight: bold;width:100%\">").concat(util.out('Responsive Positioning'), ":</div>\n            \n            <div class=\"is-settings clearfix\" style=\"width:100%;\">\n                <div>\n                    <label for=\"chkResetMarginLeft\" style=\"letter-spacing: 0.5px;\"><input type=\"checkbox\" id=\"chkResetMarginLeft\" value=\"\" /> ").concat(util.out('Reset margin left on small screen'), " </label>\n                </div>\n            </div>\n            <div class=\"is-settings clearfix\" style=\"margin-top:0;width:100%;\">\n                <div>\n                    <label for=\"chkResetMarginRight\" style=\"letter-spacing: 0.5px;\"><input type=\"checkbox\" id=\"chkResetMarginRight\" value=\"\" /> ").concat(util.out('Reset margin right on small screen'), " </label>\n                </div>\n            </div>\n        ");
      dom$h.appendHtml(panelStuff, html); // Margin

      var inpElmMarginLeft = panelStuff.querySelector('#inpElmMarginLeft');
      inpElmMarginLeft.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      var inpElmMarginLeftUnit = panelStuff.querySelector('#inpElmMarginLeftUnit');
      inpElmMarginLeft.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = inpElmMarginLeft.value;
        var unit = inpElmMarginLeftUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.marginLeft = val + unit;
        } else {
          elm.style.marginLeft = '';
        }

        if (unit === 'auto') {
          elm.style.marginLeft = 'auto';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      inpElmMarginLeftUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = inpElmMarginLeft.value;
        var unit = inpElmMarginLeftUnit.value;

        if (unit === 'auto') {
          elm.style.marginLeft = 'auto';
          inpElmMarginLeft.value = '';
        } else {
          elm.style.marginLeft = val + unit;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmMarginRight = panelStuff.querySelector('#inpElmMarginRight');
      inpElmMarginRight.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      var inpElmMarginRightUnit = panelStuff.querySelector('#inpElmMarginRightUnit');
      inpElmMarginRight.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = inpElmMarginRight.value;
        var unit = inpElmMarginRightUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.marginRight = val + unit;
        } else {
          elm.style.marginRight = '';
        }

        if (unit === 'auto') {
          elm.style.marginRight = 'auto';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      inpElmMarginRightUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = inpElmMarginRight.value;
        var unit = inpElmMarginRightUnit.value;

        if (unit === 'auto') {
          elm.style.marginRight = 'auto';
          inpElmMarginRight.value = '';
        } else {
          elm.style.marginRight = val + unit;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmMarginTop = panelStuff.querySelector('#inpElmMarginTop');
      inpElmMarginTop.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      var inpElmMarginTopUnit = panelStuff.querySelector('#inpElmMarginTopUnit');
      inpElmMarginTop.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = inpElmMarginTop.value;
        var unit = inpElmMarginTopUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.marginTop = val + unit;
        } else {
          elm.style.marginTop = '';
        }

        if (unit === 'auto') {
          elm.style.marginTop = 'auto';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      inpElmMarginTopUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = inpElmMarginTop.value;
        var unit = inpElmMarginTopUnit.value;

        if (unit === 'auto') {
          elm.style.marginTop = 'auto';
          inpElmMarginTop.value = '';
        } else {
          elm.style.marginTop = val + unit;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmMarginBottom = panelStuff.querySelector('#inpElmMarginBottom');
      inpElmMarginBottom.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      var inpElmMarginBottomUnit = panelStuff.querySelector('#inpElmMarginBottomUnit');
      inpElmMarginBottom.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = inpElmMarginBottom.value;
        var unit = inpElmMarginBottomUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.marginBottom = val + unit;
        } else {
          elm.style.marginBottom = '';
        }

        if (unit === 'auto') {
          elm.style.marginBottom = 'auto';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      inpElmMarginBottomUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = inpElmMarginBottom.value;
        var unit = inpElmMarginBottomUnit.value;

        if (unit === 'auto') {
          elm.style.marginBottom = 'auto';
          inpElmMarginBottom.value = '';
        } else {
          elm.style.marginBottom = val + unit;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Padding

      var inpElmPaddingLeft = panelStuff.querySelector('#inpElmPaddingLeft');
      inpElmPaddingLeft.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      var inpElmPaddingLeftUnit = panelStuff.querySelector('#inpElmPaddingLeftUnit');
      inpElmPaddingLeft.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = inpElmPaddingLeft.value;
        var unit = inpElmPaddingLeftUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.paddingLeft = val + unit;
        } else {
          elm.style.paddingLeft = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      inpElmPaddingLeftUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = inpElmPaddingLeft.value;
        var unit = inpElmPaddingLeftUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.paddingLeft = val + unit;
        } else {
          elm.style.paddingLeft = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmPaddingRight = panelStuff.querySelector('#inpElmPaddingRight');
      inpElmPaddingRight.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      var inpElmPaddingRightUnit = panelStuff.querySelector('#inpElmPaddingRightUnit');
      inpElmPaddingRight.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = inpElmPaddingRight.value;
        var unit = inpElmPaddingRightUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.paddingRight = val + unit;
        } else {
          elm.style.paddingRight = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      inpElmPaddingRightUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = inpElmPaddingRight.value;
        var unit = inpElmPaddingRightUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.paddingRight = val + unit;
        } else {
          elm.style.paddingRight = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmPaddingTop = panelStuff.querySelector('#inpElmPaddingTop');
      inpElmPaddingTop.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      var inpElmPaddingTopUnit = panelStuff.querySelector('#inpElmPaddingTopUnit');
      inpElmPaddingTop.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = inpElmPaddingTop.value;
        var unit = inpElmPaddingTopUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.paddingTop = val + unit;
        } else {
          elm.style.paddingTop = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      inpElmPaddingTopUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = inpElmPaddingTop.value;
        var unit = inpElmPaddingTopUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.paddingTop = val + unit;
        } else {
          elm.style.paddingTop = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmPaddingBottom = panelStuff.querySelector('#inpElmPaddingBottom');
      inpElmPaddingBottom.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      var inpElmPaddingBottomUnit = panelStuff.querySelector('#inpElmPaddingBottomUnit');
      inpElmPaddingBottom.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = inpElmPaddingBottom.value;
        var unit = inpElmPaddingBottomUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.paddingBottom = val + unit;
        } else {
          elm.style.paddingBottom = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      inpElmPaddingBottomUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = inpElmPaddingBottom.value;
        var unit = inpElmPaddingBottomUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.paddingBottom = val + unit;
        } else {
          elm.style.paddingBottom = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Responsive positioning

      var chkResetMarginLeft = panelStuff.querySelector('#chkResetMarginLeft');
      chkResetMarginLeft.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;

        if (chkResetMarginLeft.checked) {
          dom$h.addClass(elm, 'margin-left-1024-reset');
        } else {
          dom$h.removeClass(elm, 'margin-left-1024-reset');
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var chkResetMarginRight = panelStuff.querySelector('#chkResetMarginRight');
      chkResetMarginRight.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;

        if (chkResetMarginRight.checked) {
          dom$h.addClass(elm, 'margin-right-1024-reset');
        } else {
          dom$h.removeClass(elm, 'margin-right-1024-reset');
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
    }

    _createClass$1(ElementSpacingStyles, [{
      key: "readElementStyles",
      value: function readElementStyles(elm) {
        var panelStuff = this.panelStuff;
        var s; // Margin

        var inpElmMarginTop = panelStuff.querySelector('#inpElmMarginTop');
        var inpElmMarginTopUnit = panelStuff.querySelector('#inpElmMarginTopUnit');
        inpElmMarginTop.value = '';
        inpElmMarginTopUnit.value = 'px';
        s = elm.style.marginTop;
        var nMarginTop = parseInt(s);

        if (!isNaN(nMarginTop)) {
          if (s.indexOf('%') !== -1) inpElmMarginTopUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmMarginTopUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmMarginTopUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmMarginTopUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmMarginTopUnit.value = 'em';
          inpElmMarginTop.value = nMarginTop;
        } else {
          if (s) if (s.indexOf('auto') !== -1) {
            inpElmMarginTopUnit.value = 'auto';
            inpElmMarginTop.value = '';
          }
        }

        var inpElmMarginBottom = panelStuff.querySelector('#inpElmMarginBottom');
        var inpElmMarginBottomUnit = panelStuff.querySelector('#inpElmMarginBottomUnit');
        inpElmMarginBottom.value = '';
        inpElmMarginBottomUnit.value = 'px';
        s = elm.style.marginBottom;
        var nMarginBottom = parseInt(s);

        if (!isNaN(nMarginBottom)) {
          if (s.indexOf('%') !== -1) inpElmMarginBottomUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmMarginBottomUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmMarginBottomUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmMarginBottomUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmMarginBottomUnit.value = 'em';
          inpElmMarginBottom.value = nMarginBottom;
        } else {
          if (s) if (s.indexOf('auto') !== -1) {
            inpElmMarginBottomUnit.value = 'auto';
            inpElmMarginBottom.value = '';
          }
        }

        var inpElmMarginLeft = panelStuff.querySelector('#inpElmMarginLeft');
        var inpElmMarginLeftUnit = panelStuff.querySelector('#inpElmMarginLeftUnit');
        inpElmMarginLeft.value = '';
        inpElmMarginLeftUnit.value = 'px';
        s = elm.style.marginLeft;
        var nMarginLeft = parseInt(s);

        if (!isNaN(nMarginLeft)) {
          if (s.indexOf('%') !== -1) inpElmMarginLeftUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmMarginLeftUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmMarginLeftUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmMarginLeftUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmMarginLeftUnit.value = 'em';
          inpElmMarginLeft.value = nMarginLeft;
        } else {
          if (s) if (s.indexOf('auto') !== -1) {
            inpElmMarginLeftUnit.value = 'auto';
            inpElmMarginLeft.value = '';
          }
        }

        var inpElmMarginRight = panelStuff.querySelector('#inpElmMarginRight');
        var inpElmMarginRightUnit = panelStuff.querySelector('#inpElmMarginRightUnit');
        inpElmMarginRight.value = '';
        inpElmMarginRightUnit.value = 'px';
        s = elm.style.marginRight;
        var nMarginRight = parseInt(s);

        if (!isNaN(nMarginRight)) {
          if (s.indexOf('%') !== -1) inpElmMarginRightUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmMarginRightUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmMarginRightUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmMarginRightUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmMarginRightUnit.value = 'em';
          inpElmMarginRight.value = nMarginRight;
        } else {
          if (s) if (s.indexOf('auto') !== -1) {
            inpElmMarginRightUnit.value = 'auto';
            inpElmMarginRight.value = '';
          }
        } // Padding


        var inpElmPaddingTop = panelStuff.querySelector('#inpElmPaddingTop');
        var inpElmPaddingTopUnit = panelStuff.querySelector('#inpElmPaddingTopUnit');
        inpElmPaddingTop.value = '';
        inpElmPaddingTopUnit.value = 'px';
        s = elm.style.paddingTop;
        var nPaddingTop = parseInt(s);

        if (!isNaN(nPaddingTop)) {
          if (s.indexOf('%') !== -1) inpElmPaddingTopUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmPaddingTopUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmPaddingTopUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmPaddingTopUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmPaddingTopUnit.value = 'em';
          inpElmPaddingTop.value = nPaddingTop;
        }

        var inpElmPaddingBottom = panelStuff.querySelector('#inpElmPaddingBottom');
        var inpElmPaddingBottomUnit = panelStuff.querySelector('#inpElmPaddingBottomUnit');
        inpElmPaddingBottom.value = '';
        inpElmPaddingBottomUnit.value = 'px';
        s = elm.style.paddingBottom;
        var nPaddingBottom = parseInt(s);

        if (!isNaN(nPaddingBottom)) {
          if (s.indexOf('%') !== -1) inpElmPaddingBottomUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmPaddingBottomUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmPaddingBottomUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmPaddingBottomUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmPaddingBottomUnit.value = 'em';
          inpElmPaddingBottom.value = nPaddingBottom;
        }

        var inpElmPaddingLeft = panelStuff.querySelector('#inpElmPaddingLeft');
        var inpElmPaddingLeftUnit = panelStuff.querySelector('#inpElmPaddingLeftUnit');
        inpElmPaddingLeft.value = '';
        inpElmPaddingLeftUnit.value = 'px';
        s = elm.style.paddingLeft;
        var nPaddingLeft = parseInt(s);

        if (!isNaN(nPaddingLeft)) {
          if (s.indexOf('%') !== -1) inpElmPaddingLeftUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmPaddingLeftUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmPaddingLeftUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmPaddingLeftUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmPaddingLeftUnit.value = 'em';
          inpElmPaddingLeft.value = nPaddingLeft;
        }

        var inpElmPaddingRight = panelStuff.querySelector('#inpElmPaddingRight');
        var inpElmPaddingRightUnit = panelStuff.querySelector('#inpElmPaddingRightUnit');
        inpElmPaddingRight.value = '';
        inpElmPaddingRightUnit.value = 'px';
        s = elm.style.paddingRight;
        var nPaddingRight = parseInt(s);

        if (!isNaN(nPaddingRight)) {
          if (s.indexOf('%') !== -1) inpElmPaddingRightUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmPaddingRightUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmPaddingRightUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmPaddingRightUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmPaddingRightUnit.value = 'em';
          inpElmPaddingRight.value = nPaddingRight;
        } // Responsive Positioning


        if (dom$h.hasClass(elm, 'margin-left-1024-reset')) {
          panelStuff.querySelector('#chkResetMarginLeft').checked = true;
        } else {
          panelStuff.querySelector('#chkResetMarginLeft').checked = false;
        }

        if (dom$h.hasClass(elm, 'margin-right-1024-reset')) {
          panelStuff.querySelector('#chkResetMarginRight').checked = true;
        } else {
          panelStuff.querySelector('#chkResetMarginRight').checked = false;
        }
      }
    }]);

    return ElementSpacingStyles;
  }();

  var dom$g = new Dom();

  var ElementBorderStyles = /*#__PURE__*/function () {
    function ElementBorderStyles(builder) {
      var _this = this;

      _classCallCheck$1(this, ElementBorderStyles);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var elementStyleEditor = new ELementStyleEditor(builder);
      var panelStuff = builderStuff.querySelector('#divElementBorder');
      this.panelStuff = panelStuff;
      var html = "\n                <div style=\"margin-top: 13px;font-weight: bold;line-height: 1.7;\">".concat(util.out('Border'), "</div>\n                \n                <div class=\"is-settings clearfix\">\n                    <div style=\"display:flex;\">\n                        <input type=\"text\" id=\"inpElmBorderWidth\" value=\"\" style=\"width:45px\"/>\n                        <select id=\"inpElmBorderWidthUnit\" style=\"margin-right:15px;\">\n                            <option value=\"px\">px</option>\n                            <option value=\"em\">em</option>\n                            <option value=\"vw\">vw</option>\n                            <option value=\"vh\">vh</option>\n                            <option value=\"none\">none</option>\n                        </select>\n                        <select id=\"inpElmBorderStyle\" style=\"margin-right:15px;\">\n                            <option value=\"\"></option>\n                            <option value=\"solid\">Solid</option>\n                            <option value=\"dashed\">Dashed</option>\n                            <option value=\"dotted\">Dotted</option>\n                        </select>\n                        <button title=\"").concat(util.out('Border Color'), "\" class=\"input-elm-bordercolor is-btn-color\"></button>                             \n                    </div>\n                </div>\n                \n                <div style=\"margin-top: 25px;font-weight: bold;line-height: 1.7;\">").concat(util.out('Individual Sides'), "</div>\n                \n                <div class=\"is-settings clearfix\">\n                    <div>").concat(util.out('Border Top'), ":</div>\n                    <div style=\"display:flex;\">\n                        <input type=\"text\" id=\"inpElmBorderTopWidth\" value=\"\" style=\"width:45px\"/>\n                        <select id=\"inpElmBorderTopWidthUnit\" style=\"margin-right:15px;\">\n                            <option value=\"px\">px</option>\n                            <option value=\"em\">em</option>\n                            <option value=\"vw\">vw</option>\n                            <option value=\"vh\">vh</option>\n                            <option value=\"none\">none</option>\n                        </select>\n                        <select id=\"inpElmBorderTopStyle\" style=\"margin-right:15px;\">\n                            <option value=\"\"></option>\n                            <option value=\"solid\">Solid</option>\n                            <option value=\"dashed\">Dashed</option>\n                            <option value=\"dotted\">Dotted</option>\n                        </select>\n                        <button title=\"").concat(util.out('Border Top Color'), "\" class=\"input-elm-bordertopcolor is-btn-color\"></button>\n                    </div>\n                </div>\n                \n                <div class=\"is-settings clearfix\">\n                    <div>").concat(util.out('Border Bottom'), ":</div>\n                    <div style=\"display:flex;\">\n                        <input type=\"text\" id=\"inpElmBorderBottomWidth\" value=\"\" style=\"width:45px\"/>\n                        <select id=\"inpElmBorderBottomWidthUnit\" style=\"margin-right:15px;\">\n                            <option value=\"px\">px</option>\n                            <option value=\"em\">em</option>\n                            <option value=\"vw\">vw</option>\n                            <option value=\"vh\">vh</option>\n                            <option value=\"none\">none</option>\n                        </select>\n                        <select id=\"inpElmBorderBottomStyle\" style=\"margin-right:15px;\">\n                            <option value=\"\"></option>\n                            <option value=\"solid\">Solid</option>\n                            <option value=\"dashed\">Dashed</option>\n                            <option value=\"dotted\">Dotted</option>\n                        </select>\n                        <button title=\"").concat(util.out('Border Bottom Color'), "\" class=\"input-elm-borderbottomcolor is-btn-color\"></button>\n                    </div>\n                </div>\n                \n                <div class=\"is-settings clearfix\">\n                    <div>").concat(util.out('Border Left'), ":</div>\n                    <div style=\"display:flex;\">\n                        <input type=\"text\" id=\"inpElmBorderLeftWidth\" value=\"\" style=\"width:45px\"/>\n                        <select id=\"inpElmBorderLeftWidthUnit\" style=\"margin-right:15px;\">\n                            <option value=\"px\">px</option>\n                            <option value=\"em\">em</option>\n                            <option value=\"vw\">vw</option>\n                            <option value=\"vh\">vh</option>\n                            <option value=\"none\">none</option>\n                        </select>\n                        <select id=\"inpElmBorderLeftStyle\" style=\"margin-right:15px;\">\n                            <option value=\"\"></option>\n                            <option value=\"solid\">Solid</option>\n                            <option value=\"dashed\">Dashed</option>\n                            <option value=\"dotted\">Dotted</option>\n                        </select>\n                        <button title=\"").concat(util.out('Border Left Color'), "\" class=\"input-elm-borderleftcolor is-btn-color\"></button>\n                    </div>\n                </div>\n                \n                <div class=\"is-settings clearfix\">\n                    <div>").concat(util.out('Border Right'), ":</div>\n                    <div style=\"display:flex;\">\n                        <input type=\"text\" id=\"inpElmBorderRightWidth\" value=\"\" style=\"width:45px\"/>\n                        <select id=\"inpElmBorderRightWidthUnit\" style=\"margin-right:15px;\">\n                            <option value=\"px\">px</option>\n                            <option value=\"em\">em</option>\n                            <option value=\"vw\">vw</option>\n                            <option value=\"vh\">vh</option>\n                            <option value=\"none\">none</option>\n                        </select>\n                        <select id=\"inpElmBorderRightStyle\" style=\"margin-right:15px;\">\n                            <option value=\"\"></option>\n                            <option value=\"solid\">Solid</option>\n                            <option value=\"dashed\">Dashed</option>\n                            <option value=\"dotted\">Dotted</option>\n                        </select>\n                        <button title=\"").concat(util.out('Border Right Color'), "\" class=\"input-elm-borderrightcolor is-btn-color\"></button> \n                    </div>\n                </div>                \n        ");
      dom$g.appendHtml(panelStuff, html); // Border color

      var btnElmBorderColor = panelStuff.querySelector('.input-elm-bordercolor');
      btnElmBorderColor.addEventListener('click', function (e) {
        _this.builder.uo.saveForUndo(true); // checkLater = true


        var elm = e.target;

        _this.builder.colorPicker.open(function (color) {
          _this.builder.inspectedElement.style.borderColor = color;
          elm.style.backgroundColor = color; // preview

          elementStyleEditor.refresh(); //Trigger Change event

          _this.builder.opts.onChange();
        }, btnElmBorderColor.style.backgroundColor);
      }); // Border top color

      var btnElmBorderTopColor = panelStuff.querySelector('.input-elm-bordertopcolor');
      btnElmBorderTopColor.addEventListener('click', function (e) {
        _this.builder.uo.saveForUndo(true); // checkLater = true


        var elm = e.target;

        _this.builder.colorPicker.open(function (color) {
          _this.builder.inspectedElement.style.borderTopColor = color;
          elm.style.backgroundColor = color; // preview

          elementStyleEditor.refresh(); //Trigger Change event

          _this.builder.opts.onChange();
        }, btnElmBorderTopColor.style.backgroundColor);
      }); // Border bottom color

      var btnElmBorderBottomColor = panelStuff.querySelector('.input-elm-borderbottomcolor');
      btnElmBorderBottomColor.addEventListener('click', function (e) {
        _this.builder.uo.saveForUndo(true); // checkLater = true


        var elm = e.target;

        _this.builder.colorPicker.open(function (color) {
          _this.builder.inspectedElement.style.borderBottomColor = color;
          elm.style.backgroundColor = color; // preview

          elementStyleEditor.refresh(); //Trigger Change event

          _this.builder.opts.onChange();
        }, btnElmBorderBottomColor.style.backgroundColor);
      }); // Border left color

      var btnElmBorderLeftColor = panelStuff.querySelector('.input-elm-borderleftcolor');
      btnElmBorderLeftColor.addEventListener('click', function (e) {
        _this.builder.uo.saveForUndo(true); // checkLater = true


        var elm = e.target;

        _this.builder.colorPicker.open(function (color) {
          _this.builder.inspectedElement.style.borderLeftColor = color;
          elm.style.backgroundColor = color; // preview

          elementStyleEditor.refresh(); //Trigger Change event

          _this.builder.opts.onChange();
        }, btnElmBorderLeftColor.style.backgroundColor);
      }); // Border right color

      var btnElmBorderRightColor = panelStuff.querySelector('.input-elm-borderrightcolor');
      btnElmBorderRightColor.addEventListener('click', function (e) {
        _this.builder.uo.saveForUndo(true); // checkLater = true


        var elm = e.target;

        _this.builder.colorPicker.open(function (color) {
          _this.builder.inspectedElement.style.borderRightColor = color;
          elm.style.backgroundColor = color; // preview

          elementStyleEditor.refresh(); //Trigger Change event

          _this.builder.opts.onChange();
        }, btnElmBorderRightColor.style.backgroundColor);
      }); // Border width

      var inpElmBorderWidth = panelStuff.querySelector('#inpElmBorderWidth');
      inpElmBorderWidth.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmBorderWidth.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBorderWidth').value;

        if (!isNaN(val) && val !== '') {
          elm.style.borderStyle = 'solid'; //refresh

          elm.style.borderWidth = val + panelStuff.querySelector('#inpElmBorderWidthUnit').value;
          elm.style.borderStyle = panelStuff.querySelector('#inpElmBorderStyle').value;
        } else {
          elm.style.borderStyle = 'solid'; //refresh

          elm.style.borderWidth = '';
          elm.style.borderStyle = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Border width unit

      var inpElmBorderWidthUnit = panelStuff.querySelector('#inpElmBorderWidthUnit');
      inpElmBorderWidthUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var unit = panelStuff.querySelector('#inpElmBorderWidthUnit').value;

        if (unit === 'none') {
          elm.style.border = 'none';
          elm.style.borderWidth = '';
          elm.style.borderStyle = '';
        } else {
          elm.style.borderWidth = panelStuff.querySelector('#inpElmBorderWidth').value + unit;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Border style

      var inpElmBorderStyle = panelStuff.querySelector('#inpElmBorderStyle');
      inpElmBorderStyle.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBorderStyle').value;
        elm.style.borderStyle = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Border top width

      var inpElmBorderTopWidth = panelStuff.querySelector('#inpElmBorderTopWidth');
      inpElmBorderTopWidth.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmBorderTopWidth.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBorderTopWidth').value;

        if (!isNaN(val) && val !== '') {
          elm.style.borderTopStyle = 'solid'; //refresh

          elm.style.borderTopWidth = val + panelStuff.querySelector('#inpElmBorderTopWidthUnit').value;
          elm.style.borderTopStyle = panelStuff.querySelector('#inpElmBorderTopStyle').value;
        } else {
          elm.style.borderTopStyle = 'solid'; //refresh

          elm.style.borderTopWidth = '';
          elm.style.borderTopStyle = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Border top width unit

      var inpElmBorderTopWidthUnit = panelStuff.querySelector('#inpElmBorderTopWidthUnit');
      inpElmBorderTopWidthUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var unit = panelStuff.querySelector('#inpElmBorderTopWidthUnit').value;

        if (unit === 'none') {
          elm.style.borderTop = 'none';
          elm.style.borderTopWidth = '';
          elm.style.borderTopStyle = '';
          _this.panelStuff.querySelector('#inpElmBorderTopWidth').value = '';
          _this.panelStuff.querySelector('#inpElmBorderTopStyle').value = '';
        } else {
          elm.style.borderTopWidth = panelStuff.querySelector('#inpElmBorderTopWidth').value + unit;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Border top style

      var inpElmBorderTopStyle = panelStuff.querySelector('#inpElmBorderTopStyle');
      inpElmBorderTopStyle.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBorderTopStyle').value;
        elm.style.borderTopStyle = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Border bottom width

      var inpElmBorderBottomWidth = panelStuff.querySelector('#inpElmBorderBottomWidth');
      inpElmBorderBottomWidth.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmBorderBottomWidth.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBorderBottomWidth').value;

        if (!isNaN(val) && val !== '') {
          elm.style.borderBottomStyle = 'solid'; //refresh

          elm.style.borderBottomWidth = val + panelStuff.querySelector('#inpElmBorderBottomWidthUnit').value;
          elm.style.borderBottomStyle = panelStuff.querySelector('#inpElmBorderBottomStyle').value;
        } else {
          elm.style.borderBottomStyle = 'solid'; //refresh

          elm.style.borderBottomWidth = '';
          elm.style.borderBottomStyle = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Border bottom width unit

      var inpElmBorderBottomWidthUnit = panelStuff.querySelector('#inpElmBorderBottomWidthUnit');
      inpElmBorderBottomWidthUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var unit = panelStuff.querySelector('#inpElmBorderBottomWidthUnit').value;

        if (unit === 'none') {
          elm.style.borderBottom = 'none';
          elm.style.borderBottomWidth = '';
          elm.style.borderBottomStyle = '';
          _this.panelStuff.querySelector('#inpElmBorderBottomWidth').value = '';
          _this.panelStuff.querySelector('#inpElmBorderBottomStyle').value = '';
        } else {
          elm.style.borderBottomWidth = panelStuff.querySelector('#inpElmBorderBottomWidth').value + unit;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Border bottom style

      var inpElmBorderBottomStyle = panelStuff.querySelector('#inpElmBorderBottomStyle');
      inpElmBorderBottomStyle.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBorderBottomStyle').value;
        elm.style.borderBottomStyle = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Border left width

      var inpElmBorderLeftWidth = panelStuff.querySelector('#inpElmBorderLeftWidth');
      inpElmBorderLeftWidth.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmBorderLeftWidth.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBorderLeftWidth').value;

        if (!isNaN(val) && val !== '') {
          elm.style.borderLeftStyle = 'solid'; //refresh

          elm.style.borderLeftWidth = val + panelStuff.querySelector('#inpElmBorderLeftWidthUnit').value;
          elm.style.borderLeftStyle = panelStuff.querySelector('#inpElmBorderLeftStyle').value;
        } else {
          elm.style.borderLeftStyle = 'solid'; //refresh

          elm.style.borderLeftWidth = '';
          elm.style.borderLeftStyle = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Border left width unit

      var inpElmBorderLeftWidthUnit = panelStuff.querySelector('#inpElmBorderLeftWidthUnit');
      inpElmBorderLeftWidthUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var unit = panelStuff.querySelector('#inpElmBorderLeftWidthUnit').value;

        if (unit === 'none') {
          elm.style.borderLeft = 'none';
          elm.style.borderLeftWidth = '';
          elm.style.borderLeftStyle = '';
          _this.panelStuff.querySelector('#inpElmBorderLeftWidth').value = '';
          _this.panelStuff.querySelector('#inpElmBorderLeftStyle').value = '';
        } else {
          elm.style.borderLeftWidth = panelStuff.querySelector('#inpElmBorderLeftWidth').value + unit;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Border left style

      var inpElmBorderLeftStyle = panelStuff.querySelector('#inpElmBorderLeftStyle');
      inpElmBorderLeftStyle.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBorderLeftStyle').value;
        elm.style.borderLeftStyle = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Border right width

      var inpElmBorderRightWidth = panelStuff.querySelector('#inpElmBorderRightWidth');
      inpElmBorderRightWidth.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmBorderRightWidth.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBorderRightWidth').value;

        if (!isNaN(val) && val !== '') {
          elm.style.borderRightStyle = 'solid'; //refresh

          elm.style.borderRightWidth = val + panelStuff.querySelector('#inpElmBorderRightWidthUnit').value;
          elm.style.borderRightStyle = panelStuff.querySelector('#inpElmBorderRightStyle').value;
        } else {
          elm.style.borderRightStyle = 'solid'; //refresh

          elm.style.borderRightWidth = '';
          elm.style.borderRightStyle = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Border right width unit

      var inpElmBorderRightWidthUnit = panelStuff.querySelector('#inpElmBorderRightWidthUnit');
      inpElmBorderRightWidthUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var unit = panelStuff.querySelector('#inpElmBorderRightWidthUnit').value;

        if (unit === 'none') {
          elm.style.borderRight = 'none';
          elm.style.borderRightWidth = '';
          elm.style.borderRightStyle = '';
          _this.panelStuff.querySelector('#inpElmBorderRightWidth').value = '';
          _this.panelStuff.querySelector('#inpElmBorderRightStyle').value = '';
        } else {
          elm.style.borderRightWidth = panelStuff.querySelector('#inpElmBorderRightWidth').value + unit;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Border right style

      var inpElmBorderRightStyle = panelStuff.querySelector('#inpElmBorderRightStyle');
      inpElmBorderRightStyle.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBorderRightStyle').value;
        elm.style.borderRightStyle = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
    }

    _createClass$1(ElementBorderStyles, [{
      key: "readElementStyles",
      value: function readElementStyles(elm) {
        this.panelStuff.querySelector('.input-elm-bordercolor').style.backgroundColor = elm.style.borderColor;
        this.panelStuff.querySelector('.input-elm-bordertopcolor').style.backgroundColor = elm.style.borderTopColor;
        this.panelStuff.querySelector('.input-elm-borderbottomcolor').style.backgroundColor = elm.style.borderBottomColor;
        this.panelStuff.querySelector('.input-elm-borderleftcolor').style.backgroundColor = elm.style.borderLeftColor;
        this.panelStuff.querySelector('.input-elm-borderrightcolor').style.backgroundColor = elm.style.borderRightColor;
        this.panelStuff.querySelector('#inpElmBorderWidth').value = '';
        this.panelStuff.querySelector('#inpElmBorderWidthUnit').value = '';
        this.panelStuff.querySelector('#inpElmBorderStyle').value = '';
        var s = elm.style.borderWidth;
        var nBorderWidth = parseInt(s);

        if (!isNaN(nBorderWidth)) {
          if (s.indexOf('px') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderWidthUnit').value = 'px';
          }

          if (s.indexOf('vw') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderWidthUnit').value = 'vw';
          }

          if (s.indexOf('vh') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderWidthUnit').value = 'vh';
          }

          if (s.indexOf('em') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderWidthUnit').value = 'em';
          }

          this.panelStuff.querySelector('#inpElmBorderWidth').value = nBorderWidth;
          s = elm.style.borderStyle;

          if (s.indexOf('solid') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderStyle').value = 'solid';
          }

          if (s.indexOf('dashed') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderStyle').value = 'dashed';
          }

          if (s.indexOf('dotted') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderStyle').value = 'dotted';
          }
        } else {
          s = elm.style.border;

          if (s.indexOf('none') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderWidthUnit').value = 'none';
            this.panelStuff.querySelector('#inpElmBorderWidth').value = '';
            this.panelStuff.querySelector('#inpElmBorderStyle').value = '';
          }
        }

        this.panelStuff.querySelector('#inpElmBorderTopWidth').value = '';
        this.panelStuff.querySelector('#inpElmBorderTopWidthUnit').value = '';
        this.panelStuff.querySelector('#inpElmBorderTopStyle').value = '';
        s = elm.style.borderTopWidth;
        var nBorderTopWidth = parseInt(s);

        if (!isNaN(nBorderTopWidth)) {
          if (s.indexOf('px') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderTopWidthUnit').value = 'px';
          }

          if (s.indexOf('vw') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderTopWidthUnit').value = 'vw';
          }

          if (s.indexOf('vh') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderTopWidthUnit').value = 'vh';
          }

          if (s.indexOf('em') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderTopWidthUnit').value = 'em';
          }

          this.panelStuff.querySelector('#inpElmBorderTopWidth').value = nBorderTopWidth;

          if (s.indexOf('solid') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderTopStyle').value = 'solid';
          }

          if (s.indexOf('dashed') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderTopStyle').value = 'dashed';
          }

          if (s.indexOf('dotted') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderTopStyle').value = 'dotted';
          }
        } else {
          s = elm.style.borderTop;

          if (s.indexOf('none') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderTopWidthUnit').value = 'none';
            this.panelStuff.querySelector('#inpElmBorderTopWidth').value = '';
            this.panelStuff.querySelector('#inpElmBorderTopStyle').value = '';
          }
        }

        this.panelStuff.querySelector('#inpElmBorderBottomWidth').value = '';
        this.panelStuff.querySelector('#inpElmBorderBottomWidthUnit').value = '';
        this.panelStuff.querySelector('#inpElmBorderBottomStyle').value = '';
        s = elm.style.borderBottomWidth;
        var nBorderBottomWidth = parseInt(s);

        if (!isNaN(nBorderBottomWidth)) {
          if (s.indexOf('px') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderBottomWidthUnit').value = 'px';
          }

          if (s.indexOf('vw') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderBottomWidthUnit').value = 'vw';
          }

          if (s.indexOf('vh') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderBottomWidthUnit').value = 'vh';
          }

          if (s.indexOf('em') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderBottomWidthUnit').value = 'em';
          }

          this.panelStuff.querySelector('#inpElmBorderBottomWidth').value = nBorderBottomWidth;

          if (s.indexOf('solid') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderBottomStyle').value = 'solid';
          }

          if (s.indexOf('dashed') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderBottomStyle').value = 'dashed';
          }

          if (s.indexOf('dotted') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderBottomStyle').value = 'dotted';
          }
        } else {
          s = elm.style.borderBottom;

          if (s.indexOf('none') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderBottomWidthUnit').value = 'none';
            this.panelStuff.querySelector('#inpElmBorderBottomWidth').value = '';
            this.panelStuff.querySelector('#inpElmBorderBottomStyle').value = '';
          }
        }

        this.panelStuff.querySelector('#inpElmBorderLeftWidth').value = '';
        this.panelStuff.querySelector('#inpElmBorderLeftWidthUnit').value = '';
        this.panelStuff.querySelector('#inpElmBorderLeftStyle').value = '';
        s = elm.style.borderLeftWidth;
        var nBorderLeftWidth = parseInt(s);

        if (!isNaN(nBorderLeftWidth)) {
          if (s.indexOf('px') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderLeftWidthUnit').value = 'px';
          }

          if (s.indexOf('vw') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderLeftWidthUnit').value = 'vw';
          }

          if (s.indexOf('vh') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderLeftWidthUnit').value = 'vh';
          }

          if (s.indexOf('em') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderLeftWidthUnit').value = 'em';
          }

          this.panelStuff.querySelector('#inpElmBorderLeftWidth').value = nBorderLeftWidth;

          if (s.indexOf('solid') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderLeftStyle').value = 'solid';
          }

          if (s.indexOf('dashed') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderLeftStyle').value = 'dashed';
          }

          if (s.indexOf('dotted') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderLeftStyle').value = 'dotted';
          }
        } else {
          s = elm.style.borderLeft;

          if (s.indexOf('none') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderLeftWidthUnit').value = 'none';
            this.panelStuff.querySelector('#inpElmBorderLeftWidth').value = '';
            this.panelStuff.querySelector('#inpElmBorderLeftStyle').value = '';
          }
        }

        this.panelStuff.querySelector('#inpElmBorderRightWidth').value = '';
        this.panelStuff.querySelector('#inpElmBorderRightWidthUnit').value = '';
        this.panelStuff.querySelector('#inpElmBorderRightStyle').value = '';
        s = elm.style.borderRightWidth;
        var nBorderRightWidth = parseInt(s);

        if (!isNaN(nBorderRightWidth)) {
          if (s.indexOf('px') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderRightWidthUnit').value = 'px';
          }

          if (s.indexOf('vw') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderRightWidthUnit').value = 'vw';
          }

          if (s.indexOf('vh') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderRightWidthUnit').value = 'vh';
          }

          if (s.indexOf('em') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderRightWidthUnit').value = 'em';
          }

          this.panelStuff.querySelector('#inpElmBorderRightWidth').value = nBorderRightWidth;

          if (s.indexOf('solid') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderRightStyle').value = 'solid';
          }

          if (s.indexOf('dashed') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderRightStyle').value = 'dashed';
          }

          if (s.indexOf('dotted') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderRightStyle').value = 'dotted';
          }
        } else {
          s = elm.style.borderRight;

          if (s.indexOf('none') !== -1) {
            this.panelStuff.querySelector('#inpElmBorderRightWidthUnit').value = 'none';
            this.panelStuff.querySelector('#inpElmBorderRightWidth').value = '';
            this.panelStuff.querySelector('#inpElmBorderRightStyle').value = '';
          }
        }
      }
    }]);

    return ElementBorderStyles;
  }();

  var dom$f = new Dom();

  var ElementTextStyles = /*#__PURE__*/function () {
    function ElementTextStyles(builder) {
      var _this = this;

      _classCallCheck$1(this, ElementTextStyles);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var elementStyleEditor = new ELementStyleEditor(builder);
      var panelStuff = builderStuff.querySelector('#divElementText');
      this.panelStuff = panelStuff;
      var html = "\n            <div class=\"is-settings clearfix\" style=\"width:115px;\">\n                <div>Text Color:</div>\n                <div>\n                    <button title=\"".concat(util.out('Text Color'), "\" class=\"input-elm-color is-btn-color\"></button>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:115px;\">\n                <div>").concat(util.out('Font Size'), ":</div>\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmFontSize\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmFontSizeUnit\">\n                        <option value=\"\"></option>\n                        <option value=\"px\">px</option>\n                        <option value=\"pt\">pt</option>\n                        <option value=\"em\">em</option>\n                        <option value=\"vw\">vw</option>\n                        <option value=\"vh\">vh</option>\n                        <option value=\"%\">%</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:115px;\">\n                <div>").concat(util.out('Text Align'), ":</div>\n                <div>\n                    <select id=\"inpElmTextAlign\">\n                        <option value=\"\"></option>\n                        <option value=\"left\">").concat(util.out('Left'), "</option>\n                        <option value=\"center\">").concat(util.out('Center'), "</option>\n                        <option value=\"right\">").concat(util.out('Right'), "</option>\n                        <option value=\"justify\">").concat(util.out('Full'), "</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:115px;\">\n                <div>").concat(util.out('Line Height'), ":</div>\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmLineHeight\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmLineHeightUnit\">\n                        <option value=\"\"></option>\n                        <option value=\"px\">px</option>\n                        <option value=\"pt\">pt</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:115px;\">\n                <div>").concat(util.out('Font Weight'), ":</div>\n                <div>\n                    <select id=\"inpElmFontWeight\">\n                        <option value=\"\"></option>\n                        <option value=\"100\">100</option>\n                        <option value=\"200\">200</option>\n                        <option value=\"300\">300</option>\n                        <option value=\"400\">400</option>\n                        <option value=\"500\">500</option>\n                        <option value=\"600\">600</option>\n                        <option value=\"700\">700</option>\n                        <option value=\"800\">800</option>\n                        <option value=\"900\">900</option>\n                        <option value=\"bold\">").concat(util.out('Bold'), "</option>\n                        <option value=\"normal\">").concat(util.out('Normal'), "</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:115px;\">\n                <div>").concat(util.out('Font Style'), ":</div>\n                <div>\n                    <select id=\"inpElmFontStyle\">\n                        <option value=\"\"></option>\n                        <option value=\"italic\">").concat(util.out('Italic'), "</option>\n                        <option value=\"normal\">").concat(util.out('Normal'), "</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:115px;\">\n                <div>").concat(util.out('Text Transform'), ":</div>\n                <div>\n                    <select id=\"inpElmTextTransform\">\n                        <option value=\"\"></option>\n                        <option value=\"uppercase\">").concat(util.out('Uppercase'), "</option>\n                        <option value=\"lowercase\">").concat(util.out('Lowercase'), "</option>\n                        <option value=\"capitalize\">").concat(util.out('Capitalize'), "</option>\n                        <option value=\"none\">").concat(util.out('None'), "</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:115px;\">\n                <div>").concat(util.out('Text Decoration'), ":</div>\n                <div>\n                    <select id=\"inpElmTextDecoration\">\n                        <option value=\"\"></option>\n                        <option value=\"underline\">").concat(util.out('Underline'), "</option>\n                        <option value=\"line-through\">").concat(util.out('Line Through'), "</option>\n                        <option value=\"overline\">").concat(util.out('Overline'), "</option>\n                        <option value=\"none\">").concat(util.out('None'), "</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:115px;\">\n                <div>").concat(util.out('Letter Spacing'), ":</div>\n                <div>\n                    <input type=\"text\" id=\"inpElmLetterSpacing\" value=\"\" style=\"width:45px\"/> &nbsp;px\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:115px;\">\n                <div>").concat(util.out('Word Spacing'), ":</div>\n                <div>\n                    <input type=\"text\" id=\"inpElmWordSpacing\" value=\"\" style=\"width:45px\"/> &nbsp;px\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:100%;\">\n                <div>").concat(util.out('Font Family'), ":</div>\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmFontFamily\" value=\"\" style=\"width:100%\"/>\n                    <button title=\"").concat(util.out('Select Font'), "\" class=\"input-elm-fontfamily\" style=\"border-left: none;width:45px;padding:0;\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-more\"></use></svg></button>\n                </div>\n            </div>\n        ");
      dom$f.appendHtml(panelStuff, html);
      var htmlmodal = "\n            <div class=\"is-modal pickfontfamily\">\n                <div style=\"max-width:303px;padding:0;box-sizing:border-box;position:relative;\">\n                    <div class=\"is-modal-bar is-draggable\" style=\"position: absolute;top: 0;left: 0;width: 100%;z-index:1;\"> ".concat(util.out('Font'), " </div>\n                    <div class=\"clearfix\" style=\"margin-top:28px;padding:0px;height:300px;position:relative;\">\n                        <iframe src=\"about:blank\" style=\"width:100%;height:100%;position:absolute;top:0;left:0;border: none;\"></iframe>\n                    </div>\n                </div>\n            </div>\n        ");
      dom$f.appendHtml(builderStuff, htmlmodal);
      var fontModal = builderStuff.querySelector('.is-modal.pickfontfamily'); // Text color

      var btnElmTextColor = panelStuff.querySelector('.input-elm-color');
      btnElmTextColor.addEventListener('click', function (e) {
        _this.builder.uo.saveForUndo(true); // checkLater = true


        var elm = e.target;

        _this.builder.colorPicker.open(function (color) {
          _this.builder.inspectedElement.style.color = color;
          elm.style.backgroundColor = color; // preview

          elementStyleEditor.refresh(); //Trigger Change event

          _this.builder.opts.onChange();
        }, btnElmTextColor.style.backgroundColor);
      });
      /*
          Text Style
          by Tinara
      */

      var inpElmTextAlign = panelStuff.querySelector('#inpElmTextAlign');
      inpElmTextAlign.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmTextAlign').value;
        elm.style.textAlign = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmFontWeight = panelStuff.querySelector('#inpElmFontWeight');
      inpElmFontWeight.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmFontWeight').value;
        elm.style.fontWeight = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmFontStyle = panelStuff.querySelector('#inpElmFontStyle');
      inpElmFontStyle.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmFontStyle').value;
        elm.style.fontStyle = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmTextTransform = panelStuff.querySelector('#inpElmTextTransform');
      inpElmTextTransform.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmTextTransform').value;
        elm.style.textTransform = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmTextDecoration = panelStuff.querySelector('#inpElmTextDecoration');
      inpElmTextDecoration.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmTextDecoration').value;
        elm.style.textDecoration = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmFontSize = panelStuff.querySelector('#inpElmFontSize');
      inpElmFontSize.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmFontSize.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmFontSize').value;
        var unit = panelStuff.querySelector('#inpElmFontSizeUnit').value;

        if (unit === '') {
          panelStuff.querySelector('#inpElmFontSizeUnit').value = 'px';
          unit = 'px';
        }

        if (!isNaN(val) && val !== '') {
          elm.style.fontSize = val + unit;
        } else {
          elm.style.fontSize = '';
        } // Get current class size & remove all class size from the element


        var arrSizes = _this.builder.opts.fontSizeClassValues;

        for (var i = 0; i <= arrSizes.length - 1; i++) {
          if (dom$f.hasClass(elm, 'size-' + arrSizes[i])) {
            dom$f.removeClass(elm, 'size-' + arrSizes[i]);
          }
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmFontSizeUnit = panelStuff.querySelector('#inpElmFontSizeUnit');
      inpElmFontSizeUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmFontSize').value;
        var unit = panelStuff.querySelector('#inpElmFontSizeUnit').value;

        if (!isNaN(val) && val !== '') {
          elm.style.fontSize = val + unit;
        } else {
          elm.style.fontSize = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmLineHeight = panelStuff.querySelector('#inpElmLineHeight');
      inpElmLineHeight.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmLineHeight.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmLineHeight').value;
        var unit = panelStuff.querySelector('#inpElmLineHeightUnit').value;

        if (!isNaN(val) && val !== '') {
          elm.style.lineHeight = val + unit;
        } else {
          elm.style.lineHeight = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmLineHeightUnit = panelStuff.querySelector('#inpElmLineHeightUnit');
      inpElmLineHeightUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var unit = panelStuff.querySelector('#inpElmLineHeightUnit').value;
        var val = panelStuff.querySelector('#inpElmLineHeight').value;

        if (!isNaN(val) && val !== '') {
          elm.style.lineHeight = val + unit;
        } else {
          elm.style.lineHeight = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmLetterSpacing = panelStuff.querySelector('#inpElmLetterSpacing');
      inpElmLetterSpacing.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmLetterSpacing.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmLetterSpacing').value;

        if (!isNaN(val) && val !== '') {
          elm.style.letterSpacing = val + 'px';
        } else {
          elm.style.letterSpacing = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmWordSpacing = panelStuff.querySelector('#inpElmWordSpacing');
      inpElmWordSpacing.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmWordSpacing.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmWordSpacing').value;

        if (!isNaN(val) && val !== '') {
          elm.style.wordSpacing = val + 'px';
        } else {
          elm.style.wordSpacing = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      }); // Font Family

      var inpElmFontFamily = panelStuff.querySelector('#inpElmFontFamily');
      inpElmFontFamily.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmFontFamily.addEventListener('keyup', function () {
        var val = panelStuff.querySelector('#inpElmFontFamily').value;
        _this.builder.inspectedElement.style.fontFamily = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var iframe = fontModal.querySelector('iframe');
      var doc = iframe.contentWindow.document;
      doc.open();

      if (!this.builder.opts.emailMode) {
        doc.write(this.util.getFontFamilyHTML());
      } else {
        doc.write(this.util.getFontFamilyEmail());
      }

      doc.close();
      var btn = panelStuff.querySelector('.input-elm-fontfamily');
      btn.addEventListener('click', function () {
        var elm = _this.builder.inspectedElement; //show modal        

        _this.util.showModal(fontModal); //Get active font


        var s = elm.style.fontFamily;
        var iframe = fontModal.querySelector('iframe');
        var iframeDocument = iframe.contentDocument || iframe.contentWindow.document;

        if (s !== '') {
          var fontname = s.split(',')[0];
          fontname = fontname.replace('"', '').replace('"', '');
          fontname = fontname.toLowerCase().trim();

          if (iframeDocument) {
            [].forEach.call(iframeDocument.querySelectorAll('#divFontList > div'), function (e) {
              var f = e.getAttribute('data-font-family');
              f = f.split(',')[0];
              f = f.trim().toLowerCase();

              if (f === fontname && f !== '') {
                dom$f.addClass(e, 'on');
              } else {
                dom$f.removeClass(e, 'on');
              }
            }); //Select active font

            var area = iframeDocument.querySelector('#divFontList');
            var target = area.querySelector('.on');
            if (target) area.scrollTop = area.scrollTop + target.getBoundingClientRect().top;
          }
        } else {
          if (iframeDocument) {
            [].forEach.call(iframeDocument.querySelectorAll('#divFontList > div'), function (e) {
              dom$f.removeClass(e, 'on');
            });
          }
        }
      });
    }

    _createClass$1(ElementTextStyles, [{
      key: "readElementStyles",
      value: function readElementStyles(elm) {
        this.panelStuff.querySelector('.input-elm-color').style.backgroundColor = elm.style.color;
        /*
            Text Style
            by Tinara
        */

        this.panelStuff.querySelector('#inpElmTextAlign').value = '';
        var sTextAlign = elm.style.textAlign;
        this.panelStuff.querySelector('#inpElmTextAlign').value = sTextAlign;
        this.panelStuff.querySelector('#inpElmFontSize').value = '';
        var nFontSize = parseInt(elm.style.fontSize);

        if (!isNaN(nFontSize)) {
          this.panelStuff.querySelector('#inpElmFontSize').value = nFontSize;
        }

        var sFontSizeUnit;
        this.panelStuff.querySelector('#inpElmFontSizeUnit').value = 'px';
        var s = elm.style.fontSize;

        if (s.indexOf('px') !== -1) {
          sFontSizeUnit = 'px';
        }

        if (s.indexOf('pt') !== -1) {
          sFontSizeUnit = 'pt';
        }

        if (s.indexOf('em') !== -1) {
          sFontSizeUnit = 'em';
        }

        if (s.indexOf('vw') !== -1) {
          sFontSizeUnit = 'vw';
        }

        if (s.indexOf('vh') !== -1) {
          sFontSizeUnit = 'vh';
        }

        if (s.indexOf('%') !== -1) {
          sFontSizeUnit = '%';
        }

        this.panelStuff.querySelector('#inpElmFontSizeUnit').value = sFontSizeUnit;
        this.panelStuff.querySelector('#inpElmFontWeight').value = '';
        var sFontWeight = elm.style.fontWeight;
        this.panelStuff.querySelector('#inpElmFontWeight').value = sFontWeight;
        this.panelStuff.querySelector('#inpElmFontStyle').value = '';
        var sFontStyle = elm.style.fontStyle;
        this.panelStuff.querySelector('#inpElmFontStyle').value = sFontStyle;
        this.panelStuff.querySelector('#inpElmTextTransform').value = '';
        var sTextTransform = elm.style.textTransform;
        this.panelStuff.querySelector('#inpElmTextTransform').value = sTextTransform;
        this.panelStuff.querySelector('#inpElmTextDecoration').value = '';
        var sTextDecoration = elm.style.textDecoration;
        this.panelStuff.querySelector('#inpElmTextDecoration').value = sTextDecoration;
        this.panelStuff.querySelector('#inpElmLineHeight').value = '';

        if (!isNaN(elm.style.lineHeight)) {
          this.panelStuff.querySelector('#inpElmLineHeight').value = elm.style.lineHeight;
        } else {
          var nLineHeight = parseInt(elm.style.lineHeight);

          if (!isNaN(nLineHeight)) {
            this.panelStuff.querySelector('#inpElmLineHeight').value = nLineHeight;
          }
        }

        var sLineHeightUnit;
        this.panelStuff.querySelector('#inpElmLineHeightUnit').value = '';
        s = elm.style.lineHeight;

        if (s.indexOf('px') !== -1) {
          sLineHeightUnit = 'px';
        }

        if (s.indexOf('pt') !== -1) {
          sLineHeightUnit = 'pt';
        }

        this.panelStuff.querySelector('#inpElmLineHeightUnit').value = sLineHeightUnit;
        this.panelStuff.querySelector('#inpElmLetterSpacing').value = '';
        var nLetterSpacing = parseInt(elm.style.letterSpacing);

        if (!isNaN(nLetterSpacing)) {
          this.panelStuff.querySelector('#inpElmLetterSpacing').value = nLetterSpacing;
        }

        this.panelStuff.querySelector('#inpElmWordSpacing').value = '';
        var nWordSpacing = parseInt(elm.style.wordSpacing);

        if (!isNaN(nWordSpacing)) {
          this.panelStuff.querySelector('#inpElmWordSpacing').value = nWordSpacing;
        }

        this.panelStuff.querySelector('#inpElmFontFamily').value = '';
        var sFontFamily = elm.style.fontFamily;

        if (sFontFamily !== '') {
          this.panelStuff.querySelector('#inpElmFontFamily').value = sFontFamily;
        }
      }
    }]);

    return ElementTextStyles;
  }();

  var dom$e = new Dom();

  var ElementCornerStyles = /*#__PURE__*/function () {
    function ElementCornerStyles(builder) {
      var _this = this;

      _classCallCheck$1(this, ElementCornerStyles);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var elementStyleEditor = new ELementStyleEditor(builder);
      var panelStuff = builderStuff.querySelector('#divElementCorner');
      this.panelStuff = panelStuff;
      var html = "\n            <div style=\"margin-top: 13px;font-weight: bold;width:100%;\">".concat(util.out('Corners'), "</div>\n\n            <div class=\"is-settings clearfix\" style=\"width:100%;margin-bottom:9px;\">\n                <div>").concat(util.out('Border Radius'), ":</div>\n                <div>\n                    <input type=\"text\" id=\"inpElmBorderRadius\" value=\"\" style=\"width:45px\"/> &nbsp;px\n                </div>\n            </div>\n\n            <div style=\"margin-top: 25px;font-weight: bold;width:100%;\">").concat(util.out('Individual Corners'), "</div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Top Left'), ":</div>\n                <div>\n                    <input type=\"text\" id=\"inpElmBorderTopLeftRadius\" value=\"\" style=\"width:45px\"/> &nbsp;px\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Top Right'), ":</div>\n                <div>\n                    <input type=\"text\" id=\"inpElmBorderTopRightRadius\" value=\"\" style=\"width:45px\"/> &nbsp;px\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Bottom Left'), ":</div>\n                <div>\n                    <input type=\"text\" id=\"inpElmBorderBottomLeftRadius\" value=\"\" style=\"width:45px\"/> &nbsp;px\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Bottom Right'), ":</div>\n                <div>\n                    <input type=\"text\" id=\"inpElmBorderBottomRightRadius\" value=\"\" style=\"width:45px\"/> &nbsp;px\n                </div>\n            </div>\n        ");
      dom$e.appendHtml(panelStuff, html);
      var inpElmBorderRadius = panelStuff.querySelector('#inpElmBorderRadius');
      inpElmBorderRadius.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmBorderRadius.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBorderRadius').value;

        if (!isNaN(val) && val !== '') {
          elm.style.borderRadius = val + 'px';
        } else {
          elm.style.borderRadius = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmBorderTopLeftRadius = panelStuff.querySelector('#inpElmBorderTopLeftRadius');
      inpElmBorderTopLeftRadius.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmBorderTopLeftRadius.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBorderTopLeftRadius').value;

        if (!isNaN(val) && val !== '') {
          elm.style.borderTopLeftRadius = val + 'px';
        } else {
          elm.style.borderTopLeftRadius = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmBorderTopRightRadius = panelStuff.querySelector('#inpElmBorderTopRightRadius');
      inpElmBorderTopRightRadius.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmBorderTopRightRadius.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBorderTopRightRadius').value;

        if (!isNaN(val) && val !== '') {
          elm.style.borderTopRightRadius = val + 'px';
        } else {
          elm.style.borderTopRightRadius = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmBorderBottomLeftRadius = panelStuff.querySelector('#inpElmBorderBottomLeftRadius');
      inpElmBorderBottomLeftRadius.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmBorderBottomLeftRadius.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBorderBottomLeftRadius').value;

        if (!isNaN(val) && val !== '') {
          elm.style.borderBottomLeftRadius = val + 'px';
        } else {
          elm.style.borderBottomLeftRadius = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmBorderBottomRightRadius = panelStuff.querySelector('#inpElmBorderBottomRightRadius');
      inpElmBorderBottomRightRadius.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmBorderBottomRightRadius.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBorderBottomRightRadius').value;

        if (!isNaN(val) && val !== '') {
          elm.style.borderBottomRightRadius = val + 'px';
        } else {
          elm.style.borderBottomRightRadius = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
    }

    _createClass$1(ElementCornerStyles, [{
      key: "readElementStyles",
      value: function readElementStyles(elm) {
        var panelStuff = this.panelStuff;
        var inpElmBorderRadius = panelStuff.querySelector('#inpElmBorderRadius');
        inpElmBorderRadius.value = '';
        var s = elm.style.borderRadius;
        var nBorderRadius = parseInt(s);

        if (!isNaN(nBorderRadius)) {
          inpElmBorderRadius.value = nBorderRadius;
        }

        var inpElmBorderTopLeftRadius = panelStuff.querySelector('#inpElmBorderTopLeftRadius');
        inpElmBorderTopLeftRadius.value = '';
        s = elm.style.borderTopLeftRadius;
        var nBorderTopLeftRadius = parseInt(s);

        if (!isNaN(nBorderTopLeftRadius)) {
          inpElmBorderTopLeftRadius.value = nBorderTopLeftRadius;
        }

        var inpElmBorderTopRightRadius = panelStuff.querySelector('#inpElmBorderTopRightRadius');
        inpElmBorderTopRightRadius.value = '';
        s = elm.style.borderTopRightRadius;
        var nBorderTopRightRadius = parseInt(s);

        if (!isNaN(nBorderTopRightRadius)) {
          inpElmBorderTopRightRadius.value = nBorderTopRightRadius;
        }

        var inpElmBorderBottomLeftRadius = panelStuff.querySelector('#inpElmBorderBottomLeftRadius');
        inpElmBorderBottomLeftRadius.value = '';
        s = elm.style.borderBottomLeftRadius;
        var nBorderBottomLeftRadius = parseInt(s);

        if (!isNaN(nBorderBottomLeftRadius)) {
          inpElmBorderBottomLeftRadius.value = nBorderBottomLeftRadius;
        }

        var inpElmBorderBottomRightRadius = panelStuff.querySelector('#inpElmBorderBottomRightRadius');
        inpElmBorderBottomRightRadius.value = '';
        s = elm.style.borderBottomRightRadius;
        var nBorderBottomRightRadius = parseInt(s);

        if (!isNaN(nBorderBottomRightRadius)) {
          inpElmBorderBottomRightRadius.value = nBorderBottomRightRadius;
        }
      }
    }]);

    return ElementCornerStyles;
  }();

  var dom$d = new Dom();

  var ElementShadowStyles = /*#__PURE__*/function () {
    function ElementShadowStyles(builder) {
      var _this = this;

      _classCallCheck$1(this, ElementShadowStyles);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var elementStyleEditor = new ELementStyleEditor(builder);
      var panelStuff = builderStuff.querySelector('#divElementShadow');
      this.panelStuff = panelStuff;
      var html = "\n            <div style=\"margin-top:13px;font-weight:bold;width:100%;\">".concat(util.out('Shadow'), "</div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('x Offset'), ":</div>\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmBoxShadowX\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmBoxShadowXUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('y Offset'), ":</div>\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmBoxShadowY\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmBoxShadowYUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Blur'), ":</div>\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmBoxShadowBlur\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmBoxShadowBlurUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Spread'), ":</div>\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmBoxShadowSpread\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmBoxShadowSpreadUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:100%;\">\n                <div>").concat(util.out('Shadow Color'), ":</div>\n                <div>\n                <button title=\"").concat(util.out('Shadow Color'), "\" class=\"input-elm-shadowcolor is-btn-color\"></button>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:100%;\">\n                <div>").concat(util.out('Outer/Inner Shadow'), ":</div>\n                <div>\n                    <select id=\"inpElmBoxShadowInset\">\n                        <option value=\"\">Outset</option>\n                        <option value=\"inset\">Inset</option>\n                    </select>\n                </div>\n            </div>\n        ");
      dom$d.appendHtml(panelStuff, html); // Shadow color

      var btnElmShadowColor = panelStuff.querySelector('.input-elm-shadowcolor');
      btnElmShadowColor.addEventListener('click', function () {
        _this.builder.uo.saveForUndo(true); // checkLater = true


        _this.builder.colorPicker.open(function (color) {
          btnElmShadowColor.style.backgroundColor = color; // preview

          _this.updateShadow(_this.builder.inspectedElement);

          elementStyleEditor.refresh(); //Trigger Change event

          _this.builder.opts.onChange();
        }, btnElmShadowColor.style.backgroundColor);
      });
      var inps = panelStuff.querySelectorAll('#inpElmBoxShadowX,#inpElmBoxShadowY,#inpElmBoxShadowBlur,#inpElmBoxShadowSpread');
      Array.prototype.forEach.call(inps, function (inp) {
        inp.addEventListener('click', function () {
          _this.builder.uo.saveForUndo();
        });
        inp.addEventListener('keyup', function () {
          var elm = _this.builder.inspectedElement;

          _this.updateShadow(elm);

          elementStyleEditor.refresh(); //Trigger Change event

          _this.builder.opts.onChange();
        });
      });
      inps = panelStuff.querySelectorAll('#inpElmBoxShadowXUnit,#inpElmBoxShadowYUnit,#inpElmBoxShadowBlurUnit,#inpElmBoxShadowSpreadUnit');
      Array.prototype.forEach.call(inps, function (inp) {
        inp.addEventListener('change', function () {
          _this.builder.uo.saveForUndo();

          var elm = _this.builder.inspectedElement;

          _this.updateShadow(elm);

          elementStyleEditor.refresh(); //Trigger Change event

          _this.builder.opts.onChange();
        });
      });
      var inpElmBoxShadowInset = panelStuff.querySelector('#inpElmBoxShadowInset');
      inpElmBoxShadowInset.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;

        _this.updateShadow(elm);

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
    }

    _createClass$1(ElementShadowStyles, [{
      key: "updateShadow",
      value: function updateShadow(elm) {
        var panelStuff = this.panelStuff;
        var shadowColor = panelStuff.querySelector('.input-elm-shadowcolor').style.backgroundColor;
        var shadowInset = panelStuff.querySelector('#inpElmBoxShadowInset').value;
        var val = panelStuff.querySelector('#inpElmBoxShadowX').value;
        var unit = panelStuff.querySelector('#inpElmBoxShadowXUnit').value;
        var offX = '';

        if (!isNaN(val) && val !== '') {
          offX = val + unit;
        }

        val = panelStuff.querySelector('#inpElmBoxShadowY').value;
        unit = panelStuff.querySelector('#inpElmBoxShadowYUnit').value;
        var offY = '';

        if (!isNaN(val) && val !== '') {
          offY = val + unit;
        }

        val = panelStuff.querySelector('#inpElmBoxShadowBlur').value;
        unit = panelStuff.querySelector('#inpElmBoxShadowBlurUnit').value;
        var blur = '';

        if (!isNaN(val) && val !== '') {
          blur = val + unit;
        }

        val = panelStuff.querySelector('#inpElmBoxShadowSpread').value;
        unit = panelStuff.querySelector('#inpElmBoxShadowSpreadUnit').value;
        var spread = '';

        if (!isNaN(val) && val !== '') {
          spread = val + unit;
        }

        elm.style.boxShadow = (offX + ' ' + offY + ' ' + blur + ' ' + spread + ' ' + shadowColor + ' ' + shadowInset).trim();
      }
    }, {
      key: "readElementStyles",
      value: function readElementStyles(elm) {
        var panelStuff = this.panelStuff;
        var color, n;
        var sBoxShadow = elm.style.boxShadow;
        var inps = panelStuff.querySelectorAll('#inpElmBoxShadowX,#inpElmBoxShadowY,#inpElmBoxShadowBlur,#inpElmBoxShadowSpread');
        Array.prototype.forEach.call(inps, function (inp) {
          inp.value = '';
        });
        inps = panelStuff.querySelectorAll('#inpElmBoxShadowXUnit,#inpElmBoxShadowYUnit,#inpElmBoxShadowBlurUnit,#inpElmBoxShadowSpreadUnit');
        Array.prototype.forEach.call(inps, function (inp) {
          inp.value = 'px';
        });
        panelStuff.querySelector('#inpElmBoxShadowInset').value = '';

        if (sBoxShadow.indexOf('inset') !== -1) {
          panelStuff.querySelector('#inpElmBoxShadowInset').value = 'inset';
          sBoxShadow = sBoxShadow.replace('inset', '');
        }

        if (sBoxShadow !== '') {
          if (sBoxShadow.indexOf('rgb') !== -1) {
            //always get rgb value, not hex
            color = sBoxShadow.substr(sBoxShadow.indexOf('rgb'));
            color = color.substr(0, color.indexOf(')') + 1);
            panelStuff.querySelector('.input-elm-shadowcolor').style.backgroundColor = color;
            n = sBoxShadow.split('rgb')[1].indexOf(')');
            sBoxShadow = sBoxShadow.split('rgb')[0] + sBoxShadow.split('rgb')[1].substr(n + 2);
          }

          if (sBoxShadow.indexOf('#') !== -1) {
            //never executed
            color = sBoxShadow.substr(sBoxShadow.indexOf('#'));
            color = color.substr(0, color.indexOf(' '));
            panelStuff.querySelector('.input-elm-shadowcolor').style.backgroundColor = color;
            n = sBoxShadow.split('#')[1].indexOf(' ');
            sBoxShadow = sBoxShadow.split('#')[0] + sBoxShadow.split('#')[1].substr(n + 2);
          }

          var array = sBoxShadow.split(' ');
          var length = array.length;
          n = 1;

          for (var i = 0; i < length; i++) {
            if (n === 1) {
              panelStuff.querySelector('#inpElmBoxShadowX').value = parseInt(array[i]);

              if (array[i].indexOf('px') !== -1) {
                panelStuff.querySelector('#inpElmBoxShadowXUnit').value = 'px';
              } else if (array[i].indexOf('em') !== -1) {
                panelStuff.querySelector('#inpElmBoxShadowXUnit').value = 'em';
              } else {
                panelStuff.querySelector('#inpElmBoxShadowX').value = '';
              }
            }

            if (n === 2) {
              panelStuff.querySelector('#inpElmBoxShadowY').value = parseInt(array[i]);

              if (array[i].indexOf('px') !== -1) {
                panelStuff.querySelector('#inpElmBoxShadowYUnit').value = 'px';
              } else if (array[i].indexOf('em') !== -1) {
                panelStuff.querySelector('#inpElmBoxShadowYUnit').value = 'em';
              } else {
                panelStuff.querySelector('#inpElmBoxShadowY').value = '';
              }
            }

            if (n === 3) {
              panelStuff.querySelector('#inpElmBoxShadowBlur').value = parseInt(array[i]);

              if (array[i].indexOf('px') !== -1) {
                panelStuff.querySelector('#inpElmBoxShadowBlurUnit').value = 'px';
              } else if (array[i].indexOf('em') !== -1) {
                panelStuff.querySelector('#inpElmBoxShadowBlurUnit').value = 'em';
              } else {
                panelStuff.querySelector('#inpElmBoxShadowBlur').value = '';
              }
            }

            if (n === 4) {
              panelStuff.querySelector('#inpElmBoxShadowSpread').value = parseInt(array[i]);

              if (array[i].indexOf('px') !== -1) {
                panelStuff.querySelector('#inpElmBoxShadowSpreadUnit').value = 'px';
              } else if (array[i].indexOf('em') !== -1) {
                panelStuff.querySelector('#inpElmBoxShadowSpreadUnit').value = 'em';
              } else {
                panelStuff.querySelector('#inpElmBoxShadowSpread').value = '';
              }
            }

            n++;
          }
        }
      }
    }]);

    return ElementShadowStyles;
  }();

  var dom$c = new Dom();

  var ElementDisplayStyles = /*#__PURE__*/function () {
    function ElementDisplayStyles(builder) {
      var _this = this;

      _classCallCheck$1(this, ElementDisplayStyles);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var elementStyleEditor = new ELementStyleEditor(builder);
      var panelStuff = builderStuff.querySelector('#divElementDisplay');
      this.panelStuff = panelStuff;
      var html = "\n            <div style=\"margin-top:13px;font-weight:bold;\">".concat(util.out('Display'), "</div>\n\n            <div class=\"is-settings clearfix\" style=\"width:100%;\">\n                <div style=\"display:flex\">\n                    <select id=\"inpElmDisplay\" style=\"width:110px;\">\n                        <option value=\"\"></option>\n                        <option value=\"block\">Block</option>\n                        <option value=\"inline-block\">Inline Block</option>\n                        <option value=\"inline\">Inline</option>\n                        <option value=\"flex\">Flex</option>\n                        <option value=\"none\">None</option>\n                    </select>\n                </div>\n            </div>\n\n            <div style=\"margin-top:25px;font-weight:bold;width:100%;\">").concat(util.out('Flex'), "</div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div>").concat(util.out('Direction'), ":</div>\n                <div style=\"display:flex\">\n                    <select id=\"inpElmFlexDirection\" style=\"width:110px;\">\n                        <option value=\"\"></option>\n                        <option value=\"row\">Row</option>\n                        <option value=\"row-reverse\">Row Reverse</option>\n                        <option value=\"column\">Column</option>\n                        <option value=\"column-reverse\">Column Reverse</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div>").concat(util.out('Wrap'), ":</div>\n                <div style=\"display:flex\">\n                    <select id=\"inpElmFlexWrap\" style=\"width:110px;\">\n                        <option value=\"\"></option>\n                        <option value=\"no-wrap\">No Wrap</option>\n                        <option value=\"wrap\">Wrap</option>\n                        <option value=\"wrap-reverse\">Wrap Reverse</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:100%;\">\n                <div>").concat(util.out('Justify Content'), ":</div>\n                <div style=\"display:flex\">\n                    <select id=\"inpElmJustifyContent\" style=\"width:110px;\">\n                        <option value=\"\"></option>\n                        <option value=\"center\">Center</option>\n                        <option value=\"flex-start\">Flex Start</option>\n                        <option value=\"flex-end\">Flex End</option>\n                        <option value=\"space-around\">Space Around</option>\n                        <option value=\"space-between\">Space Between</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div>").concat(util.out('Align Items'), ":</div>\n                <div style=\"display:flex\">\n                    <select id=\"inpElmAlignItems\" style=\"width:110px;\">\n                        <option value=\"\"></option>\n                        <option value=\"center\">Center</option>\n                        <option value=\"flex-start\">Flex Start</option>\n                        <option value=\"flex-end\">Flex End</option>\n                        <option value=\"stretch\">Stretch</option>\n                        <option value=\"baseline\">Baseline</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div>").concat(util.out('Align Content'), ":</div>\n                <div style=\"display:flex\">\n                    <select id=\"inpElmAlignContent\" style=\"width:110px;\">\n                        <option value=\"\"></option>\n                        <option value=\"center\">Center</option>\n                        <option value=\"flex-start\">Flex Start</option>\n                        <option value=\"flex-end\">Flex End</option>\n                        <option value=\"stretch\">Stretch</option>\n                        <option value=\"space-around\">Space Around</option>\n                        <option value=\"space-between\">Space Between</option>\n                    </select>\n                </div>\n            </div>\n        ");
      dom$c.appendHtml(panelStuff, html);
      var inpElmDisplay = panelStuff.querySelector('#inpElmDisplay');
      inpElmDisplay.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmDisplay').value;
        elm.style.display = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmFlexDirection = panelStuff.querySelector('#inpElmFlexDirection');
      inpElmFlexDirection.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmFlexDirection').value;
        elm.style.flexDirection = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmFlexWrap = panelStuff.querySelector('#inpElmFlexWrap');
      inpElmFlexWrap.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmFlexWrap').value;
        elm.style.flexWrap = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmJustifyContent = panelStuff.querySelector('#inpElmJustifyContent');
      inpElmJustifyContent.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmJustifyContent').value;
        elm.style.justifyContent = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmAlignItems = panelStuff.querySelector('#inpElmAlignItems');
      inpElmAlignItems.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmAlignItems').value;
        elm.style.alignItems = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmAlignContent = panelStuff.querySelector('#inpElmAlignContent');
      inpElmAlignContent.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmAlignContent').value;
        elm.style.alignContent = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
    }

    _createClass$1(ElementDisplayStyles, [{
      key: "readElementStyles",
      value: function readElementStyles(elm) {
        var panelStuff = this.panelStuff;
        var inpElmDisplay = panelStuff.querySelector('#inpElmDisplay');
        inpElmDisplay.value = '';
        var s = elm.style.display;
        if (s) inpElmDisplay.value = s;
        var inpElmFlexDirection = panelStuff.querySelector('#inpElmFlexDirection');
        inpElmFlexDirection.value = '';
        s = elm.style.flexDirection;
        if (s) inpElmFlexDirection.value = s;
        var inpElmFlexWrap = panelStuff.querySelector('#inpElmFlexWrap');
        inpElmFlexWrap.value = '';
        s = elm.style.flexWrap;
        if (s) inpElmFlexWrap.value = s;
        var inpElmJustifyContent = panelStuff.querySelector('#inpElmJustifyContent');
        inpElmJustifyContent.value = '';
        s = elm.style.justifyContent;
        if (s) inpElmJustifyContent.value = s;
        var inpElmAlignItems = panelStuff.querySelector('#inpElmAlignItems');
        inpElmAlignItems.value = '';
        s = elm.style.alignItems;
        if (s) inpElmAlignItems.value = s;
        var inpElmAlignContent = panelStuff.querySelector('#inpElmAlignContent');
        inpElmAlignContent.value = '';
        s = elm.style.alignContent;
        if (s) inpElmAlignContent.value = s;
      }
    }]);

    return ElementDisplayStyles;
  }();

  var dom$b = new Dom();

  var ElementPositionStyles = /*#__PURE__*/function () {
    function ElementPositionStyles(builder) {
      var _this = this;

      _classCallCheck$1(this, ElementPositionStyles);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var elementStyleEditor = new ELementStyleEditor(builder);
      var panelStuff = builderStuff.querySelector('#divElementPosition');
      this.panelStuff = panelStuff;
      var html = "\n            <div style=\"margin-top:13px;font-weight:bold;width:100%;\">".concat(util.out('Position'), "</div>\n\n            <div class=\"is-settings clearfix\" style=\"width:100%;\">\n                <div style=\"display:flex\">\n                    <select id=\"inpElmPosition\">\n                        <option value=\"\"></option>\n                        <option value=\"relative\">Relative</option>\n                        <option value=\"absolute\">Absolute</option>\n                        <option value=\"fixed\">Fixed</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div>").concat(util.out('Top'), ":</div>\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmTop\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmTopUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                        <option value=\"vw\">vw</option>\n                        <option value=\"vh\">vh</option>\n                        <option value=\"%\">%</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div>").concat(util.out('Left'), ":</div>\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmLeft\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmLeftUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                        <option value=\"vw\">vw</option>\n                        <option value=\"vh\">vh</option>\n                        <option value=\"%\">%</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div>").concat(util.out('Bottom'), ":</div>\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmBottom\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmBottomUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                        <option value=\"vw\">vw</option>\n                        <option value=\"vh\">vh</option>\n                        <option value=\"%\">%</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div>").concat(util.out('Right'), ":</div>\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmRight\" value=\"\" style=\"width:45px\"/>\n                    <select id=\"inpElmRightUnit\">\n                        <option value=\"px\">px</option>\n                        <option value=\"em\">em</option>\n                        <option value=\"vw\">vw</option>\n                        <option value=\"vh\">vh</option>\n                        <option value=\"%\">%</option>\n                    </select>\n                </div>\n            </div>\n\n            <div style=\"margin-top: 25px;font-weight: bold;width:100%;\">").concat(util.out('Float'), "</div>\n\n            <div class=\"is-settings clearfix\" style=\"width:100%;\">\n                <div style=\"display:flex\">\n                    <select id=\"inpElmFloat\">\n                        <option value=\"\"></option>\n                        <option value=\"left\">Left</option>\n                        <option value=\"right\">Right</option>\n                        <option value=\"none\">None</option>\n                    </select>\n                </div>\n            </div>\n        ");
      dom$b.appendHtml(panelStuff, html);
      var inpElmPosition = panelStuff.querySelector('#inpElmPosition');
      inpElmPosition.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmPosition').value;
        elm.style.position = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmFloat = panelStuff.querySelector('#inpElmFloat');
      inpElmFloat.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmFloat').value;
        elm.style["float"] = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmTop = panelStuff.querySelector('#inpElmTop');
      inpElmTop.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      var inpElmTopUnit = panelStuff.querySelector('#inpElmTopUnit');
      inpElmTop.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = inpElmTop.value;
        var unit = inpElmTopUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.top = val + unit;
        } else {
          elm.style.top = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      inpElmTopUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = inpElmTop.value;
        var unit = inpElmTopUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.top = val + unit;
        } else {
          elm.style.top = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmBottom = panelStuff.querySelector('#inpElmBottom');
      inpElmBottom.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      var inpElmBottomUnit = panelStuff.querySelector('#inpElmBottomUnit');
      inpElmBottom.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = inpElmBottom.value;
        var unit = inpElmBottomUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.bottom = val + unit;
        } else {
          elm.style.bottom = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      inpElmBottomUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = inpElmBottom.value;
        var unit = inpElmBottomUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.bottom = val + unit;
        } else {
          elm.style.bottom = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmLeft = panelStuff.querySelector('#inpElmLeft');
      inpElmLeft.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      var inpElmLeftUnit = panelStuff.querySelector('#inpElmLeftUnit');
      inpElmLeft.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = inpElmLeft.value;
        var unit = inpElmLeftUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.left = val + unit;
        } else {
          elm.style.left = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      inpElmLeftUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = inpElmLeft.value;
        var unit = inpElmLeftUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.left = val + unit;
        } else {
          elm.style.left = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmRight = panelStuff.querySelector('#inpElmRight');
      inpElmRight.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      var inpElmRightUnit = panelStuff.querySelector('#inpElmRightUnit');
      inpElmRight.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = inpElmRight.value;
        var unit = inpElmRightUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.right = val + unit;
        } else {
          elm.style.right = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      inpElmRightUnit.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = inpElmRight.value;
        var unit = inpElmRightUnit.value;

        if (!isNaN(val) && val !== '') {
          elm.style.right = val + unit;
        } else {
          elm.style.right = '';
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
    }

    _createClass$1(ElementPositionStyles, [{
      key: "readElementStyles",
      value: function readElementStyles(elm) {
        var panelStuff = this.panelStuff;
        var inpElmPosition = panelStuff.querySelector('#inpElmPosition');
        inpElmPosition.value = '';
        var s = elm.style.position;
        inpElmPosition.value = s;
        var inpElmFloat = panelStuff.querySelector('#inpElmFloat');
        inpElmFloat.value = '';
        s = elm.style["float"];
        inpElmFloat.value = s;
        var inpElmTop = panelStuff.querySelector('#inpElmTop');
        var inpElmTopUnit = panelStuff.querySelector('#inpElmTopUnit');
        inpElmTop.value = '';
        inpElmTopUnit.value = 'px';
        s = elm.style.top;
        var nTop = parseInt(s);

        if (!isNaN(nTop)) {
          if (s.indexOf('%') !== -1) inpElmTopUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmTopUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmTopUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmTopUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmTopUnit.value = 'em';
          inpElmTop.value = nTop;
        }

        var inpElmBottom = panelStuff.querySelector('#inpElmBottom');
        var inpElmBottomUnit = panelStuff.querySelector('#inpElmBottomUnit');
        inpElmBottom.value = '';
        inpElmBottomUnit.value = 'px';
        s = elm.style.bottom;
        var nBottom = parseInt(s);

        if (!isNaN(nBottom)) {
          if (s.indexOf('%') !== -1) inpElmBottomUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmBottomUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmBottomUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmBottomUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmBottomUnit.value = 'em';
          inpElmBottom.value = nBottom;
        }

        var inpElmLeft = panelStuff.querySelector('#inpElmLeft');
        var inpElmLeftUnit = panelStuff.querySelector('#inpElmLeftUnit');
        inpElmLeft.value = '';
        inpElmLeftUnit.value = 'px';
        s = elm.style.left;
        var nLeft = parseInt(s);

        if (!isNaN(nLeft)) {
          if (s.indexOf('%') !== -1) inpElmLeftUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmLeftUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmLeftUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmLeftUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmLeftUnit.value = 'em';
          inpElmLeft.value = nLeft;
        }

        var inpElmRight = panelStuff.querySelector('#inpElmRight');
        var inpElmRightUnit = panelStuff.querySelector('#inpElmRightUnit');
        inpElmRight.value = '';
        inpElmRightUnit.value = 'px';
        s = elm.style.right;
        var nRight = parseInt(s);

        if (!isNaN(nRight)) {
          if (s.indexOf('%') !== -1) inpElmRightUnit.value = '%';
          if (s.indexOf('px') !== -1) inpElmRightUnit.value = 'px';
          if (s.indexOf('vw') !== -1) inpElmRightUnit.value = 'vw';
          if (s.indexOf('vh') !== -1) inpElmRightUnit.value = 'vh';
          if (s.indexOf('em') !== -1) inpElmRightUnit.value = 'em';
          inpElmRight.value = nRight;
        }
      }
    }]);

    return ElementPositionStyles;
  }();

  var dom$a = new Dom();

  var ElementEffectStyles = /*#__PURE__*/function () {
    function ElementEffectStyles(builder) {
      var _this = this;

      _classCallCheck$1(this, ElementEffectStyles);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var elementStyleEditor = new ELementStyleEditor(builder);
      var panelStuff = builderStuff.querySelector('#divElementEffect');
      this.panelStuff = panelStuff;
      var html = "\n            <div style=\"margin-top:13px;font-weight:bold;\">".concat(util.out('Effects'), "</div>\n\n            <div class=\"is-settings clearfix\" style=\"width:100%;\">\n                <div>").concat(util.out('Opacity'), ":</div>\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmOpacity\" value=\"\" style=\"width:45px\"/>\n                </div>\n            </div>\n\n            <div style=\"margin-top:25px;font-weight:bold;width:100%;\">").concat(util.out('Filters'), "</div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Blur'), ":</div>\n                <div>\n                    <input type=\"text\" id=\"inpElmBlur\" value=\"\" style=\"width:45px\"/> &nbsp;px\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Brightness'), ":</div>\n                <div>\n                    <input type=\"text\" id=\"inpElmBrightness\" value=\"\" style=\"width:45px\"/>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Contrast'), ":</div>\n                <div>\n                    <input type=\"text\" id=\"inpElmContrast\" value=\"\" style=\"width:45px\"/> &nbsp;%\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Grayscale'), ":</div>\n                <div>\n                    <input type=\"text\" id=\"inpElmGrayscale\" value=\"\" style=\"width:45px\"/> &nbsp;%\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Hue Rotate'), ":</div>\n                <div>\n                    <input type=\"text\" id=\"inpElmHueRotate\" value=\"\" style=\"width:45px\"/> &nbsp;<span style=\"font-size:12px\">deg</span>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Invert'), ":</div>\n                <div>\n                    <input type=\"text\" id=\"inpElmInvert\" value=\"\" style=\"width:45px\"/> &nbsp;%\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Saturate'), ":</div>\n                <div>\n                    <input type=\"text\" id=\"inpElmSaturate\" value=\"\" style=\"width:45px\"/>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div>").concat(util.out('Sepia'), ":</div>\n                <div>\n                    <input type=\"text\" id=\"inpElmSepia\" value=\"\" style=\"width:45px\"/> &nbsp;%\n                </div>\n            </div>\n        ");
      dom$a.appendHtml(panelStuff, html);
      var inpElmOpacity = panelStuff.querySelector('#inpElmOpacity');
      inpElmOpacity.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmOpacity.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmOpacity').value;
        elm.style.opacity = val;
        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var i;
      var inpElmBlur = panelStuff.querySelector('#inpElmBlur');
      inpElmBlur.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmBlur.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBlur').value;
        var sFilter = elm.style.filter;
        sFilter = sFilter.replace('none', '');
        var arr = sFilter.split(' ');
        var exist = false;

        for (i = 0; i < arr.length; i++) {
          var s = arr[i];

          if (s.indexOf('blur') !== -1) {
            if (!isNaN(val) && val !== '') {
              arr[i] = 'blur(' + val + 'px)';
            } else {
              arr[i] = '';
            }

            exist = true;
          }
        }

        if (!exist) {
          sFilter = sFilter + ' blur(' + val + 'px)';
        } else {
          sFilter = '';

          for (i = 0; i < arr.length; i++) {
            sFilter += ' ' + arr[i];
          }
        }

        if (sFilter.trim() === '') {
          elm.style.filter = 'none';
        } else {
          elm.style.filter = sFilter;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmBrightness = panelStuff.querySelector('#inpElmBrightness');
      inpElmBrightness.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmBrightness.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmBrightness').value;
        var sFilter = elm.style.filter;
        sFilter = sFilter.replace('none', '');
        var arr = sFilter.split(' ');
        var exist = false;

        for (i = 0; i < arr.length; i++) {
          var s = arr[i];

          if (s.indexOf('brightness') !== -1) {
            if (!isNaN(val) && val !== '') {
              arr[i] = 'brightness(' + val + ')';
            } else {
              arr[i] = '';
            }

            exist = true;
          }
        }

        if (!exist) {
          sFilter = sFilter + ' brightness(' + val + ')';
        } else {
          sFilter = '';

          for (i = 0; i < arr.length; i++) {
            sFilter += ' ' + arr[i];
          }
        }

        if (sFilter.trim() === '') {
          elm.style.filter = 'none';
        } else {
          elm.style.filter = sFilter;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmContrast = panelStuff.querySelector('#inpElmContrast');
      inpElmContrast.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmContrast.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmContrast').value;
        var sFilter = elm.style.filter;
        sFilter = sFilter.replace('none', '');
        var arr = sFilter.split(' ');
        var exist = false;

        for (i = 0; i < arr.length; i++) {
          var s = arr[i];

          if (s.indexOf('contrast') !== -1) {
            if (!isNaN(val) && val !== '') {
              arr[i] = 'contrast(' + val + '%)';
            } else {
              arr[i] = '';
            }

            exist = true;
          }
        }

        if (!exist) {
          sFilter = sFilter + ' contrast(' + val + '%)';
        } else {
          sFilter = '';

          for (i = 0; i < arr.length; i++) {
            sFilter += ' ' + arr[i];
          }
        }

        if (sFilter.trim() === '') {
          elm.style.filter = 'none';
        } else {
          elm.style.filter = sFilter;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmGrayscale = panelStuff.querySelector('#inpElmGrayscale');
      inpElmGrayscale.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmGrayscale.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmGrayscale').value;
        var sFilter = elm.style.filter;
        sFilter = sFilter.replace('none', '');
        var arr = sFilter.split(' ');
        var exist = false;

        for (i = 0; i < arr.length; i++) {
          var s = arr[i];

          if (s.indexOf('grayscale') !== -1) {
            if (!isNaN(val) && val !== '') {
              arr[i] = 'grayscale(' + val + '%)';
            } else {
              arr[i] = '';
            }

            exist = true;
          }
        }

        if (!exist) {
          sFilter = sFilter + ' grayscale(' + val + '%)';
        } else {
          sFilter = '';

          for (i = 0; i < arr.length; i++) {
            sFilter += ' ' + arr[i];
          }
        }

        if (sFilter.trim() === '') {
          elm.style.filter = 'none';
        } else {
          elm.style.filter = sFilter;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmHueRotate = panelStuff.querySelector('#inpElmHueRotate');
      inpElmHueRotate.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmHueRotate.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmHueRotate').value;
        var sFilter = elm.style.filter;
        sFilter = sFilter.replace('none', '');
        var arr = sFilter.split(' ');
        var exist = false;

        for (i = 0; i < arr.length; i++) {
          var s = arr[i];

          if (s.indexOf('hue-rotate') !== -1) {
            if (!isNaN(val) && val !== '') {
              arr[i] = 'hue-rotate(' + val + 'deg)';
            } else {
              arr[i] = '';
            }

            exist = true;
          }
        }

        if (!exist) {
          sFilter = sFilter + ' hue-rotate(' + val + 'deg)';
        } else {
          sFilter = '';

          for (i = 0; i < arr.length; i++) {
            sFilter += ' ' + arr[i];
          }
        }

        if (sFilter.trim() === '') {
          elm.style.filter = 'none';
        } else {
          elm.style.filter = sFilter;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmInvert = panelStuff.querySelector('#inpElmInvert');
      inpElmInvert.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmInvert.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmInvert').value;
        var sFilter = elm.style.filter;
        sFilter = sFilter.replace('none', '');
        var arr = sFilter.split(' ');
        var exist = false;

        for (i = 0; i < arr.length; i++) {
          var s = arr[i];

          if (s.indexOf('invert') !== -1) {
            if (!isNaN(val) && val !== '') {
              arr[i] = 'invert(' + val + '%)';
            } else {
              arr[i] = '';
            }

            exist = true;
          }
        }

        if (!exist) {
          sFilter = sFilter + ' invert(' + val + '%)';
        } else {
          sFilter = '';

          for (i = 0; i < arr.length; i++) {
            sFilter += ' ' + arr[i];
          }
        }

        if (sFilter.trim() === '') {
          elm.style.filter = 'none';
        } else {
          elm.style.filter = sFilter;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmSaturate = panelStuff.querySelector('#inpElmSaturate');
      inpElmSaturate.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmSaturate.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmSaturate').value;
        var sFilter = elm.style.filter;
        sFilter = sFilter.replace('none', '');
        var arr = sFilter.split(' ');
        var exist = false;

        for (i = 0; i < arr.length; i++) {
          var s = arr[i];

          if (s.indexOf('saturate') !== -1) {
            if (!isNaN(val) && val !== '') {
              arr[i] = 'saturate(' + val + ')';
            } else {
              arr[i] = '';
            }

            exist = true;
          }
        }

        if (!exist) {
          sFilter = sFilter + ' saturate(' + val + ')';
        } else {
          sFilter = '';

          for (i = 0; i < arr.length; i++) {
            sFilter += ' ' + arr[i];
          }
        }

        if (sFilter.trim() === '') {
          elm.style.filter = 'none';
        } else {
          elm.style.filter = sFilter;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
      var inpElmSepia = panelStuff.querySelector('#inpElmSepia');
      inpElmSepia.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();
      });
      inpElmSepia.addEventListener('keyup', function () {
        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#inpElmSepia').value;
        var sFilter = elm.style.filter;
        sFilter = sFilter.replace('none', '');
        var arr = sFilter.split(' ');
        var exist = false;

        for (i = 0; i < arr.length; i++) {
          var s = arr[i];

          if (s.indexOf('sepia') !== -1) {
            if (!isNaN(val) && val !== '') {
              arr[i] = 'sepia(' + val + '%)';
            } else {
              arr[i] = '';
            }

            exist = true;
          }
        }

        if (!exist) {
          sFilter = sFilter + ' sepia(' + val + '%)';
        } else {
          sFilter = '';

          for (i = 0; i < arr.length; i++) {
            sFilter += ' ' + arr[i];
          }
        }

        if (sFilter.trim() === '') {
          elm.style.filter = 'none';
        } else {
          elm.style.filter = sFilter;
        }

        elementStyleEditor.refresh(); //Trigger Change event

        _this.builder.opts.onChange();
      });
    }

    _createClass$1(ElementEffectStyles, [{
      key: "readElementStyles",
      value: function readElementStyles(elm) {
        var panelStuff = this.panelStuff;
        var inpElmOpacity = panelStuff.querySelector('#inpElmOpacity');
        inpElmOpacity.value = '';
        var s = elm.style.opacity;
        if (s) inpElmOpacity.value = s; //filter

        var sFilter = elm.style.filter; // brightness(2) blur(1px) contrast(100%)'

        var arr = sFilter.split(' ');
        var inpElmBlur = panelStuff.querySelector('#inpElmBlur');
        inpElmBlur.value = '';
        var inpElmBrightness = panelStuff.querySelector('#inpElmBrightness');
        inpElmBrightness.value = '';
        var inpElmGrayscale = panelStuff.querySelector('#inpElmGrayscale');
        inpElmGrayscale.value = '';
        var inpElmContrast = panelStuff.querySelector('#inpElmContrast');
        inpElmContrast.value = '';
        var inpElmHueRotate = panelStuff.querySelector('#inpElmHueRotate');
        inpElmHueRotate.value = '';
        var inpElmInvert = panelStuff.querySelector('#inpElmInvert');
        inpElmInvert.value = '';
        var inpElmSaturate = panelStuff.querySelector('#inpElmSaturate');
        inpElmSaturate.value = '';
        var inpElmSepia = panelStuff.querySelector('#inpElmSepia');
        inpElmSepia.value = '';
        var val;

        for (var i = 0; i < arr.length; i++) {
          s = arr[i];

          if (s.indexOf('blur') !== -1) {
            //blur exists
            val = s.replace('blur(', '').replace(')', '');
            val = parseInt(val);
            inpElmBlur.value = val;
          }

          if (s.indexOf('brightness') !== -1) {
            //brightness exists
            val = s.replace('brightness(', '').replace(')', '');
            val = parseInt(val);
            inpElmBrightness.value = val;
          }

          if (s.indexOf('grayscale') !== -1) {
            //grayscale exists
            val = s.replace('grayscale(', '').replace(')', '');
            val = parseInt(val);
            inpElmGrayscale.value = val;
          }

          if (s.indexOf('contrast') !== -1) {
            //contrast exists
            val = s.replace('contrast(', '').replace(')', '');
            val = parseInt(val);
            inpElmContrast.value = val;
          }

          if (s.indexOf('hue-rotate') !== -1) {
            //hue-rotate exists
            val = s.replace('hue-rotate(', '').replace(')', '');
            val = parseInt(val);
            inpElmHueRotate.value = val;
          }

          if (s.indexOf('invert') !== -1) {
            //invert exists
            val = s.replace('invert(', '').replace(')', '');
            val = parseInt(val);
            inpElmInvert.value = val;
          }

          if (s.indexOf('saturate') !== -1) {
            //saturate exists
            val = s.replace('saturate(', '').replace(')', '');
            val = parseInt(val);
            inpElmSaturate.value = val;
          }

          if (s.indexOf('sepia') !== -1) {
            //sepia exists
            val = s.replace('sepia(', '').replace(')', '');
            val = parseInt(val);
            inpElmSepia.value = val;
          }
        }
      }
    }]);

    return ElementEffectStyles;
  }();

  var dom$9 = new Dom();

  var ElementAttributeStyles = /*#__PURE__*/function () {
    function ElementAttributeStyles(builder) {
      var _this = this;

      _classCallCheck$1(this, ElementAttributeStyles);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var panelStuff = builderStuff.querySelector('#divElementAttribute');
      this.panelStuff = panelStuff;
      var html = "\n            <div style=\"margin-top:13px;font-weight:bold;width:100%;\">".concat(util.out('Attributes'), "</div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div style=\"width:100%\">").concat(util.out('Names'), ":</div>\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmAttr1\" value=\"\" style=\"width:90%\"/>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div style=\"width:100%\">").concat(util.out('Values'), ":</div>\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmAttrVal1\" value=\"\" style=\"width:90%\"/>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmAttr2\" value=\"\" style=\"width:90%\"/>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmAttrVal2\" value=\"\" style=\"width:90%\"/>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmAttr3\" value=\"\" style=\"width:90%\"/>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmAttrVal3\" value=\"\" style=\"width:90%\"/>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmAttr4\" value=\"\" style=\"width:90%\"/>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmAttrVal4\" value=\"\" style=\"width:90%\"/>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;\">\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmAttr5\" value=\"\" style=\"width:90%\"/>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:120px;float:left;\">\n                <div style=\"display:flex\">\n                    <input type=\"text\" id=\"inpElmAttrVal5\" value=\"\" style=\"width:90%\"/>\n                </div>\n            </div>\n        ");
      dom$9.appendHtml(panelStuff, html);
      var inps = panelStuff.querySelectorAll('#inpElmAttr1,#inpElmAttr2,#inpElmAttr3,#inpElmAttr4,#inpElmAttr5,#inpElmAttrVal1,#inpElmAttrVal2,#inpElmAttrVal3,#inpElmAttrVal4,#inpElmAttrVal5');
      Array.prototype.forEach.call(inps, function (inp) {
        inp.addEventListener('click', function () {
          _this.builder.uo.saveForUndo();
        });
        inp.addEventListener('keyup', function () {
          var elm = _this.builder.inspectedElement;

          _this.updateAttributes(elm); //Trigger Change event


          _this.builder.opts.onChange();
        });
      });
    }

    _createClass$1(ElementAttributeStyles, [{
      key: "updateAttributes",
      value: function updateAttributes(elm) {
        // Remove all attributes
        var attrs = {};
        Array.prototype.forEach.call(elm.attributes, function (attribute) {
          attrs[attribute.name] = attribute.value;
        });

        for (var k in attrs) {
          if (Object.prototype.hasOwnProperty.call(attrs, k)) {
            if (k !== 'id' && k !== 'style' && k !== 'class' && k !== 'href' && k !== 'src' && k !== 'contenteditable' && k !== 'data-filename') {
              elm.removeAttribute(k);
            }
          }
        } // Update


        var panelStuff = this.panelStuff;
        var attrname, val;
        attrname = panelStuff.querySelector('#inpElmAttr1').value;
        val = panelStuff.querySelector('#inpElmAttrVal1').value;
        if (attrname !== '') elm.setAttribute(attrname, val);
        attrname = panelStuff.querySelector('#inpElmAttr2').value;
        val = panelStuff.querySelector('#inpElmAttrVal2').value;
        if (attrname !== '') elm.setAttribute(attrname, val);
        attrname = panelStuff.querySelector('#inpElmAttr3').value;
        val = panelStuff.querySelector('#inpElmAttrVal3').value;
        if (attrname !== '') elm.setAttribute(attrname, val);
        attrname = panelStuff.querySelector('#inpElmAttr4').value;
        val = panelStuff.querySelector('#inpElmAttrVal4').value;
        if (attrname !== '') elm.setAttribute(attrname, val);
        attrname = panelStuff.querySelector('#inpElmAttr5').value;
        val = panelStuff.querySelector('#inpElmAttrVal5').value;
        if (attrname !== '') elm.setAttribute(attrname, val);
      }
    }, {
      key: "readElementStyles",
      value: function readElementStyles(elm) {
        var panelStuff = this.panelStuff;
        var inps = panelStuff.querySelectorAll('#inpElmAttr1,#inpElmAttr2,#inpElmAttr3,#inpElmAttr4,#inpElmAttr5,#inpElmAttrVal1,#inpElmAttrVal2,#inpElmAttrVal3,#inpElmAttrVal4,#inpElmAttrVal5');
        Array.prototype.forEach.call(inps, function (inp) {
          inp.value = '';
        });
        var indx = 1;
        Array.prototype.forEach.call(elm.attributes, function (attribute) {
          if (attribute.name !== 'id' && attribute.name !== 'style' && attribute.name !== 'class' && attribute.name !== 'href' && attribute.name !== 'src' && attribute.name !== 'contenteditable' && attribute.name !== 'data-filename' && attribute.name !== 'data-saveforundo') {
            panelStuff.querySelector('#inpElmAttr' + indx).value = attribute.name;
            panelStuff.querySelector('#inpElmAttrVal' + indx).value = attribute.value;
            indx = indx + 1;
          }
        });
      }
    }]);

    return ElementAttributeStyles;
  }();

  var dom$8 = new Dom();

  var ElementAnimationStyles = /*#__PURE__*/function () {
    function ElementAnimationStyles(builder) {
      var _this = this;

      _classCallCheck$1(this, ElementAnimationStyles);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var panelStuff = builderStuff.querySelector('#divElementAnimation');
      this.panelStuff = panelStuff;
      var html = "\n            <div style=\"margin-top:13px;font-weight:bold;\">".concat(util.out('Animate'), "</div>\n\n            <div class=\"is-settings clearfix\" style=\"width:100%;\">\n                <div style=\"display:flex\">\n                    <select id=\"selElmAnim\">\n                        <option value=\"\"></option>\n                        <option value=\"fade\">fade</option>\n                        <option value=\"fade-up\">fade-up</option>\n                        <option value=\"fade-down\">fade-down</option>\n                        <option value=\"fade-left\">fade-left</option>\n                        <option value=\"fade-right\">fade-right</option>\n                        <option value=\"fade-up-right\">fade-up-right</option>\n                        <option value=\"fade-up-left\">fade-up-left</option>\n                        <option value=\"fade-down-right\">fade-down-right</option>\n                        <option value=\"fade-down-left\">fade-down-left</option>\n                        <option value=\"flip-up\">flip-up</option>\n                        <option value=\"flip-down\">flip-down</option>\n                        <option value=\"flip-left\">flip-left</option>\n                        <option value=\"flip-right\">flip-right</option>\n                        <option value=\"slide-up\">slide-up</option>\n                        <option value=\"slide-down\">slide-down</option>\n                        <option value=\"slide-left\">slide-left</option>\n                        <option value=\"slide-right\">slide-right</option>\n                        <option value=\"zoom-in\">zoom-in</option>\n                        <option value=\"zoom-in-up\">zoom-in-up</option>\n                        <option value=\"zoom-in-down\">zoom-in-down</option>\n                        <option value=\"zoom-in-left\">zoom-in-left</option>\n                        <option value=\"zoom-in-right\">zoom-in-right</option>\n                        <option value=\"zoom-out\">zoom-out</option>\n                        <option value=\"zoom-out-up\">zoom-out-up</option>\n                        <option value=\"zoom-out-down\">zoom-out-down</option>\n                        <option value=\"zoom-out-left\">zoom-out-left</option>\n                        <option value=\"zoom-out-right\">zoom-out-right</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div> ").concat(util.out('Delay'), ":</div>\n                <div>\n                    <select id=\"selElmAnimDelay\">\n                        <option value=\"\"></option>\n                        <option value=\"0\">0</option>\n                        <option value=\"100\">100</option>\n                        <option value=\"200\">200</option>\n                        <option value=\"300\">300</option>\n                        <option value=\"400\">400</option>\n                        <option value=\"500\">500</option>\n                        <option value=\"600\">600</option>\n                        <option value=\"700\">700</option>\n                        <option value=\"800\">800</option>\n                        <option value=\"900\">900</option>\n                        <option value=\"1000\">1000</option>\n                        <option value=\"1100\">1100</option>\n                        <option value=\"1200\">1200</option>\n                        <option value=\"1300\">1300</option>\n                        <option value=\"1400\">1400</option>\n                        <option value=\"1500\">1500</option>\n                        <option value=\"1600\">1600</option>\n                        <option value=\"1700\">1700</option>\n                        <option value=\"1800\">1800</option>\n                        <option value=\"1900\">1900</option>\n                        <option value=\"2000\">2000</option>\n                        <option value=\"2100\">2100</option>\n                        <option value=\"2200\">2200</option>\n                        <option value=\"2300\">2300</option>\n                        <option value=\"2400\">2400</option>\n                        <option value=\"2500\">2500</option>\n                        <option value=\"2600\">2600</option>\n                        <option value=\"2700\">2700</option>\n                        <option value=\"2800\">2800</option>\n                        <option value=\"2900\">2900</option>\n                        <option value=\"3000\">3000</option>\n                    </select> &nbsp;ms\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:110px;\">\n                <div> ").concat(util.out('Duration'), ":</div>\n                <div>\n                    <select id=\"selElmAnimDuration\">\n                        <option value=\"\"></option>\n                        <option value=\"0\">0</option>\n                        <option value=\"100\">100</option>\n                        <option value=\"200\">200</option>\n                        <option value=\"300\">300</option>\n                        <option value=\"400\">400</option>\n                        <option value=\"500\">500</option>\n                        <option value=\"600\">600</option>\n                        <option value=\"700\">700</option>\n                        <option value=\"800\">800</option>\n                        <option value=\"900\">900</option>\n                        <option value=\"1000\">1000</option>\n                        <option value=\"1100\">1100</option>\n                        <option value=\"1200\">1200</option>\n                        <option value=\"1300\">1300</option>\n                        <option value=\"1400\">1400</option>\n                        <option value=\"1500\">1500</option>\n                        <option value=\"1600\">1600</option>\n                        <option value=\"1700\">1700</option>\n                        <option value=\"1800\">1800</option>\n                        <option value=\"1900\">1900</option>\n                        <option value=\"2000\">2000</option>\n                        <option value=\"2100\">2100</option>\n                        <option value=\"2200\">2200</option>\n                        <option value=\"2300\">2300</option>\n                        <option value=\"2400\">2400</option>\n                        <option value=\"2500\">2500</option>\n                        <option value=\"2600\">2600</option>\n                        <option value=\"2700\">2700</option>\n                        <option value=\"2800\">2800</option>\n                        <option value=\"2900\">2900</option>\n                        <option value=\"3000\">3000</option>\n                    </select> &nbsp;ms\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:100%;\">\n                <div style=\"margin-top:15px\">\n                    <label for=\"chkAnimateOnce\"><input type=\"checkbox\" id=\"chkAnimateOnce\" value=\"\"> ").concat(util.out('Animate Once'), " </label>\n                </div>\n            </div>\n\n            <div class=\"is-settings clearfix\" style=\"width:100%;\">\n                <div style=\"display:flex\">\n                    <button title=\"").concat(util.out('Test'), "\" id=\"btnPreviewAnim\" class=\"classic\" value=\"\"> ").concat(util.out('TEST'), " </button>\n                </div>\n            </div>\n        ");
      dom$8.appendHtml(panelStuff, html);
      var inp = panelStuff.querySelector('#selElmAnim');
      inp.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#selElmAnim').value;

        if (val === '') {
          elm.removeAttribute('data-aos');
        } else {
          elm.setAttribute('data-aos', val);
          panelStuff.querySelector('#btnPreviewAnim').click();
        } //Trigger Change event


        _this.builder.opts.onChange();
      });
      inp = panelStuff.querySelector('#selElmAnimDelay');
      inp.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#selElmAnimDelay').value;

        if (val === '') {
          elm.removeAttribute('data-aos-delay');
        } else {
          elm.setAttribute('data-aos-delay', val);
        } //Trigger Change event


        _this.builder.opts.onChange();
      });
      inp = panelStuff.querySelector('#selElmAnimDuration');
      inp.addEventListener('change', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;
        var val = panelStuff.querySelector('#selElmAnimDuration').value;

        if (val === '') {
          elm.removeAttribute('data-aos-duration');
        } else {
          elm.setAttribute('data-aos-duration', val);
        } //Trigger Change event


        _this.builder.opts.onChange();
      });
      var btn = panelStuff.querySelector('#chkAnimateOnce');
      btn.addEventListener('click', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.inspectedElement;

        if (panelStuff.querySelector('#chkAnimateOnce').checked) {
          elm.setAttribute('data-aos-once', 'true');
        } else {
          elm.removeAttribute('data-aos-once');
        } //Trigger Change event


        _this.builder.opts.onChange();
      });
      btn = panelStuff.querySelector('#btnPreviewAnim');
      btn.addEventListener('click', function () {
        var elm = _this.builder.inspectedElement;
        var animduration = elm.getAttribute('data-aos-duration');
        elm.removeAttribute('data-aos-duration'); //can cause preview problem

        elm.style.visibility = 'hidden';
        if (window.AOS) window.AOS.init({
          duration: 1
        });
        dom$8.removeClass(elm, 'aos-init');
        dom$8.removeClass(elm, 'aos-animate');
        setTimeout(function () {
          elm.style.visibility = '';
          if (window.AOS) window.AOS.init({
            duration: 1200
          });

          if (animduration) {
            elm.setAttribute('data-aos-duration', animduration);
          }
        }, 10);
      });
    }

    _createClass$1(ElementAnimationStyles, [{
      key: "readElementStyles",
      value: function readElementStyles(elm) {
        this.panelStuff.querySelector('#selElmAnimDelay').value = '';
        var animname = elm.getAttribute('data-aos-delay');
        this.panelStuff.querySelector('#selElmAnimDelay').value = animname;
        this.panelStuff.querySelector('#selElmAnimDuration').value = '';
        animname = elm.getAttribute('data-aos-duration');
        this.panelStuff.querySelector('#selElmAnimDuration').value = animname;
        this.panelStuff.querySelector('#chkAnimateOnce').checked = false;
        var animateonce = elm.getAttribute('data-aos-once');

        if (animateonce) {
          if (animateonce === 'true') {
            this.panelStuff.querySelector('#chkAnimateOnce').checked = true;
          }
        }

        this.panelStuff.querySelector('#selElmAnim').value = '';
        animname = elm.getAttribute('data-aos');
        this.panelStuff.querySelector('#selElmAnim').value = animname;
      }
    }]);

    return ElementAnimationStyles;
  }();

  var dom$7 = new Dom();
  var arrElms = [];

  var ElementPanel = /*#__PURE__*/function () {
    function ElementPanel(builder) {
      var _this = this;

      _classCallCheck$1(this, ElementPanel);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var panel = builderStuff.querySelector('.elementstyles');

      if (!panel) {
        var html = "\n            <div class=\"is-side".concat(this.builder.opts.sidePanel === 'right' ? '' : ' fromleft', " elementstyles\">\n                    <div class=\"elm-list\" style=\"z-index:1;width:100%;height:100px;position:absolute;top:0px;left:0px;box-sizing:border-box;display:flex;align-items:center;flex-wrap: wrap;padding:10px 23px 10px 18px;border-bottom:#e8e8e8 1px solid;font-size:9px;\"></div>\n                    \n                    <button title=\"").concat(util.out('Close'), "\" class=\"is-side-close\" style=\"z-index:1;width:25px;height:25px;position:absolute;top:10px;right:13px;box-sizing:border-box;padding:0;line-height:25px;font-size: 12px;text-align:center;cursor:pointer;\"><svg class=\"is-icon-flex\" style=\"width:25px;height:25px;\"><use xlink:href=\"#ion-ios-close-empty\"></use></svg></button>\n                    \n                    <div style=\"position: absolute;bottom:7px;right:7px;width:40px;height:25px;z-index:1;display:flex\">\n                        <button title=\"").concat(util.out('css'), "\" class=\"elm-editstyle classic\" style=\"width: 40px;height: 25px;font-family: sans-serif;font-size: 10px;padding: 0px;font-weight: bold;\">").concat(util.out('css'), "</button>\n                    </div>\n                        \n                    <div style=\"width:100%;height:100%;overflow-y:auto;overflow-x:hidden;position:absolute;top:0px;left:0px;box-sizing:border-box;border-top:100px solid transparent;padding:0px;\">\n                            \n                        <div class=\"is-tabs clearfix\" data-group=\"element\" style=\"padding-right:0;padding-bottom:0;\">\n                            <a title=\"").concat(util.out('Box'), "\" id=\"tabElementBox\" href=\"\" data-content=\"divElementBox\" class=\"active\">").concat(util.out('Box'), "</a>\n                            <a title=\"").concat(util.out('Spacing'), "\" id=\"tabElementSpacing\" href=\"\" data-content=\"divElementSpacing\">").concat(util.out('Spacing'), "</a>\n                            <a title=\"").concat(util.out('Border'), "\" id=\"tabElementBorder\" href=\"\" data-content=\"divElementBorder\">").concat(util.out('Border'), "</a>\n                            <a title=\"").concat(util.out('Text'), "\" id=\"tabElementText\" href=\"\" data-content=\"divElementText\">").concat(util.out('Text'), "</a>\n                            <a title=\"").concat(util.out('More'), "\" id=\"tabElementMore\" data-menu=\"divElementMore\" href=\"\"><svg class=\"is-icon-flex\" style=\"width:15px;height:15px;\"><use xlink:href=\"#ion-more\"></use></svg></a>\n                        </div>\n                        \n                        <div id=\"divElementMore\" class=\"is-tabs-more\" data-group=\"element\">\n                            <a title=\"").concat(util.out('Corners'), "\" id=\"tabElementCorner\" href=\"\" data-content=\"divElementCorner\">").concat(util.out('Corners'), "</a>\n                            <a title=\"").concat(util.out('Shadow'), "\" id=\"tabElementShadow\" href=\"\" data-content=\"divElementShadow\">").concat(util.out('Shadow'), "</a>\n                            <a title=\"").concat(util.out('Display'), "\" id=\"tabElementDisplay\" href=\"\" data-content=\"divElementDisplay\">").concat(util.out('Display'), "</a>\n                            <a title=\"").concat(util.out('Position'), "\" id=\"tabElementPosition\" href=\"\" data-content=\"divElementPosition\">").concat(util.out('Position'), "</a>\n                            <a title=\"").concat(util.out('Effects'), "\" id=\"tabElementEffect\" href=\"\" data-content=\"divElementEffect\">").concat(util.out('Effects'), "</a>\n                            <a title=\"").concat(util.out('Attributes'), "\" id=\"tabElementAttribute\" href=\"\" data-content=\"divElementAttribute\">").concat(util.out('Attributes'), "</a>\n                            ").concat(this.builder.opts.elementAnimate === true ? "<a title=\"".concat(util.out('Animation'), "\" id=\"tabElementAnimation\" href=\"\" data-content=\"divElementAnimation\">").concat(util.out('Animation'), "</a>") : '', "\n                        </div>\n\n                        <div id=\"divElementBox\" class=\"is-tab-content\" data-group=\"element\" style=\"display:flex;flex-flow:wrap;padding:12px 17px;\">\n                        </div>\n\n                        <div id=\"divElementSpacing\" class=\"is-tab-content\" data-group=\"element\" style=\"display:none;flex-flow:wrap;padding:12px 17px;\">\n                        </div>\n\n                        <div id=\"divElementBorder\" class=\"is-tab-content\" data-group=\"element\" style=\"display:none;flex-flow:wrap;padding:12px 17px;\">\n                        </div>\n\n                        <div id=\"divElementText\" class=\"is-tab-content\" data-group=\"element\" style=\"display:none;flex-flow:wrap;padding:12px 17px;\">\n                        </div>\n\n                        <div id=\"divElementCorner\" class=\"is-tab-content\" data-group=\"element\" style=\"display:none;flex-flow:wrap;padding:12px 17px;\">\n                        </div>\n\n                        <div id=\"divElementShadow\" class=\"is-tab-content\" data-group=\"element\" style=\"display:none;flex-flow:wrap;padding:12px 17px;\">\n                        </div>\n                        \n                        <div id=\"divElementDisplay\" class=\"is-tab-content\" data-group=\"element\" style=\"display:none;flex-flow:wrap;padding:12px 17px;\">\n                        </div>\n                        \n                        <div id=\"divElementPosition\" class=\"is-tab-content\" data-group=\"element\" style=\"display:none;flex-flow:wrap;padding:12px 17px;\">\n                        </div>\n                        \n                        <div id=\"divElementEffect\" class=\"is-tab-content\" data-group=\"element\" style=\"display:none;flex-flow:wrap;padding:12px 17px;\">\n                        </div>\n                        \n                        <div id=\"divElementAttribute\" class=\"is-tab-content\" data-group=\"element\" style=\"display:none;flex-flow:wrap;padding:12px 17px;\">\n                        </div>\n                        \n                        <div id=\"divElementAnimation\" class=\"is-tab-content\" data-group=\"element\" style=\"display:none;flex-flow:wrap;padding:12px 17px;\">\n                        </div>\n\n                    </div>\n            </div>              \n            ");
        dom$7.appendHtml(builderStuff, html);
        this.elementStyleEditor = new ELementStyleEditor(builder);
        panel = builderStuff.querySelector('.elementstyles');
        var btn = panel.querySelector('.is-side-close');
        dom$7.addEventListener(btn, 'click', function () {
          _this.hidePanel();
        });
        btn = panel.querySelector('.elm-editstyle');
        dom$7.addEventListener(btn, 'click', function () {
          _this.elementStyleEditor.toggleStyleEditor();
        });
      }

      this.panel = panel;
      var elementBoxStyles = new ElementBoxStyles(builder);
      this.elementBoxStyles = elementBoxStyles;
      var elementSpacingStyles = new ElementSpacingStyles(builder);
      this.elementSpacingStyles = elementSpacingStyles;
      var elementBorderStyles = new ElementBorderStyles(builder);
      this.elementBorderStyles = elementBorderStyles;
      var elementTextStyles = new ElementTextStyles(builder);
      this.elementTextStyles = elementTextStyles;
      var elementCornerStyles = new ElementCornerStyles(builder);
      this.elementCornerStyles = elementCornerStyles;
      var elementShadowStyles = new ElementShadowStyles(builder);
      this.elementShadowStyles = elementShadowStyles;
      var elementDisplayStyles = new ElementDisplayStyles(builder);
      this.elementDisplayStyles = elementDisplayStyles;
      var elementPositionStyles = new ElementPositionStyles(builder);
      this.elementPositionStyles = elementPositionStyles;
      var elementEffectStyles = new ElementEffectStyles(builder);
      this.elementEffectStyles = elementEffectStyles;
      var elementAttributeStyles = new ElementAttributeStyles(builder);
      this.elementAttributeStyles = elementAttributeStyles;
      var elementAnimationStyles = new ElementAnimationStyles(builder);
      this.elementAnimationStyles = elementAnimationStyles;
    }

    _createClass$1(ElementPanel, [{
      key: "click",
      value: function click() {
        if (dom$7.hasClass(this.panel, 'active') || dom$7.hasClass(this.elementStyleEditor.modalStyles, 'active')) {
          this.inspect(this.builder.inspectedElement);
        }
      }
    }, {
      key: "inspect",
      value: function inspect(elm) {
        var _this2 = this;

        this.elementBoxStyles.readElementStyles(elm);
        this.elementSpacingStyles.readElementStyles(elm);
        this.elementBorderStyles.readElementStyles(elm);
        this.elementTextStyles.readElementStyles(elm);
        this.elementCornerStyles.readElementStyles(elm);
        this.elementShadowStyles.readElementStyles(elm);
        this.elementDisplayStyles.readElementStyles(elm);
        this.elementPositionStyles.readElementStyles(elm);
        this.elementEffectStyles.readElementStyles(elm);
        this.elementAttributeStyles.readElementStyles(elm);
        this.elementAnimationStyles.readElementStyles(elm);
        var panel = this.panel;
        var elms = document.querySelectorAll('[data-saveforundo]');
        Array.prototype.forEach.call(elms, function (elm) {
          elm.removeAttribute('data-saveforundo');
        });
        elm.setAttribute('data-saveforundo', '');
        elms = document.querySelectorAll('.elm-inspected');
        Array.prototype.forEach.call(elms, function (elm) {
          dom$7.removeClass(elm, 'elm-inspected');
        });
        setTimeout(function () {
          dom$7.addClass(elm, 'elm-inspected');
        }, 10);
        panel.querySelector('.elm-list').innerHTML = '';
        var element = elm;
        var i = 0;
        arrElms = [];

        while (!dom$7.hasClass(element, 'is-builder')) {
          arrElms.push(element);

          if (!element) {
            // This should not happen. But on quick user click (ex. undo then redo quickly), an element can lost, so checking is needed
            break;
          }

          if (!element.tagName) {
            break;
          }

          var tagName = element.tagName.toLowerCase();
          var a = dom$7.createElement('a');
          a.setAttribute('data-index', i);
          i++;
          a.setAttribute('href', '#');
          a.innerHTML = tagName;

          if (panel.querySelector('.elm-list').innerHTML === '') {
            dom$7.addClass(a, 'active');
            panel.querySelector('.elm-list').insertAdjacentHTML('afterbegin', a.outerHTML);
          } else {
            panel.querySelector('.elm-list').insertAdjacentHTML('afterbegin', '&nbsp;>&nbsp; ');
            panel.querySelector('.elm-list').insertAdjacentHTML('afterbegin', a.outerHTML);
          }

          element = element.parentNode;
        }

        var links = panel.querySelectorAll('.elm-list a');
        Array.prototype.forEach.call(links, function (link) {
          dom$7.addEventListener(link, 'click', function (e) {
            var index = link.getAttribute('data-index');
            _this2.builder.inspectedElement = arrElms[index];

            _this2.inspect(arrElms[index]);

            if (!document.querySelector('.elm-inspected.elm-active')) {
              // hide element tool if inspected element is not active element
              _this2.builderStuff.querySelector('.is-element-tool').style.display = 'none';
            }

            e.preventDefault();
            e.stopImmediatePropagation(); // a must
          });
        });
        this.elementStyleEditor.refresh();
      }
    }, {
      key: "showPanel",
      value: function showPanel() {
        var panel = this.builderStuff.querySelector('.is-side.elementstyles');
        var panels = this.builderStuff.querySelectorAll('.is-side');
        Array.prototype.forEach.call(panels, function (panel) {
          dom$7.removeClass(panel, 'active');
        });
        dom$7.addClass(panel, 'active');
        this.inspect(this.builder.inspectedElement);
      }
    }, {
      key: "hidePanel",
      value: function hidePanel() {
        var panel = this.builderStuff.querySelector('.is-side.elementstyles');
        dom$7.removeClass(panel, 'active');
        var elms = document.querySelectorAll('[data-saveforundo]');
        Array.prototype.forEach.call(elms, function (elm) {
          elm.removeAttribute('data-saveforundo');
        });
        elms = document.querySelectorAll('.elm-inspected');
        Array.prototype.forEach.call(elms, function (elm) {
          dom$7.removeClass(elm, 'elm-inspected');
        });
      }
    }]);

    return ElementPanel;
  }();

  var dom$6 = new Dom();
  var ElementTool = /*#__PURE__*/function () {
    function ElementTool(builder) {
      var _this = this;

      _classCallCheck$1(this, ElementTool);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var elementPanel = new ElementPanel(builder);
      this.elementPanel = elementPanel;
      var builderstuff = util.builderStuff();
      var elementTool = builderstuff.querySelector('.is-element-tool');
      var elementMore;

      if (!elementTool) {
        var html = "<div class=\"is-tool is-element-tool\">\n                <button type=\"button\" title=\"".concat(util.out('Add'), "\" class=\"elm-add\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-ios-plus-empty\"></use></svg></button>\n                <button type=\"button\" title=\"").concat(util.out('More'), "\" class=\"elm-more\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-more\"></use></svg></button>\n                <button type=\"button\" title=\"").concat(util.out('Delete'), "\" class=\"elm-remove\"><svg class=\"is-icon-flex\" style=\"margin-left:-1px\"><use xlink:href=\"#ion-ios-close-empty\"></use></svg></button>\n                <button type=\"button\" title=\"").concat(util.out('Settings'), "\" class=\"elm-settings\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-ios-gear\"></use></svg></button>\n            </div>\n            <div class=\"is-pop elmmore\" style=\"z-index:10002;\">\n                <div style=\"display:flex;flex-flow:wrap;\">\n                    <button type=\"button\" title=\"").concat(util.out('Move Up'), "\" class=\"elm-up\"><span><svg class=\"is-icon-flex\" style=\"width:15px;height:15px;\"><use xlink:href=\"#ion-ios-arrow-thin-up\"></use></svg></span>").concat(util.out('Move Up'), "</button>\n                    <button type=\"button\" title=\"").concat(util.out('Move Down'), "\" class=\"elm-down\"><span><svg class=\"is-icon-flex\" style=\"width:15px;height:15px;\"><use xlink:href=\"#ion-ios-arrow-thin-down\"></use></svg></span>").concat(util.out('Move Down'), "</button>\n                    <button type=\"button\" title=\"").concat(util.out('Duplicate'), "\" class=\"elm-duplicate\"><span><svg class=\"is-icon-flex\" style=\"width:12px;height:12px;\"><use xlink:href=\"#ion-ios-photos-outline\"></use></svg></span>").concat(util.out('Duplicate'), "</button>\n                    ").concat(this.builder.opts.elementEditor ? "\n                    <button type=\"button\" title=\"".concat(util.out('Settings'), "\" class=\"elm-settings\"><span><svg class=\"is-icon-flex\" style=\"width:12px;height:12px;\"><use xlink:href=\"#ion-ios-gear\"></use></svg></span>").concat(util.out('Settings'), "</button>\n                    ") : '', " \n                </div>\n            </div>\n            ");
        dom$6.appendHtml(builderstuff, html);
        elementTool = builderstuff.querySelector('.is-element-tool');
        elementMore = builderstuff.querySelector('.elmmore'); // Prepare for tooltip

        var elms = elementTool.querySelectorAll('[title]');
        Array.prototype.forEach.call(elms, function (elm) {
          elm.setAttribute('data-title', elm.getAttribute('title'));
        });
      }

      this.elementTool = elementTool;
      this.elementMore = elementMore;
      var quickadd = renderQuickAdd(builder); // Add element

      var elmAdd = elementTool.querySelector('.elm-add');
      dom$6.addEventListener(elmAdd, 'click', function () {
        var tabs = quickadd.querySelector('.is-pop-tabs');
        tabs.style.display = 'none';
        var viewportHeight = window.innerHeight;
        var top = elmAdd.getBoundingClientRect().top;
        var left = elmAdd.getBoundingClientRect().left;
        quickadd.style.display = 'flex';
        var w = quickadd.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

        var h = quickadd.offsetHeight;

        if (viewportHeight - top > h) {
          quickadd.style.top = top + window.pageYOffset + 27 + 'px';
          quickadd.style.left = left - w / 2 + 10 + 'px';
          dom$6.removeClass(quickadd, 'arrow-bottom');
          dom$6.removeClass(quickadd, 'arrow-right');
          dom$6.removeClass(quickadd, 'arrow-left');
          dom$6.removeClass(quickadd, 'center');
          dom$6.addClass(quickadd, 'arrow-top');
          dom$6.addClass(quickadd, 'center');
        } else {
          quickadd.style.top = top + window.pageYOffset - h - 8 + 'px';
          quickadd.style.left = left - w / 2 + 10 + 'px';
          dom$6.removeClass(quickadd, 'arrow-top');
          dom$6.removeClass(quickadd, 'arrow-right');
          dom$6.removeClass(quickadd, 'arrow-left');
          dom$6.removeClass(quickadd, 'center');
          dom$6.addClass(quickadd, 'arrow-bottom');
          dom$6.addClass(quickadd, 'center');
        }

        quickadd.setAttribute('data-mode', 'elm');
        return false;
      });
      var elmRemove = elementTool.querySelector('.elm-remove');
      dom$6.addEventListener(elmRemove, 'click', function () {
        util.confirm(util.out('Are you sure you want to delete this element?'), function (ok) {
          if (ok) {
            _this.builder.uo.saveForUndo();

            var elm = _this.builder.activeElement;

            if (dom$6.hasClass(elm.parentNode, 'cell-active') || elm.parentNode.hasAttribute('data-subblock')) {
              // Level 1
              elm.parentNode.removeChild(elm);
            } else {
              // Deeper
              if (elm.parentNode.childElementCount > 1) {
                elm.parentNode.removeChild(elm);
              } else {
                var element = elm;

                if (!dom$6.parentsHasAttribute(element, 'data-subblock')) {
                  while (!dom$6.hasClass(element.parentNode, 'cell-active') && elm.parentNode.childElementCount === 1) {
                    element = element.parentNode;
                  }
                } else {
                  while (!element.parentNode.hasAttribute('data-subblock') && elm.parentNode.childElementCount === 1) {
                    element = element.parentNode;
                  }
                }

                element.parentNode.removeChild(element);
              }
            }

            _this.elementTool.style.display = 'none';
            var cell = _this.builder.activeCol;

            if (cell) {
              var row = cell.parentNode;

              if (cell.childElementCount === 0 && row.childElementCount === 3) {
                row.parentNode.removeChild(row);
                var columnTool = builderstuff.querySelector('.is-column-tool'); // quick access

                dom$6.removeClass(columnTool, 'active');
                util.checkEmpty();
              } else if (cell.childElementCount === 0) {
                row.removeChild(cell);
                util.fixLayout(row, builder);

                var _columnTool = builderstuff.querySelector('.is-column-tool'); // // quick access


                dom$6.removeClass(_columnTool, 'active');
              }
            } // Add spacer to empty subblock


            var subblocks = document.querySelectorAll('.is-subblock');
            Array.prototype.forEach.call(subblocks, function (subblock) {
              var rows = dom$6.elementChildren(subblock);
              var empty = true;
              rows.forEach(function () {
                empty = false;
              });

              if (empty) {
                subblock.innerHTML = '<div class="spacer height-40" contentEditable="false"></div>';
              }
            });
            util.clearControls(); //Trigger Change event

            _this.builder.opts.onChange();
          }
        });
      });
      var elmMore = elementTool.querySelector('.elm-more');
      dom$6.addEventListener(elmMore, 'click', function () {
        var viewportHeight = window.innerHeight;
        var top = elmMore.getBoundingClientRect().top;
        var left = elmMore.getBoundingClientRect().left;
        elementMore.style.display = 'flex';
        var w = elementMore.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

        var h = elementMore.offsetHeight;

        if (viewportHeight - top > h) {
          elementMore.style.top = top + window.pageYOffset + 27 + 'px';
          elementMore.style.left = left - w / 2 + 10 + 'px';
          dom$6.removeClass(elementMore, 'arrow-bottom');
          dom$6.removeClass(elementMore, 'arrow-right');
          dom$6.removeClass(elementMore, 'arrow-left');
          dom$6.removeClass(elementMore, 'center');
          dom$6.addClass(elementMore, 'arrow-top');
          dom$6.addClass(elementMore, 'center');
        } else {
          elementMore.style.top = top + window.pageYOffset - h - 8 + 'px';
          elementMore.style.left = left - w / 2 + 10 + 'px';
          dom$6.removeClass(elementMore, 'arrow-top');
          dom$6.removeClass(elementMore, 'arrow-right');
          dom$6.removeClass(elementMore, 'arrow-left');
          dom$6.removeClass(elementMore, 'center');
          dom$6.addClass(elementMore, 'arrow-bottom');
          dom$6.addClass(elementMore, 'center');
        }
      });
      var elmUp = elementMore.querySelector('.elm-up');
      dom$6.addEventListener(elmUp, 'click', function () {
        var elm = _this.builder.activeElement;

        if (elm.previousElementSibling) {
          _this.builder.uo.saveForUndo();

          elm.parentNode.insertBefore(elm, elm.previousElementSibling);
          elm.click();

          _this.position(elm); //Trigger Change event


          _this.builder.opts.onChange();
        } else {
          // Try move the parent
          var element = elm;

          while (!dom$6.hasClass(element.parentNode, 'cell-active') && !element.parentNode.hasAttribute('data-subblock')) {
            element = element.parentNode;
          }

          if (element.previousElementSibling && element !== elm) {
            _this.builder.uo.saveForUndo();

            element.parentNode.insertBefore(element, element.previousElementSibling);
            elm.click();

            _this.position(elm); //Trigger Change event


            _this.builder.opts.onChange();
          }
        }

        elm.click();
        elementTool.querySelector('.elm-more').click();
      });
      var elmDown = elementMore.querySelector('.elm-down');
      dom$6.addEventListener(elmDown, 'click', function () {
        var elm = _this.builder.activeElement;

        if (elm.nextElementSibling) {
          _this.builder.uo.saveForUndo();

          elm.parentNode.insertBefore(elm.nextElementSibling, elm);
          elm.click();

          _this.position(elm); //Trigger Change event


          _this.builder.opts.onChange();
        } else {
          // Try move the parent
          var element = elm;

          while (!dom$6.hasClass(element.parentNode, 'cell-active') && !element.parentNode.hasAttribute('data-subblock')) {
            element = element.parentNode;
          }

          if (element.nextElementSibling && element !== elm) {
            _this.builder.uo.saveForUndo();

            element.parentNode.insertBefore(element.nextElementSibling, element);
            elm.click();

            _this.position(elm); //Trigger Change event


            _this.builder.opts.onChange();
          }
        }
      });
      var elmDuplicate = elementMore.querySelector('.elm-duplicate');
      dom$6.addEventListener(elmDuplicate, 'click', function () {
        _this.builder.uo.saveForUndo();

        var elm = _this.builder.activeElement; //Clone row & cleanup attached tool & event

        var newelm = elm.cloneNode(true);
        dom$6.moveAfter(newelm, elm);
        setTimeout(function () {
          newelm.click();

          _this.position(newelm);

          _this.builder.applyBehavior(); //Trigger Change event


          _this.builder.opts.onChange();
        }, 100); //Timeout needed by Safari
      });
      var elmSettings = elementTool.querySelector('.elm-settings');
      if (elmSettings) dom$6.addEventListener(elmSettings, 'click', function () {
        elementMore.style.display = '';

        _this.elementPanel.showPanel();
      });
      var elmSettings2 = elementMore.querySelector('.elm-settings');
      if (elmSettings2) dom$6.addEventListener(elmSettings2, 'click', function () {
        elementMore.style.display = '';

        _this.elementPanel.showPanel();
      });
      document.addEventListener('mousedown', function (e) {
        e = e || window.event;
        var target = e.target || e.srcElement;

        if (elementMore.style.display === 'flex') {
          var a = dom$6.parentsHasClass(target, 'elmmore');
          var b = dom$6.parentsHasClass(target, 'elm-more');

          if (a || b) {
            return;
          } else {
            elementMore.style.display = '';
          }
        }
      });
    }

    _createClass$1(ElementTool, [{
      key: "hide",
      value: function hide() {
        this.elementTool.style.display = '';
        var elms = document.querySelectorAll('.elm-active');
        Array.prototype.forEach.call(elms, function (elm) {
          dom$6.removeClass(elm, 'elm-active');
        });
      }
    }, {
      key: "position",
      value: function position() {
        var elementTool = this.elementTool;
        var elementMore = this.elementMore;
        dom$6.addClass(elementMore, 'transition1');
        var elmMore = elementTool.querySelector('.elm-more');
        var viewportHeight = window.innerHeight;
        var top = elmMore.getBoundingClientRect().top;
        var left = elmMore.getBoundingClientRect().left;
        elementMore.style.display = 'flex';
        var w = elementMore.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

        var h = elementMore.offsetHeight;

        if (viewportHeight - top > h) {
          elementMore.style.top = top + window.pageYOffset + 27 + 'px';
          elementMore.style.left = left - w / 2 + 10 + 'px';
          dom$6.removeClass(elementMore, 'arrow-bottom');
          dom$6.removeClass(elementMore, 'arrow-right');
          dom$6.removeClass(elementMore, 'arrow-left');
          dom$6.removeClass(elementMore, 'center');
          dom$6.addClass(elementMore, 'arrow-top');
          dom$6.addClass(elementMore, 'center');
        } else {
          elementMore.style.top = top + window.pageYOffset - h - 8 + 'px';
          elementMore.style.left = left - w / 2 + 10 + 'px';
          dom$6.removeClass(elementMore, 'arrow-top');
          dom$6.removeClass(elementMore, 'arrow-right');
          dom$6.removeClass(elementMore, 'arrow-left');
          dom$6.removeClass(elementMore, 'center');
          dom$6.addClass(elementMore, 'arrow-bottom');
          dom$6.addClass(elementMore, 'center');
        }

        setTimeout(function () {
          dom$6.removeClass(elementMore, 'transition1');
        }, 300);
      }
    }, {
      key: "click",
      value: function click(col, e) {
        // old: 12808
        var elm = e.target;
        var elementTool = this.elementTool;
        elementTool.style.display = 'none';
        var elms = document.querySelectorAll('.elm-active');
        Array.prototype.forEach.call(elms, function (elm) {
          dom$6.removeClass(elm, 'elm-active');
        });
        var activeElement = null;
        var noedit = false;

        if (col.hasAttribute('data-noedit')) {
          // Column is not (text) editable.
          noedit = true;
        }

        var _protected = false;

        if (col.hasAttribute('data-protected')) {
          // Column is not (text) editable and also: cannot be deleted, moved or duplicated.
          _protected = true;
        }

        var customcode = false;

        if (col.hasAttribute('data-html')) {
          // Column contains custom code.
          customcode = true;
        }

        var subblock = false; //if(dom.parentsHasAttribute(elm, 'data-subblock')) {

        if (dom$6.parentsHasClass(elm, 'is-subblock')) {
          subblock = true;
        }

        if ((customcode || noedit || _protected) && !subblock) ; else {
          var tagName = elm.tagName.toLowerCase(); // LATER: label, code, figcaption ?

          if (tagName === 'h1' || tagName === 'h2' || tagName === 'h3' || tagName === 'h4' || tagName === 'h5' || tagName === 'h6' || tagName === 'p' || tagName === 'pre' || tagName === 'blockquote' || tagName === 'li' || tagName === 'img' || tagName === 'iframe') {
            activeElement = elm; //set active element

            if (tagName === 'img') {
              if (dom$6.hasClass(elm.parentNode, 'img-circular')) {
                activeElement = elm.parentNode;
              }
            }
          } else {
            /*
            <div class="cell-active">
                 ..level 0
                <p>
                    ..level 1
                    <b>..deeper level..</b>
                </p>
                 <div class="display">
                    ..level 1
                    <h1>..<b>..deeper level..</b>..</h1>
                    <p>..<b>..deeper level..</b>..</p>
                </div>
            </div>                            
            */
            if (dom$6.hasClass(elm, 'cell-active') || elm.hasAttribute('data-subblock')) ; else if (dom$6.hasClass(elm, 'cell-active') || elm.parentNode.hasAttribute('data-subblock')) {
              // Level 1
              activeElement = elm;
            } else {
              // Deeper level
              var element = elm;

              while (element.tagName !== 'BODY' && element.tagName !== 'HTML') {
                var s = element.tagName.toLowerCase();

                if (s === 'h1' || s === 'h2' || s === 'h3' || s === 'h4' || s === 'h5' || s === 'h6' || s === 'p' || s === 'pre' || s === 'blockquote' || s === 'li' || s === 'img' || s === 'iframe') {
                  activeElement = element; //set active element

                  break;
                } else {
                  if (dom$6.hasClass(element.parentNode, 'cell-active') || element.parentNode.hasAttribute('data-subblock')) {
                    activeElement = element; //set active element

                    break;
                  }
                }

                element = element.parentNode;
              }
            }
          }
        }

        if (activeElement) {
          var _elm = activeElement;
          var top = _elm.getBoundingClientRect().top + window.pageYOffset;
          var left = _elm.getBoundingClientRect().left + window.pageXOffset;
          var w = _elm.offsetWidth;
          var h = _elm.offsetHeight;
          elementTool.style.display = 'flex';
          elementTool.style.top = top + h + 'px';
          elementTool.style.left = left + w - elementTool.offsetWidth + 'px';
          var viewportWidth = window.innerWidth;

          if (left + w > viewportWidth) {
            elementTool.style.left = viewportWidth - elementTool.offsetWidth + 'px';
          }

          dom$6.addClass(_elm, 'elm-active');
        }

        this.builder.activeElement = activeElement;
        this.builder.inspectedElement = e.target;
        this.elementPanel.click(e);
      }
    }, {
      key: "refresh",
      value: function refresh() {
        var _this2 = this;

        if (this.builder.activeElement) {
          var elementTool = this.elementTool;
          elementTool.style.display = '';
          setTimeout(function () {
            var elm = _this2.builder.activeElement;
            var top = elm.getBoundingClientRect().top + window.pageYOffset;
            var left = elm.getBoundingClientRect().left + window.pageXOffset;
            var w = elm.offsetWidth;
            var h = elm.offsetHeight;
            elementTool.style.display = 'flex';
            elementTool.style.top = top + h + 'px';
            elementTool.style.left = left + w - elementTool.offsetWidth + 'px';
            var viewportWidth = window.innerWidth;

            if (left + w > viewportWidth) {
              elementTool.style.left = viewportWidth - elementTool.offsetWidth + 'px';
            }
          }, 300);
        }
      }
    }, {
      key: "repositionElementTool",
      value: function repositionElementTool() {
        // = refresh(), but without delay
        if (this.builder.activeElement) {
          try {
            // use try to prevent unspecified error in IE
            var elementTool = this.elementTool;
            var elm = this.builder.activeElement;
            var top = elm.getBoundingClientRect().top + window.pageYOffset;
            var left = elm.getBoundingClientRect().left + window.pageXOffset;
            var w = elm.offsetWidth;
            var h = elm.offsetHeight;
            elementTool.style.display = 'flex';
            elementTool.style.top = top + h + 'px';
            elementTool.style.left = left + w - elementTool.offsetWidth + 'px';
            var viewportWidth = window.innerWidth;

            if (left + w > viewportWidth) {
              elementTool.style.left = viewportWidth - elementTool.offsetWidth + 'px';
            }
          } catch (e) {// Do Nothing
          }
        }
      }
    }]);

    return ElementTool;
  }();

  var dom$5 = new Dom();
  var Preferences = /*#__PURE__*/function () {
    function Preferences(builder) {
      var _this = this;

      _classCallCheck$1(this, Preferences);

      this.builder = builder;
      var util = new Util(builder);
      var builderstuff = util.builderStuff();
      var config = builderstuff.querySelector('.viewconfig');

      if (!config) {
        var html = "<div class=\"is-modal viewconfig\">\n                <div style=\"width:100%;max-width:700px;padding:5px 12px 12px 20px\">\n                    <div class=\"is-modal-bar is-draggable\" style=\"position: absolute;top: 0;left: 0;height:32px;line-height:32px;width:100%;background: transparent;\">".concat(util.out('Preferences'), "</div>\n                \n                    <div style=\"display:flex;flex-wrap:wrap;width:100%;padding-top:32px;\">\n                        <div style=\"width:50%\">\n                            <label id=\"divBuilderMode\" style=\"display:block;margin-top:14px;margin-bottom:5px;\">\n                                ").concat(util.out('Builder Mode'), ":&nbsp;\n                                <select class=\"select-buildermode\">\n                                    <option value=\"\">").concat(util.out('Default'), "</option>\n                                    <option value=\"minimal\">").concat(util.out('Minimal'), "</option>\n                                    <option value=\"clean\">").concat(util.out('Clean'), "</option>\n                                </select>\n                            </label>\n                            \n                            <label id=\"divOutlineMode\" style=\"display:block;margin-top:14px;margin-bottom:5px;\">\n                                ").concat(util.out('Outline Mode'), ":&nbsp;\n                                <select class=\"select-outlinemode\">\n                                    <option value=\"\">").concat(util.out('Row & column'), "</option>\n                                    <option value=\"row\">").concat(util.out('Row only'), "</option>\n                                </select>\n                            </label>\n\n                            <label style=\"display:block;margin-top:14px;margin-bottom:5px;\">\n                                ").concat(util.out('Outline Style'), ":&nbsp;\n                                <select class=\"select-outlinestyle\">\n                                    <option value=\"\">").concat(util.out('Colored'), "</option>\n                                    <option value=\"grayoutline\">").concat(util.out('Gray'), "</option>\n                                </select>\n                            </label>\n                            \n                            <label style=\"display:block;margin-top:14px;margin-bottom:10px;\">\n                                <input class=\"input-hiderowcoloutline\" type=\"checkbox\" /> ").concat(util.out('Hide Outline'), "&nbsp;\n                            </label>  \n\n                            <label id=\"divHideCellTool\" style=\"display:block;margin-top:14px;margin-bottom:10px;\">\n                                <input class=\"input-hidecelltool\" type=\"checkbox\" />  ").concat(util.out('Hide Column Tool'), "&nbsp;\n                            </label>\n\n                            <label style=\"display:block;margin-top:5px;margin-bottom:5px;\">\n                                ").concat(util.out('Row Tool Position'), ":&nbsp;\n                                <select class=\"select-rowtool\">\n                                    <option value=\"right\">").concat(util.out('Right'), "</option>\n                                    <option value=\"left\">").concat(util.out('Left'), "</option>\n                                </select>\n                            </label>   \n\n                            <label style=\"display:block;margin-top:5px;margin-bottom:5px;\">\n                                ").concat(util.out('Tool Style'), ":&nbsp;\n                                <select class=\"select-toolstyle\">\n                                    <option value=\"\">").concat(util.out('Colored'), "</option>\n                                    <option value=\"gray\">").concat(util.out('Gray'), "</option>\n                                </select>\n                            </label>  \n\n                        </div>\n                        <div style=\"width:50%\">\n\n                            <label style=\"display:block;margin-top:14px;margin-bottom:10px;\">\n                                <input class=\"input-hidesnippetaddtool\" type=\"checkbox\" />  ").concat(util.out('Hide Snippet (+) Tool'), "&nbsp;\n                            </label>\n\n                            <label style=\"display:block;margin-top:14px;margin-bottom:10px;\">\n                                <input class=\"input-hideelementtool\" type=\"checkbox\" /> ").concat(util.out('Hide element tool'), "&nbsp;\n                            </label>  \n\n                            <label style=\"display:block;margin-top:14px;margin-bottom:10px;\">\n                                <input class=\"input-hideelementhighlight\" type=\"checkbox\" /> ").concat(util.out('Hide element highlight'), "&nbsp;\n                            </label>  \n\n                            <label class=\"option-opensnippets\" style=\"display:block;margin-top:14px;margin-bottom:10px;\">\n                                <input class=\"input-opensnippets\" type=\"checkbox\" />  ").concat(util.out('Open snippets sidebar on start'), "&nbsp;\n                            </label>\n\n                            <label style=\"display:block;margin-top:14px;margin-bottom:5px;\">\n                               ").concat(util.out('Snippets sidebar visibility'), ":&nbsp;\n                                <select class=\"select-snippetssidebardisplay\">\n                                    <option value=\"auto\">").concat(util.out('Auto'), "</option>\n                                    <option value=\"always\">").concat(util.out('Always Visible'), "</option>\n                                </select>\n                            </label>\n\n                            <label style=\"display:block;margin-top:5px;margin-bottom:5px;\">\n                                ").concat(util.out('Paste result'), ":&nbsp;\n                                <select class=\"select-pasteresult\">\n                                    <option value=\"html-without-styles\">").concat(util.out('HTML (without styles)'), "</option>\n                                    <option value=\"html\">").concat(util.out('HTML (with styles)'), "</option>\n                                    <option value=\"text\">").concat(util.out('Text only'), "</option>\n                                </select>\n                            </label>  \n\n                            <label style=\"display:none;margin-top:14px;margin-bottom:5px;\">\n                               ").concat(util.out('Toolbar visibility'), ":&nbsp;\n                                <select class=\"select-editingtoolbardisplay\">\n                                    <option value=\"auto\">").concat(util.out('Auto'), "</option>\n                                    <option value=\"always\">").concat(util.out('Always Visible'), "</option>\n                                </select>\n                            </label>\n\n                            <label style=\"").concat(this.builder.isTouchSupport ? 'display:none;' : 'display:block;', "margin-top:5px;margin-bottom:5px;\">\n                               ").concat(util.out('Toolbar position'), ":&nbsp;\n                                <select class=\"select-editingtoolbar\">\n                                    <option value=\"top\">").concat(util.out('Top'), "</option>\n                                    <option value=\"left\">").concat(util.out('Left'), "</option>\n                                    <option value=\"right\">").concat(util.out('Right'), "</option>\n                                </select>\n                            </label> \n\n                        </div>\n                    </div>\n                    <div style=\"text-align:right;margin-top:30px\">\n                        <button title=\"").concat(util.out('Cancel'), "\" class=\"input-cancel classic-secondary\">").concat(util.out('Cancel'), "</button>\n                        <button title=\"").concat(util.out('Ok'), "\" class=\"input-ok classic-primary\">").concat(util.out('Ok'), "</button>\n                    </div>\n                </div>\n            </div>");
        dom$5.appendHtml(builderstuff, html);
        config = builderstuff.querySelector('.viewconfig');

        if (!(builder.opts.snippetList === '#divSnippetList' && builder.opts.snippetJSON.snippets.length > 0)) {
          config.querySelector('.option-opensnippets').style.display = 'none';
        }

        var elm = config.querySelector('.input-cancel');
        dom$5.addEventListener(elm, 'click', function () {
          util.hideModal(config);
        });
        elm = config.querySelector('.input-ok');
        dom$5.addEventListener(elm, 'click', function () {
          _this.update();

          util.hideModal(config);
        }); // On first load, apply preferences (check if there are stored values)

        if (localStorage.getItem('_hiderowcoloutline') !== null) {
          if (localStorage.getItem('_hiderowcoloutline') === '1') {
            this.builder.opts.rowcolOutline = false;
          } else {
            this.builder.opts.rowcolOutline = true;
          }
        }

        this.setOutline(!this.builder.opts.rowcolOutline);

        if (localStorage.getItem('_outlinemode') !== null) {
          this.builder.opts.outlineMode = localStorage.getItem('_outlinemode');
        }

        this.setOutlineMode(this.builder.opts.outlineMode);

        if (localStorage.getItem('_outlinestyle') !== null) {
          this.builder.opts.outlineStyle = localStorage.getItem('_outlinestyle');
        }

        this.setOutlineStyle(this.builder.opts.outlineStyle);

        if (localStorage.getItem('_pasteresult') !== null) {
          this.builder.opts.paste = localStorage.getItem('_pasteresult');
        }

        if (localStorage.getItem('_hidecelltool') !== null) {
          if (localStorage.getItem('_hidecelltool') === '1') {
            this.builder.opts.columnTool = false;
          } else {
            this.builder.opts.columnTool = true;
          }
        }

        this.setColumnTool(!this.builder.opts.columnTool);

        if (localStorage.getItem('_hidesnippetaddtool') !== null) {
          if (localStorage.getItem('_hidesnippetaddtool') === '1') {
            this.builder.opts.snippetAddTool = false;
          } else {
            this.builder.opts.snippetAddTool = true;
          }
        }

        this.setSnippetAddTool(!this.builder.opts.snippetAddTool);

        if (localStorage.getItem('_hideelementtool') !== null) {
          if (localStorage.getItem('_hideelementtool') === '1') {
            this.builder.opts.elementTool = false;
          } else {
            this.builder.opts.elementTool = true;
          }
        }

        this.setElementTool(!this.builder.opts.elementTool);

        if (localStorage.getItem('_hideelementhighlight') !== null) {
          if (localStorage.getItem('_hideelementhighlight') === '1') {
            this.builder.opts.elementHighlight = false;
          } else {
            this.builder.opts.elementHighlight = true;
          }
        }

        this.setElementHighlight(!this.builder.opts.elementHighlight);

        if (localStorage.getItem('_opensnippets') !== null) {
          if (localStorage.getItem('_opensnippets') === '1') {
            this.builder.opts.snippetOpen = true;
          } else {
            this.builder.opts.snippetOpen = false;
          }
        }

        if (localStorage.getItem('_buildermode') !== null) {
          this.builder.opts.builderMode = localStorage.getItem('_buildermode');
        }

        this.setBuilderMode(this.builder.opts.builderMode);

        if (localStorage.getItem('_rowtool') !== null) {
          this.builder.opts.rowTool = localStorage.getItem('_rowtool');
        }

        this.setRowToolPosition(this.builder.opts.rowTool);

        if (localStorage.getItem('_toolstyle') !== null) {
          this.builder.opts.toolStyle = localStorage.getItem('_toolstyle');
        }

        this.setToolStyle(this.builder.opts.toolStyle); // Always Auto
        // if (localStorage.getItem('_editingtoolbardisplay') !== null) {
        //     this.builder.opts.toolbarDisplay = localStorage.getItem('_editingtoolbardisplay');
        // }

        this.builder.opts.toolbarDisplay = 'auto'; // this.setToolbarDisplay(this.builder.opts.toolbarDisplay);

        if (localStorage.getItem('_snippetssidebardisplay') !== null) {
          this.builder.opts.snippetsSidebarDisplay = localStorage.getItem('_snippetssidebardisplay');
        }

        if (localStorage.getItem('_editingtoolbar') != null) {
          this.builder.opts.toolbar = localStorage.getItem('_editingtoolbar');
        }

        this.setToolbar(this.builder.opts.toolbar); // Email Mode

        if (this.builder.opts.emailMode) {
          this.builder.opts.outlineMode = 'row';
          this.builder.opts.columnTool = false;
          this.builder.opts.builderMode = '';

          if (localStorage.getItem('_outlinemode') != null) {
            localStorage.setItem('_outlinemode', 'row');
          }

          if (localStorage.getItem('_hidecelltool') !== null) {
            localStorage.setItem('_hidecelltool', '1');
          }

          if (localStorage.getItem('_buildermode') !== null) {
            localStorage.setItem('_buildermode', '');
          }

          this.setColumnTool(true);
          this.setBuilderMode('');
          this.setEmailMode();
          builderstuff.querySelector('#divHideCellTool').style.display = 'none';
          builderstuff.querySelector('#divOutlineMode').style.display = 'none';
          builderstuff.querySelector('#divBuilderMode').style.display = 'none';
        }
      }

      this.config = config;
    }

    _createClass$1(Preferences, [{
      key: "view",
      value: function view() {
        var util = new Util(this.builder);
        var modal = this.config;
        util.showModal(modal, false, null, false); // Display values

        if (this.builder.opts.rowcolOutline) {
          modal.querySelector('.input-hiderowcoloutline').checked = false;
        } else {
          modal.querySelector('.input-hiderowcoloutline').checked = true;
        }

        if (this.builder.opts.columnTool) {
          modal.querySelector('.input-hidecelltool').checked = false;
        } else {
          modal.querySelector('.input-hidecelltool').checked = true;
        }

        if (this.builder.opts.snippetAddTool) {
          modal.querySelector('.input-hidesnippetaddtool').checked = false;
        } else {
          modal.querySelector('.input-hidesnippetaddtool').checked = true;
        }

        if (this.builder.opts.elementTool) {
          modal.querySelector('.input-hideelementtool').checked = false;
        } else {
          modal.querySelector('.input-hideelementtool').checked = true;
        }

        if (this.builder.opts.elementHighlight) {
          modal.querySelector('.input-hideelementhighlight').checked = false;
        } else {
          modal.querySelector('.input-hideelementhighlight').checked = true;
        }

        if (this.builder.opts.snippetOpen) {
          modal.querySelector('.input-opensnippets').checked = true;
        } else {
          modal.querySelector('.input-opensnippets').checked = false;
        }

        this.config.querySelector('.select-buildermode').value = this.builder.opts.builderMode;
        this.config.querySelector('.select-rowtool').value = this.builder.opts.rowTool;
        this.config.querySelector('.select-outlinemode').value = this.builder.opts.outlineMode;
        this.config.querySelector('.select-outlinestyle').value = this.builder.opts.outlineStyle;
        this.config.querySelector('.select-toolstyle').value = this.builder.opts.toolStyle;
        this.config.querySelector('.select-pasteresult').value = this.builder.opts.paste;
        this.config.querySelector('.select-editingtoolbardisplay').value = this.builder.opts.toolbarDisplay;
        this.config.querySelector('.select-editingtoolbar').value = this.builder.opts.toolbar;
        this.config.querySelector('.select-snippetssidebardisplay').value = this.builder.opts.snippetsSidebarDisplay;
      }
    }, {
      key: "update",
      value: function update() {
        // Update values
        var hideoutline = this.config.querySelector('.input-hiderowcoloutline').checked;

        if (hideoutline) {
          this.builder.opts.rowcolOutline = false;
          localStorage.setItem('_hiderowcoloutline', '1');
        } else {
          this.builder.opts.rowcolOutline = true;
          localStorage.setItem('_hiderowcoloutline', '0');
        }

        this.setOutline(hideoutline);
        var hidecolumntool = this.config.querySelector('.input-hidecelltool').checked;

        if (hidecolumntool) {
          this.builder.opts.columnTool = false;
          localStorage.setItem('_hidecelltool', '1');
          this.setColumnTool(true);
        } else {
          this.builder.opts.columnTool = true;
          localStorage.setItem('_hidecelltool', '0');
          this.setColumnTool(false);
        }

        var hidesnippetaddtool = this.config.querySelector('.input-hidesnippetaddtool').checked;

        if (hidesnippetaddtool) {
          this.builder.opts.snippetAddTool = false;
          localStorage.setItem('_hidesnippetaddtool', '1');
          this.setSnippetAddTool(true);
        } else {
          this.builder.opts.snippetAddTool = true;
          localStorage.setItem('_hidesnippetaddtool', '0');
          this.setSnippetAddTool(false);
        }

        var hideelementtool = this.config.querySelector('.input-hideelementtool').checked;

        if (hideelementtool) {
          this.builder.opts.elementTool = false;
          localStorage.setItem('_hideelementtool', '1');
          this.setElementTool(true);
        } else {
          this.builder.opts.elementTool = true;
          localStorage.setItem('_hideelementtool', '0');
          this.setElementTool(false);
        }

        var hideelementhighlight = this.config.querySelector('.input-hideelementhighlight').checked;

        if (hideelementhighlight) {
          this.builder.opts.elementHighlight = false;
          localStorage.setItem('_hideelementhighlight', '1');
          this.setElementHighlight(true);
        } else {
          this.builder.opts.elementHighlight = true;
          localStorage.setItem('_hideelementhighlight', '0');
          this.setElementHighlight(false);
        }

        var snippetopen = this.config.querySelector('.input-opensnippets').checked;

        if (snippetopen) {
          this.builder.opts.snippetOpen = true;
          localStorage.setItem('_opensnippets', '1');
        } else {
          this.builder.opts.snippetOpen = false;
          localStorage.setItem('_opensnippets', '0');
        }

        var builderMode = this.config.querySelector('.select-buildermode').value;
        this.builder.opts.builderMode = builderMode;
        localStorage.setItem('_buildermode', builderMode);
        this.setBuilderMode(builderMode);
        var rowTool = this.config.querySelector('.select-rowtool').value;
        this.builder.opts.rowTool = rowTool;
        localStorage.setItem('_rowtool', rowTool);
        this.setRowToolPosition(rowTool);
        var outlineMode = this.config.querySelector('.select-outlinemode').value;
        this.builder.opts.outlineMode = outlineMode;
        localStorage.setItem('_outlinemode', outlineMode);
        this.setOutlineMode(outlineMode);
        var outlineStyle = this.config.querySelector('.select-outlinestyle').value;
        this.builder.opts.outlineStyle = outlineStyle;
        localStorage.setItem('_outlinestyle', outlineStyle);
        this.setOutlineStyle(outlineStyle);
        var toolStyle = this.config.querySelector('.select-toolstyle').value;
        this.builder.opts.toolStyle = toolStyle;
        localStorage.setItem('_toolstyle', toolStyle);
        this.setToolStyle(toolStyle);
        var pasteResult = this.config.querySelector('.select-pasteresult').value;
        this.builder.opts.paste = pasteResult;
        localStorage.setItem('_pasteresult', pasteResult); // let toolbarDisplay = this.config.querySelector('.select-editingtoolbardisplay').value;
        // this.builder.opts.toolbarDisplay = toolbarDisplay;
        // localStorage.setItem('_editingtoolbardisplay', toolbarDisplay);
        // this.setToolbarDisplay(toolbarDisplay);

        var snippetsSidebarDisplay = this.config.querySelector('.select-snippetssidebardisplay').value;
        this.builder.opts.snippetsSidebarDisplay = snippetsSidebarDisplay;
        localStorage.setItem('_snippetssidebardisplay', snippetsSidebarDisplay);
        var toolbar = this.config.querySelector('.select-editingtoolbar').value;
        this.builder.opts.toolbar = toolbar;
        localStorage.setItem('_editingtoolbar', toolbar);
        this.setToolbar(toolbar);
      }
    }, {
      key: "setToolbar",
      value: function setToolbar(toolbar) {
        var builderstuff = document.querySelector('#_cbhtml');

        if (toolbar === 'top') {
          builderstuff.removeAttribute('toolbarleft', '');
          builderstuff.removeAttribute('toolbarright', '');
        } else if (toolbar === 'left') {
          builderstuff.setAttribute('toolbarleft', '');
          builderstuff.removeAttribute('toolbarright', '');
        } else if (toolbar === 'right') {
          builderstuff.setAttribute('toolbarright', '');
          builderstuff.removeAttribute('toolbarleft', '');
        } // this.positionToolbar();


        var rteTool = builderstuff.querySelector('.is-rte-tool');
        var rteMoreOptions = builderstuff.querySelector('.rte-more-options');
        var elementRteMoreOptions = builderstuff.querySelector('.elementrte-more-options');
        if (rteTool) this.builder.rte.positionToolbar();

        if (rteMoreOptions) {
          dom$5.removeClass(rteMoreOptions, 'active');
          dom$5.addClass(rteMoreOptions, 'deactive');
          dom$5.removeClass(elementRteMoreOptions, 'active');
          dom$5.addClass(elementRteMoreOptions, 'deactive');
        }
      }
    }, {
      key: "setEmailMode",
      value: function setEmailMode() {
        var builderstuff = document.querySelector('#_cbhtml');
        builderstuff.setAttribute('emailmode', '');
      }
      /*
      positionToolbar() { // direct
          let builderstuff = document.querySelector('#_cbhtml');
          const rteTool = builderstuff.querySelector('.is-rte-tool');
          const rteMoreOptions = builderstuff.querySelector('.rte-more-options');
          if(rteTool){ // check in case rte stuff hasn't rendered yet
               const viewportWidth = window.innerWidth;
              const viewportHeight = window.innerHeight;
               if(this.builder.opts.toolbar === 'left' || this.builder.opts.toolbar === 'right') {
      
                  let h = rteTool.offsetHeight;
      
                  let top = (viewportHeight/2) - (h/2);
      
                  rteTool.style.left = '';
                  rteTool.style.top = top + 'px';
                  
              } else {
      
                  let w = rteTool.offsetWidth;
          
                  let left = (viewportWidth/2) - (w/2);
          
                  rteTool.style.top = '';
                  rteTool.style.left = left + 'px';
      
              }
          }
          if(rteMoreOptions) {
              //rteMoreOptions.style.display = '';
              dom.removeClass(rteMoreOptions,'active');
              dom.addClass(rteMoreOptions, 'deactive');
          }
      }
       setToolbarDisplay(toolbardisplay) {
          let builderstuff = document.querySelector('#_cbhtml');
          if(toolbardisplay==='auto'){
               builderstuff.removeAttribute('toolbarstay','');
               // direct
              const rteTool = builderstuff.querySelector('.is-rte-tool');
              if(rteTool) { // check in case rte stuff hasn't rendered yet
                  rteTool.style.display = '';
              }
           } else {
               builderstuff.setAttribute('toolbarstay','');
               // direct
              const viewportWidth = window.innerWidth;
              const rteTool = builderstuff.querySelector('.is-rte-tool');
              if(rteTool) { // check in case rte stuff hasn't rendered yet
                  let w = rteTool.offsetWidth;
                  let left = (viewportWidth/2) - (w/2);
                  rteTool.style.left = left + 'px';
              }
           }
      }
      */

    }, {
      key: "setElementTool",
      value: function setElementTool(hideelementtool) {
        var builderstuff = document.querySelector('#_cbhtml');

        if (hideelementtool) {
          builderstuff.setAttribute('hideelementtool', '');
        } else {
          builderstuff.removeAttribute('hideelementtool', '');
        }
      }
    }, {
      key: "setElementHighlight",
      value: function setElementHighlight(hideelementhighlight) {
        var builders = document.querySelectorAll(this.builder.opts.container);
        Array.prototype.forEach.call(builders, function (builder) {
          if (hideelementhighlight) {
            builder.setAttribute('hideelementhighlight', '');
          } else {
            builder.removeAttribute('hideelementhighlight', '');
          }
        });
      }
    }, {
      key: "setOutlineStyle",
      value: function setOutlineStyle(outlineStyle) {
        var builders = document.querySelectorAll(this.builder.opts.container);
        Array.prototype.forEach.call(builders, function (builder) {
          if (outlineStyle === 'grayoutline') {
            builder.setAttribute('grayoutline', '');
          } else {
            builder.removeAttribute('grayoutline');
          }
        });
      }
    }, {
      key: "setColumnTool",
      value: function setColumnTool(hidecolumntool) {
        var builderstuff = document.querySelector('#_cbhtml');

        if (hidecolumntool) {
          builderstuff.setAttribute('hidecolumntool', '');
        } else {
          builderstuff.removeAttribute('hidecolumntool', '');
        }
      }
    }, {
      key: "setSnippetAddTool",
      value: function setSnippetAddTool(hidesnippetaddtool) {
        var builders = document.querySelectorAll(this.builder.opts.container);
        Array.prototype.forEach.call(builders, function (builder) {
          if (hidesnippetaddtool) {
            builder.setAttribute('hidesnippetaddtool', '');
          } else {
            builder.removeAttribute('hidesnippetaddtool', '');
          }
        });
      }
    }, {
      key: "setToolStyle",
      value: function setToolStyle(toolStyle) {
        var builderstuff = document.querySelector('#_cbhtml');
        var builders = document.querySelectorAll(this.builder.opts.container);
        Array.prototype.forEach.call(builders, function (builder) {
          if (toolStyle === 'gray') {
            builder.setAttribute('gray', '');
            builderstuff.setAttribute('gray', '');
          } else {
            builder.removeAttribute('gray');
            builderstuff.removeAttribute('gray', '');
          }
        });
      }
    }, {
      key: "setOutlineMode",
      value: function setOutlineMode(outlineMode) {
        var builders = document.querySelectorAll(this.builder.opts.container);
        Array.prototype.forEach.call(builders, function (builder) {
          if (outlineMode === 'row') {
            builder.setAttribute('rowoutline', '');
          } else {
            builder.removeAttribute('rowoutline');
          }
        });
      }
    }, {
      key: "setOutline",
      value: function setOutline(hideoutline) {
        var builders = document.querySelectorAll(this.builder.opts.container);
        Array.prototype.forEach.call(builders, function (builder) {
          if (hideoutline) {
            builder.setAttribute('hideoutline', '');
          } else {
            builder.removeAttribute('hideoutline');
          }
        });
      }
    }, {
      key: "setRowToolPosition",
      value: function setRowToolPosition(rowTool) {
        var builders = document.querySelectorAll(this.builder.opts.container);
        Array.prototype.forEach.call(builders, function (builder) {
          if (rowTool === 'right') {
            builder.removeAttribute('leftrowtool');
          } else {
            builder.setAttribute('leftrowtool', '');
          }
        });
      }
    }, {
      key: "setBuilderMode",
      value: function setBuilderMode(builderMode) {
        var builderstuff = document.querySelector('#_cbhtml');
        var builders = document.querySelectorAll(this.builder.opts.container);
        Array.prototype.forEach.call(builders, function (builder) {
          if (builderMode === '') {
            builder.removeAttribute('minimal');
            builder.removeAttribute('clean');
            builderstuff.removeAttribute('minimal');
            builderstuff.removeAttribute('clean');
          } else if (builderMode === 'minimal') {
            builder.setAttribute('minimal', '');
            builder.removeAttribute('clean');
            builderstuff.setAttribute('minimal', '');
            builderstuff.removeAttribute('clean');
          } else if (builderMode === 'clean') {
            builder.setAttribute('clean', '');
            builder.removeAttribute('minimal');
            builderstuff.setAttribute('clean', '');
            builderstuff.removeAttribute('minimal');
          }
        });
      }
    }]);

    return Preferences;
  }();

  var dom$4 = new Dom();

  var Rte = /*#__PURE__*/function () {
    function Rte(builder) {
      var _this = this;

      _classCallCheck$1(this, Rte);

      this.builder = builder;
      var util = new Util(builder);
      this.util = util;
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      this.elementStyleEditor = new ELementStyleEditor(builder);
      this.hyperlink = new Hyperlink(builder);
      var rteTool = builderStuff.querySelector('#divRteTool');
      var elementRteTool;
      var rteAlignOptions;
      var rteFormattingOptions;
      var rteColorPicker;
      var rteListOptions;
      var rteFontFamilyOptions;
      var rteParagraphOptions;
      var rteMoreOptions;
      var elementRteMoreOptions;
      var rteTextSettingOptions;
      var rteIconOptions;
      var rteCustomTagOptions;

      if (!rteTool) {
        var customtag_button = '';
        var customTagsHtml = '';

        if (builder.opts.customTags.length > 0) {
          customtag_button = '<button class="rte-tags"><svg class="is-icon-flex" style="width:14px;height:14px"><use xlink:href="#ion-code-working"></use></svg></button>';

          for (var _j = 0; _j < builder.opts.customTags.length; _j++) {
            customTagsHtml += "<button data-value=\"".concat(builder.opts.customTags[_j][1], "\"> ").concat(builder.opts.customTags[_j][0], " </button>");
          }
        }

        var html_rtemore = '';

        for (var j = 0; j < builder.opts.buttonsMore.length; j++) {
          var btn = builder.opts.buttonsMore[j].toLowerCase();
          if (btn === 'createlink') html_rtemore += "<button title=\"".concat(util.out('Hyperlink'), "\" class=\"rte-link\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#ion-link\"></use></svg></button>");else if (btn === 'icon' && !this.builder.opts.emailMode) html_rtemore += "<button title=\"".concat(util.out('Icon'), "\" class=\"rte-icon\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;margin-top:2px;\"><use xlink:href=\"#ion-android-happy\"></use></svg></button>");else if (btn === 'removeformat') html_rtemore += "<button title=\"".concat(util.out('Clean'), "\" class=\"rte-clean\"><svg class=\"is-icon-flex\" style=\"width:11px;height:11px;\"><use xlink:href=\"#icon-clean\"></use></svg></button>");else if (btn === 'bold') html_rtemore += "<button title=\"".concat(util.out('Bold'), "\" class=\"rte-format\" data-command=\"bold\"><span style=\"font-family:serif;font-size:14px;\">B</span></button>");else if (btn === 'italic') html_rtemore += "<button title=\"".concat(util.out('Italic'), "\" class=\"rte-format\" data-command=\"italic\"><span style=\"font-family:serif;font-size:14px;font-style:italic;\">i</span></button>");else if (btn === 'underline') html_rtemore += "<button title=\"".concat(util.out('Underline'), "\" class=\"rte-format\" data-command=\"underline\"><span style=\"font-family:serif;font-size:14px;text-decoration:underline;\">U</span></button>"); // else if(btn==='createlink') html_rtemore += `<button title="${util.out('Hyperlink')}" class="rte-link"><svg class="is-icon-flex" style="width:14px;height:14px;"><use xlink:href="#ion-link"></use></svg></button>`; 
          else if (btn === 'align') html_rtemore += "<button title=\"".concat(util.out('Align'), "\" class=\"rte-align\"><svg class=\"is-icon-flex\" style=\"width:12px;height:12px;margin-top:-2px;\"><use xlink:href=\"#icon-align-full\"></use></svg></button>");else if (btn === 'list') html_rtemore += "<button title=\"".concat(util.out('List'), "\" class=\"rte-list\"><svg class=\"is-icon-flex\" style=\"width:12px;height:12px;\"><use xlink:href=\"#icon-list-bullet\"></use></svg></button>");else if (btn === 'color') html_rtemore += "<button title=\"".concat(util.out('Color'), "\" class=\"rte-color\"><svg class=\"is-icon-flex\" style=\"width:12px;height:12px;\"><use xlink:href=\"#ion-contrast\"></use></svg></button>");else if (btn === 'formatting') html_rtemore += "<button title=\"".concat(util.out('Formatting'), "\" class=\"rte-formatting\"><span style=\"font-family:serif;font-size:15px;display:inline-block;\">A</span></button>");else if (btn === 'tags') html_rtemore += customtag_button;else if (btn === 'image') html_rtemore += "<button title=\"".concat(util.out('Image'), "\" class=\"rte-image\"><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#ion-image\"></use></svg></button>");else if (btn === 'gridtool') html_rtemore += "<button title=\"".concat(util.out('Grid Tool'), "\" class=\"rte-grideditor\"><svg class=\"is-icon-flex\" style=\"margin-right:-3px;\"><use xlink:href=\"#ion-grid\"></use></svg></button>");else if (btn === 'html') html_rtemore += "<button title=\"".concat(util.out('HTML'), "\" class=\"rte-html\"><svg class=\"is-icon-flex\" style=\"margin-right:-3px;width:14px;height:14px;\"><use xlink:href=\"#ion-ios-arrow-left\"></use></svg><svg class=\"is-icon-flex\" style=\"margin-left:-2px;fill:rgba(0, 0, 0, 0.65);width:14px;height:14px;\"><use xlink:href=\"#ion-ios-arrow-right\"></use></svg></button>");else if (btn === 'preferences') html_rtemore += "<button title=\"".concat(util.out('Preferences'), "\" class=\"rte-preferences\"><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#ion-wrench\"></use></svg></button>");else if (btn === 'addsnippet') html_rtemore += "<button title=\"".concat(util.out('Add Snippet'), "\" class=\"rte-addsnippet\"><svg class=\"is-icon-flex\" style=\"width:18px;height:18px;margin-top:-1px;\"><use xlink:href=\"#ion-ios-plus-empty\"></use></svg></button>");else if (btn === 'formatpara') html_rtemore += "<button title=\"".concat(util.out('Paragraph'), "\" class=\"rte-paragraph\"><span style=\"font-family:serif;font-size:14px;display:inline-block;margin-top:2px;\">H</span></button>");else if (btn === 'font') html_rtemore += "<button title=\"".concat(util.out('Font'), "\" class=\"rte-fontfamily\"><span style=\"font-family:serif;font-size:18px;text-transform:none;display:inline-block;margin-top: -3px;\">a</span></button>");else if (btn === 'textsettings') html_rtemore += "<button title=\"".concat(util.out('Text Settings'), "\" class=\"rte-textsettings\"><svg class=\"is-icon-flex\" style=\"width:16px;height:16px;\"><use xlink:href=\"#ion-ios-settings\"></use></svg></button>");else if (btn === 'undo') html_rtemore += "<button title=\"".concat(util.out('Undo'), "\" class=\"rte-undo\"><svg class=\"is-icon-flex\" style=\"margin-top:2px;width:15px;height:15px;\"><use xlink:href=\"#ion-ios-undo\"></use></svg></button>");else if (btn === 'redo') html_rtemore += "<button title=\"".concat(util.out('Redo'), "\" class=\"rte-redo\"><svg class=\"is-icon-flex\" style=\"margin-top:2px;width:15px;height:15px;\"><use xlink:href=\"#ion-ios-redo\"></use></svg></button>");else if (btn === '|') {
              html_rtemore += '<div class="rte-separator"></div>';
            } else {
              html_rtemore += "<button title=\"button not found\" data-plugin=\"".concat(btn, "\">-</button>"); //temporary (later will be replaced with plugin button)
            }
        }

        var html_rte = '';

        for (j = 0; j < builder.opts.buttons.length; j++) {
          btn = builder.opts.buttons[j].toLowerCase();
          if (btn === 'bold') html_rte += "<button title=\"".concat(util.out('Bold'), "\" class=\"rte-format\" data-command=\"bold\"><span style=\"font-family:serif;font-size:14px;\">B</span></button>");else if (btn === 'italic') html_rte += "<button title=\"".concat(util.out('Italic'), "\" class=\"rte-format\" data-command=\"italic\"><span style=\"font-family:serif;font-size:14px;font-style:italic;\">i</span></button>");else if (btn === 'underline') html_rte += "<button title=\"".concat(util.out('Underline'), "\" class=\"rte-format\" data-command=\"underline\"><span style=\"font-family:serif;font-size:14px;text-decoration:underline;\">U</span></button>");else if (btn === 'createlink') html_rte += "<button title=\"".concat(util.out('Hyperlink'), "\" class=\"rte-link\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#ion-link\"></use></svg></button>");else if (btn === 'align') html_rte += "<button title=\"".concat(util.out('Align'), "\" class=\"rte-align\"><svg class=\"is-icon-flex\" style=\"width:12px;height:12px;margin-top:-2px;\"><use xlink:href=\"#icon-align-full\"></use></svg></button>");else if (btn === 'formatpara') html_rte += "<button title=\"".concat(util.out('Paragraph'), "\" class=\"rte-paragraph\"><span style=\"font-family:serif;font-size:14px;display:inline-block;margin-top:2px;\">H</span></button>");else if (btn === 'color') html_rte += "<button title=\"".concat(util.out('Color'), "\" class=\"rte-color\"><svg class=\"is-icon-flex\" style=\"width:12px;height:12px;\"><use xlink:href=\"#ion-contrast\"></use></svg></button>");else if (btn === 'formatting') html_rte += "<button title=\"".concat(util.out('Formatting'), "\" class=\"rte-formatting\"><span style=\"font-family:serif;font-size:15px;display:inline-block;\">A</span></button>");else if (btn === 'list') html_rte += "<button title=\"".concat(util.out('List'), "\" class=\"rte-list\"><svg class=\"is-icon-flex\" style=\"width:12px;height:12px;\"><use xlink:href=\"#icon-list-bullet\"></use></svg></button>");else if (btn === 'textsettings') html_rte += "<button title=\"".concat(util.out('Text Settings'), "\" class=\"rte-textsettings\"><svg class=\"is-icon-flex\" style=\"width:16px;height:16px;\"><use xlink:href=\"#ion-ios-settings\"></use></svg></button>");else if (btn === 'icon' && !this.builder.opts.emailMode) html_rte += "<button title=\"".concat(util.out('Icon'), "\" class=\"rte-icon\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;margin-top:2px\"><use xlink:href=\"#ion-android-happy\"></use></svg></button>");else if (btn === 'tags') html_rte += customtag_button;else if (btn === 'removeformat') html_rte += "<button title=\"".concat(util.out('Clean'), "\" class=\"rte-format\" data-command=\"clean\"><svg class=\"is-icon-flex\" style=\"width:11px;height:11px;\"><use xlink:href=\"#icon-clean\"></use></svg></button>");else if (btn === 'font') html_rte += "<button title=\"".concat(util.out('Font'), "\" class=\"rte-fontfamily\"><span style=\"font-family:serif;font-size:18px;text-transform:none;display:inline-block;margin-top: -3px;\">a</span></button>");else if (btn === 'image') html_rte += "<button title=\"".concat(util.out('Image'), "\" class=\"rte-image\"><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#ion-image\"></use></svg></button>");else if (btn === 'gridtool') html_rte += "<button title=\"".concat(util.out('Grid Tool'), "\" class=\"rte-grideditor\"><svg class=\"is-icon-flex\" style=\"margin-right:-3px;width:17px;height:17px;\"><use xlink:href=\"#ion-grid\"></use></svg></button>");else if (btn === 'html') html_rte += "<button title=\"".concat(util.out('HTML'), "\" class=\"rte-html\"><svg class=\"is-icon-flex\" style=\"margin-right:-3px;width:14px;height:14px;\"><use xlink:href=\"#ion-ios-arrow-left\"></use></svg><svg class=\"is-icon-flex\" style=\"margin-left:-2px;fill:rgba(0, 0, 0, 0.65);width:14px;height:14px;\"><use xlink:href=\"#ion-ios-arrow-right\"></use></svg></button>");else if (btn === 'preferences') html_rte += "<button title=\"".concat(util.out('Preferences'), "\" class=\"rte-preferences\"><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#ion-wrench\"></use></svg></button>");else if (btn === 'addsnippet') html_rte += "<button title=\"".concat(util.out('Add Snippet'), "\" class=\"rte-addsnippet\"><svg class=\"is-icon-flex\" style=\"width:18px;height:18px;margin-top:-1px;\"><use xlink:href=\"#ion-ios-plus-empty\"></use></svg></button>");else if (btn === 'undo') html_rte += "<button title=\"".concat(util.out('Undo'), "\" class=\"rte-undo\"><svg class=\"is-icon-flex\" style=\"margin-top:2px;width:15px;height:15px;\"><use xlink:href=\"#ion-ios-undo\"></use></svg></button>");else if (btn === 'redo') html_rte += "<button title=\"".concat(util.out('Redo'), "\" class=\"rte-redo\"><svg class=\"is-icon-flex\" style=\"margin-top:2px;width:15px;height:15px;\"><use xlink:href=\"#ion-ios-redo\"></use></svg></button>");else if (btn === 'more' && html_rtemore !== '') html_rte += "<button title=\"".concat(util.out('More'), "\" class=\"rte-more\"><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#ion-more\"></use></svg></button>");else if (btn === '|') {
            html_rte += '<div class="rte-separator"></div>';
          } else {
            html_rte += "<button title=\"button not found\" data-plugin=\"".concat(btn, "\">-</button>"); //temporary (later will be replaced with plugin button)
          }
        }

        if (this.builder.opts.toolbarAddSnippetButton && html_rte.indexOf('rte-addsnippet') === -1 && html_rtemore.indexOf('rte-addsnippet') === -1) {
          html_rte = "<button title=\"".concat(util.out('Add Snippet'), "\" class=\"rte-addsnippet\"><svg class=\"is-icon-flex\" style=\"width:18px;height:18px;margin-top:-1px;\"><use xlink:href=\"#ion-ios-plus-empty\"></use></svg></button>") + html_rte;
        }

        if (html_rtemore !== '' && html_rte.indexOf('rte-more') === -1) {
          html_rte = html_rte + "<button title=\"".concat(util.out('More'), "\" class=\"rte-more\"><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#ion-more\"></use></svg></button>");
        } // Element Toolbar


        var html_elementrtemore = '';

        for (j = 0; j < builder.opts.elementButtonsMore.length; j++) {
          btn = builder.opts.elementButtonsMore[j].toLowerCase();
          if (btn === 'gridtool') html_elementrtemore += "<button title=\"".concat(util.out('Grid Tool'), "\" class=\"rte-grideditor\"><svg class=\"is-icon-flex\" style=\"margin-right:-3px;\"><use xlink:href=\"#ion-grid\"></use></svg></button>");else if (btn === 'html') html_elementrtemore += "<button title=\"".concat(util.out('HTML'), "\" class=\"rte-html\"><svg class=\"is-icon-flex\" style=\"margin-right:-3px;width:14px;height:14px;\"><use xlink:href=\"#ion-ios-arrow-left\"></use></svg><svg class=\"is-icon-flex\" style=\"margin-left:-2px;fill:rgba(0, 0, 0, 0.65);width:14px;height:14px;\"><use xlink:href=\"#ion-ios-arrow-right\"></use></svg></button>");else if (btn === 'preferences') html_elementrtemore += "<button title=\"".concat(util.out('Preferences'), "\" class=\"rte-preferences\"><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#ion-wrench\"></use></svg></button>");else if (btn === 'addsnippet') html_elementrtemore += "<button title=\"".concat(util.out('Add Snippet'), "\" class=\"rte-addsnippet\"><svg class=\"is-icon-flex\" style=\"width:18px;height:18px;margin-top:-1px;\"><use xlink:href=\"#ion-ios-plus-empty\"></use></svg></button>");else if (btn === 'undo') html_elementrtemore += "<button title=\"".concat(util.out('Undo'), "\" class=\"rte-undo\"><svg class=\"is-icon-flex\" style=\"margin-top:2px;width:15px;height:15px;\"><use xlink:href=\"#ion-ios-undo\"></use></svg></button>");else if (btn === 'redo') html_elementrtemore += "<button title=\"".concat(util.out('Redo'), "\" class=\"rte-redo\"><svg class=\"is-icon-flex\" style=\"margin-top:2px;width:15px;height:15px;\"><use xlink:href=\"#ion-ios-redo\"></use></svg></button>");else if (btn === '|') {
            html_elementrtemore += '<div class="rte-separator"></div>';
          } else {
            html_elementrtemore += "<button title=\"button not found\" data-plugin=\"".concat(btn, "\">-</button>"); //temporary (later will be replaced with plugin button)
          }
        }

        var html_elementrte = '';

        for (j = 0; j < builder.opts.elementButtons.length; j++) {
          btn = builder.opts.elementButtons[j].toLowerCase();
          if (btn === 'left') html_elementrte += "<button title=\"".concat(util.out('Align Left'), "\" data-align=\"left\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#icon-align-left\"></use></svg></button>");else if (btn === 'center') html_elementrte += "<button title=\"".concat(util.out('Align Center'), "\" data-align=\"center\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#icon-align-center\"></use></svg></button>");else if (btn === 'right') html_elementrte += "<button title=\"".concat(util.out('Align Right'), "\" data-align=\"right\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#icon-align-right\"></use></svg></button>");else if (btn === 'full') html_elementrte += "<button title=\"".concat(util.out('Align Full'), "\" data-align=\"justify\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#icon-align-full\"></use></svg></button>");else if (btn === 'gridtool') html_elementrte += "<button title=\"".concat(util.out('Grid Tool'), "\" class=\"rte-grideditor\"><svg class=\"is-icon-flex\" style=\"margin-right:-3px;width:17px;height:17px;\"><use xlink:href=\"#ion-grid\"></use></svg></button>");else if (btn === 'html') html_elementrte += "<button title=\"".concat(util.out('HTML'), "\" class=\"rte-html\"><svg class=\"is-icon-flex\" style=\"margin-right:-3px;width:14px;height:14px;\"><use xlink:href=\"#ion-ios-arrow-left\"></use></svg><svg class=\"is-icon-flex\" style=\"margin-left:-2px;fill:rgba(0, 0, 0, 0.65);width:14px;height:14px;\"><use xlink:href=\"#ion-ios-arrow-right\"></use></svg></button>");else if (btn === 'preferences') html_elementrte += "<button title=\"".concat(util.out('Preferences'), "\" class=\"rte-preferences\"><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#ion-wrench\"></use></svg></button>");else if (btn === 'addsnippet') html_elementrte += "<button title=\"".concat(util.out('Add Snippet'), "\" class=\"rte-addsnippet\"><svg class=\"is-icon-flex\" style=\"width:18px;height:18px;margin-top:-1px;\"><use xlink:href=\"#ion-ios-plus-empty\"></use></svg></button>");else if (btn === 'undo') html_elementrte += "<button title=\"".concat(util.out('Undo'), "\" class=\"rte-undo\"><svg class=\"is-icon-flex\" style=\"margin-top:2px;width:15px;height:15px;\"><use xlink:href=\"#ion-ios-undo\"></use></svg></button>");else if (btn === 'redo') html_elementrte += "<button title=\"".concat(util.out('Redo'), "\" class=\"rte-redo\"><svg class=\"is-icon-flex\" style=\"margin-top:2px;width:15px;height:15px;\"><use xlink:href=\"#ion-ios-redo\"></use></svg></button>");else if (btn === 'more' && html_elementrtemore !== '') html_elementrte += "<button title=\"".concat(util.out('More'), "\" class=\"rte-more\"><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#ion-more\"></use></svg></button>");else if (btn === '|') {
            html_elementrte += '<div class="rte-separator"></div>';
          } else {
            html_elementrte += "<button title=\"button not found\" data-plugin=\"".concat(btn, "\">-</button>"); //temporary (later will be replaced with plugin button)
          }
        }

        if (this.builder.opts.toolbarAddSnippetButton && html_elementrte.indexOf('rte-addsnippet') === -1 && html_elementrtemore.indexOf('rte-addsnippet') === -1) {
          html_elementrte = "<button title=\"".concat(util.out('Add Snippet'), "\" class=\"rte-addsnippet\"><svg class=\"is-icon-flex\" style=\"width:18px;height:18px;margin-top:-1px;\"><use xlink:href=\"#ion-ios-plus-empty\"></use></svg></button>") + html_rte;
        }

        if (html_elementrtemore !== '' && html_elementrte.indexOf('rte-more') === -1) {
          html_elementrte = html_elementrte + "<button title=\"".concat(util.out('More'), "\" class=\"rte-more\"><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#ion-more\"></use></svg></button>");
        } // <div class="is-draggable" style="width: 5px;height: 45pxpx;background:#fff;cursor: move;"></div>
        // <div style="height:55px;background:#fff;border-top:#f5f5f5 1px solid;">
        // </div>


        var html = "<div class=\"is-rte-tool\" style=\"position:fixed;flex-direction:column;display:none;\">\n                <div style=\"display:flex\">\n                    ".concat(html_rte, "\n                </div>\n            </div>\n\n            <div class=\"is-elementrte-tool\" style=\"position:fixed;flex-direction:column;display:none;\">\n                <div style=\"display:flex\">\n                    ").concat(html_elementrte, "\n                </div>\n            </div>\n\n            <div class=\"rte-formatting-options is-rte-pop\">\n                <div>\n                    <button title=\"").concat(util.out('Strikethrough'), "\" class=\"rte-format\" data-command=\"strikethrough\" style=\"float:left\"><svg class=\"is-icon-flex\" style=\"width:17px;height:17px;\"><use xlink:href=\"#icon-strike\"></use></svg></button>\n                    <button title=\"").concat(util.out('Superscript'), "\" class=\"rte-format\" data-command=\"superscript\" style=\"float:left\"><span style=\"font-family:serif;font-size:13px;\">x</span><sup style=\"font-size:10px\">2</sup></button>\n                    <button title=\"").concat(util.out('Subscript'), "\" class=\"rte-format\" data-command=\"subscript\" style=\"float:left\"><span style=\"font-family:serif;font-size:13px;\">x</span><sub style=\"font-size:10px\">2</sub></button>\n                    <button title=\"").concat(util.out('Uppercase'), "\" class=\"rte-format\" data-command=\"uppercase\" style=\"float:left\"><span style=\"font-family:serif;font-size:14px;display:inline-block;text-transform: none;\">Aa</span></button>\n                    <button title=\"").concat(util.out('Clean'), "\" class=\"rte-format\" data-command=\"clean\"><svg class=\"is-icon-flex\" style=\"width:11px;height:11px;\"><use xlink:href=\"#icon-clean\"></use></svg></button>\n                </div>\n            </div>\n\n            <div class=\"rte-align-options is-rte-pop\">\n                <div>\n                    <button title=\"").concat(util.out('Align Left'), "\" data-align=\"left\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#icon-align-left\"></use></svg></button>\n                    <button title=\"").concat(util.out('Align Center'), "\" data-align=\"center\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#icon-align-center\"></use></svg></button>\n                    <button title=\"").concat(util.out('Align Right'), "\" data-align=\"right\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#icon-align-right\"></use></svg></button>\n                    <button title=\"").concat(util.out('Align Full'), "\" data-align=\"justify\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#icon-align-full\"></use></svg></button>\n                </div>\n            </div>\n\n            <div class=\"rte-list-options is-rte-pop\">\n                <div>\n                    <button title=\"").concat(util.out('Bullets'), "\" data-action=\"insertUnorderedList\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#icon-list-bullet\"></use></svg></button>\n                    <button title=\"").concat(util.out('Numbering'), "\" data-action=\"insertOrderedList\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#icon-list-number\"></use></svg></button>\n                    <button title=\"").concat(util.out('Indent'), "\" data-action=\"indent\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#icon-indent\"></use></svg></button>\n                    <button title=\"").concat(util.out('Outdent'), "\" data-action=\"outdent\"><svg class=\"is-icon-flex\" style=\"width:14px;height:14px;\"><use xlink:href=\"#icon-outdent\"></use></svg></use></svg></svg></button>\n                </div>\n            </div>\n\n            <div class=\"rte-paragraph-options is-rte-pop\">\n                <div>\n                    <div title=\"").concat(util.out('Heading 1'), "\" data-block=\"h1\"><h1>Heading 1</h1></div>\n                    <div title=\"").concat(util.out('Heading 2'), "\" data-block=\"h2\"><h2>Heading 2</h2></div>\n                    <div title=\"").concat(util.out('Heading 3'), "\" data-block=\"h3\"><h3>Heading 3</h3></div>\n                    <div title=\"").concat(util.out('Heading 4'), "\" data-block=\"h4\"><h4>Heading 4</h4></div>\n                    <div title=\"").concat(util.out('Paragraph'), "\" data-block=\"p\"><p>Paragraph</p></div>\n                    <div title=\"").concat(util.out('Preformatted'), "\" data-block=\"pre\"><p style=\"font-family:courier;\">Preformatted</p></div>\n                </div>\n            </div>\n\n            <div class=\"rte-fontfamily-options is-rte-pop\">\n                <iframe src=\"about:blank\"></iframe>\n            </div>\n\n            <div class=\"rte-color-picker is-rte-pop\" data-command=\"forecolor\">\n                <div class=\"is-pop-tabs\">\n                    <div class=\"is-pop-tab-item active\" data-value=\"forecolor\">").concat(util.out('Forecolor'), "</div>\n                    <div class=\"is-pop-tab-item\" data-value=\"backcolor\">").concat(util.out('Backcolor'), "</div>\n                </div>\n                <div class=\"rte-color-picker-area\"></div>\n            </div>\n            \n            <div class=\"rte-textsetting-options is-rte-pop\">\n                <div>\n                    <div class=\"is-label\" style=\"margin-top:0;border-top:none\">").concat(util.out('Font Size'), "</div>\n                    <div class=\"rte-fontsize-options\" style=\"display: flex;flex-flow: wrap;\">\n                        <button title=\"14px\" data-value=\"14\">14</button>\n                        <button title=\"16px\" data-value=\"16\">16</button>\n                        <button title=\"18px\" data-value=\"18\">18</button>\n                        <button title=\"21px\" data-value=\"21\">21</button>\n                        <button title=\"24px\" data-value=\"24\">24</button>\n                        <button title=\"28px\" data-value=\"28\">28</button>\n                        <button title=\"32px\" data-value=\"32\">32</button>\n                        <!--<button title=\"35px\" data-value=\"35\">35</button>-->\n                        <button title=\"38px\" data-value=\"38\">38</button>\n                        <!--<button title=\"42px\" data-value=\"42\">42</button>-->\n                        <button title=\"48px\" data-value=\"48\">48</button>\n                        <!--<button title=\"54px\" data-value=\"54\">54</button>-->\n                        <button title=\"60px\" data-value=\"60\">60</button>\n                        <!--<button title=\"68px\" data-value=\"68\">68</button>-->\n                        <button title=\"76px\" data-value=\"76\">76</button>\n                        <!--<button title=\"84px\" data-value=\"84\">84</button>-->\n                        <button title=\"96px\" data-value=\"96\">96</button>\n                        <button title=\"").concat(util.out('Decrease'), "\" data-value=\"-\" style=\"font-size:13px\">-</button>\n                        <button title=\"").concat(util.out('Increase'), "\" data-value=\"+\" style=\"font-size:13px\">+</button>\n                        <button title=\"").concat(util.out('Clear'), "\" data-value=\"\"><svg class=\"is-icon-flex\" style=\"width:18px;height:18px;margin-top: 2px;\"><use xlink:href=\"#ion-ios-close-empty\"></use></svg></button>\n                    </div>\n                    <div class=\"is-label\">").concat(util.out('Line Spacing'), "</div>\n                    <div class=\"rte-lineheight-options\" style=\"display: flex;flex-flow: wrap;\">\n                        <button title=\"1\" data-value=\"1\">1</button>\n                        <button title=\"1.2\" data-value=\"1.2\">1.2</button>\n                        <button title=\"1.4\" data-value=\"1.4\">1.4</button>\n                        <button title=\"1.6\" data-value=\"1.6\">1.6</button>\n                        <button title=\"1.8\" data-value=\"1.8\">1.8</button>\n                        <button title=\"2\" data-value=\"2\">2</button>\n                        <button title=\"2.2\" data-value=\"2.2\">2.2</button>\n                        <button title=\"").concat(util.out('Decrease'), "\" data-value=\"-\" style=\"font-size:13px\">-</button>\n                        <button title=\"").concat(util.out('Increase'), "\" data-value=\"+\" style=\"font-size:13px\">+</button>\n                        <button title=\"").concat(util.out('Clear'), "\" data-value=\"\"><svg class=\"is-icon-flex\" style=\"width:18px;height:18px;margin-top: 2px;\"><use xlink:href=\"#ion-ios-close-empty\"></use></svg></button>\n                    </div>\n                    <div class=\"is-label\">").concat(util.out('Letter Spacing'), "</div>\n                    <div class=\"rte-letterspacing-options\" style=\"display: flex;flex-flow: wrap;\">\n                        <button title=\"1\" data-value=\"1\">1</button>\n                        <button title=\"2\" data-value=\"2\">2</button>\n                        <button title=\"").concat(util.out('Decrease'), "\" data-value=\"-\" style=\"font-size:13px\">-</button>\n                        <button title=\"").concat(util.out('Increase'), "\" data-value=\"+\" style=\"font-size:13px\">+</button>\n                        <button title=\"").concat(util.out('Clear'), "\" data-value=\"\"><svg class=\"is-icon-flex\" style=\"width:18px;height:18px;margin-top: 2px;\"><use xlink:href=\"#ion-ios-close-empty\"></use></svg></button>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"is-modal insertimage\">\n                <div style=\"max-width:560px;\">\n                    <div class=\"is-browse-area\">\n                        <div class=\"is-drop-area\">\n                            <input id=\"fileInsertImage\" type=\"file\" accept=\"image/*\" />\n                            <div class=\"drag-text\">\n                                <p style=\"display:flex;justify-content:center;align-items:center;\"><svg class=\"is-icon-flex\" style=\"fill:rgba(0, 0, 0, 0.7);width:20px;height:20px;\"><use xlink:href=\"#ion-camera\"></use></svg> <span style=\"margin-left:5px;margin-top:3px;\"> ").concat(util.out('Drag and drop an image or click to browse.'), " </span></p>\n                            </div>\n                        </div>\n                        <div class=\"is-preview-area\">\n                            <div><img id=\"imgInsertImagePreview\" alt=\"\" /><i class=\"ion-ios-close-empty\"></i></div>\n                        </div>\n                    </div>    \n                    <p>").concat(util.out('Or Specify Image Source'), ":</p>\n                    ").concat((this.builder.opts.onImageSelectClick + '').replace(/\s/g, '') !== 'function(){}' || this.builder.opts.imageselect !== '' ? "<div class=\"image-src clearfix\" style=\"margin-bottom: 12px;\"><input class=\"input-src\" type=\"text\" placeholder=\"".concat(util.out('Source'), "\"><button title=\"").concat(util.out('Select'), "\" class=\"input-select\" style=\"flex:none;width:50px;height:50px;\"><svg class=\"is-icon-flex\"><use xlink:href=\"#ion-more\"></use></svg></button></div>") : "<div class=\"image-src clearfix\" style=\"margin-bottom: 12px;\"><input class=\"input-src\" type=\"text\" placeholder=\"".concat(util.out('Source'), "\"></div>"), "\n                    <div style=\"text-align:right\">\n                        <button title=\"").concat(util.out('Cancel'), "\" class=\"input-cancel classic-secondary\">").concat(util.out('Cancel'), "</button>\n                        <button title=\"").concat(util.out('Ok'), "\" class=\"input-ok classic-primary\">").concat(util.out('Ok'), "</button>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"rte-icon-options is-rte-pop\">\n                <iframe id=\"ifrIconInsert\" src=\"about:blank\"></iframe>\n            </div>\n\n            <div class=\"rte-customtag-options is-rte-pop\">\n                <div>").concat(customTagsHtml, "</div>\n            </div>\n\n            <div class=\"rte-more-options is-rte-pop\">\n                <div>\n                ").concat(html_rtemore, "\n                </div>\n            </div>\n\n            <div class=\"elementrte-more-options is-rte-pop\">\n                <div>\n                ").concat(html_elementrtemore, "\n                </div>\n            </div>\n            ");
        dom$4.appendHtml(builderStuff, html);
        rteTool = builderStuff.querySelector('.is-rte-tool');
        elementRteTool = builderStuff.querySelector('.is-elementrte-tool');
        rteMoreOptions = builderStuff.querySelector('.rte-more-options');
        elementRteMoreOptions = builderStuff.querySelector('.elementrte-more-options');
        rteAlignOptions = builderStuff.querySelector('.rte-align-options');
        rteFormattingOptions = builderStuff.querySelector('.rte-formatting-options');
        rteColorPicker = builderStuff.querySelector('.rte-color-picker');
        rteListOptions = builderStuff.querySelector('.rte-list-options');
        rteFontFamilyOptions = builderStuff.querySelector('.rte-fontfamily-options');
        rteParagraphOptions = builderStuff.querySelector('.rte-paragraph-options');
        rteTextSettingOptions = builderStuff.querySelector('.rte-textsetting-options');
        rteIconOptions = builderStuff.querySelector('.rte-icon-options');
        rteCustomTagOptions = builderStuff.querySelector('.rte-customtag-options'); // Prepare for tooltip

        var elms = rteTool.querySelectorAll('[title]');
        Array.prototype.forEach.call(elms, function (elm) {
          elm.setAttribute('data-title', elm.getAttribute('title'));
        });
        elms = elementRteTool.querySelectorAll('[title]');
        Array.prototype.forEach.call(elms, function (elm) {
          elm.setAttribute('data-title', elm.getAttribute('title'));
        });
        elms = rteAlignOptions.querySelectorAll('[title]');
        Array.prototype.forEach.call(elms, function (elm) {
          elm.setAttribute('data-title', elm.getAttribute('title'));
        });
        elms = rteFormattingOptions.querySelectorAll('[title]');
        Array.prototype.forEach.call(elms, function (elm) {
          elm.setAttribute('data-title', elm.getAttribute('title'));
        });
        elms = rteListOptions.querySelectorAll('[title]');
        Array.prototype.forEach.call(elms, function (elm) {
          elm.setAttribute('data-title', elm.getAttribute('title'));
        });
        elms = rteMoreOptions.querySelectorAll('[title]');
        Array.prototype.forEach.call(elms, function (elm) {
          elm.setAttribute('data-title', elm.getAttribute('title'));
        });
        elms = elementRteMoreOptions.querySelectorAll('[title]');
        Array.prototype.forEach.call(elms, function (elm) {
          elm.setAttribute('data-title', elm.getAttribute('title'));
        });

        if (this.builder.isTouchSupport) {
          // On iPad, on double click text to select word, getSelected() won't return the word, instead it returns empty
          // So this is needed to call getSelected() after 'selectionchange' that is triggered after double click a text.
          document.addEventListener('selectionchange', function () {
            if (dom$4.checkEditable()) {
              var text = dom$4.getSelected();

              if (text.trim() !== '') {
                //save selection
                util.saveSelection();
              }
            }
          }, false);
        }
      }

      this.rteTool = rteTool;
      this.elementRteTool = elementRteTool;
      this.rteAlignOptions = rteAlignOptions;
      this.rteFormattingOptions = rteFormattingOptions;
      this.rteColorPicker = rteColorPicker;
      this.rteListOptions = rteListOptions;
      this.rteFontFamilyOptions = rteFontFamilyOptions;
      this.rteParagraphOptions = rteParagraphOptions;
      this.rteMoreOptions = rteMoreOptions;
      this.elementRteMoreOptions = elementRteMoreOptions;
      this.rteTextSettingOptions = rteTextSettingOptions;
      this.rteIconOptions = rteIconOptions;
      this.rteCustomTagOptions = rteCustomTagOptions;
      this.positionToolbar(); // Formatting

      var btnRteFormatting = this.rteTool.querySelector('button.rte-formatting');
      btnRteFormatting = btnRteFormatting ? btnRteFormatting : this.rteMoreOptions.querySelector('button.rte-formatting');
      if (btnRteFormatting) dom$4.addEventListener(btnRteFormatting, 'click', function () {
        var pop = _this.rteFormattingOptions;
        var top = btnRteFormatting.getBoundingClientRect().top; // + window.pageYOffset;

        var left = btnRteFormatting.getBoundingClientRect().left; // + window.pageXOffset;

        pop.style.display = 'flex';
        var w = pop.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

        var h = pop.offsetHeight;

        if (!dom$4.hasClass(pop, 'active')) {
          if (_this.builder.opts.toolbar === 'left') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = left + 54 + 'px';
            pop.style.right = 'auto';
          } else if (_this.builder.opts.toolbar === 'right') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = 'auto';
            var viewportWidth = window.innerWidth;
            pop.style.right = viewportWidth - left + 9 + 'px';
          } else {
            pop.style.top = top + 54 - 6 + 'px';
            pop.style.left = left - w / 2 + 23 + 'px';
            pop.style.right = 'auto';
          }

          dom$4.removeClass(pop, 'deactive');
          dom$4.addClass(pop, 'active');
        } else {
          dom$4.removeClass(pop, 'active');
          dom$4.addClass(pop, 'deactive');
        }
      }); // Align

      var btnRteAlign = this.rteTool.querySelector('button.rte-align');
      btnRteAlign = btnRteAlign ? btnRteAlign : this.rteMoreOptions.querySelector('button.rte-align');
      if (btnRteAlign) dom$4.addEventListener(btnRteAlign, 'click', function () {
        var pop = _this.rteAlignOptions;
        var top = btnRteAlign.getBoundingClientRect().top; // + window.pageYOffset;

        var left = btnRteAlign.getBoundingClientRect().left; // + window.pageXOffset;

        pop.style.display = 'flex';
        var w = pop.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

        var h = pop.offsetHeight;

        if (!dom$4.hasClass(pop, 'active')) {
          if (_this.builder.opts.toolbar === 'left') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = left + 54 + 'px';
            pop.style.right = 'auto';
          } else if (_this.builder.opts.toolbar === 'right') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = 'auto';
            var viewportWidth = window.innerWidth;
            pop.style.right = viewportWidth - left + 9 + 'px';
          } else {
            pop.style.top = top + 54 - 6 + 'px';
            pop.style.left = left - w / 2 + 23 + 'px';
            pop.style.right = 'auto';
          }

          dom$4.removeClass(pop, 'deactive');
          dom$4.addClass(pop, 'active');
        } else {
          dom$4.removeClass(pop, 'active');
          dom$4.addClass(pop, 'deactive');
        }
      }); // List

      var btnRteList = this.rteTool.querySelector('button.rte-list');
      btnRteList = btnRteList ? btnRteList : this.rteMoreOptions.querySelector('button.rte-list');
      if (btnRteList) dom$4.addEventListener(btnRteList, 'click', function () {
        var pop = _this.rteListOptions;
        var top = btnRteList.getBoundingClientRect().top; // + window.pageYOffset;

        var left = btnRteList.getBoundingClientRect().left; // + window.pageXOffset;

        pop.style.display = 'flex';
        var w = pop.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

        var h = pop.offsetHeight;

        if (!dom$4.hasClass(pop, 'active')) {
          if (_this.builder.opts.toolbar === 'left') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = left + 54 + 'px';
            pop.style.right = 'auto';
          } else if (_this.builder.opts.toolbar === 'right') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = 'auto';
            var viewportWidth = window.innerWidth;
            pop.style.right = viewportWidth - left + 9 + 'px';
          } else {
            pop.style.top = top + 54 - 6 + 'px';
            pop.style.left = left - w / 2 + 23 + 'px';
            pop.style.right = 'auto';
          }

          dom$4.removeClass(pop, 'deactive');
          dom$4.addClass(pop, 'active');
        } else {
          dom$4.removeClass(pop, 'active');
          dom$4.addClass(pop, 'deactive');
        }
      }); // Custom Tags

      var btnRteTags = this.rteTool.querySelector('button.rte-tags');
      btnRteTags = btnRteTags ? btnRteTags : this.rteMoreOptions.querySelector('button.rte-tags');
      if (btnRteTags) dom$4.addEventListener(btnRteTags, 'click', function () {
        var pop = _this.rteCustomTagOptions;
        var top = btnRteTags.getBoundingClientRect().top; // + window.pageYOffset;

        var left = btnRteTags.getBoundingClientRect().left; // + window.pageXOffset;

        pop.style.display = 'flex';
        var w = pop.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

        var h = pop.offsetHeight;

        if (!dom$4.hasClass(pop, 'active')) {
          if (_this.builder.opts.toolbar === 'left') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = left + 54 + 'px';
            pop.style.right = 'auto';
          } else if (_this.builder.opts.toolbar === 'right') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = 'auto';
            var viewportWidth = window.innerWidth;
            pop.style.right = viewportWidth - left + 9 + 'px';
          } else {
            pop.style.top = top + 54 - 6 + 'px';
            pop.style.left = left - w / 2 + 23 + 'px';
            pop.style.right = 'auto';
          }

          if (dom$4.parentsHasClass(btnRteTags, 'rte-more-options')) {
            // Adjustment if button is placed on 2nd bar (div.rte-more-options)
            if (_this.builder.opts.toolbar === 'left') {
              pop.style.top = parseInt(_this.rteMoreOptions.style.top) + _this.rteMoreOptions.offsetHeight - h + 'px';
              pop.style.left = left + 54 + 'px';
              pop.style.right = 'auto';
            } else if (_this.builder.opts.toolbar === 'right') {
              pop.style.top = parseInt(_this.rteMoreOptions.style.top) + _this.rteMoreOptions.offsetHeight - h + 'px';
              pop.style.left = 'auto';
              var _viewportWidth = window.innerWidth;
              pop.style.right = _viewportWidth - left + 9 + 'px';
            } else {
              pop.style.top = top + 54 - 6 + 'px';

              if (btnRteTags.getBoundingClientRect().left + 45 - parseInt(_this.rteMoreOptions.style.left) < pop.offsetWidth) {
                pop.style.left = parseInt(_this.rteMoreOptions.style.left) + 'px';
              } else if (parseInt(_this.rteMoreOptions.style.left) + _this.rteMoreOptions.offsetWidth - btnRteTags.getBoundingClientRect().left + 45 < pop.offsetWidth) {
                pop.style.left = parseInt(_this.rteMoreOptions.style.left) + _this.rteMoreOptions.offsetWidth - w + 'px';
              } else ;

              pop.style.right = 'auto';
            }
          }

          dom$4.removeClass(pop, 'deactive');
          dom$4.addClass(pop, 'active');
        } else {
          dom$4.removeClass(pop, 'active');
          dom$4.addClass(pop, 'deactive');
        }
      }); // Paragraph

      var btnRteParagraph = this.rteTool.querySelector('button.rte-paragraph');
      btnRteParagraph = btnRteParagraph ? btnRteParagraph : this.rteMoreOptions.querySelector('button.rte-paragraph');
      if (btnRteParagraph) dom$4.addEventListener(btnRteParagraph, 'click', function () {
        var pop = _this.rteParagraphOptions;
        var top = btnRteParagraph.getBoundingClientRect().top; // + window.pageYOffset;

        var left = btnRteParagraph.getBoundingClientRect().left; // + window.pageXOffset;

        pop.style.display = 'flex';
        var w = pop.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

        var h = pop.offsetHeight;

        if (!dom$4.hasClass(pop, 'active')) {
          if (_this.builder.opts.toolbar === 'left') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = left + 54 + 'px';
            pop.style.right = 'auto';
          } else if (_this.builder.opts.toolbar === 'right') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = 'auto';
            var viewportWidth = window.innerWidth;
            pop.style.right = viewportWidth - left + 9 + 'px';
          } else {
            pop.style.top = top + 54 - 6 + 'px';
            pop.style.left = left - w / 2 + 23 + 'px';
            pop.style.right = 'auto';
          }

          if (dom$4.parentsHasClass(btnRteParagraph, 'rte-more-options')) {
            // Adjustment if button is placed on 2nd bar (div.rte-more-options)
            if (_this.builder.opts.toolbar === 'left') {
              pop.style.top = parseInt(_this.rteMoreOptions.style.top) + _this.rteMoreOptions.offsetHeight - h + 'px';
              pop.style.left = left + 54 + 'px';
              pop.style.right = 'auto';
            } else if (_this.builder.opts.toolbar === 'right') {
              pop.style.top = parseInt(_this.rteMoreOptions.style.top) + _this.rteMoreOptions.offsetHeight - h + 'px';
              pop.style.left = 'auto';
              var _viewportWidth2 = window.innerWidth;
              pop.style.right = _viewportWidth2 - left + 9 + 'px';
            } else {
              pop.style.top = top + 54 - 6 + 'px';
              pop.style.left = parseInt(_this.rteMoreOptions.style.left) + _this.rteMoreOptions.offsetWidth - w + 'px';
              pop.style.right = 'auto';
            }
          }

          dom$4.removeClass(pop, 'deactive');
          dom$4.addClass(pop, 'active');
        } else {
          dom$4.removeClass(pop, 'active');
          dom$4.addClass(pop, 'deactive');
        }

        _this.getState();
      }); // Font Family

      var iframe = rteFontFamilyOptions.querySelector('iframe');
      var doc = iframe.contentWindow.document;
      doc.open();

      if (!this.builder.opts.emailMode) {
        doc.write(util.getFontFamilyHTML());
      } else {
        doc.write(util.getFontFamilyEmail());
      }

      doc.close();
      var btnRteFontFamily = this.rteTool.querySelector('button.rte-fontfamily');
      btnRteFontFamily = btnRteFontFamily ? btnRteFontFamily : this.rteMoreOptions.querySelector('button.rte-fontfamily');
      if (btnRteFontFamily) dom$4.addEventListener(btnRteFontFamily, 'click', function () {
        var pop = _this.rteFontFamilyOptions;
        var top = btnRteFontFamily.getBoundingClientRect().top; // + window.pageYOffset;

        var left = btnRteFontFamily.getBoundingClientRect().left; // + window.pageXOffset;

        pop.style.display = 'flex';
        var w = pop.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

        var h = pop.offsetHeight;

        if (!dom$4.hasClass(pop, 'active')) {
          if (_this.builder.opts.toolbar === 'left') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = left + 54 + 'px';
            pop.style.right = 'auto';
          } else if (_this.builder.opts.toolbar === 'right') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = 'auto';
            var viewportWidth = window.innerWidth;
            pop.style.right = viewportWidth - left + 9 + 'px';
          } else {
            pop.style.top = top + 54 - 6 + 'px';
            pop.style.left = left - w / 2 + 23 + 'px';
            pop.style.right = 'auto';
          }

          if (dom$4.parentsHasClass(btnRteFontFamily, 'rte-more-options')) {
            // Adjustment if button is placed on 2nd bar (div.rte-more-options)
            if (_this.builder.opts.toolbar === 'left') {
              pop.style.top = parseInt(_this.rteMoreOptions.style.top) + _this.rteMoreOptions.offsetHeight - h + 'px';
              pop.style.left = left + 54 + 'px';
              pop.style.right = 'auto';
            } else if (_this.builder.opts.toolbar === 'right') {
              pop.style.top = parseInt(_this.rteMoreOptions.style.top) + _this.rteMoreOptions.offsetHeight - h + 'px';
              pop.style.left = 'auto';
              var _viewportWidth3 = window.innerWidth;
              pop.style.right = _viewportWidth3 - left + 9 + 'px';
            } else {
              pop.style.top = top + 54 - 6 + 'px';
              pop.style.left = parseInt(_this.rteMoreOptions.style.left) + _this.rteMoreOptions.offsetWidth - w + 'px';
              pop.style.right = 'auto';
            }
          }

          dom$4.removeClass(pop, 'deactive');
          dom$4.addClass(pop, 'active');
        } else {
          dom$4.removeClass(pop, 'active');
          dom$4.addClass(pop, 'deactive');
        }

        _this.getState();

        var iframe = pop.querySelector('iframe');
        var area = iframe.contentWindow.document.querySelector('#divFontList');
        var target = area.querySelector('.on');
        if (target) area.scrollTop = area.scrollTop + target.getBoundingClientRect().top;
      }); // Icons

      iframe = rteIconOptions.querySelector('iframe');
      doc = iframe.contentWindow.document;
      doc.open();
      doc.write(this.getIconsHTML());
      doc.close();
      var btnRteIcons = this.rteTool.querySelector('button.rte-icon');
      btnRteIcons = btnRteIcons ? btnRteIcons : this.rteMoreOptions.querySelector('button.rte-icon');
      if (btnRteIcons) dom$4.addEventListener(btnRteIcons, 'click', function () {
        var pop = _this.rteIconOptions;
        var top = btnRteIcons.getBoundingClientRect().top; // + window.pageYOffset;

        var left = btnRteIcons.getBoundingClientRect().left; // + window.pageXOffset;

        pop.style.display = 'flex';
        var w = pop.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

        var h = pop.offsetHeight;

        if (!dom$4.hasClass(pop, 'active')) {
          if (_this.builder.opts.toolbar === 'left') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = left + 54 + 'px';
            pop.style.right = 'auto';
          } else if (_this.builder.opts.toolbar === 'right') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = 'auto';
            var viewportWidth = window.innerWidth;
            pop.style.right = viewportWidth - left + 9 + 'px';
          } else {
            pop.style.top = top + 54 - 6 + 'px';
            pop.style.left = left - w / 2 + 23 + 'px';
            pop.style.right = 'auto';
          }

          if (dom$4.parentsHasClass(btnRteIcons, 'rte-more-options')) {
            // Adjustment if button is placed on 2nd bar (div.rte-more-options)
            if (_this.builder.opts.toolbar === 'left') {
              pop.style.top = parseInt(_this.rteMoreOptions.style.top) + _this.rteMoreOptions.offsetHeight - h + 'px';
              pop.style.left = left + 54 + 'px';
              pop.style.right = 'auto';
            } else if (_this.builder.opts.toolbar === 'right') {
              pop.style.top = parseInt(_this.rteMoreOptions.style.top) + _this.rteMoreOptions.offsetHeight - h + 'px';
              pop.style.left = 'auto';
              var _viewportWidth4 = window.innerWidth;
              pop.style.right = _viewportWidth4 - left + 9 + 'px';
            } else {
              pop.style.top = top + 54 - 6 + 'px';

              if (btnRteIcons.getBoundingClientRect().left + 45 - parseInt(_this.rteMoreOptions.style.left) < pop.offsetWidth) {
                pop.style.left = parseInt(_this.rteMoreOptions.style.left) + 'px';
              } else if (parseInt(_this.rteMoreOptions.style.left) + _this.rteMoreOptions.offsetWidth - btnRteIcons.getBoundingClientRect().left + 45 < pop.offsetWidth) {
                pop.style.left = parseInt(_this.rteMoreOptions.style.left) + _this.rteMoreOptions.offsetWidth - w + 'px';
              } else ;

              pop.style.right = 'auto';
            }
          }

          dom$4.removeClass(pop, 'deactive');
          dom$4.addClass(pop, 'active');
        } else {
          dom$4.removeClass(pop, 'active');
          dom$4.addClass(pop, 'deactive');
        }
      }); // Color

      var btnRteColor = this.rteTool.querySelector('button.rte-color');
      btnRteColor = btnRteColor ? btnRteColor : this.rteMoreOptions.querySelector('button.rte-color');
      if (btnRteColor) dom$4.addEventListener(btnRteColor, 'click', function () {
        var pop = _this.rteColorPicker;
        var top = btnRteColor.getBoundingClientRect().top; // + window.pageYOffset;

        var left = btnRteColor.getBoundingClientRect().left; // + window.pageXOffset;

        pop.style.display = 'flex';
        var w = pop.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.
        // const h = pop.offsetHeight;

        if (!dom$4.hasClass(pop, 'active')) {
          _this.builder.uo.saveForUndo(true); // checkLater = true


          if (_this.builder.opts.toolbar === 'left') {
            pop.style.top = _this.rteTool.style.top; //(top - (h/2) + 20) + 'px';

            pop.style.left = left + 54 + 'px';
            pop.style.right = 'auto';
          } else if (_this.builder.opts.toolbar === 'right') {
            pop.style.top = _this.rteTool.style.top; //(top - (h/2) + 20) + 'px';

            pop.style.left = 'auto';
            var viewportWidth = window.innerWidth;
            pop.style.right = viewportWidth - left + 9 + 'px';
          } else {
            pop.style.top = top + 54 - 6 + 'px';
            pop.style.left = left - w / 2 + 23 + 'px';
            pop.style.right = 'auto';
          }

          dom$4.removeClass(pop, 'deactive');
          dom$4.addClass(pop, 'active');
        } else {
          dom$4.removeClass(pop, 'active');
          dom$4.addClass(pop, 'deactive');
        }
      }); // Preferences

      var btnRtePreferences = this.rteTool.querySelector('button.rte-preferences');
      btnRtePreferences = btnRtePreferences ? btnRtePreferences : this.rteMoreOptions.querySelector('button.rte-preferences');
      if (btnRtePreferences) dom$4.addEventListener(btnRtePreferences, 'click', function () {
        _this.builder.viewPreferences();
      });
      btnRtePreferences = this.elementRteTool.querySelector('button.rte-preferences');
      btnRtePreferences = btnRtePreferences ? btnRtePreferences : this.elementRteMoreOptions.querySelector('button.rte-preferences');
      if (btnRtePreferences) dom$4.addEventListener(btnRtePreferences, 'click', function () {
        _this.builder.viewPreferences();
      }); // View HTML

      var btnRteHtml = this.rteTool.querySelector('button.rte-html');
      btnRteHtml = btnRteHtml ? btnRteHtml : this.rteMoreOptions.querySelector('button.rte-html');
      if (btnRteHtml) dom$4.addEventListener(btnRteHtml, 'click', function () {
        _this.builder.viewHtml();
      });
      btnRteHtml = this.elementRteTool.querySelector('button.rte-html');
      btnRteHtml = btnRteHtml ? btnRteHtml : this.elementRteMoreOptions.querySelector('button.rte-html');
      if (btnRteHtml) dom$4.addEventListener(btnRteHtml, 'click', function () {
        _this.builder.viewHtml();
      }); // Grid Editor

      var btnRteGridEditor = this.rteTool.querySelector('button.rte-grideditor');
      btnRteGridEditor = btnRteGridEditor ? btnRteGridEditor : this.rteMoreOptions.querySelector('button.rte-grideditor');
      if (btnRteGridEditor) dom$4.addEventListener(btnRteGridEditor, 'click', function () {
        // direct
        var grideditor = _this.builderStuff.querySelector('.grideditor');

        dom$4.addClass(grideditor, 'active');
        var builders = document.querySelectorAll(_this.builder.opts.container);
        Array.prototype.forEach.call(builders, function (builder) {
          builder.setAttribute('grideditor', '');
        });
      });
      btnRteGridEditor = this.elementRteTool.querySelector('button.rte-grideditor');
      btnRteGridEditor = btnRteGridEditor ? btnRteGridEditor : this.elementRteMoreOptions.querySelector('button.rte-grideditor');
      if (btnRteGridEditor) dom$4.addEventListener(btnRteGridEditor, 'click', function () {
        // direct
        var grideditor = _this.builderStuff.querySelector('.grideditor');

        dom$4.addClass(grideditor, 'active');
        var builders = document.querySelectorAll(_this.builder.opts.container);
        Array.prototype.forEach.call(builders, function (builder) {
          builder.setAttribute('grideditor', '');
        });
      }); // Undo

      var btnRteUndo = this.rteTool.querySelector('button.rte-undo');
      btnRteUndo = btnRteUndo ? btnRteUndo : this.rteMoreOptions.querySelector('button.rte-undo');
      if (btnRteUndo) dom$4.addEventListener(btnRteUndo, 'click', function () {
        _this.builder.uo.doUndo();
      });
      btnRteUndo = this.elementRteTool.querySelector('button.rte-undo');
      btnRteUndo = btnRteUndo ? btnRteUndo : this.elementRteMoreOptions.querySelector('button.rte-undo');
      if (btnRteUndo) dom$4.addEventListener(btnRteUndo, 'click', function () {
        _this.builder.uo.doUndo();
      }); // Redo

      var btnRteRedo = this.rteTool.querySelector('button.rte-redo');
      btnRteRedo = btnRteRedo ? btnRteRedo : this.rteMoreOptions.querySelector('button.rte-redo');
      if (btnRteRedo) dom$4.addEventListener(btnRteRedo, 'click', function () {
        _this.builder.uo.doRedo();
      });
      btnRteRedo = this.elementRteTool.querySelector('button.rte-redo');
      btnRteRedo = btnRteRedo ? btnRteRedo : this.elementRteMoreOptions.querySelector('button.rte-redo');
      if (btnRteRedo) dom$4.addEventListener(btnRteRedo, 'click', function () {
        _this.builder.uo.doRedo();
      }); // Add Snippet

      var btnRteAddSnippet = this.rteTool.querySelector('button.rte-addsnippet');
      if (btnRteAddSnippet) dom$4.addEventListener(btnRteAddSnippet, 'click', function () {
        _this.viewSnippets();
      });
      btnRteAddSnippet = this.elementRteTool.querySelector('button.rte-addsnippet');
      if (btnRteAddSnippet) dom$4.addEventListener(btnRteAddSnippet, 'click', function () {
        _this.viewSnippets();
      }); // Link

      var btnRteLink = this.rteTool.querySelector('button.rte-link');
      btnRteLink = btnRteLink ? btnRteLink : this.rteMoreOptions.querySelector('button.rte-link');
      if (btnRteLink) dom$4.addEventListener(btnRteLink, 'click', function () {
        var util = new Util(_this.builder);
        util.clearActiveCell();

        _this.hyperlink.createLink();
      }); // Image

      var btnRteImage = this.rteTool.querySelector('button.rte-image');
      btnRteImage = btnRteImage ? btnRteImage : this.rteMoreOptions.querySelector('button.rte-image');
      if (btnRteImage) dom$4.addEventListener(btnRteImage, 'click', function () {
        var modal = _this.builderStuff.querySelector('.insertimage');

        util.showModal(modal, true, function () {//if(!this.builder.isTouchSupport) util.restoreSelection();
        }, false); //Clear previous

        modal.querySelector('#fileInsertImage').value = ''; // clear

        modal.querySelector('.is-preview-area').style.display = 'none';
        modal.querySelector('.is-drop-area').style.display = 'block';
        dom$4.removeClass(modal.querySelector('.is-drop-area'), 'image-dropping'); //Clear image source input

        modal.querySelector('.input-src').value = '';
      });
      var modalInsertImage = this.builderStuff.querySelector('.insertimage');
      var fileInsertImage = modalInsertImage.querySelector('#fileInsertImage');
      dom$4.addEventListener(fileInsertImage, 'change', function (e) {
        var input = e.target;

        if (input.files && input.files[0]) {
          var reader = new FileReader();

          reader.onload = function (e) {
            modalInsertImage.querySelector('.is-drop-area').style.display = 'none';
            modalInsertImage.querySelector('#imgInsertImagePreview').src = e.target.result;
            modalInsertImage.querySelector('.is-preview-area').style.display = 'block';
            var fileToInsert = input.files[0].name;
            modalInsertImage.querySelector('#imgInsertImagePreview').setAttribute('data-filename', fileToInsert); //modalInsertImage.querySelector('.image-title').innerHTML = input.files[0].name;
          };

          reader.readAsDataURL(input.files[0]);
          modalInsertImage.querySelector('.input-src').value = ''; //Clear manually specified image soure
        }
      });
      var btnInsertImageOk = modalInsertImage.querySelector('.input-ok');
      dom$4.addEventListener(btnInsertImageOk, 'click', function () {
        if (!_this.builder.activeCol) {
          util.hideModal(modalInsertImage);
          return;
        }

        _this.builder.uo.saveForUndo();

        util.restoreSelection(); //a must

        var val = '';

        if (modalInsertImage.querySelector('.is-drop-area').style.display === 'none') {
          val = modalInsertImage.querySelector('#imgInsertImagePreview').src;
        } else {
          val = modalInsertImage.querySelector('.input-src').value;
        }

        if (val === '') return;
        var fileToInsert = modalInsertImage.querySelector('#imgInsertImagePreview').getAttribute('data-filename');
        util.pasteHtmlAtCaret('<img data-filename="' + fileToInsert + '" src="' + val + '" alt="" />', false);
        util.hideModal(modalInsertImage);

        _this.builder.applyBehavior(); //save selection


        util.saveSelection(); //Trigger Change event

        _this.builder.opts.onChange(); //Trigger Render event


        _this.builder.opts.onRender();
      });
      var btnInsertImageCancel = modalInsertImage.querySelector('.input-cancel');
      dom$4.addEventListener(btnInsertImageCancel, 'click', function () {
        util.hideModal(modalInsertImage);
      });
      var dropArea = modalInsertImage.querySelector('.is-drop-area');
      dom$4.addEventListener(dropArea, 'dragover', function () {
        dom$4.addClass(dropArea, 'image-dropping');
      });
      dom$4.addEventListener(dropArea, 'dragleave', function () {
        dom$4.removeClass(dropArea, 'image-dropping');
      });
      var delImageInsert = modalInsertImage.querySelector('.is-preview-area i');
      dom$4.addEventListener(delImageInsert, 'click', function () {
        //Clear drop image area
        modalInsertImage.querySelector('#fileInsertImage').value = ''; // clear

        modalInsertImage.querySelector('.is-preview-area').style.display = 'none';
        dropArea.style.display = 'block';
        dom$4.removeClass(dropArea, 'image-dropping');
      });
      var inputImageInsertSrc = modalInsertImage.querySelector('.input-src');
      dom$4.addEventListener(inputImageInsertSrc, 'keyup', function () {
        //Clear drop image area
        modalInsertImage.querySelector('#fileInsertImage').value = ''; // clear

        modalInsertImage.querySelector('.is-preview-area').style.display = 'none';
        dropArea.style.display = 'block';
        dom$4.removeClass(dropArea, 'image-dropping');
      });

      if (!this.builder.opts.onImageSelectClick && this.builder.opts.imageselect === '') {
        modalInsertImage.querySelector('.input-select').style.display = 'none';
      }

      if (this.builder.opts.onImageSelectClick || this.builder.opts.imageselect !== '') {
        dom$4.addClass(modalInsertImage.querySelector('.image-src'), 'image-select'); //Open Custom Image Select

        var inputImageSelect = modalInsertImage.querySelector('.input-select');
        if (inputImageSelect) dom$4.addEventListener(inputImageSelect, 'click', function () {
          if (_this.builder.opts.onImageSelectClick) {
            _this.builder.opts.onImageSelectClick({
              targetInput: modalInsertImage.querySelector('.input-src'),
              theTrigger: inputImageSelect
            });
          } else {
            var modalImageSelect = _this.builderStuff.querySelector('.is-modal.imageselect');

            var _iframe = modalImageSelect.querySelector('iframe');

            if (_iframe.src === 'about:blank') {
              _iframe.src = _this.builder.opts.imageselect;
            }

            util.showModal(modalImageSelect);
          }
        });
      } else {
        dom$4.removeClass(inputImageInsertSrc, 'image-select');
      } // Text Settings


      var btnRteTextSettings = this.rteTool.querySelector('button.rte-textsettings');
      btnRteTextSettings = btnRteTextSettings ? btnRteTextSettings : this.rteMoreOptions.querySelector('button.rte-textsettings');
      if (btnRteTextSettings) dom$4.addEventListener(btnRteTextSettings, 'click', function () {
        var pop = _this.rteTextSettingOptions;
        var top = btnRteTextSettings.getBoundingClientRect().top; // + window.pageYOffset;

        var left = btnRteTextSettings.getBoundingClientRect().left; // + window.pageXOffset;

        pop.style.display = 'flex';
        var w = pop.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

        var h = pop.offsetHeight;

        if (!dom$4.hasClass(pop, 'active')) {
          if (_this.builder.opts.toolbar === 'left') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = left + 54 + 'px';
            pop.style.right = 'auto';
          } else if (_this.builder.opts.toolbar === 'right') {
            pop.style.top = top - h / 2 + 20 + 'px';
            pop.style.left = 'auto';
            var viewportWidth = window.innerWidth;
            pop.style.right = viewportWidth - left + 9 + 'px';
          } else {
            pop.style.top = top + 54 - 6 + 'px';
            pop.style.left = left - w / 2 + 23 + 'px';
            pop.style.right = 'auto';
          }

          if (dom$4.parentsHasClass(btnRteTextSettings, 'rte-more-options')) {
            // Adjustment if button is placed on 2nd bar (div.rte-more-options)
            if (_this.builder.opts.toolbar === 'left') {
              pop.style.top = parseInt(_this.rteMoreOptions.style.top) + _this.rteMoreOptions.offsetHeight - h + 'px';
              pop.style.left = left + 54 + 'px';
              pop.style.right = 'auto';
            } else if (_this.builder.opts.toolbar === 'right') {
              pop.style.top = parseInt(_this.rteMoreOptions.style.top) + _this.rteMoreOptions.offsetHeight - h + 'px';
              pop.style.left = 'auto';
              var _viewportWidth5 = window.innerWidth;
              pop.style.right = _viewportWidth5 - left + 9 + 'px';
            } else {
              pop.style.top = top + 54 - 6 + 'px';
              pop.style.left = left - w / 2 + 23 + 'px'; //(parseInt(this.rteMoreOptions.style.left) + this.rteMoreOptions.offsetWidth - w) + 'px';

              pop.style.right = 'auto';
            }
          }

          dom$4.removeClass(pop, 'deactive');
          dom$4.addClass(pop, 'active');
        } else {
          dom$4.removeClass(pop, 'active');
          dom$4.addClass(pop, 'deactive');
        }
      }); // More

      var btnRteMore = this.rteTool.querySelector('button.rte-more');
      if (btnRteMore) dom$4.addEventListener(btnRteMore, 'click', function () {
        _this.showRteMore();
      });
      var btnElementRteMore = this.elementRteTool.querySelector('button.rte-more');
      if (btnElementRteMore) dom$4.addEventListener(btnElementRteMore, 'click', function () {
        _this.showElementRteMore();
      }); // -----------------------------
      // Formatting

      var btns = Array.prototype.slice.call(this.rteTool.querySelectorAll('.rte-format')).concat(Array.prototype.slice.call(this.rteFormattingOptions.querySelectorAll('.rte-format'))).concat(Array.prototype.slice.call(this.rteMoreOptions.querySelectorAll('.rte-format')));
      Array.prototype.forEach.call(btns, function (btn) {
        dom$4.addEventListener(btn, 'click', function () {
          // old 8368
          _this.builder.uo.saveForUndo();

          var elm;

          try {
            var curr;

            if (window.getSelection) {
              curr = window.getSelection().getRangeAt(0).commonAncestorContainer;

              if (curr.nodeType === 3) {
                //text node
                elm = curr.parentNode;
              } else {
                elm = curr;
              }
            } else if (document.selection) {
              curr = document.selection.createRange();
              elm = document.selection.createRange().parentElement();
            }
          } catch (e) {
            return;
          }

          var command = btn.getAttribute('data-command');
          var text = dom$4.getSelected();

          if (command === 'bold') {
            if (text.trim() === '') {
              var tagname = elm.tagName.toLowerCase();

              if (tagname === 'b') {
                dom$4.selectElementContents(elm);
                document.execCommand('bold', false, null);
              } else {
                if (elm.style.fontWeight === 'bold' || elm.style.fontWeight > 400) {
                  elm.style.fontWeight = '';
                } else {
                  elm.style.fontWeight = 'bold';
                }
              }
            } else {
              document.execCommand('bold', false, null);
            }
          }

          if (command === 'italic') {
            if (text.trim() === '') {
              tagname = elm.tagName.toLowerCase();

              if (tagname === 'i') {
                dom$4.selectElementContents(elm);
                document.execCommand('italic', false, null);
              } else {
                if (elm.style.fontStyle === 'italic') {
                  elm.style.fontStyle = '';
                } else {
                  elm.style.fontStyle = 'italic';
                }
              }
            } else {
              document.execCommand('italic', false, null);
            }
          }

          if (command === 'underline') {
            if (text.trim() === '') {
              tagname = elm.tagName.toLowerCase();

              if (tagname === 'u') {
                dom$4.selectElementContents(elm);
                document.execCommand('underline', false, null);
              } else {
                if (elm.style.textDecoration.indexOf('underline') !== -1) {
                  elm.style.textDecoration = '';
                } else {
                  elm.style.textDecoration = 'underline';
                }
              }
            } else {
              document.execCommand('underline', false, null);
            }
          }

          if (command === 'strikethrough') {
            if (text.trim() === '') {
              tagname = elm.tagName.toLowerCase();

              if (tagname === 'strike') {
                dom$4.selectElementContents(elm);
                document.execCommand('strikethrough', false, null);
              } else {
                if (elm.style.textDecoration.indexOf('line-through') !== -1) {
                  elm.style.textDecoration = '';
                } else {
                  elm.style.textDecoration = 'line-through';
                }
              }
            } else {
              document.execCommand('strikethrough', false, null);
            }
          }

          if (command === 'superscript') {
            document.execCommand('superscript', false, null);
          }

          if (command === 'subscript') {
            document.execCommand('subscript', false, null);
          }

          if (command === 'uppercase') {
            if (elm.style.textTransform === 'uppercase') {
              elm.style.textTransform = '';
            } else {
              elm.style.textTransform = 'uppercase';
            }
          }

          if (command === 'clean') {
            if (text.trim() === '') {
              elm.style.cssText = '';
              elm.className = '';
            } else {
              if (elm.innerText.replace(/(\r\n|\n|\r)/gm, '') === text.trim().replace(/(\r\n|\n|\r)/gm, '')) {
                elm.style.cssText = '';
                elm.className = '';
                document.execCommand('removeFormat', false, null);
                document.execCommand('removeFormat', false, null);
              } else {
                document.execCommand('removeFormat', false, null);
                document.execCommand('removeFormat', false, null);
              }
            }
          }

          _this.getState(); //save selection (only for desktop)


          if (!_this.builder.isTouchSupport) {
            util.saveSelection(); //Needed because after format, a tag is added (ex. <b>,<i>), so, make selection again. 
          }

          if (text.trim() === '') {
            util.restoreSelection(); //place cursor back after formatting (bold, italic, ...)

            if (_this.builder.isTouchSupport) {
              //prevent keyboard open
              var btnFocus = _this.rteTool.querySelector('button');

              btnFocus.focus();
            }
          } // Or can be placed here:
          // if(this.builder.isTouchSupport) { //prevent keyboard open
          //     const btnFocus = this.rteTool.querySelector('button'); 
          //     btnFocus.focus();
          // }
          //Trigger Change event


          _this.builder.opts.onChange();
        });
      }); // Align

      btns = this.rteAlignOptions.querySelectorAll('button[data-align]');
      Array.prototype.forEach.call(btns, function (btn) {
        dom$4.addEventListener(btn, 'click', function () {
          _this.builder.uo.saveForUndo();

          util.restoreSelection(); //a must

          if (_this.builder.isTouchSupport) {
            //prevent keyboard open
            var btnFocus = _this.rteTool.querySelector('button');

            btnFocus.focus();
          }

          var command = btn.getAttribute('data-align');
          var elm;

          try {
            var curr;

            if (window.getSelection) {
              curr = window.getSelection().getRangeAt(0).commonAncestorContainer;

              if (curr.nodeType === 3) {
                //text node
                elm = curr.parentNode;
              } else {
                elm = curr;
              }
            } else if (document.selection) {
              curr = document.selection.createRange();
              elm = document.selection.createRange().parentElement();
            }
          } catch (e) {
            return;
          }

          var element = elm; //if element is button in email mode
          //mod by Jack

          var tbl_button = element.closest('table.button');

          if (tbl_button) {
            if (command === 'center') {
              if (tbl_button.parentNode.tagName.toLowerCase() !== 'center') {
                //wrap with center
                var centerEl = document.createElement('CENTER');
                tbl_button.parentNode.insertBefore(centerEl, tbl_button);
                centerEl.appendChild(tbl_button);
              } else {
                tbl_button.setAttribute('align', '');
              }
            } else {
              tbl_button.setAttribute('align', command);
            }

            dom$4.removeClass(tbl_button, 'float-center');
          } else {
            while (element.tagName.toLowerCase() !== 'p' && element.tagName.toLowerCase() !== 'h1' && element.tagName.toLowerCase() !== 'h2' && element.tagName.toLowerCase() !== 'h3' && element.tagName.toLowerCase() !== 'h4' && element.tagName.toLowerCase() !== 'h5' && element.tagName.toLowerCase() !== 'h6' && element.tagName.toLowerCase() !== 'pre' && element.tagName.toLowerCase() !== 'blockquote' && element.tagName.toLowerCase() !== 'div' && element.tagName.toLowerCase() !== 'td' && element.tagName.toLowerCase() !== 'th') {
              element = element.parentNode;
            }

            element.style.textAlign = command;
          }

          _this.getState(); //save selection


          util.saveSelection(); //Trigger Change event

          _this.builder.opts.onChange();
        });
      });
      btns = this.elementRteTool.querySelectorAll('button[data-align]');
      Array.prototype.forEach.call(btns, function (btn) {
        dom$4.addEventListener(btn, 'click', function () {
          _this.builder.uo.saveForUndo(); //util.restoreSelection(); //a must
          // if(this.builder.isTouchSupport) { //prevent keyboard open
          //     const btnFocus = this.rteTool.querySelector('button'); 
          //     btnFocus.focus();
          // }


          var command = btn.getAttribute('data-align'); // let elm;
          // try{
          //     let curr;
          //     if (window.getSelection) {
          //         curr = window.getSelection().getRangeAt(0).commonAncestorContainer;
          //         if (curr.nodeType === 3) {  //text node
          //             elm = curr.parentNode;
          //         } else {
          //             elm = curr;
          //         }
          //     }
          //     else if (document.selection) {
          //         curr = document.selection.createRange();
          //         elm = document.selection.createRange().parentElement();
          //     }
          // } catch(e) {return;}

          var elm = _this.builder.inspectedElement;
          var element = elm;

          while (element.tagName.toLowerCase() !== 'p' && element.tagName.toLowerCase() !== 'h1' && element.tagName.toLowerCase() !== 'h2' && element.tagName.toLowerCase() !== 'h3' && element.tagName.toLowerCase() !== 'h4' && element.tagName.toLowerCase() !== 'h5' && element.tagName.toLowerCase() !== 'h6' && element.tagName.toLowerCase() !== 'pre' && element.tagName.toLowerCase() !== 'blockquote' && element.tagName.toLowerCase() !== 'div' && element.tagName.toLowerCase() !== 'td' && element.tagName.toLowerCase() !== 'th') {
            element = element.parentNode;
          }

          element.style.textAlign = command;

          _this.getState(); //save selection
          // util.saveSelection();
          //Trigger Change event


          _this.builder.opts.onChange();
        });
      }); // List

      btns = this.rteListOptions.querySelectorAll('button[data-action]');
      Array.prototype.forEach.call(btns, function (btn) {
        dom$4.addEventListener(btn, 'click', function () {
          _this.builder.uo.saveForUndo();

          util.restoreSelection(); //a must
          // cleanup span with style

          var activeCol = _this.builder.activeCol;
          var spans = activeCol.querySelectorAll('span');
          Array.prototype.forEach.call(spans, function (span) {
            span.setAttribute('data-keep', '');
          });
          var command = btn.getAttribute('data-action'); //insertUnorderedList, insertOrderedList, indent, outdent           

          document.execCommand(command, false, null); // cleanup span with style

          activeCol = _this.builder.activeCol;
          spans = activeCol.querySelectorAll('span');
          Array.prototype.forEach.call(spans, function (span) {
            var attr = span.getAttribute('data-keep');

            if (!attr) {
              span.outerHTML = span.innerHTML;
            }
          });
          Array.prototype.forEach.call(spans, function (span) {
            var attr = span.getAttribute('data-keep');

            if (attr) {
              dom$4.removeAttribute(span, 'data-keep');
            }
          });

          _this.getState(); //save selection


          util.saveSelection(); //Trigger Change event

          _this.builder.opts.onChange();

          if (_this.builder.isTouchSupport) {
            //prevent keyboard open
            var btnFocus = _this.rteTool.querySelector('button');

            btnFocus.focus();
          }
        });
      }); // Custom Tags

      btns = this.rteCustomTagOptions.querySelectorAll('[data-value]');
      Array.prototype.forEach.call(btns, function (btn) {
        dom$4.addEventListener(btn, 'click', function () {
          _this.builder.uo.saveForUndo();

          var tag = btn.getAttribute('data-value');
          util.pasteHtmlAtCaret(tag, true);
          _this.rteCustomTagOptions.style.display = '';
        });
      }); // Paragraph

      btns = this.rteParagraphOptions.querySelectorAll('[data-block]');
      Array.prototype.forEach.call(btns, function (btn) {
        dom$4.addEventListener(btn, 'click', function () {
          _this.builder.uo.saveForUndo();

          util.restoreSelection(); //a must

          var command = btn.getAttribute('data-block'); //h1, h2, h3, h4, p, pre  

          var block = document.queryCommandValue('FormatBlock');
          block = block.toLowerCase();

          if (block === 'pre') {
            // document.execCommand('formatBlock', false, '<div>'); // without this, pref-ormatted won't change.
            var elm = dom$4.textSelection();

            if (elm) {
              var element = elm;

              while (element.tagName.toLowerCase() !== 'pre') {
                element = element.parentNode;
              }

              var newnode = element.cloneNode(true);
              var s = newnode.outerHTML.replace('<pre', '<' + command);
              s = s.replace('</pre>', '</' + command + '>');
              element.outerHTML = s; // Highlight 

              var _btns = _this.rteParagraphOptions.querySelectorAll('[data-block]');

              Array.prototype.forEach.call(_btns, function (btn) {
                dom$4.removeClass(btn, 'on');
              });
              dom$4.addClass(_this.rteParagraphOptions.querySelector('[data-block="' + command + '"]'), 'on');
            }
          } else {
            document.execCommand('formatBlock', false, '<' + command + '>'); //Needs contenteditable.         
          }

          _this.rteParagraphOptions.style.display = 'none';
          dom$4.removeClass(_this.rteParagraphOptions, 'active');
          dom$4.addClass(_this.rteParagraphOptions, 'deactive');

          _this.getState(); //save selection


          util.saveSelection(); //Trigger Change event

          _this.builder.opts.onChange();

          if (_this.builder.isTouchSupport) {
            //prevent keyboard open
            var btnFocus = _this.rteTool.querySelector('button');

            btnFocus.focus();
          }
        });
      }); // Color

      var tabs = rteColorPicker.querySelectorAll('.is-pop-tab-item');
      Array.prototype.forEach.call(tabs, function (tab) {
        dom$4.addEventListener(tab, 'click', function (e) {
          _this.builder.uo.saveForUndo(true); // checkLater = true


          var elms = rteColorPicker.querySelectorAll('.is-pop-tab-item');
          Array.prototype.forEach.call(elms, function (elm) {
            dom$4.removeClass(elm, 'active');
          });
          dom$4.addClass(e.target, 'active');
          var val = rteColorPicker.querySelector('.active').getAttribute('data-value');

          if (val === 'forecolor') {
            rteColorPicker.setAttribute('data-command', 'forecolor');
          } else {
            rteColorPicker.setAttribute('data-command', 'backcolor');
          }
        });
      });
      new ColorPicker({
        colors: this.builder.opts.colors,
        onPick: function onPick(color) {
          util.restoreSelection(); //a must

          var elm;

          try {
            var curr;

            if (window.getSelection) {
              curr = window.getSelection().getRangeAt(0).commonAncestorContainer;

              if (curr.nodeType === 3) {
                //text node
                elm = curr.parentNode;
              } else {
                elm = curr;
              }
            } else if (document.selection) {
              curr = document.selection.createRange();
              elm = document.selection.createRange().parentElement();
            }
          } catch (e) {
            return;
          }

          var command = rteColorPicker.getAttribute('data-command');
          var text = dom$4.getSelected();

          if (text.trim() === '') {
            if (command === 'forecolor') {
              elm.style.color = color;
            } else {
              elm.style.backgroundColor = color;
            }
          } else {
            if (elm.innerText === text) {
              if (command === 'forecolor') {
                elm.style.color = color;
              } else {
                elm.style.backgroundColor = color;
              }
            } else {
              if (command === 'forecolor') {
                document.execCommand('ForeColor', false, color);
              } else {
                document.execCommand('BackColor', false, color);
              } //Cleanup FONTs


              var fontElements = document.getElementsByTagName('font');

              for (var i = 0, len = fontElements.length; i < len; ++i) {
                var s = fontElements[i].color;

                if (s !== '') {
                  if (command === 'forecolor') {
                    fontElements[i].removeAttribute('color');
                    fontElements[i].style.color = color; //s;
                    // if(this.builder.isTouchSupport) dom.addClass(fontElements[i], 'textblock-active');
                  }
                }
              }
            }
          } //save selection (only for desktop)


          if (!_this.builder.isTouchSupport) {
            util.saveSelection(); //Needed because after format, a tag is added (ex. <b>,<i>), so, make selection again. 
          }

          if (text.trim() === '') {
            util.restoreSelection(); //place cursor back after formatting (bold, italic, ...)
          }

          if (_this.builder.isTouchSupport) {
            //prevent keyboard open
            var btnFocus = _this.rteTool.querySelector('button');

            btnFocus.focus();
          } //Trigger Change event


          _this.builder.opts.onChange();
        },
        renderOn: '.rte-color-picker-area',
        animateModal: this.builder.opts.animateModal,
        elementToAnimate: this.builder.opts.container,
        lang: this.builder.opts.lang
      }); // Font Size

      btns = rteTextSettingOptions.querySelectorAll('.rte-fontsize-options button');
      Array.prototype.forEach.call(btns, function (btn) {
        dom$4.addEventListener(btn, 'click', function () {
          // old 9135
          var num = btn.getAttribute('data-value');
          util.restoreSelection(); //a must

          var elm;

          try {
            var curr;

            if (window.getSelection) {
              curr = window.getSelection().getRangeAt(0).commonAncestorContainer;

              if (curr.nodeType === 3) {
                //text node
                elm = curr.parentNode;
              } else {
                elm = curr;
              }
            } else if (document.selection) {
              curr = document.selection.createRange();
              elm = document.selection.createRange().parentElement();
            }
          } catch (e) {
            return;
          }

          var text = dom$4.getSelected();

          if (text.trim() === '' || text.trim() !== '' && elm.innerText === text) {
            _this.builder.uo.saveForUndo();

            if (_this.builder.opts.fontSizeClassValues.length > 0) {
              _this.applyClassFontSize(elm, num);
            } else {
              _this.applyInlineFontSize(elm, num);
            }
          } else {
            _this.builder.uo.saveForUndo();

            var currentFontSize = Number(window.getComputedStyle(elm).getPropertyValue('font-size').match(/\d+/)[0]);
            document.execCommand('fontSize', false, '7'); //this makes keyboard opens on mobile

            var newelm;
            var fontElements = document.getElementsByTagName('font');

            for (var i = 0, len = fontElements.length; i < len; ++i) {
              if (fontElements[i].size === '7') {
                fontElements[i].removeAttribute('size');
                fontElements[i].style.fontSize = currentFontSize + 'px';
                dom$4.selectElementContents(fontElements[i]); // if(this.builder.isTouchSupport) dom.addClass(fontElements[i], 'textblock-active');

                newelm = fontElements[i];
              }
            }

            if (newelm) {
              if (_this.builder.opts.fontSizeClassValues.length > 0) {
                _this.applyClassFontSize(newelm, num);
              } else {
                _this.applyInlineFontSize(newelm, num);
              }
            }
          } //save selection


          util.saveSelection();

          _this.getState(); //Trigger Change event


          _this.builder.opts.onChange();

          if (_this.builder.isTouchSupport) {
            //prevent keyboard open
            var btnFocus = _this.rteTool.querySelector('button');

            btnFocus.focus();
          }
        });
      }); // Line Height

      btns = rteTextSettingOptions.querySelectorAll('.rte-lineheight-options button');
      Array.prototype.forEach.call(btns, function (btn) {
        dom$4.addEventListener(btn, 'click', function () {
          var num = btn.getAttribute('data-value');
          util.restoreSelection(); //a must

          var elm;

          try {
            var curr;

            if (window.getSelection) {
              curr = window.getSelection().getRangeAt(0).commonAncestorContainer;

              if (curr.nodeType === 3) {
                //text node
                elm = curr.parentNode;
              } else {
                elm = curr;
              }
            } else if (document.selection) {
              curr = document.selection.createRange();
              elm = document.selection.createRange().parentElement();
            }
          } catch (e) {
            return;
          } // var text = dom.getSelected();


          _this.builder.uo.saveForUndo();

          var currentLineHeight = Number(window.getComputedStyle(elm).getPropertyValue('line-height').match(/\d+/)[0]);
          var lineheight;

          if (num === '+') {
            lineheight = currentLineHeight + 1 + 'px';
          } else if (num === '-') {
            lineheight = currentLineHeight - 1 + 'px';
          } else if (num === '') {
            lineheight = '';
          } else {
            lineheight = num;
          }
          /** mod by Jack */
          //elm.style.lineHeight = lineheight;


          dom$4.doFunction(elm, function (theEl) {
            theEl.style.lineHeight = lineheight;
          }, true); //save selection

          util.saveSelection();

          _this.getState(); //Trigger Change event


          _this.builder.opts.onChange();

          if (_this.builder.isTouchSupport) {
            //prevent keyboard open
            var btnFocus = _this.rteTool.querySelector('button');

            btnFocus.focus();
          }
        });
      }); // Letter Spacing

      btns = rteTextSettingOptions.querySelectorAll('.rte-letterspacing-options button');
      Array.prototype.forEach.call(btns, function (btn) {
        dom$4.addEventListener(btn, 'click', function () {
          var num = btn.getAttribute('data-value');
          util.restoreSelection(); //a must

          var elm;

          try {
            var curr;

            if (window.getSelection) {
              curr = window.getSelection().getRangeAt(0).commonAncestorContainer;

              if (curr.nodeType === 3) {
                //text node
                elm = curr.parentNode;
              } else {
                elm = curr;
              }
            } else if (document.selection) {
              curr = document.selection.createRange();
              elm = document.selection.createRange().parentElement();
            }
          } catch (e) {
            return;
          } // var text = dom.getSelected();


          _this.builder.uo.saveForUndo();

          var currentLetterSpacing = parseInt(window.getComputedStyle(elm).getPropertyValue('letter-spacing'));
          if (isNaN(currentLetterSpacing)) currentLetterSpacing = 0;
          var letterspacing;

          if (num === '+') {
            letterspacing = currentLetterSpacing + 1 + 'px';
          } else if (num === '-') {
            letterspacing = currentLetterSpacing - 1 + 'px';
          } else if (num === '') {
            letterspacing = '';
          } else {
            letterspacing = num + 'px';
          }
          /** mod by Jack */
          //elm.style.letterSpacing = letterspacing;


          dom$4.doFunction(elm, function (theEl) {
            theEl.style.letterSpacing = letterspacing;
          }, true); //save selection

          util.saveSelection();

          _this.getState(); //Trigger Change event


          _this.builder.opts.onChange();

          if (_this.builder.isTouchSupport) {
            //prevent keyboard open
            var btnFocus = _this.rteTool.querySelector('button');

            btnFocus.focus();
          }
        });
      }); // -----------------------------
      // Click anywhere will hide Column tool

      document.addEventListener('click', function (e) {
        e = e || window.event;
        var target = e.target || e.srcElement;
        var a, b, c, d, f;

        if (_this.rteAlignOptions.style.display === 'flex') {
          a = dom$4.parentsHasClass(target, 'rte-align');
          b = dom$4.parentsHasClass(target, 'rte-align-options');

          if (!(a || b)) {
            _this.rteAlignOptions.style.display = '';
            dom$4.removeClass(_this.rteAlignOptions, 'active');
            dom$4.addClass(_this.rteAlignOptions, 'deactive');
          }
        }

        if (_this.rteListOptions.style.display === 'flex') {
          a = dom$4.parentsHasClass(target, 'rte-list');
          b = dom$4.parentsHasClass(target, 'rte-list-options');

          if (!(a || b)) {
            _this.rteListOptions.style.display = '';
            dom$4.removeClass(_this.rteListOptions, 'active');
            dom$4.addClass(_this.rteListOptions, 'deactive');
          }
        }

        if (_this.rteFormattingOptions.style.display === 'flex') {
          a = dom$4.parentsHasClass(target, 'rte-formatting');
          b = dom$4.parentsHasClass(target, 'rte-formatting-options');

          if (!(a || b)) {
            _this.rteFormattingOptions.style.display = '';
            dom$4.removeClass(_this.rteFormattingOptions, 'active');
            dom$4.addClass(_this.rteFormattingOptions, 'deactive');
          }
        }

        if (_this.rteColorPicker.style.display === 'flex') {
          a = dom$4.parentsHasClass(target, 'rte-color');
          b = dom$4.parentsHasClass(target, 'rte-color-picker');
          c = dom$4.parentsHasClass(target, 'pickcolormore');

          if (!(a || b || c)) {
            _this.rteColorPicker.style.display = '';
            dom$4.removeClass(_this.rteColorPicker, 'active');
            dom$4.addClass(_this.rteColorPicker, 'deactive');
          }
        }

        if (_this.rteFontFamilyOptions.style.display === 'flex') {
          a = dom$4.parentsHasClass(target, 'rte-fontfamily');
          b = dom$4.parentsHasClass(target, 'rte-fontfamily-options');

          if (!(a || b)) {
            _this.rteFontFamilyOptions.style.display = '';
            dom$4.removeClass(_this.rteFontFamilyOptions, 'active');
            dom$4.addClass(_this.rteFontFamilyOptions, 'deactive');
          }
        }

        if (_this.rteIconOptions.style.display === 'flex') {
          a = dom$4.parentsHasClass(target, 'rte-icon');
          b = dom$4.parentsHasClass(target, 'rte-icon-options');
          c = false;
          if (target.tagName) c = target.tagName.toLowerCase() === 'i' && target.innerHTML === '';

          if (!(a || b || c)) {
            _this.rteIconOptions.style.display = '';
            dom$4.removeClass(_this.rteIconOptions, 'active');
            dom$4.addClass(_this.rteIconOptions, 'deactive');
          }
        }

        if (_this.rteCustomTagOptions.style.display === 'flex') {
          a = dom$4.parentsHasClass(target, 'rte-tags');
          b = dom$4.parentsHasClass(target, 'rte-customtag-options');

          if (!(a || b)) {
            _this.rteCustomTagOptions.style.display = '';
            dom$4.removeClass(_this.rteCustomTagOptions, 'active');
            dom$4.addClass(_this.rteCustomTagOptions, 'deactive');
          }
        }

        if (_this.rteParagraphOptions.style.display === 'flex') {
          a = dom$4.parentsHasClass(target, 'rte-paragraph');
          b = dom$4.parentsHasClass(target, 'rte-paragraph-options');

          if (!(a || b)) {
            _this.rteParagraphOptions.style.display = '';
            dom$4.removeClass(_this.rteParagraphOptions, 'active');
            dom$4.addClass(_this.rteParagraphOptions, 'deactive');
          }
        }

        if (_this.rteTextSettingOptions.style.display === 'flex') {
          a = dom$4.parentsHasClass(target, 'rte-textsettings');
          b = dom$4.parentsHasClass(target, 'rte-textsetting-options');

          if (!(a || b)) {
            _this.rteTextSettingOptions.style.display = '';
            dom$4.removeClass(_this.rteTextSettingOptions, 'active');
            dom$4.addClass(_this.rteTextSettingOptions, 'deactive');
          }
        }

        if (_this.rteMoreOptions.style.display === 'flex') {
          a = dom$4.parentsHasClass(target, 'rte-more');
          b = dom$4.parentsHasClass(target, 'rte-more-options');
          c = dom$4.parentsHasClass(target, 'is-rte-pop');
          d = dom$4.parentsHasClass(target, 'is-modal');
          f = false;
          if (target.tagName) f = target.tagName.toLowerCase() === 'i' && target.innerHTML === '' && dom$4.parentsHasClass(btnRteIcons, 'rte-more-options');

          if (!(a || b || c || d || f)) {
            _this.rteMoreOptions.style.display = '';
            dom$4.removeClass(_this.rteMoreOptions, 'active');
            dom$4.addClass(_this.rteMoreOptions, 'deactive');
          }
        }

        if (_this.elementRteMoreOptions.style.display === 'flex') {
          a = dom$4.parentsHasClass(target, 'rte-more'); // more button

          b = dom$4.parentsHasClass(target, 'elementrte-more-options');
          c = dom$4.parentsHasClass(target, 'is-rte-pop');
          d = dom$4.parentsHasClass(target, 'is-modal');
          f = false; //if(target.tagName) f = target.tagName.toLowerCase() === 'i' && target.innerHTML === '' && dom.parentsHasClass(btnRteIcons, 'rte-more-options');

          if (!(a || b || c || d || f)) {
            _this.elementRteMoreOptions.style.display = '';
            dom$4.removeClass(_this.elementRteMoreOptions, 'active');
            dom$4.addClass(_this.elementRteMoreOptions, 'deactive');
          }
        }
      });
    }

    _createClass$1(Rte, [{
      key: "viewSnippets",
      value: function viewSnippets() {
        // direct
        var util = new Util(this.builder);
        var modal = this.builderStuff.querySelector('.snippets');
        util.showModal(modal, false, null, false);
        var iframe = modal.querySelector('iframe');

        if (iframe.src === 'about:blank') {
          iframe.src = this.builder.opts.snippetData;
        }
      }
    }, {
      key: "showRteMore",
      value: function showRteMore() {
        var btnRteMore = this.rteTool.querySelector('button.rte-more');
        var pop = this.rteMoreOptions;
        var top = btnRteMore.getBoundingClientRect().top; // + window.pageYOffset;

        var left = btnRteMore.getBoundingClientRect().left; // + window.pageXOffset;

        pop.style.display = 'flex';
        var w = pop.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

        var h = pop.offsetHeight;

        if (!dom$4.hasClass(pop, 'active')) {
          if (this.builder.opts.toolbar === 'left') {
            pop.style.top = parseInt(this.rteTool.style.top) + this.rteTool.offsetHeight - h + 'px'; //(top - (h/2) + 20) + 'px';

            pop.style.left = left + 54 + 'px';
            pop.style.right = 'auto';
          } else if (this.builder.opts.toolbar === 'right') {
            pop.style.top = parseInt(this.rteTool.style.top) + this.rteTool.offsetHeight - h + 'px'; //(top - (h/2) + 20) + 'px';

            pop.style.left = 'auto';
            var viewportWidth = window.innerWidth;
            pop.style.right = viewportWidth - left + 9 + 'px';
          } else {
            pop.style.top = top + 54 - 6 + 'px';
            pop.style.left = parseInt(this.rteTool.style.left) + this.rteTool.offsetWidth - w + 'px'; //(left -(w/2)+23) + 'px';

            pop.style.right = 'auto';
          }

          dom$4.removeClass(pop, 'deactive');
          dom$4.addClass(pop, 'active');
        } else {
          dom$4.removeClass(pop, 'active');
          dom$4.addClass(pop, 'deactive');
        }
      }
    }, {
      key: "showElementRteMore",
      value: function showElementRteMore() {
        var btnElementRteMore = this.elementRteTool.querySelector('button.rte-more');
        var pop = this.elementRteMoreOptions;
        var top = btnElementRteMore.getBoundingClientRect().top; // + window.pageYOffset;

        var left = btnElementRteMore.getBoundingClientRect().left; // + window.pageXOffset;

        pop.style.display = 'flex';
        var w = pop.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

        var h = pop.offsetHeight;

        if (!dom$4.hasClass(pop, 'active')) {
          if (this.builder.opts.toolbar === 'left') {
            pop.style.top = parseInt(this.elementRteTool.style.top) + this.elementRteTool.offsetHeight - h + 'px'; //(top - (h/2) + 20) + 'px';

            pop.style.left = left + 54 + 'px';
            pop.style.right = 'auto';
          } else if (this.builder.opts.toolbar === 'right') {
            pop.style.top = parseInt(this.elementRteTool.style.top) + this.elementRteTool.offsetHeight - h + 'px'; //(top - (h/2) + 20) + 'px';

            pop.style.left = 'auto';
            var viewportWidth = window.innerWidth;
            pop.style.right = viewportWidth - left + 9 + 'px';
          } else {
            pop.style.top = top + 54 - 6 + 'px';
            pop.style.left = parseInt(this.elementRteTool.style.left) + this.elementRteTool.offsetWidth - w + 'px'; //(left -(w/2)+23) + 'px';

            pop.style.right = 'auto';
          }

          dom$4.removeClass(pop, 'deactive');
          dom$4.addClass(pop, 'active');
        } else {
          dom$4.removeClass(pop, 'active');
          dom$4.addClass(pop, 'deactive');
        }
      }
    }, {
      key: "applyInlineFontSize",
      value: function applyInlineFontSize(elm, num) {
        var currentFontSize = Number(window.getComputedStyle(elm).getPropertyValue('font-size').match(/\d+/)[0]);
        var fontsize;

        if (num === '+') {
          fontsize = currentFontSize + 1 + 'px';
        } else if (num === '-') {
          fontsize = currentFontSize - 1 + 'px';
        } else if (num === '') {
          fontsize = '';
        } else {
          fontsize = num + 'px';
        }
        /** mod by Jack */
        //elm.style.fontSize = fontsize;


        dom$4.doFunction(elm, function (theEl) {
          theEl.style.fontSize = fontsize;
        }, true);
      }
    }, {
      key: "applyClassFontSize",
      value: function applyClassFontSize(elm, num) {
        var currentFontSize = Number(window.getComputedStyle(elm).getPropertyValue('font-size').match(/\d+/)[0]);
        var classname = '';
        if (num === '+' || num === '-' || num === '') classname = num;else classname = 'size-' + num;
        var arrSizes = this.builder.opts.fontSizeClassValues; // Get current class size & remove all class size from the element

        var currentClassSize = '';

        for (var i = 0; i <= arrSizes.length - 1; i++) {
          if (dom$4.hasClass(elm, 'size-' + arrSizes[i])) {
            (function () {
              currentClassSize = 'size-' + arrSizes[i];
              /** mod by Jack */
              //dom.removeClass(elm, 'size-'+arrSizes[i]);

              var n = arrSizes[i];
              dom$4.doFunction(elm, function (theEl) {
                dom$4.removeClass(theEl, 'size-' + n);
              }, true);
            })();
          } else {
            (function () {
              /** mod by Jack */
              var n = arrSizes[i];
              dom$4.doFunction(elm, function (theEl) {
                dom$4.removeClass(theEl, 'size-' + n);
              }, true);
            })();
          }
        } // If no class size found AND + or - is clicked, get equivalent class size


        if (currentClassSize === '' && (classname === '+' || classname === '-')) {
          for (i = 0; i <= arrSizes.length - 1; i++) {
            if (currentFontSize >= arrSizes[i] & currentFontSize < arrSizes[i + 1]) {
              currentClassSize = 'size-' + arrSizes[i];
            }
          }
        }

        if (classname === '+') {
          i = currentClassSize.replace('size-', '') * 1;
          var idx = arrSizes.indexOf(i);

          if (idx < arrSizes.length - 1) {
            currentClassSize = 'size-' + arrSizes[idx + 1];
          }
          /** mod by Jack */
          //dom.addClass(elm, currentClassSize);


          dom$4.doFunction(elm, function (theEl) {
            dom$4.addClass(theEl, currentClassSize);
          }, true);
        } else if (classname === '-') {
          i = currentClassSize.replace('size-', '') * 1;
          idx = arrSizes.indexOf(i);

          if (idx >= 1) {
            currentClassSize = 'size-' + arrSizes[idx - 1];
          }
          /** mod by Jack */
          //dom.addClass(elm, currentClassSize);


          dom$4.doFunction(elm, function (theEl) {
            dom$4.addClass(theEl, currentClassSize);
          }, true);
        } else if (classname === '') ; else {
          /** mod by Jack */
          //dom.addClass(elm, classname);
          dom$4.doFunction(elm, function (theEl) {
            dom$4.addClass(theEl, classname);
          }, true);
        }
        /** mod by Jack */
        //elm.style.fontSize = '';


        dom$4.doFunction(elm, function (theEl) {
          theEl.style.fontSize = '';
        }, true);
      }
    }, {
      key: "click",
      value: function click(col) {
        var elm = this.builder.inspectedElement;
        this.rteTool.style.display = 'none';
        this.elementRteTool.style.display = 'none'; // console.log(elm);

        if ((elm.tagName.toLowerCase() === 'img' || dom$4.hasClass(elm, 'is-social') || dom$4.hasClass(elm, 'is-rounded-button-medium') || dom$4.hasClass(elm, 'cell-active')) && !dom$4.getSelected()) {
          if (this.elementRteTool.style.display === 'none' || this.elementRteTool.style.display === '') {
            this.elementRteTool.style.display = 'flex';
            this.rteTool.style.display = 'none';
            var btns = this.elementRteTool.querySelectorAll('button[data-align]');
            Array.prototype.forEach.call(btns, function (btn) {
              btn.style.display = '';
            });
            this.positionToolbar();
          }
        } else if (dom$4.hasClass(elm, 'spacer') || dom$4.hasClass(elm, 'ovl') || col.getAttribute('data-html')) {
          if (this.elementRteTool.style.display === 'none' || this.elementRteTool.style.display === '') {
            this.elementRteTool.style.display = 'flex';
            this.rteTool.style.display = 'none';

            var _btns2 = this.elementRteTool.querySelectorAll('button[data-align]');

            Array.prototype.forEach.call(_btns2, function (btn) {
              btn.style.display = 'none';
            });
            this.positionToolbar();
          }
        } else {
          if (this.rteTool.style.display === 'none' || this.rteTool.style.display === '') {
            this.rteTool.style.display = 'flex';
            this.elementRteTool.style.display = 'none';
            this.positionToolbar();
          }
        }

        this.util.saveSelection();
        this.getState();
      }
    }, {
      key: "getState",
      value: function getState() {
        // old 14140
        if (document.queryCommandState('bold')) {
          dom$4.addClass(this.rteTool.querySelector('button[data-command=bold]'), 'on');
        } else {
          dom$4.removeClass(this.rteTool.querySelector('button[data-command=bold]'), 'on');
        }

        if (document.queryCommandState('italic')) {
          dom$4.addClass(this.rteTool.querySelector('button[data-command=italic]'), 'on');
        } else {
          dom$4.removeClass(this.rteTool.querySelector('button[data-command=italic]'), 'on');
        }

        if (document.queryCommandState('underline')) {
          dom$4.addClass(this.rteTool.querySelector('button[data-command=underline]'), 'on');
        } else {
          dom$4.removeClass(this.rteTool.querySelector('button[data-command=underline]'), 'on');
        }

        if (document.queryCommandState('strikethrough')) {
          dom$4.addClass(this.rteFormattingOptions.querySelector('[data-command=strikethrough]'), 'on');
        } else {
          dom$4.removeClass(this.rteFormattingOptions.querySelector('[data-command=strikethrough]'), 'on');
        }

        if (document.queryCommandState('superscript')) {
          dom$4.addClass(this.rteFormattingOptions.querySelector('[data-command=superscript]'), 'on');
        } else {
          dom$4.removeClass(this.rteFormattingOptions.querySelector('[data-command=superscript]'), 'on');
        }

        if (document.queryCommandState('subscript')) {
          dom$4.addClass(this.rteFormattingOptions.querySelector('[data-command=subscript]'), 'on');
        } else {
          dom$4.removeClass(this.rteFormattingOptions.querySelector('[data-command=subscript]'), 'on');
        }

        var elm = dom$4.textSelection();

        if (elm) {
          if (elm.style.textTransform === 'uppercase') {
            dom$4.addClass(this.rteFormattingOptions.querySelector('[data-command=uppercase]'), 'on');
          } else {
            dom$4.removeClass(this.rteFormattingOptions.querySelector('[data-command=uppercase]'), 'on');
          }
        } else {
          return; // Without this, the line below generates error on first image click (FF). In addition, getState is for text. 
        }

        if (document.queryCommandState('JustifyFull')) {
          dom$4.addClass(this.rteAlignOptions.querySelector('[data-align=justify]'), 'on'); // let elm = this.elementRteTool.querySelector('[data-align=justify]');
          // if(elm) dom.addClass(elm, 'on');
        } else {
          dom$4.removeClass(this.rteAlignOptions.querySelector('[data-align=justify]'), 'on');
        }

        if (document.queryCommandState('JustifyLeft')) {
          dom$4.addClass(this.rteAlignOptions.querySelector('[data-align=left]'), 'on');
        } else {
          dom$4.removeClass(this.rteAlignOptions.querySelector('[data-align=left]'), 'on');
        }

        if (document.queryCommandState('JustifyRight')) {
          dom$4.addClass(this.rteAlignOptions.querySelector('[data-align=right]'), 'on');
        } else {
          dom$4.removeClass(this.rteAlignOptions.querySelector('[data-align=right]'), 'on');
        }

        if (document.queryCommandState('JustifyCenter')) {
          dom$4.addClass(this.rteAlignOptions.querySelector('[data-align=center]'), 'on');
        } else {
          dom$4.removeClass(this.rteAlignOptions.querySelector('[data-align=center]'), 'on');
        }

        var s = document.queryCommandValue('FontName');
        var fontname = s.split(',')[0];
        fontname = fontname.replace(/"/g, '');
        fontname = fontname.replace(/'/g, ''); //NEW 4.0.5

        fontname = fontname.replace(/&quot;/g, ''); //NEW 4.0.5

        fontname = fontname.trim().toLowerCase();
        var btnRteFontFamily = this.rteTool.querySelector('button.rte-fontfamily');
        btnRteFontFamily = btnRteFontFamily ? btnRteFontFamily : this.rteMoreOptions.querySelector('button.rte-fontfamily');

        if (btnRteFontFamily) {
          var iframe = this.rteFontFamilyOptions.querySelector('iframe');
          var iframeDocument = iframe.contentDocument || iframe.contentWindow.document;

          if (iframeDocument) {
            [].forEach.call(iframeDocument.querySelectorAll('#divFontList > div'), function (e) {
              var f = e.getAttribute('data-font-family');
              f = f.split(',')[0];
              f = f.replace(/'/g, ''); // NEW 4.0.5

              f = f.trim().toLowerCase();

              if (f === fontname && f !== '') {
                dom$4.addClass(e, 'on');
              } else {
                dom$4.removeClass(e, 'on');
              }
            });
          }
        }

        var btns = this.rteParagraphOptions.querySelectorAll('[data-block]');
        Array.prototype.forEach.call(btns, function (btn) {
          dom$4.removeClass(btn, 'on');
        });
        var block = document.queryCommandValue('FormatBlock');
        block = block.toLowerCase();
        if (block === 'normal') block = 'p';
        if (block === 'heading 1') block = 'h1';
        if (block === 'heading 2') block = 'h2';
        if (block === 'heading 3') block = 'h3';
        if (block === 'heading 4') block = 'h4';
        if (block === 'formatted') block = 'pre';

        if (block === 'p' || block === 'h1' || block === 'h2' || block === 'h3' || block === 'h4' || block === 'pre') {
          dom$4.addClass(this.rteParagraphOptions.querySelector('[data-block="' + block + '"]'), 'on');
        }
      }
    }, {
      key: "getIconsHTML",
      value: function getIconsHTML() {
        var path = this.builder.assetPath + 'ionicons/';
        var html = "\n        <!DOCTYPE HTML>\n        <html>\n        <head>\n            <meta charset=\"utf-8\">\n            <title>Fonts</title>\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <meta name=\"description\" content=\"\">  \n            <link href=\"".concat(path, "css/ionicons.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n            <style>\n                html, body {height:100%}\n                body {overflow:hidden;margin:0;\n                    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n                    font-size:100%; \n                    line-height:1.7;\n                }\n                #divIcons {display:flex;flex-direction:row;flex-wrap:wrap;margin:0;padding:9px 11px 9px 9px;height:100%;overflow-y:scroll !important;box-sizing:border-box;}\n                #divIcons > div {width:40px;height:37px;line-height:37px;font-size:14px;color:#111111;cursor:pointer;overflow:hidden;text-align:center;position:relative;}                \n                #divIcons > div:hover {background:#f5f5f5;}\n            </style>\n        </head>\n        <body>\n\n        <div id=\"divIcons\">\n        <div><i class=\"icon ion-alert\"> </i></div>\n        <div><i class=\"icon ion-alert-circled\"> </i></div>\n        <div><i class=\"icon ion-android-add\"> </i></div>\n        <div><i class=\"icon ion-android-add-circle\"> </i></div>\n        <div><i class=\"icon ion-android-alarm-clock\"> </i></div>\n        <div><i class=\"icon ion-android-alert\"> </i></div>\n        <div><i class=\"icon ion-android-apps\"> </i></div>\n        <div><i class=\"icon ion-android-archive\"> </i></div>\n        <div><i class=\"icon ion-android-arrow-back\"> </i></div>\n        <div><i class=\"icon ion-android-arrow-down\"> </i></div>\n        <div><i class=\"icon ion-android-arrow-dropdown\"> </i></div>\n        <div><i class=\"icon ion-android-arrow-dropdown-circle\"> </i></div>\n        <div><i class=\"icon ion-android-arrow-dropleft\"> </i></div>\n        <div><i class=\"icon ion-android-arrow-dropleft-circle\"> </i></div>\n        <div><i class=\"icon ion-android-arrow-dropright\"> </i></div>\n        <div><i class=\"icon ion-android-arrow-dropright-circle\"> </i></div>\n        <div><i class=\"icon ion-android-arrow-dropup\"> </i></div>\n        <div><i class=\"icon ion-android-arrow-dropup-circle\"> </i></div>\n        <div><i class=\"icon ion-android-arrow-forward\"> </i></div>\n        <div><i class=\"icon ion-android-arrow-up\"> </i></div>\n        <div><i class=\"icon ion-android-attach\"> </i></div>\n        <div><i class=\"icon ion-android-bar\"> </i></div>\n        <div><i class=\"icon ion-android-bicycle\"> </i></div>\n        <div><i class=\"icon ion-android-boat\"> </i></div>\n        <div><i class=\"icon ion-android-bookmark\"> </i></div>\n        <div><i class=\"icon ion-android-bulb\"> </i></div>\n        <div><i class=\"icon ion-android-bus\"> </i></div>\n        <div><i class=\"icon ion-android-calendar\"> </i></div>\n        <div><i class=\"icon ion-android-call\"> </i></div>\n        <div><i class=\"icon ion-android-camera\"> </i></div>\n        <div><i class=\"icon ion-android-cancel\"> </i></div>\n        <div><i class=\"icon ion-android-car\"> </i></div>\n        <div><i class=\"icon ion-android-cart\"> </i></div>\n        <div><i class=\"icon ion-android-chat\"> </i></div>\n        <div><i class=\"icon ion-android-checkbox\"> </i></div>\n        <div><i class=\"icon ion-android-checkbox-blank\"> </i></div>\n        <div><i class=\"icon ion-android-checkbox-outline\"> </i></div>\n        <div><i class=\"icon ion-android-checkbox-outline-blank\"> </i></div>\n        <div><i class=\"icon ion-android-checkmark-circle\"> </i></div>\n        <div><i class=\"icon ion-android-clipboard\"> </i></div>\n        <div><i class=\"icon ion-android-close\"> </i></div>\n        <div><i class=\"icon ion-android-cloud\"> </i></div>\n        <div><i class=\"icon ion-android-cloud-circle\"> </i></div>\n        <div><i class=\"icon ion-android-cloud-done\"> </i></div>\n        <div><i class=\"icon ion-android-cloud-outline\"> </i></div>\n        <div><i class=\"icon ion-android-color-palette\"> </i></div>\n        <div><i class=\"icon ion-android-compass\"> </i></div>\n        <div><i class=\"icon ion-android-contact\"> </i></div>\n        <div><i class=\"icon ion-android-contacts\"> </i></div>\n        <div><i class=\"icon ion-android-contract\"> </i></div>\n        <div><i class=\"icon ion-android-create\"> </i></div>\n        <div><i class=\"icon ion-android-delete\"> </i></div>\n        <div><i class=\"icon ion-android-desktop\"> </i></div>\n        <div><i class=\"icon ion-android-document\"> </i></div>\n        <div><i class=\"icon ion-android-done\"> </i></div>\n        <div><i class=\"icon ion-android-done-all\"> </i></div>\n        <div><i class=\"icon ion-android-download\"> </i></div>\n        <div><i class=\"icon ion-android-drafts\"> </i></div>\n        <div><i class=\"icon ion-android-exit\"> </i></div>\n        <div><i class=\"icon ion-android-expand\"> </i></div>\n        <div><i class=\"icon ion-android-favorite\"> </i></div>\n        <div><i class=\"icon ion-android-favorite-outline\"> </i></div>\n        <div><i class=\"icon ion-android-film\"> </i></div>\n        <div><i class=\"icon ion-android-folder\"> </i></div>\n        <div><i class=\"icon ion-android-folder-open\"> </i></div>\n        <div><i class=\"icon ion-android-funnel\"> </i></div>\n        <div><i class=\"icon ion-android-globe\"> </i></div>\n        <div><i class=\"icon ion-android-hand\"> </i></div>\n        <div><i class=\"icon ion-android-hangout\"> </i></div>\n        <div><i class=\"icon ion-android-happy\"> </i></div>\n        <div><i class=\"icon ion-android-home\"> </i></div>\n        <div><i class=\"icon ion-android-image\"> </i></div>\n        <div><i class=\"icon ion-android-laptop\"> </i></div>\n        <div><i class=\"icon ion-android-list\"> </i></div>\n        <div><i class=\"icon ion-android-locate\"> </i></div>\n        <div><i class=\"icon ion-android-lock\"> </i></div>\n        <div><i class=\"icon ion-android-mail\"> </i></div>\n        <div><i class=\"icon ion-android-map\"> </i></div>\n        <div><i class=\"icon ion-android-menu\"> </i></div>\n        <div><i class=\"icon ion-android-microphone\"> </i></div>\n        <div><i class=\"icon ion-android-microphone-off\"> </i></div>\n        <div><i class=\"icon ion-android-more-horizontal\"> </i></div>\n        <div><i class=\"icon ion-android-more-vertical\"> </i></div>\n        <div><i class=\"icon ion-android-navigate\"> </i></div>\n        <div><i class=\"icon ion-android-notifications\"> </i></div>\n        <div><i class=\"icon ion-android-notifications-none\"> </i></div>\n        <div><i class=\"icon ion-android-notifications-off\"> </i></div>\n        <div><i class=\"icon ion-android-open\"> </i></div>\n        <div><i class=\"icon ion-android-options\"> </i></div>\n        <div><i class=\"icon ion-android-people\"> </i></div>\n        <div><i class=\"icon ion-android-person\"> </i></div>\n        <div><i class=\"icon ion-android-person-add\"> </i></div>\n        <div><i class=\"icon ion-android-phone-landscape\"> </i></div>\n        <div><i class=\"icon ion-android-phone-portrait\"> </i></div>\n        <div><i class=\"icon ion-android-pin\"> </i></div>\n        <div><i class=\"icon ion-android-plane\"> </i></div>\n        <div><i class=\"icon ion-android-playstore\"> </i></div>\n        <div><i class=\"icon ion-android-print\"> </i></div>\n        <div><i class=\"icon ion-android-radio-button-off\"> </i></div>\n        <div><i class=\"icon ion-android-radio-button-on\"> </i></div>\n        <div><i class=\"icon ion-android-refresh\"> </i></div>\n        <div><i class=\"icon ion-android-remove\"> </i></div>\n        <div><i class=\"icon ion-android-remove-circle\"> </i></div>\n        <div><i class=\"icon ion-android-restaurant\"> </i></div>\n        <div><i class=\"icon ion-android-sad\"> </i></div>\n        <div><i class=\"icon ion-android-search\"> </i></div>\n        <div><i class=\"icon ion-android-send\"> </i></div>\n        <div><i class=\"icon ion-android-settings\"> </i></div>\n        <div><i class=\"icon ion-android-share\"> </i></div>\n        <div><i class=\"icon ion-android-share-alt\"> </i></div>\n        <div><i class=\"icon ion-android-star\"> </i></div>\n        <div><i class=\"icon ion-android-star-half\"> </i></div>\n        <div><i class=\"icon ion-android-star-outline\"> </i></div>\n        <div><i class=\"icon ion-android-stopwatch\"> </i></div>\n        <div><i class=\"icon ion-android-subway\"> </i></div>\n        <div><i class=\"icon ion-android-sunny\"> </i></div>\n        <div><i class=\"icon ion-android-sync\"> </i></div>\n        <div><i class=\"icon ion-android-textsms\"> </i></div>\n        <div><i class=\"icon ion-android-time\"> </i></div>\n        <div><i class=\"icon ion-android-train\"> </i></div>\n        <div><i class=\"icon ion-android-unlock\"> </i></div>\n        <div><i class=\"icon ion-android-upload\"> </i></div>\n        <div><i class=\"icon ion-android-volume-down\"> </i></div>\n        <div><i class=\"icon ion-android-volume-mute\"> </i></div>\n        <div><i class=\"icon ion-android-volume-off\"> </i></div>\n        <div><i class=\"icon ion-android-volume-up\"> </i></div>\n        <div><i class=\"icon ion-android-walk\"> </i></div>\n        <div><i class=\"icon ion-android-warning\"> </i></div>\n        <div><i class=\"icon ion-android-watch\"> </i></div>\n        <div><i class=\"icon ion-android-wifi\"> </i></div>\n        <div><i class=\"icon ion-aperture\"> </i></div>\n        <div><i class=\"icon ion-archive\"> </i></div>\n        <div><i class=\"icon ion-arrow-down-a\"> </i></div>\n        <div><i class=\"icon ion-arrow-down-b\"> </i></div>\n        <div><i class=\"icon ion-arrow-down-c\"> </i></div>\n        <div><i class=\"icon ion-arrow-expand\"> </i></div>\n        <div><i class=\"icon ion-arrow-graph-down-left\"> </i></div>\n        <div><i class=\"icon ion-arrow-graph-down-right\"> </i></div>\n        <div><i class=\"icon ion-arrow-graph-up-left\"> </i></div>\n        <div><i class=\"icon ion-arrow-graph-up-right\"> </i></div>\n        <div><i class=\"icon ion-arrow-left-a\"> </i></div>\n        <div><i class=\"icon ion-arrow-left-b\"> </i></div>\n        <div><i class=\"icon ion-arrow-left-c\"> </i></div>\n        <div><i class=\"icon ion-arrow-move\"> </i></div>\n        <div><i class=\"icon ion-arrow-resize\"> </i></div>\n        <div><i class=\"icon ion-arrow-return-left\"> </i></div>\n        <div><i class=\"icon ion-arrow-return-right\"> </i></div>\n        <div><i class=\"icon ion-arrow-right-a\"> </i></div>\n        <div><i class=\"icon ion-arrow-right-b\"> </i></div>\n        <div><i class=\"icon ion-arrow-right-c\"> </i></div>\n        <div><i class=\"icon ion-arrow-shrink\"> </i></div>\n        <div><i class=\"icon ion-arrow-swap\"> </i></div>\n        <div><i class=\"icon ion-arrow-up-a\"> </i></div>\n        <div><i class=\"icon ion-arrow-up-b\"> </i></div>\n        <div><i class=\"icon ion-arrow-up-c\"> </i></div>\n        <div><i class=\"icon ion-asterisk\"> </i></div>\n        <div><i class=\"icon ion-at\"> </i></div>\n        <div><i class=\"icon ion-backspace\"> </i></div>\n        <div><i class=\"icon ion-backspace-outline\"> </i></div>\n        <div><i class=\"icon ion-bag\"> </i></div>\n        <div><i class=\"icon ion-battery-charging\"> </i></div>\n        <div><i class=\"icon ion-battery-empty\"> </i></div>\n        <div><i class=\"icon ion-battery-full\"> </i></div>\n        <div><i class=\"icon ion-battery-half\"> </i></div>\n        <div><i class=\"icon ion-battery-low\"> </i></div>\n        <div><i class=\"icon ion-beaker\"> </i></div>\n        <div><i class=\"icon ion-beer\"> </i></div>\n        <div><i class=\"icon ion-bluetooth\"> </i></div>\n        <div><i class=\"icon ion-bonfire\"> </i></div>\n        <div><i class=\"icon ion-bookmark\"> </i></div>\n        <div><i class=\"icon ion-bowtie\"> </i></div>\n        <div><i class=\"icon ion-briefcase\"> </i></div>\n        <div><i class=\"icon ion-bug\"> </i></div>\n        <div><i class=\"icon ion-calculator\"> </i></div>\n        <div><i class=\"icon ion-calendar\"> </i></div>\n        <div><i class=\"icon ion-camera\"> </i></div>\n        <div><i class=\"icon ion-card\"> </i></div>\n        <div><i class=\"icon ion-cash\"> </i></div>\n        <div><i class=\"icon ion-chatbox\"> </i></div>\n        <div><i class=\"icon ion-chatbox-working\"> </i></div>\n        <div><i class=\"icon ion-chatboxes\"> </i></div>\n        <div><i class=\"icon ion-chatbubble\"> </i></div>\n        <div><i class=\"icon ion-chatbubble-working\"> </i></div>\n        <div><i class=\"icon ion-chatbubbles\"> </i></div>\n        <div><i class=\"icon ion-checkmark\"> </i></div>\n        <div><i class=\"icon ion-checkmark-circled\"> </i></div>\n        <div><i class=\"icon ion-checkmark-round\"> </i></div>\n        <div><i class=\"icon ion-chevron-down\"> </i></div>\n        <div><i class=\"icon ion-chevron-left\"> </i></div>\n        <div><i class=\"icon ion-chevron-right\"> </i></div>\n        <div><i class=\"icon ion-chevron-up\"> </i></div>\n        <div><i class=\"icon ion-clipboard\"> </i></div>\n        <div><i class=\"icon ion-clock\"> </i></div>\n        <div><i class=\"icon ion-close\"> </i></div>\n        <div><i class=\"icon ion-close-circled\"> </i></div>\n        <div><i class=\"icon ion-close-round\"> </i></div>\n        <div><i class=\"icon ion-closed-captioning\"> </i></div>\n        <div><i class=\"icon ion-cloud\"> </i></div>\n        <div><i class=\"icon ion-code\"> </i></div>\n        <div><i class=\"icon ion-code-download\"> </i></div>\n        <div><i class=\"icon ion-code-working\"> </i></div>\n        <div><i class=\"icon ion-coffee\"> </i></div>\n        <div><i class=\"icon ion-compass\"> </i></div>\n        <div><i class=\"icon ion-compose\"> </i></div>\n        <div><i class=\"icon ion-connection-bars\"> </i></div>\n        <div><i class=\"icon ion-contrast\"> </i></div>\n        <div><i class=\"icon ion-crop\"> </i></div>\n        <div><i class=\"icon ion-cube\"> </i></div>\n        <div><i class=\"icon ion-disc\"> </i></div>\n        <div><i class=\"icon ion-document\"> </i></div>\n        <div><i class=\"icon ion-document-text\"> </i></div>\n        <div><i class=\"icon ion-drag\"> </i></div>\n        <div><i class=\"icon ion-earth\"> </i></div>\n        <div><i class=\"icon ion-easel\"> </i></div>\n        <div><i class=\"icon ion-edit\"> </i></div>\n        <div><i class=\"icon ion-egg\"> </i></div>\n        <div><i class=\"icon ion-eject\"> </i></div>\n        <div><i class=\"icon ion-email\"> </i></div>\n        <div><i class=\"icon ion-email-unread\"> </i></div>\n        <div><i class=\"icon ion-erlenmeyer-flask\"> </i></div>\n        <div><i class=\"icon ion-erlenmeyer-flask-bubbles\"> </i></div>\n        <div><i class=\"icon ion-eye\"> </i></div>\n        <div><i class=\"icon ion-eye-disabled\"> </i></div>\n        <div><i class=\"icon ion-female\"> </i></div>\n        <div><i class=\"icon ion-filing\"> </i></div>\n        <div><i class=\"icon ion-film-marker\"> </i></div>\n        <div><i class=\"icon ion-fireball\"> </i></div>\n        <div><i class=\"icon ion-flag\"> </i></div>\n        <div><i class=\"icon ion-flame\"> </i></div>\n        <div><i class=\"icon ion-flash\"> </i></div>\n        <div><i class=\"icon ion-flash-off\"> </i></div>\n        <div><i class=\"icon ion-folder\"> </i></div>\n        <div><i class=\"icon ion-fork\"> </i></div>\n        <div><i class=\"icon ion-fork-repo\"> </i></div>\n        <div><i class=\"icon ion-forward\"> </i></div>\n        <div><i class=\"icon ion-funnel\"> </i></div>\n        <div><i class=\"icon ion-gear-a\"> </i></div>\n        <div><i class=\"icon ion-gear-b\"> </i></div>\n        <div><i class=\"icon ion-grid\"> </i></div>\n        <div><i class=\"icon ion-hammer\"> </i></div>\n        <div><i class=\"icon ion-happy\"> </i></div>\n        <div><i class=\"icon ion-happy-outline\"> </i></div>\n        <div><i class=\"icon ion-headphone\"> </i></div>\n        <div><i class=\"icon ion-heart\"> </i></div>\n        <div><i class=\"icon ion-heart-broken\"> </i></div>\n        <div><i class=\"icon ion-help\"> </i></div>\n        <div><i class=\"icon ion-help-buoy\"> </i></div>\n        <div><i class=\"icon ion-help-circled\"> </i></div>\n        <div><i class=\"icon ion-home\"> </i></div>\n        <div><i class=\"icon ion-icecream\"> </i></div>\n        <div><i class=\"icon ion-image\"> </i></div>\n        <div><i class=\"icon ion-images\"> </i></div>\n        <div><i class=\"icon ion-information\"> </i></div>\n        <div><i class=\"icon ion-information-circled\"> </i></div>\n        <div><i class=\"icon ion-ionic\"> </i></div>\n        <div><i class=\"icon ion-ios-alarm\"> </i></div>\n        <div><i class=\"icon ion-ios-alarm-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-albums\"> </i></div>\n        <div><i class=\"icon ion-ios-albums-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-americanfootball\"> </i></div>\n        <div><i class=\"icon ion-ios-americanfootball-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-analytics\"> </i></div>\n        <div><i class=\"icon ion-ios-analytics-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-arrow-back\"> </i></div>\n        <div><i class=\"icon ion-ios-arrow-down\"> </i></div>\n        <div><i class=\"icon ion-ios-arrow-forward\"> </i></div>\n        <div><i class=\"icon ion-ios-arrow-left\"> </i></div>\n        <div><i class=\"icon ion-ios-arrow-right\"> </i></div>\n        <div><i class=\"icon ion-ios-arrow-thin-down\"> </i></div>\n        <div><i class=\"icon ion-ios-arrow-thin-left\"> </i></div>\n        <div><i class=\"icon ion-ios-arrow-thin-right\"> </i></div>\n        <div><i class=\"icon ion-ios-arrow-thin-up\"> </i></div>\n        <div><i class=\"icon ion-ios-arrow-up\"> </i></div>\n        <div><i class=\"icon ion-ios-at\"> </i></div>\n        <div><i class=\"icon ion-ios-at-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-barcode\"> </i></div>\n        <div><i class=\"icon ion-ios-barcode-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-baseball\"> </i></div>\n        <div><i class=\"icon ion-ios-baseball-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-basketball\"> </i></div>\n        <div><i class=\"icon ion-ios-basketball-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-bell\"> </i></div>\n        <div><i class=\"icon ion-ios-bell-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-body\"> </i></div>\n        <div><i class=\"icon ion-ios-body-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-bolt\"> </i></div>\n        <div><i class=\"icon ion-ios-bolt-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-book\"> </i></div>\n        <div><i class=\"icon ion-ios-book-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-bookmarks\"> </i></div>\n        <div><i class=\"icon ion-ios-bookmarks-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-box\"> </i></div>\n        <div><i class=\"icon ion-ios-box-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-briefcase\"> </i></div>\n        <div><i class=\"icon ion-ios-briefcase-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-browsers\"> </i></div>\n        <div><i class=\"icon ion-ios-browsers-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-calculator\"> </i></div>\n        <div><i class=\"icon ion-ios-calculator-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-calendar\"> </i></div>\n        <div><i class=\"icon ion-ios-calendar-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-camera\"> </i></div>\n        <div><i class=\"icon ion-ios-camera-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-cart\"> </i></div>\n        <div><i class=\"icon ion-ios-cart-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-chatboxes\"> </i></div>\n        <div><i class=\"icon ion-ios-chatboxes-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-chatbubble\"> </i></div>\n        <div><i class=\"icon ion-ios-chatbubble-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-checkmark\"> </i></div>\n        <div><i class=\"icon ion-ios-checkmark-empty\"> </i></div>\n        <div><i class=\"icon ion-ios-checkmark-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-circle-filled\"> </i></div>\n        <div><i class=\"icon ion-ios-circle-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-clock\"> </i></div>\n        <div><i class=\"icon ion-ios-clock-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-close\"> </i></div>\n        <div><i class=\"icon ion-ios-close-empty\"> </i></div>\n        <div><i class=\"icon ion-ios-close-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-cloud\"> </i></div>\n        <div><i class=\"icon ion-ios-cloud-download\"> </i></div>\n        <div><i class=\"icon ion-ios-cloud-download-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-cloud-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-cloud-upload\"> </i></div>\n        <div><i class=\"icon ion-ios-cloud-upload-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-cloudy\"> </i></div>\n        <div><i class=\"icon ion-ios-cloudy-night\"> </i></div>\n        <div><i class=\"icon ion-ios-cloudy-night-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-cloudy-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-cog\"> </i></div>\n        <div><i class=\"icon ion-ios-cog-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-color-filter\"> </i></div>\n        <div><i class=\"icon ion-ios-color-filter-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-color-wand\"> </i></div>\n        <div><i class=\"icon ion-ios-color-wand-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-compose\"> </i></div>\n        <div><i class=\"icon ion-ios-compose-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-contact\"> </i></div>\n        <div><i class=\"icon ion-ios-contact-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-copy\"> </i></div>\n        <div><i class=\"icon ion-ios-copy-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-crop\"> </i></div>\n        <div><i class=\"icon ion-ios-crop-strong\"> </i></div>\n        <div><i class=\"icon ion-ios-download\"> </i></div>\n        <div><i class=\"icon ion-ios-download-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-drag\"> </i></div>\n        <div><i class=\"icon ion-ios-email\"> </i></div>\n        <div><i class=\"icon ion-ios-email-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-eye\"> </i></div>\n        <div><i class=\"icon ion-ios-eye-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-fastforward\"> </i></div>\n        <div><i class=\"icon ion-ios-fastforward-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-filing\"> </i></div>\n        <div><i class=\"icon ion-ios-filing-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-film\"> </i></div>\n        <div><i class=\"icon ion-ios-film-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-flag\"> </i></div>\n        <div><i class=\"icon ion-ios-flag-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-flame\"> </i></div>\n        <div><i class=\"icon ion-ios-flame-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-flask\"> </i></div>\n        <div><i class=\"icon ion-ios-flask-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-flower\"> </i></div>\n        <div><i class=\"icon ion-ios-flower-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-folder\"> </i></div>\n        <div><i class=\"icon ion-ios-folder-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-football\"> </i></div>\n        <div><i class=\"icon ion-ios-football-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-game-controller-a\"> </i></div>\n        <div><i class=\"icon ion-ios-game-controller-a-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-game-controller-b\"> </i></div>\n        <div><i class=\"icon ion-ios-game-controller-b-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-gear\"> </i></div>\n        <div><i class=\"icon ion-ios-gear-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-glasses\"> </i></div>\n        <div><i class=\"icon ion-ios-glasses-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-grid-view\"> </i></div>\n        <div><i class=\"icon ion-ios-grid-view-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-heart\"> </i></div>\n        <div><i class=\"icon ion-ios-heart-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-help\"> </i></div>\n        <div><i class=\"icon ion-ios-help-empty\"> </i></div>\n        <div><i class=\"icon ion-ios-help-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-home\"> </i></div>\n        <div><i class=\"icon ion-ios-home-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-infinite\"> </i></div>\n        <div><i class=\"icon ion-ios-infinite-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-information\"> </i></div>\n        <div><i class=\"icon ion-ios-information-empty\"> </i></div>\n        <div><i class=\"icon ion-ios-information-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-ionic-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-keypad\"> </i></div>\n        <div><i class=\"icon ion-ios-keypad-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-lightbulb\"> </i></div>\n        <div><i class=\"icon ion-ios-lightbulb-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-list\"> </i></div>\n        <div><i class=\"icon ion-ios-list-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-location\"> </i></div>\n        <div><i class=\"icon ion-ios-location-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-locked\"> </i></div>\n        <div><i class=\"icon ion-ios-locked-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-loop\"> </i></div>\n        <div><i class=\"icon ion-ios-loop-strong\"> </i></div>\n        <div><i class=\"icon ion-ios-medical\"> </i></div>\n        <div><i class=\"icon ion-ios-medical-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-medkit\"> </i></div>\n        <div><i class=\"icon ion-ios-medkit-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-mic\"> </i></div>\n        <div><i class=\"icon ion-ios-mic-off\"> </i></div>\n        <div><i class=\"icon ion-ios-mic-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-minus\"> </i></div>\n        <div><i class=\"icon ion-ios-minus-empty\"> </i></div>\n        <div><i class=\"icon ion-ios-minus-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-monitor\"> </i></div>\n        <div><i class=\"icon ion-ios-monitor-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-moon\"> </i></div>\n        <div><i class=\"icon ion-ios-moon-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-more\"> </i></div>\n        <div><i class=\"icon ion-ios-more-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-musical-note\"> </i></div>\n        <div><i class=\"icon ion-ios-musical-notes\"> </i></div>\n        <div><i class=\"icon ion-ios-navigate\"> </i></div>\n        <div><i class=\"icon ion-ios-navigate-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-nutrition\"> </i></div>\n        <div><i class=\"icon ion-ios-nutrition-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-paper\"> </i></div>\n        <div><i class=\"icon ion-ios-paper-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-paperplane\"> </i></div>\n        <div><i class=\"icon ion-ios-paperplane-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-partlysunny\"> </i></div>\n        <div><i class=\"icon ion-ios-partlysunny-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-pause\"> </i></div>\n        <div><i class=\"icon ion-ios-pause-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-paw\"> </i></div>\n        <div><i class=\"icon ion-ios-paw-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-people\"> </i></div>\n        <div><i class=\"icon ion-ios-people-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-person\"> </i></div>\n        <div><i class=\"icon ion-ios-person-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-personadd\"> </i></div>\n        <div><i class=\"icon ion-ios-personadd-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-photos\"> </i></div>\n        <div><i class=\"icon ion-ios-photos-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-pie\"> </i></div>\n        <div><i class=\"icon ion-ios-pie-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-pint\"> </i></div>\n        <div><i class=\"icon ion-ios-pint-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-play\"> </i></div>\n        <div><i class=\"icon ion-ios-play-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-plus\"> </i></div>\n        <div><i class=\"icon ion-ios-plus-empty\"> </i></div>\n        <div><i class=\"icon ion-ios-plus-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-pricetag\"> </i></div>\n        <div><i class=\"icon ion-ios-pricetag-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-pricetags\"> </i></div>\n        <div><i class=\"icon ion-ios-pricetags-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-printer\"> </i></div>\n        <div><i class=\"icon ion-ios-printer-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-pulse\"> </i></div>\n        <div><i class=\"icon ion-ios-pulse-strong\"> </i></div>\n        <div><i class=\"icon ion-ios-rainy\"> </i></div>\n        <div><i class=\"icon ion-ios-rainy-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-recording\"> </i></div>\n        <div><i class=\"icon ion-ios-recording-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-redo\"> </i></div>\n        <div><i class=\"icon ion-ios-redo-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-refresh\"> </i></div>\n        <div><i class=\"icon ion-ios-refresh-empty\"> </i></div>\n        <div><i class=\"icon ion-ios-refresh-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-reload\"> </i></div>\n        <div><i class=\"icon ion-ios-reverse-camera\"> </i></div>\n        <div><i class=\"icon ion-ios-reverse-camera-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-rewind\"> </i></div>\n        <div><i class=\"icon ion-ios-rewind-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-rose\"> </i></div>\n        <div><i class=\"icon ion-ios-rose-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-search\"> </i></div>\n        <div><i class=\"icon ion-ios-search-strong\"> </i></div>\n        <div><i class=\"icon ion-ios-settings\"> </i></div>\n        <div><i class=\"icon ion-ios-settings-strong\"> </i></div>\n        <div><i class=\"icon ion-ios-shuffle\"> </i></div>\n        <div><i class=\"icon ion-ios-shuffle-strong\"> </i></div>\n        <div><i class=\"icon ion-ios-skipbackward\"> </i></div>\n        <div><i class=\"icon ion-ios-skipbackward-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-skipforward\"> </i></div>\n        <div><i class=\"icon ion-ios-skipforward-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-snowy\"> </i></div>\n        <div><i class=\"icon ion-ios-speedometer\"> </i></div>\n        <div><i class=\"icon ion-ios-speedometer-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-star\"> </i></div>\n        <div><i class=\"icon ion-ios-star-half\"> </i></div>\n        <div><i class=\"icon ion-ios-star-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-stopwatch\"> </i></div>\n        <div><i class=\"icon ion-ios-stopwatch-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-sunny\"> </i></div>\n        <div><i class=\"icon ion-ios-sunny-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-telephone\"> </i></div>\n        <div><i class=\"icon ion-ios-telephone-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-tennisball\"> </i></div>\n        <div><i class=\"icon ion-ios-tennisball-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-thunderstorm\"> </i></div>\n        <div><i class=\"icon ion-ios-thunderstorm-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-time\"> </i></div>\n        <div><i class=\"icon ion-ios-time-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-timer\"> </i></div>\n        <div><i class=\"icon ion-ios-timer-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-toggle\"> </i></div>\n        <div><i class=\"icon ion-ios-toggle-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-trash\"> </i></div>\n        <div><i class=\"icon ion-ios-trash-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-undo\"> </i></div>\n        <div><i class=\"icon ion-ios-undo-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-unlocked\"> </i></div>\n        <div><i class=\"icon ion-ios-unlocked-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-upload\"> </i></div>\n        <div><i class=\"icon ion-ios-upload-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-videocam\"> </i></div>\n        <div><i class=\"icon ion-ios-videocam-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-volume-high\"> </i></div>\n        <div><i class=\"icon ion-ios-volume-low\"> </i></div>\n        <div><i class=\"icon ion-ios-wineglass\"> </i></div>\n        <div><i class=\"icon ion-ios-wineglass-outline\"> </i></div>\n        <div><i class=\"icon ion-ios-world\"> </i></div>\n        <div><i class=\"icon ion-ios-world-outline\"> </i></div>\n        <div><i class=\"icon ion-ipad\"> </i></div>\n        <div><i class=\"icon ion-iphone\"> </i></div>\n        <div><i class=\"icon ion-ipod\"> </i></div>\n        <div><i class=\"icon ion-jet\"> </i></div>\n        <div><i class=\"icon ion-key\"> </i></div>\n        <div><i class=\"icon ion-knife\"> </i></div>\n        <div><i class=\"icon ion-laptop\"> </i></div>\n        <div><i class=\"icon ion-leaf\"> </i></div>\n        <div><i class=\"icon ion-levels\"> </i></div>\n        <div><i class=\"icon ion-lightbulb\"> </i></div>\n        <div><i class=\"icon ion-link\"> </i></div>\n        <div><i class=\"icon ion-load-a\"> </i></div>\n        <div><i class=\"icon ion-load-b\"> </i></div>\n        <div><i class=\"icon ion-load-c\"> </i></div>\n        <div><i class=\"icon ion-load-d\"> </i></div>\n        <div><i class=\"icon ion-location\"> </i></div>\n        <div><i class=\"icon ion-lock-combination\"> </i></div>\n        <div><i class=\"icon ion-locked\"> </i></div>\n        <div><i class=\"icon ion-log-in\"> </i></div>\n        <div><i class=\"icon ion-log-out\"> </i></div>\n        <div><i class=\"icon ion-loop\"> </i></div>\n        <div><i class=\"icon ion-magnet\"> </i></div>\n        <div><i class=\"icon ion-male\"> </i></div>\n        <div><i class=\"icon ion-man\"> </i></div>\n        <div><i class=\"icon ion-map\"> </i></div>\n        <div><i class=\"icon ion-medkit\"> </i></div>\n        <div><i class=\"icon ion-merge\"> </i></div>\n        <div><i class=\"icon ion-mic-a\"> </i></div>\n        <div><i class=\"icon ion-mic-b\"> </i></div>\n        <div><i class=\"icon ion-mic-c\"> </i></div>\n        <div><i class=\"icon ion-minus\"> </i></div>\n        <div><i class=\"icon ion-minus-circled\"> </i></div>\n        <div><i class=\"icon ion-minus-round\"> </i></div>\n        <div><i class=\"icon ion-model-s\"> </i></div>\n        <div><i class=\"icon ion-monitor\"> </i></div>\n        <div><i class=\"icon ion-more\"> </i></div>\n        <div><i class=\"icon ion-mouse\"> </i></div>\n        <div><i class=\"icon ion-music-note\"> </i></div>\n        <div><i class=\"icon ion-navicon\"> </i></div>\n        <div><i class=\"icon ion-navicon-round\"> </i></div>\n        <div><i class=\"icon ion-navigate\"> </i></div>\n        <div><i class=\"icon ion-network\"> </i></div>\n        <div><i class=\"icon ion-no-smoking\"> </i></div>\n        <div><i class=\"icon ion-nuclear\"> </i></div>\n        <div><i class=\"icon ion-outlet\"> </i></div>\n        <div><i class=\"icon ion-paintbrush\"> </i></div>\n        <div><i class=\"icon ion-paintbucket\"> </i></div>\n        <div><i class=\"icon ion-paper-airplane\"> </i></div>\n        <div><i class=\"icon ion-paperclip\"> </i></div>\n        <div><i class=\"icon ion-pause\"> </i></div>\n        <div><i class=\"icon ion-person\"> </i></div>\n        <div><i class=\"icon ion-person-add\"> </i></div>\n        <div><i class=\"icon ion-person-stalker\"> </i></div>\n        <div><i class=\"icon ion-pie-graph\"> </i></div>\n        <div><i class=\"icon ion-pin\"> </i></div>\n        <div><i class=\"icon ion-pinpoint\"> </i></div>\n        <div><i class=\"icon ion-pizza\"> </i></div>\n        <div><i class=\"icon ion-plane\"> </i></div>\n        <div><i class=\"icon ion-planet\"> </i></div>\n        <div><i class=\"icon ion-play\"> </i></div>\n        <div><i class=\"icon ion-playstation\"> </i></div>\n        <div><i class=\"icon ion-plus\"> </i></div>\n        <div><i class=\"icon ion-plus-circled\"> </i></div>\n        <div><i class=\"icon ion-plus-round\"> </i></div>\n        <div><i class=\"icon ion-podium\"> </i></div>\n        <div><i class=\"icon ion-pound\"> </i></div>\n        <div><i class=\"icon ion-power\"> </i></div>\n        <div><i class=\"icon ion-pricetag\"> </i></div>\n        <div><i class=\"icon ion-pricetags\"> </i></div>\n        <div><i class=\"icon ion-printer\"> </i></div>\n        <div><i class=\"icon ion-pull-request\"> </i></div>\n        <div><i class=\"icon ion-qr-scanner\"> </i></div>\n        <div><i class=\"icon ion-quote\"> </i></div>\n        <div><i class=\"icon ion-radio-waves\"> </i></div>\n        <div><i class=\"icon ion-record\"> </i></div>\n        <div><i class=\"icon ion-refresh\"> </i></div>\n        <div><i class=\"icon ion-reply\"> </i></div>\n        <div><i class=\"icon ion-reply-all\"> </i></div>\n        <div><i class=\"icon ion-ribbon-a\"> </i></div>\n        <div><i class=\"icon ion-ribbon-b\"> </i></div>\n        <div><i class=\"icon ion-sad\"> </i></div>\n        <div><i class=\"icon ion-sad-outline\"> </i></div>\n        <div><i class=\"icon ion-scissors\"> </i></div>\n        <div><i class=\"icon ion-search\"> </i></div>\n        <div><i class=\"icon ion-settings\"> </i></div>\n        <div><i class=\"icon ion-share\"> </i></div>\n        <div><i class=\"icon ion-shuffle\"> </i></div>\n        <div><i class=\"icon ion-skip-backward\"> </i></div>\n        <div><i class=\"icon ion-skip-forward\"> </i></div>\n        <div><i class=\"icon ion-social-android\"> </i></div>\n        <div><i class=\"icon ion-social-android-outline\"> </i></div>\n        <div><i class=\"icon ion-social-angular\"> </i></div>\n        <div><i class=\"icon ion-social-angular-outline\"> </i></div>\n        <div><i class=\"icon ion-social-apple\"> </i></div>\n        <div><i class=\"icon ion-social-apple-outline\"> </i></div>\n        <div><i class=\"icon ion-social-bitcoin\"> </i></div>\n        <div><i class=\"icon ion-social-bitcoin-outline\"> </i></div>\n        <div><i class=\"icon ion-social-buffer\"> </i></div>\n        <div><i class=\"icon ion-social-buffer-outline\"> </i></div>\n        <div><i class=\"icon ion-social-chrome\"> </i></div>\n        <div><i class=\"icon ion-social-chrome-outline\"> </i></div>\n        <div><i class=\"icon ion-social-codepen\"> </i></div>\n        <div><i class=\"icon ion-social-codepen-outline\"> </i></div>\n        <div><i class=\"icon ion-social-css3\"> </i></div>\n        <div><i class=\"icon ion-social-css3-outline\"> </i></div>\n        <div><i class=\"icon ion-social-designernews\"> </i></div>\n        <div><i class=\"icon ion-social-designernews-outline\"> </i></div>\n        <div><i class=\"icon ion-social-dribbble\"> </i></div>\n        <div><i class=\"icon ion-social-dribbble-outline\"> </i></div>\n        <div><i class=\"icon ion-social-dropbox\"> </i></div>\n        <div><i class=\"icon ion-social-dropbox-outline\"> </i></div>\n        <div><i class=\"icon ion-social-euro\"> </i></div>\n        <div><i class=\"icon ion-social-euro-outline\"> </i></div>\n        <div><i class=\"icon ion-social-facebook\"> </i></div>\n        <div><i class=\"icon ion-social-facebook-outline\"> </i></div>\n        <div><i class=\"icon ion-social-foursquare\"> </i></div>\n        <div><i class=\"icon ion-social-foursquare-outline\"> </i></div>\n        <div><i class=\"icon ion-social-freebsd-devil\"> </i></div>\n        <div><i class=\"icon ion-social-github\"> </i></div>\n        <div><i class=\"icon ion-social-github-outline\"> </i></div>\n        <div><i class=\"icon ion-social-google\"> </i></div>\n        <div><i class=\"icon ion-social-google-outline\"> </i></div>\n        <div><i class=\"icon ion-social-googleplus\"> </i></div>\n        <div><i class=\"icon ion-social-googleplus-outline\"> </i></div>\n        <div><i class=\"icon ion-social-hackernews\"> </i></div>\n        <div><i class=\"icon ion-social-hackernews-outline\"> </i></div>\n        <div><i class=\"icon ion-social-html5\"> </i></div>\n        <div><i class=\"icon ion-social-html5-outline\"> </i></div>\n        <div><i class=\"icon ion-social-instagram\"> </i></div>\n        <div><i class=\"icon ion-social-instagram-outline\"> </i></div>\n        <div><i class=\"icon ion-social-javascript\"> </i></div>\n        <div><i class=\"icon ion-social-javascript-outline\"> </i></div>\n        <div><i class=\"icon ion-social-linkedin\"> </i></div>\n        <div><i class=\"icon ion-social-linkedin-outline\"> </i></div>\n        <div><i class=\"icon ion-social-markdown\"> </i></div>\n        <div><i class=\"icon ion-social-nodejs\"> </i></div>\n        <div><i class=\"icon ion-social-octocat\"> </i></div>\n        <div><i class=\"icon ion-social-pinterest\"> </i></div>\n        <div><i class=\"icon ion-social-pinterest-outline\"> </i></div>\n        <div><i class=\"icon ion-social-python\"> </i></div>\n        <div><i class=\"icon ion-social-reddit\"> </i></div>\n        <div><i class=\"icon ion-social-reddit-outline\"> </i></div>\n        <div><i class=\"icon ion-social-rss\"> </i></div>\n        <div><i class=\"icon ion-social-rss-outline\"> </i></div>\n        <div><i class=\"icon ion-social-sass\"> </i></div>\n        <div><i class=\"icon ion-social-skype\"> </i></div>\n        <div><i class=\"icon ion-social-skype-outline\"> </i></div>\n        <div><i class=\"icon ion-social-snapchat\"> </i></div>\n        <div><i class=\"icon ion-social-snapchat-outline\"> </i></div>\n        <div><i class=\"icon ion-social-tumblr\"> </i></div>\n        <div><i class=\"icon ion-social-tumblr-outline\"> </i></div>\n        <div><i class=\"icon ion-social-tux\"> </i></div>\n        <div><i class=\"icon ion-social-twitch\"> </i></div>\n        <div><i class=\"icon ion-social-twitch-outline\"> </i></div>\n        <div><i class=\"icon ion-social-twitter\"> </i></div>\n        <div><i class=\"icon ion-social-twitter-outline\"> </i></div>\n        <div><i class=\"icon ion-social-usd\"> </i></div>\n        <div><i class=\"icon ion-social-usd-outline\"> </i></div>\n        <div><i class=\"icon ion-social-vimeo\"> </i></div>\n        <div><i class=\"icon ion-social-vimeo-outline\"> </i></div>\n        <div><i class=\"icon ion-social-whatsapp\"> </i></div>\n        <div><i class=\"icon ion-social-whatsapp-outline\"> </i></div>\n        <div><i class=\"icon ion-social-windows\"> </i></div>\n        <div><i class=\"icon ion-social-windows-outline\"> </i></div>\n        <div><i class=\"icon ion-social-wordpress\"> </i></div>\n        <div><i class=\"icon ion-social-wordpress-outline\"> </i></div>\n        <div><i class=\"icon ion-social-yahoo\"> </i></div>\n        <div><i class=\"icon ion-social-yahoo-outline\"> </i></div>\n        <div><i class=\"icon ion-social-yen\"> </i></div>\n        <div><i class=\"icon ion-social-yen-outline\"> </i></div>\n        <div><i class=\"icon ion-social-youtube\"> </i></div>\n        <div><i class=\"icon ion-social-youtube-outline\"> </i></div>\n        <div><i class=\"icon ion-soup-can\"> </i></div>\n        <div><i class=\"icon ion-soup-can-outline\"> </i></div>\n        <div><i class=\"icon ion-speakerphone\"> </i></div>\n        <div><i class=\"icon ion-speedometer\"> </i></div>\n        <div><i class=\"icon ion-spoon\"> </i></div>\n        <div><i class=\"icon ion-star\"> </i></div>\n        <div><i class=\"icon ion-stats-bars\"> </i></div>\n        <div><i class=\"icon ion-steam\"> </i></div>\n        <div><i class=\"icon ion-stop\"> </i></div>\n        <div><i class=\"icon ion-thermometer\"> </i></div>\n        <div><i class=\"icon ion-thumbsdown\"> </i></div>\n        <div><i class=\"icon ion-thumbsup\"> </i></div>\n        <div><i class=\"icon ion-toggle\"> </i></div>\n        <div><i class=\"icon ion-toggle-filled\"> </i></div>\n        <div><i class=\"icon ion-transgender\"> </i></div>\n        <div><i class=\"icon ion-trash-a\"> </i></div>\n        <div><i class=\"icon ion-trash-b\"> </i></div>\n        <div><i class=\"icon ion-trophy\"> </i></div>\n        <div><i class=\"icon ion-tshirt\"> </i></div>\n        <div><i class=\"icon ion-tshirt-outline\"> </i></div>\n        <div><i class=\"icon ion-umbrella\"> </i></div>\n        <div><i class=\"icon ion-university\"> </i></div>\n        <div><i class=\"icon ion-unlocked\"> </i></div>\n        <div><i class=\"icon ion-upload\"> </i></div>\n        <div><i class=\"icon ion-usb\"> </i></div>\n        <div><i class=\"icon ion-videocamera\"> </i></div>\n        <div><i class=\"icon ion-volume-high\"> </i></div>\n        <div><i class=\"icon ion-volume-low\"> </i></div>\n        <div><i class=\"icon ion-volume-medium\"> </i></div>\n        <div><i class=\"icon ion-volume-mute\"> </i></div>\n        <div><i class=\"icon ion-wand\"> </i></div>\n        <div><i class=\"icon ion-waterdrop\"> </i></div>\n        <div><i class=\"icon ion-wifi\"> </i></div>\n        <div><i class=\"icon ion-wineglass\"> </i></div>\n        <div><i class=\"icon ion-woman\"> </i></div>\n        <div><i class=\"icon ion-wrench\"> </i></div>\n        <div><i class=\"icon ion-xbox\"> </i></div>\n        </div>\n\n        <script type=\"text/javascript\">\n            var elms = document.querySelectorAll('#divIcons > div');\n            for(var i=0;i<elms.length;i++) {\n                elms[i].addEventListener('click', function(e){\n\n                    var elm = e.target;\n                    if(!elm.className) elm = elm.childNodes[0];\n                    parent._cb.addIcon(elm.className)\n\n                });\n            }\n\n        </script>\n\n        </body>\n        </html>\n                \n        \n        ");
        return html;
      }
    }, {
      key: "addIcon",
      value: function addIcon(classname) {
        this.util.restoreSelection();

        if (this.builder.activeIcon) {
          this.builder.uo.saveForUndo();
          var arrSizes = this.builder.opts.fontSizeClassValues; // Get current class size

          var currentClassSize = '';

          for (var i = 0; i <= arrSizes.length - 1; i++) {
            if (dom$4.hasClass(this.builder.activeIcon, 'size-' + arrSizes[i])) {
              currentClassSize = 'size-' + arrSizes[i];
            }
          }

          this.builder.activeIcon.className = classname + (currentClassSize !== '' ? ' ' + currentClassSize : '');
          dom$4.addClass(this.builder.activeIcon, 'icon-active');
          dom$4.selectElementContents(this.builder.activeIcon);
          this.util.saveSelection();
        } else {
          if (!dom$4.textSelection()) return;
          this.builder.uo.saveForUndo();
          this.util.pasteHtmlAtCaret('<i class="' + classname + ' icon-active"></i>', true);
          this.builder.activeIcon = document.querySelector('.icon-active');
          dom$4.selectElementContents(this.builder.activeIcon);
          this.util.saveSelection();
        } //Trigger Change event


        this.builder.opts.onChange(); //Trigger Render event

        this.builder.opts.onRender();
      }
    }, {
      key: "clearFont",
      value: function clearFont() {
        this.builder.uo.saveForUndo();
        this.applyFont('', '', '');
      }
    }, {
      key: "applyFont",
      value: function applyFont(fontfamily, fontstyle, provider) {
        var _this2 = this;

        var elm;
        var panel = this.builderStuff.querySelector('.is-side.elementstyles');

        if (dom$4.hasClass(panel, 'active')) {
          this.builder.uo.saveForUndo();
          elm = this.builder.inspectedElement;
          elm.style.fontFamily = fontfamily;
          this.builderStuff.querySelector('#inpElmFontFamily').value = fontfamily; //direct (see elementpanel-text.js)

          this.elementStyleEditor.refresh();
        } else {
          try {
            var curr;

            if (window.getSelection) {
              curr = window.getSelection().getRangeAt(0).commonAncestorContainer;

              if (curr.nodeType === 3) {
                //text node
                elm = curr.parentNode;
              } else {
                elm = curr;
              }

              if (elm.tagName !== 'H1' && elm.tagName !== 'H2' && elm.tagName !== 'H3' && elm.tagName !== 'H4' && elm.tagName !== 'H5' && elm.tagName !== 'H6' && elm.tagName !== 'P') {
                elm = elm.parentNode;
              }
            } else if (document.selection) {
              curr = document.selection.createRange();
              elm = document.selection.createRange().parentElement();

              if (elm.tagName !== 'H1' && elm.tagName !== 'H2' && elm.tagName !== 'H3' && elm.tagName !== 'H4' && elm.tagName !== 'H5' && elm.tagName !== 'H6' && elm.tagName !== 'P') {
                elm = elm.parentElement();
              }
            }
          } catch (e) {
            return;
          }

          this.builder.uo.saveForUndo();
          var text = dom$4.getSelected();

          if (text.trim() !== '' && elm.innerText !== text) {
            document.execCommand('fontName', false, fontfamily);
            var fontElements = document.getElementsByTagName('font');

            for (var i = 0, len = fontElements.length; i < len; ++i) {
              if (fontElements[i].face === fontfamily) {
                fontElements[i].removeAttribute('face');
                fontElements[i].style.fontFamily = fontfamily;
                dom$4.selectElementContents(fontElements[i]); // if(this.builder.isTouchSupport) dom.addClass(fontElements[i], 'textblock-active');
              }
            }
          } else if (text.trim() !== '' && elm.innerText === text) {
            //selection fully mode on text AND element. Use element then.
            elm.style.fontFamily = fontfamily;
          } else {
            elm.style.fontFamily = fontfamily;
          }
        }

        var o = fontstyle;

        if (!o) {
          o = '';
        } else {
          o = ':' + o;
        }

        var fontname = fontfamily.split(',')[0];

        if (provider === 'google') {
          var bExist = false;
          var links = document.getElementsByTagName('link');

          for (i = 0; i < links.length; i++) {
            var sSrc = links[i].href.toLowerCase();
            sSrc = sSrc.replace(/\+/g, ' ').replace(/%20/g, ' ');
            if (sSrc.indexOf(fontname.toLowerCase()) !== -1) bExist = true;
          }

          if (!bExist) {
            var element = elm;

            while (!dom$4.hasClass(element, 'is-builder')) {
              element = element.parentNode;
            }

            dom$4.appendHtml(element, '<link href="//fonts.googleapis.com/css?family=' + fontname + o + '" rel="stylesheet" property="stylesheet" type="text/css">');
          }
        }

        if (!this.builder.inspectedElement) {
          //save selection
          this.util.saveSelection(); //Needed because after format, a tag is added (ex. <span>), so, make selection again. 

          if (this.builder.isTouchSupport) {
            //prevent keyboard open
            var btnFocus = this.rteTool.querySelector('button');
            btnFocus.focus();
          }

          this.getState();
        } //Trigger Change event


        this.builder.opts.onChange();
        setTimeout(function () {
          _this2.builder.opts.onChange();
        }, 300); //LATER: make function
        //Cleanup Google font css link

        links = document.getElementsByTagName('link');

        for (i = 0; i < links.length; i++) {
          sSrc = links[i].href.toLowerCase();

          if (sSrc.indexOf('googleapis') !== -1) {
            //get fontname
            sSrc = sSrc.replace(/\+/g, ' ').replace(/%20/g, ' ');
            fontname = sSrc.substr(sSrc.indexOf('family=') + 7);

            if (fontname.indexOf(':') !== -1) {
              fontname = fontname.split(':')[0];
            }

            if (fontname.indexOf('|') !== -1) {
              fontname = fontname.split('|')[0];
            } //check if fontname used in content


            var tmp = document.body.innerHTML.toLowerCase();
            var count = tmp.split(fontname).length;

            if (count < 3) {
              //not used     
              var attr = links[i].getAttribute('data-protect');

              if (!attr) {
                links[i].setAttribute('data-rel', '_del');
              }
            }
          }
        }

        [].forEach.call(document.querySelectorAll('link[data-rel="_del"]'), function (e) {
          e.parentNode.removeChild(e);
        });
      }
    }, {
      key: "setFont",
      value: function setFont(fontfamily, fontstyle, fontdisplay, provider) {
        // NEW 4.0.5
        var elm;
        var panel = this.builderStuff.querySelector('.is-side.elementstyles');

        if (dom$4.hasClass(panel, 'active')) {
          this.builder.uo.saveForUndo();
          elm = this.builder.inspectedElement;
          elm.style.fontFamily = fontfamily;
          this.builderStuff.querySelector('#inpElmFontFamily').value = fontfamily; //direct (see elementpanel-text.js)

          this.elementStyleEditor.refresh();
        } else {
          if (this.builder.isIE) this.util.restoreSelection(); //a must (IE)

          try {
            var curr;

            if (window.getSelection) {
              curr = window.getSelection().getRangeAt(0).commonAncestorContainer;

              if (curr.nodeType === 3) {
                //text node
                elm = curr.parentNode;
              } else {
                elm = curr;
              }

              if (elm.tagName !== 'H1' && elm.tagName !== 'H2' && elm.tagName !== 'H3' && elm.tagName !== 'H4' && elm.tagName !== 'H5' && elm.tagName !== 'H6' && elm.tagName !== 'P') {
                elm = elm.parentNode;
              }
            } else if (document.selection) {
              curr = document.selection.createRange();
              elm = document.selection.createRange().parentElement();

              if (elm.tagName !== 'H1' && elm.tagName !== 'H2' && elm.tagName !== 'H3' && elm.tagName !== 'H4' && elm.tagName !== 'H5' && elm.tagName !== 'H6' && elm.tagName !== 'P') {
                elm = elm.parentElement();
              }
            }
          } catch (e) {
            return;
          }

          this.builder.uo.saveForUndo();
          var text = dom$4.getSelected();

          if (text.trim() !== '' && elm.innerText !== text) {
            document.execCommand('fontName', false, fontfamily); // this removes all quotes, so needs to make valid later (below).

            var fontElements = document.getElementsByTagName('font');

            for (var i = 0, len = fontElements.length; i < len; ++i) {
              // fontElements[i].face = Press Start 2p, cursive => no quotes here
              // fontfamily = 'Press Start 2p', cursive
              if (fontElements[i].face.replace(/'/g, '') === fontfamily.replace(/'/g, '')) {
                fontElements[i].removeAttribute('face');
                fontElements[i].style.fontFamily = fontfamily;
                dom$4.selectElementContents(fontElements[i]); // if(this.builder.isTouchSupport) dom.addClass(fontElements[i], 'textblock-active');
              }
            } //cleaning added <span face="">.
            // example: 
            // <p style="text-align: justify;"><span style="font-family: &quot;Press Start 2p&quot;, cursive;">Lorem </span>
            // <span style="font-family: &quot;M PLUS Rounded 1c&quot;, sans-serif;">Ipsum</span>
            // <span face="Press Start 2p, cursive;"> is simply dummy text of the printing and typesetting industry...</span></p>


            fontElements = document.querySelectorAll('[face]');

            for (i = 0, len = fontElements.length; i < len; ++i) {
              // Make valid (adding quotes):
              var tmp = fontElements[i].getAttribute('face');

              if (tmp.indexOf(',') !== -1) {
                var f1 = tmp.split(',')[0];
                var f2 = tmp.split(',')[1];

                if (f1.indexOf(' ') !== -1) {
                  tmp = "'".concat(f1, "',").concat(f2);
                }
              }

              fontElements[i].style.fontFamily = tmp;
              fontElements[i].removeAttribute('face');
            }
          } else if (text.trim() !== '' && elm.innerText === text) {
            //selection fully mode on text AND element. Use element then.
            elm.style.fontFamily = fontfamily;
            var allfonts = elm.querySelectorAll('*');
            Array.prototype.forEach.call(allfonts, function (item) {
              if (item.style.fontFamily !== '') {
                item.style.fontFamily = '';
              }
            });
          } else {
            elm.style.fontFamily = fontfamily;
          }
        }

        var o = fontstyle;

        if (!o) {
          o = '';
        } else {
          o = ':' + o;
        }

        var d = ''; // NEW 4.0.5

        if (fontdisplay) {
          d = '&display=swap';
        }

        var fontname = fontfamily.split(',')[0];
        fontname = fontname.replace(/'/g, ''); // NEW 4.0.5 (replace quotes in font family)

        if (provider === 'google') {
          var bExist = false;
          var links = document.getElementsByTagName('link');

          for (i = 0; i < links.length; i++) {
            var sSrc = links[i].href.toLowerCase();
            sSrc = sSrc.replace(/\+/g, ' ').replace(/%20/g, ' ');
            if (sSrc.indexOf(fontname.toLowerCase()) !== -1) bExist = true;
          }

          if (!bExist) {
            var element = elm;

            while (!dom$4.hasClass(element, 'is-builder')) {
              element = element.parentNode;
            }

            dom$4.appendHtml(element, '<link href="//fonts.googleapis.com/css?family=' + fontname + d + o + '" rel="stylesheet" property="stylesheet" type="text/css">');
          }
        }

        if (!this.builder.inspectedElement) {
          //save selection
          this.util.saveSelection(); //Needed because after format, a tag is added (ex. <span>), so, make selection again. 

          if (this.builder.isTouchSupport) {
            //prevent keyboard open
            var btnFocus = this.rteTool.querySelector('button');
            btnFocus.focus();
          }

          this.getState();
        } //Trigger Change event


        this.builder.opts.onChange(); //LATER: make function
        //Cleanup Google font css link

        links = document.getElementsByTagName('link');

        for (i = 0; i < links.length; i++) {
          sSrc = links[i].href.toLowerCase();

          if (sSrc.indexOf('googleapis') !== -1) {
            //get fontname
            sSrc = sSrc.replace(/\+/g, ' ').replace(/%20/g, ' ');
            fontname = sSrc.substr(sSrc.indexOf('family=') + 7);

            if (fontname.indexOf(':') !== -1) {
              fontname = fontname.split(':')[0];
            }

            if (fontname.indexOf('|') !== -1) {
              fontname = fontname.split('|')[0];
            }

            fontname = fontname.replace('&display=swap', ''); // NEW 4.0.5
            //console.log(fontname);
            //check if fontname used in content

            var _tmp = document.body.innerHTML.toLowerCase();

            var count = _tmp.split(fontname).length;

            if (count < 3) {
              //not used     
              var attr = links[i].getAttribute('data-protect');

              if (!attr) {
                links[i].setAttribute('data-rel', '_del');
              }
            }
          }
        }

        [].forEach.call(document.querySelectorAll('link[data-rel="_del"]'), function (e) {
          e.parentNode.removeChild(e);
        });
      }
    }, {
      key: "positionToolbar",
      value: function positionToolbar() {
        var viewportWidth = window.innerWidth;
        var viewportHeight = window.innerHeight;

        if (this.builder.opts.toolbar === 'left' || this.builder.opts.toolbar === 'right') {
          var h = this.rteTool.offsetHeight;
          var top = viewportHeight / 2 - h / 2;
          this.rteTool.style.left = '';
          this.rteTool.style.top = top + 'px'; // Element Toolbar

          h = this.elementRteTool.offsetHeight;
          top = viewportHeight / 2 - h / 2;
          this.elementRteTool.style.left = '';
          this.elementRteTool.style.top = top + 'px';
        } else {
          var w = this.rteTool.offsetWidth;
          var left = viewportWidth / 2 - w / 2;
          this.rteTool.style.top = '';
          this.rteTool.style.left = left + 'px'; // Element Toolbar

          w = this.elementRteTool.offsetWidth;
          left = viewportWidth / 2 - w / 2;
          this.elementRteTool.style.top = '';
          this.elementRteTool.style.left = left + 'px';
        }
      }
    }]);

    return Rte;
  }();

  var dom$3 = new Dom();

  var SaveImages = /*#__PURE__*/function () {
    function SaveImages() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck$1(this, SaveImages);

      var defaults = {
        page: '',
        container: '.container',
        handler: 'saveimage.php',
        onComplete: function onComplete() {},
        customval: '',
        stuffPlacement: '#_cbhtml',
        hiquality: false // onBase64Upload: function () { },

      };
      this.opts = Object.assign(this, defaults, opts);
      this.count = 0;
      var builderStuff = document.querySelector(this.opts.stuffPlacement);

      if (!builderStuff) {
        builderStuff = document.createElement('div');
        builderStuff.id = '_cbhtml';
        builderStuff.className = 'is-ui';
        dom$3.appendChild(document.body, builderStuff);
      }

      this.builderStuff = builderStuff;
    }

    _createClass$1(SaveImages, [{
      key: "save",
      value: function save() {
        var _this = this;

        if (this.opts.page !== '') {
          var area = document.querySelector(this.opts.page);
          this.uploadImages(area);
        } else {
          var areas = document.querySelectorAll(this.opts.container);
          Array.prototype.forEach.call(areas, function (area) {
            _this.uploadImages(area);
          });
        } //Check per 2 sec if all images have been changed with the new saved images.


        var _int = setInterval(function () {
          var finished = true;

          if (_this.opts.page !== '') {
            var _area = document.querySelector(_this.opts.page);

            finished = _this.checkImages(_area);
          } else {
            var _areas = document.querySelectorAll(_this.opts.container);

            Array.prototype.forEach.call(_areas, function (area) {
              if (_this.checkImages(area) === false) {
                finished = false;
              }
            });
          }

          if (finished) {
            _this.opts.onComplete();

            window.clearInterval(_int); // No need to remove hidden iframes
            // //remove unused forms (previously used for submitting images)
            // for (var i = 1; i <= this.count; i++) {
            //     let frm = this.builderStuff.querySelector('#form-' + i);
            //     frm.parentNode.removeChild(frm);
            // }
          }
        }, 2000);
      }
    }, {
      key: "checkImages",
      value: function checkImages(area) {
        var images = area.querySelectorAll('img');
        var returnVal = true;
        Array.prototype.forEach.call(images, function (img) {
          var src = img.getAttribute('src');

          if (_typeof$2(src) !== ("undefined" ) && src !== false) {
            if (src.indexOf('base64') !== -1) {
              //if there is still base64 image, means not yet finished.
              returnVal = false;
            }
          }
        });
        return returnVal;
      }
    }, {
      key: "uploadImages",
      value: function uploadImages(area) {
        var _this2 = this;

        if (!area) return; //Check all images

        var images = area.querySelectorAll('img');
        Array.prototype.forEach.call(images, function (img) {
          var src = img.getAttribute('src');

          if (_typeof$2(src) !== ("undefined" ) && src !== false) {
            if (src.indexOf('base64') !== -1) {
              // let customcode = false;
              // if(dom.parentsHasAttribute(img, 'data-html')){
              //     customcode = true;
              // }
              // let subblock = false;
              // if(dom.parentsHasAttribute(img, 'data-subblock')){
              //     subblock = true;
              // }
              // if(!customcode || (customcode && subblock)) {
              // }
              if (_this2.opts.onBase64Upload) {
                //Read image (base64 string)
                var image = src;
                image = image.replace(/^data:image\/(png|jpeg);base64,/, '');
                var filename = img.getAttribute('data-filename');

                _this2.opts.onBase64Upload(img, image, filename); // target image, base64 string, filename

              } else {
                _this2.count++; //Read image (base64 string)

                var _image = src;
                _image = _image.replace(/^data:image\/(png|jpeg);base64,/, ''); //Prepare form to submit image

                if (!_this2.builderStuff.querySelector('#form-' + _this2.count)) {
                  var html = '<form id="form-' + _this2.count + '" target="frame-' + _this2.count + '" method="post" enctype="multipart/form-data">' + '<input id="hidimg-' + _this2.count + '" name="hidimg-' + _this2.count + '" type="hidden" />' + '<input id="hidname-' + _this2.count + '" name="hidname-' + _this2.count + '" type="hidden" />' + '<input id="hidtype-' + _this2.count + '" name="hidtype-' + _this2.count + '" type="hidden" />' + '<input id="hidcustomval-' + _this2.count + '" name="hidcustomval-' + _this2.count + '" type="hidden" />' + '' + '<input name="count" value="' + _this2.count + '" type="hidden" />' + '<iframe id="frame-' + _this2.count + '" name="frame-' + _this2.count + '" style="width:1px;height:1px;border:none;position:absolute;z-index:-100000;left:-5px;"></iframe>' + '</form>';

                  _this2.builderStuff.insertAdjacentHTML('beforeend', html);
                } //Give ID to image


                img.setAttribute('id', 'img-' + _this2.count); //Set hidden field with image (base64 string) to be submitted

                _this2.builderStuff.querySelector('#hidimg-' + _this2.count).value = _image; //Set hidden field with custom value to be submitted

                _this2.builderStuff.querySelector('#hidcustomval-' + _this2.count).value = _this2.customval; //Set hidden field with file name to be submitted

                var _filename = img.getAttribute('data-filename');

                if (_filename) {
                  var filename_without_ext = _filename.substr(0, _filename.lastIndexOf('.')) || _filename;

                  filename_without_ext = filename_without_ext.toLowerCase().replace(/ /g, '-');
                  _this2.builderStuff.querySelector('#hidname-' + _this2.count).value = filename_without_ext;
                } //Set hidden field with file extension to be submitted


                if (_this2.opts.hiquality) {
                  //If high quality is set true, set image as png
                  _this2.builderStuff.querySelector('#hidtype-' + _this2.count).value = 'png'; //high quality
                } else {
                  //If high quality is set false, depend on image extension
                  var extension = _filename.substr(_filename.lastIndexOf('.') + 1);

                  extension = extension.toLowerCase();

                  if (extension === 'jpg' || extension === 'jpeg') {
                    _this2.builderStuff.querySelector('#hidtype-' + _this2.count).value = 'jpg';
                  } else {
                    _this2.builderStuff.querySelector('#hidtype-' + _this2.count).value = 'png';
                  }
                } //Submit form


                _this2.builderStuff.querySelector('#form-' + _this2.count).setAttribute('action', _this2.opts.handler + (_this2.opts.handler.indexOf('?') >= 0 ? '&' : '?') + 'count=' + _this2.count);

                _this2.builderStuff.querySelector('#form-' + _this2.count).submit(); //Note: the submitted image will be saved on the server 
                //by saveimage.php (if using PHP) or saveimage.ashx (if using .NET)
                //and the image src will be changed with the new saved image.

              }
            }
          }
        });
      }
    }]);

    return SaveImages;
  }();

  var dom$2 = new Dom();

  var Tooltip = /*#__PURE__*/function () {
    function Tooltip(builder) {
      _classCallCheck$1(this, Tooltip);

      var util = new Util(builder);
      var builderStuff = util.builderStuff();
      this.builderStuff = builderStuff;
      var tooltip = builderStuff.querySelector('.is-tooltip');

      if (!tooltip) {
        var html = '<div class="is-tooltip"></div>';
        dom$2.appendHtml(builderStuff, html);
        tooltip = builderStuff.querySelector('.is-tooltip');
      }

      this.tooltip = tooltip;
    }

    _createClass$1(Tooltip, [{
      key: "setAll",
      value: function setAll(o) {
        var _this = this;

        var area;
        if (!o) area = this.builderStuff;else area = o; //let elms = Array.prototype.slice.call(this.builderStuff.querySelectorAll('[data-title]')).concat(Array.prototype.slice.call(document.querySelectorAll('.is-builder .is-tool [data-title]')));

        var elms = area.querySelectorAll('[data-title]');
        Array.prototype.forEach.call(elms, function (elm) {
          _this.set(elm, 0, 0);
        });
      }
    }, {
      key: "set",
      value: function set(elm, topadj, leftadj) {
        if (!topadj) topadj = 0;
        if (!leftadj) leftadj = 0;
        var tooltip = this.tooltip;
        elm.addEventListener('mouseover', function (e) {
          var relTarget = e.relatedTarget;
          if (this === relTarget || isAChildOf(this, relTarget)) return;
          elm = this;
          var style = window.getComputedStyle(elm.parentNode);
          var direction = style.getPropertyValue('flex-direction'); //console.log(style.flexDirection); 

          var s = elm.getAttribute('data-title');
          tooltip.innerHTML = s;
          var top = elm.getBoundingClientRect().top + window.pageYOffset;
          var left = elm.getBoundingClientRect().left + window.pageXOffset; //console.log(top + ' - ' + left);

          tooltip.style.display = 'flex';
          var w = elm.offsetWidth; //to get value, element must not hidden (display:none). So set display:flex before this.

          var h = elm.offsetHeight;
          tooltip.style.marginRight = ''; //reset

          var viewportWidth = window.innerWidth;
          tooltip.style.top = top + h + 5 + topadj + 'px';

          if (h < 30) {
            tooltip.style.top = top + h + 2 + topadj + 'px';
          }

          if (direction === 'column') {
            tooltip.style.top = top + h / 2 - tooltip.offsetHeight / 2 + topadj + 'px';
            tooltip.style.left = left + w + 3 + leftadj + 'px';

            if (viewportWidth - (left + w) < 100) {
              // 100 or tooltip.offsetWidth
              tooltip.style.left = left - tooltip.offsetWidth - 3 + leftadj + 'px';
            }
          } else {
            var tooltipLeft = left + w / 2 - tooltip.offsetWidth / 2 + leftadj;
            tooltip.style.left = tooltipLeft + 'px'; // center
            // Adjustment for snippet handle tooltip (or any other that is outside viewport)

            var rightedge = tooltipLeft + tooltip.offsetWidth;

            if (rightedge > viewportWidth) {
              var adj = rightedge - viewportWidth;
              tooltip.style.left = tooltipLeft - adj - 3 + 'px'; //3 = additional adjustment

              if (tooltip.offsetHeight > 25) tooltip.style.marginRight = '5px'; // to fix incorrect position if tooltip has more than 1 line
            }

            if (tooltipLeft < 0) {
              tooltip.style.left = '3px';
            }
          } // overide


          var tipOnTop = elm.hasAttribute('data-tooltip-top');

          if (tipOnTop) {
            tooltip.style.top = top - tooltip.offsetHeight - 3 + 'px'; //10 = additional adjustment
          }

          elm.removeAttribute('title');
        }, false);
        elm.addEventListener('mouseout', function (e) {
          var relTarget = e.relatedTarget;
          if (this === relTarget || isAChildOf(this, relTarget)) return;
          elm = this;
          elm.setAttribute('title', elm.getAttribute('data-title'));
          tooltip.style.display = 'none';
        }, false);
        elm.addEventListener('click', function (e) {
          var relTarget = e.relatedTarget;
          if (this === relTarget || isAChildOf(this, relTarget)) return;
          elm = this;
          elm.setAttribute('title', elm.getAttribute('data-title'));
          tooltip.style.display = 'none';
        }, false);
      }
    }]);

    return Tooltip;
  }(); // https://stackoverflow.com/questions/8399408/mouseover-mouseout-eventlistener-inheriting-to-child-nodes


  function isAChildOf(parent, child) {
    if (parent === child) {
      return false;
    }

    while (child && child !== parent) {
      child = child.parentNode;
    }

    return child === parent;
  }

  var dom$1 = new Dom();

  var Tabs = function Tabs() {
    _classCallCheck$1(this, Tabs);

    var tabs = document.querySelectorAll('.is-tabs a');
    Array.prototype.forEach.call(tabs, function (tab) {
      dom$1.addEventListener(tab, 'click', function (e) {
        var menuid = tab.getAttribute('data-menu');

        if (menuid) {
          document.querySelector('#' + menuid).style.display = 'block';
          e.preventDefault();
          return false;
        }

        if (dom$1.hasClass(tab, 'active')) {
          e.preventDefault();
          return false;
        }

        var id = tab.getAttribute('data-content');

        if (!id) {
          e.preventDefault();
          return false;
        }

        var group = tab.parentNode.getAttribute('data-group');
        var samegrouptabs = document.querySelectorAll('.is-tabs[data-group="' + group + '"] > a');
        Array.prototype.forEach.call(samegrouptabs, function (samegrouptab) {
          dom$1.removeClass(samegrouptab, 'active');
        });
        samegrouptabs = document.querySelectorAll('.is-tabs-more[data-group="' + group + '"] > a');
        Array.prototype.forEach.call(samegrouptabs, function (samegrouptab) {
          dom$1.removeClass(samegrouptab, 'active');
        });
        dom$1.addClass(tab, 'active');
        var samegroupcontents = document.querySelectorAll('.is-tab-content[data-group="' + group + '"]');
        Array.prototype.forEach.call(samegroupcontents, function (samegroupcontent) {
          samegroupcontent.style.display = 'none';
        });
        document.querySelector('#' + id).style.display = 'flex';
        document.querySelector('.is-tabs-more').style.display = 'none';
        e.preventDefault();
        return false;
      });
    });
    tabs = document.querySelectorAll('.is-tabs-more a');
    Array.prototype.forEach.call(tabs, function (tab) {
      dom$1.addEventListener(tab, 'click', function (e) {
        if (dom$1.hasClass(tab, 'active')) {
          e.preventDefault();
          return false;
        }

        var id = tab.getAttribute('data-content');

        if (!id) {
          e.preventDefault();
          return false;
        }

        var group = tab.parentNode.getAttribute('data-group');
        var samegrouptabs = document.querySelectorAll('.is-tabs[data-group="' + group + '"] > a');
        Array.prototype.forEach.call(samegrouptabs, function (samegrouptab) {
          dom$1.removeClass(samegrouptab, 'active');
        });
        samegrouptabs = document.querySelectorAll('.is-tabs-more[data-group="' + group + '"] > a');
        Array.prototype.forEach.call(samegrouptabs, function (samegrouptab) {
          dom$1.removeClass(samegrouptab, 'active');
        });
        dom$1.addClass(tab, 'active');
        var samegroupcontents = document.querySelectorAll('.is-tab-content[data-group="' + group + '"]');
        Array.prototype.forEach.call(samegroupcontents, function (samegroupcontent) {
          samegroupcontent.style.display = 'none';
        });
        if (document.querySelector('#' + id)) document.querySelector('#' + id).style.display = 'flex';
        if (document.querySelector('.is-tabs-more')) document.querySelector('.is-tabs-more').style.display = 'none';
        e.preventDefault();
        return false;
      });
    }); // Click anywhere will hide is-tabs-more

    var bTabsMoreOpen = false; // Drag anything will hide is-tabs-more

    document.addEventListener('mousedown', function (e) {
      // mousedown is triggered before click
      e = e || window.event;
      var target = e.target || e.srcElement;
      var tabsMoreMenus = document.querySelectorAll('.is-tabs-more');
      Array.prototype.forEach.call(tabsMoreMenus, function (tabsMoreMenu) {
        if (tabsMoreMenu.style.display === 'block') {
          bTabsMoreOpen = true;
        }
      });

      if (bTabsMoreOpen) {
        var a = dom$1.parentsHasAttribute(target, 'data-menu'); // let a = dom.parentsHasClass(target, 'is-tabs');

        var b = dom$1.parentsHasClass(target, 'is-tabs-more');

        if (!(a || b)) {
          if (document.querySelector('.is-tabs-more')) document.querySelector('.is-tabs-more').style.display = 'none';
        }
      }
    });
    document.addEventListener('click', function (e) {
      e = e || window.event;
      var target = e.target || e.srcElement;

      if (bTabsMoreOpen) {
        var a = dom$1.parentsHasAttribute(target, 'data-menu'); // let a = dom.parentsHasClass(target, 'is-tabs');

        var b = dom$1.parentsHasClass(target, 'is-tabs-more');

        if (!(a || b)) {
          if (document.querySelector('.is-tabs-more')) document.querySelector('.is-tabs-more').style.display = 'none';
        }
      }
    });
  };

  var dom = new Dom();

  var ContentBuilder = /*#__PURE__*/function () {
    function ContentBuilder() {
      var _this = this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck$1(this, ContentBuilder);

      var defaults = {
        page: '',
        container: '.container',
        row: '',
        cols: [],
        colequal: [],
        colsizes: [],
        imageQuality: 0.92,
        elementSelection: true,
        paste: 'text',
        snippetJSON: {
          'snippets': []
        },
        scriptPath: '',
        pluginPath: '',
        modulePath: 'assets/modules/',
        assetPath: 'assets/',
        fontAssetPath: 'assets/fonts/',
        snippetData: 'assets/minimalist-blocks/snippetlist.html',
        snippetPath: '',
        snippetPathReplace: [],
        // ['',''],
        snippetCategories: [[120, 'Basic'], [118, 'Article'], [101, 'Headline'], [119, 'Buttons'], [102, 'Photos'], [103, 'Profile'], [116, 'Contact'], [104, 'Products'], [105, 'Features'], [106, 'Process'], [107, 'Pricing'], [108, 'Skills'], [109, 'Achievements'], [110, 'Quotes'], [111, 'Partners'], [112, 'As Featured On'], [113, 'Page Not Found'], [114, 'Coming Soon'], [115, 'Help, FAQ']],
        defaultSnippetCategory: 120,
        snippetHandle: true,
        sidePanel: 'right',
        snippetSampleImage: '',
        snippetList: '#divSnippetList',
        onRender: function onRender() {},
        onContentClick: function onContentClick() {},
        onChange: function onChange() {},
        // onAdd: function(){},
        largerImageHandler: '',
        // onLargerImageUpload: function(){},
        colors: ['#ff8f00', '#ef6c00', '#d84315', '#c62828', '#58362f', '#37474f', '#353535', '#f9a825', '#9e9d24', '#558b2f', '#ad1457', '#6a1b9a', '#4527a0', '#616161', '#00b8c9', '#009666', '#2e7d32', '#0277bd', '#1565c0', '#283593', '#9e9e9e'],
        builderMode: '',
        rowTool: 'right',
        rowcolOutline: true,
        columnTool: true,
        outlineMode: '',
        toolStyle: '',
        outlineStyle: '',
        snippetAddTool: true,
        elementTool: true,
        elementHighlight: true,
        columnHtmlEditor: true,
        rowHtmlEditor: true,
        htmlSyntaxHighlighting: true,
        snippetOpen: false,
        toolbar: 'top',
        toolbarDisplay: 'auto',
        snippetsSidebarDisplay: 'auto',
        plugins: [],
        // onImageSelectClick: function () { }, 
        // onFileSelectClick: function () { },
        // onPluginsLoaded: function () { },
        // onImageBrowseClick: function () { },
        // onImageSettingClick: function () { },
        imageEmbed: true,
        imageselect: '',
        fileselect: '',
        imageSelect: '',
        fileSelect: '',
        customTags: [],
        buttons: ['bold', 'italic', 'underline', 'formatting', 'color', 'align', 'textsettings', 'createLink', 'tags', 'more', '|', 'undo', 'redo'],
        buttonsMore: ['icon', 'image', '|', 'list', 'font', 'formatPara', '|', 'html', 'preferences'],
        elementButtons: ['left', 'center', 'right', 'full', 'more', '|', 'undo', 'redo'],
        elementButtonsMore: ['|', 'html', 'preferences'],
        lang: [],
        checkLang: false,
        clearPreferences: false,
        toolbarAddSnippetButton: false,
        animateModal: true,
        fontSizeClassValues: [12, 14, 16, 18, 21, 24, 28, 32, 35, 38, 42, 46, 48, 50, 54, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220],

        /* If not empty, applying font size will apply class: size-12, size-14, and so on. All responsive, defined in content.css */
        gradientcolors: [['linear-gradient(0deg, rgb(255, 57, 25), rgb(249, 168, 37))'], ['linear-gradient(0deg, rgb(255, 57, 25), rgb(255, 104, 15))'], ['linear-gradient(0deg, #FF5722, #FF9800)'], ['linear-gradient(0deg, #613ca2, rgb(110, 123, 217))'], ['linear-gradient(0deg, rgb(65, 70, 206), rgb(236, 78, 130))'], ['linear-gradient(0deg, rgb(0, 150, 102), rgb(90, 103, 197))'], ['linear-gradient(30deg, rgb(249, 119, 148), rgb(98, 58, 162))'], ['linear-gradient(0deg, rgb(223, 70, 137), rgb(90, 103, 197))'], ['linear-gradient(0deg, rgb(40, 53, 147), rgb(90, 103, 197))'], ['linear-gradient(0deg, rgb(21, 101, 192), rgb(52, 169, 239))'], ['linear-gradient(0deg, rgb(32, 149, 219), rgb(139, 109, 230))'], ['linear-gradient(0deg, rgb(90, 103, 197), rgb(0, 184, 201))'], ['linear-gradient(0deg, rgb(0, 184, 201), rgb(253, 187, 45))'], ['linear-gradient(0deg, rgb(255, 208, 100), rgb(239, 98, 159))'], ['linear-gradient(0deg, rgb(0, 214, 223), rgb(130, 162, 253))'], ['linear-gradient(0deg, rgb(50, 234, 251), rgb(248, 247, 126))'], ['linear-gradient(0deg, rgb(141, 221, 255), rgb(255, 227, 255))'], ['linear-gradient(0deg, rgb(255, 170, 170), rgb(255, 255, 200))'], ['linear-gradient(0deg, rgb(239, 239, 239), rgb(252, 252, 252))']],
        elementEditor: true,
        customval: '',
        moduleConfig: [],
        elementAnimate: false,
        framework: '',
        cellFormat: '',
        rowFormat: '',
        emailMode: false,
        absolutePath: false,
        emailSnippetCategories: [[1, 'Logo'], [14, 'Call to Action'], [2, 'Title'], [3, 'Title, Subtitle'], [4, 'Info, Title'], [7, 'Paragraph'], [6, 'Heading'], [8, 'Buttons'], [9, 'Callouts'], [10, 'Images + Caption'], [12, 'Images'], [13, 'List'], [15, 'Pricing'], [16, 'Quotes'], [17, 'Profile'], [18, 'Contact Info'], [19, 'Footer'], [20, 'Separator']],
        defaultEmailSnippetCategory: 14,
        undoRedoStyles: false,
        // specialElementClasses: ['sl-wrapper', 'sl-overlay'] // specify elements that when clicked will not affect the builder interface (active selection). Usefull for external code, ex lightbox, etc. 
        // onUndo: function () { },
        // onRedo: function () { }

        /*
        Deprecated:
        classReplace: [],
        iconselect: 'assets/ionicons/icons.html',
        rowMoveButtons: true,
        addButtonPlacement: '',
        sourceEditor: true,
        snippetPageSliding
        animatedSorting
        dragWithoutHandle
        */
        autoResizeImageEmbed: true
      };
      this.opts = Object.assign(this, defaults, opts);

      if (window.data_basic) {
        // if snippet file included
        this.opts.snippetJSON = window.data_basic; // if snippetPath is specified (not empty), then use the specified. Otherwise, use the one generated from snippet file (_snippets_path)

        if (this.opts.snippetPath === '') {
          this.opts.snippetPath = window._snippets_path;
        }
      } // if snippetPath is specified (not empty), then use the specified. Otherwise, use the one generated from snippet file (_snippets_path)


      if (this.opts.scriptPath === '') {
        this.opts.scriptPath = this.currentScriptPath();
      }

      if (window._txt) {
        // if language file is included
        this.opts.lang = window._txt;
      }

      this.settings = this.opts; // Backward compatible

      if (this.opts.imageSelect !== '') {
        this.opts.imageselect = this.opts.imageSelect;
      }

      if (this.opts.fileSelect !== '') {
        this.opts.fileselect = this.opts.fileSelect;
      } // Alternative settions to define css grid frameworks


      if (this.opts.framework === 'bootstrap') {
        this.opts.row = 'row';
        this.opts.cols = ['col-md-1', 'col-md-2', 'col-md-3', 'col-md-4', 'col-md-5', 'col-md-6', 'col-md-7', 'col-md-8', 'col-md-9', 'col-md-10', 'col-md-11', 'col-md-12'];
        this.opts.colequal = [];
        this.opts.colsizes = [];
      } else if (this.opts.framework === 'foundation') {
        this.opts.row = 'row';
        this.opts.cols = ['large-1 columns', 'large-2 columns', 'large-3 columns', 'large-4 columns', 'large-5 columns', 'large-6 columns', 'large-7 columns', 'large-8 columns', 'large-9 columns', 'large-10 columns', 'large-11 columns', 'large-12 columns'];
        this.opts.colequal = [];
        this.opts.colsizes = [];
      } else if (this.opts.framework === 'material') {
        this.opts.row = 'mdl-grid';
        this.opts.cols = ['mdl-cell mdl-cell--1-col', 'mdl-cell mdl-cell--2-col', 'mdl-cell mdl-cell--3-col', 'mdl-cell mdl-cell--4-col', 'mdl-cell mdl-cell--5-col', 'mdl-cell mdl-cell--6-col', 'mdl-cell mdl-cell--7-col', 'mdl-cell mdl-cell--8-col', 'mdl-cell mdl-cell--9-col', 'mdl-cell mdl-cell--10-col', 'mdl-cell mdl-cell--11-col', 'mdl-cell mdl-cell--12-col'];
        this.opts.colequal = [];
        this.opts.colsizes = [];
      } else if (this.opts.framework === 'uikit') {
        this.opts.row = '';
        this.opts.cols = [];
        this.opts.colequal = [];
        this.opts.colsizes = [];
        this.opts.cellFormat = '<div class="uk-width-1-1"></div>';
        this.opts.rowFormat = '<div class="uk-grid"></div>';
      } else {
        // If framework param is not used
        if (this.opts.row !== '' && this.opts.cols.length > 0) ; else {
          if (this.opts.cellFormat === '' && this.opts.rowFormat === '') {
            // DEFAULT: Built-in simple css grid
            this.opts.row = 'row clearfix';
            this.opts.cols = ['column sixth', 'column fifth', 'column fourth', 'column third', 'column half', 'column two-third', 'column two-fourth', 'column two-fifth', 'column two-sixth', 'column full'];
            this.opts.colequal = [['column fifth', 'column fifth', 'column fifth', 'column fifth', 'column fifth'], ['column fourth', 'column fourth', 'column fourth', 'column fourth'], ['column third', 'column third', 'column third'], ['column half', 'column half']];
            this.opts.colsizes = [//needed for columns in which the size increment is not constant.
            [//increment for 3 columns
            ['column third', 'column third', 'column third'], ['column half', 'column fourth', 'column fourth']], [//increment for 2 columns
            ['column sixth', 'column two-sixth'], ['column fifth', 'column two-fifth'], ['column fourth', 'column two-fourth'], ['column third', 'column two-third'], ['column half', 'column half'], ['column two-third', 'column third'], ['column two-fourth', 'column fourth'], ['column two-fifth', 'column fifth'], ['column two-sixth', 'column sixth']]];
          }
        }
      }

      this.sortableObjects = [];
      var util = new Util(this); // General utilities

      this.util = util;
      /** added by Jack */

      this.cbDom = new Dom(); // ---

      this.isTouchSupport = util.isTouchSupport();
      this.isIE = util.detectIE();

      if (this.opts.clearPreferences) {
        util.clearPreferences();
      }

      this.uoTm = null;
      this.uo = new UndoRedo(this);
      this.autoclean = false;
      this.filesAdded = '';

      if (this.opts.emailMode) {
        this.applyStyle('emailmode', '.is-builder > div {display: block}');
      }

      var builderStuff = document.querySelector('#_cbhtml'); // All editing controls will be placed within <div id="_cbhtml">...</div>

      if (!builderStuff) {
        builderStuff = dom.createElement('div');
        builderStuff.id = '_cbhtml';
        builderStuff.className = 'is-ui';
        dom.appendChild(document.body, builderStuff);
      }

      this.builderStuff = builderStuff;
      prepareSvgIcons(); // Prepare icons (embed svg definitions for icons) 

      this.preferences = new Preferences(this);
      renderGridEditor(this); // Render Grid Editor

      if (this.opts.snippetJSON.snippets.length > 0) {
        renderSnippetPanel(this); // Render Snippet Panel
      }

      this.colTool = new ColumnTool(this); // Render Column Tool
      // Extend the onChange function

      var oldget = this.opts.onChange;

      this.opts.onChange = function () {
        var ret = oldget.apply(this, arguments);

        if (this.activeCol) {
          this.colTool.refreshColumnTool(this.activeCol);
        }

        this.elmTool.repositionElementTool();
        return ret;
      };

      this.elmTool = new ElementTool(this); // Render Element Tool
      // Render controls or behavior for handling element editing

      this.element = new Element$1(this);
      this.rte = new Rte(this);
      this.tooltip = new Tooltip(this);
      this.applyBehavior(); // Apply editing behavior on content (builder areas)
      // Load plugins

      this.numOfPlugins = 0;
      var scriptUrl = this.opts.scriptPath + 'config.js';
      if (this.opts.pluginPath !== '') scriptUrl = this.opts.pluginPath + 'config.js'; // overide plugin location if pluginPath is specified

      this.loadScript(scriptUrl).then(function () {
        var rteMoreOptions = _this.builderStuff.querySelector('.rte-more-options');

        var elementrteMoreOptions = _this.builderStuff.querySelector('.elementrte-more-options');

        var i;

        for (i = _this.opts.plugins.length - 1; i >= 0; i--) {
          rteMoreOptions.querySelector('div').insertAdjacentHTML('afterbegin', '<button title="button not found" data-plugin="' + _this.opts.plugins[i] + '">-</button>');
          elementrteMoreOptions.querySelector('div').insertAdjacentHTML('afterbegin', '<button title="button not found" data-plugin="' + _this.opts.plugins[i] + '">-</button>');
        }

        for (i = 0; i < _this.opts.plugins.length; i++) {
          var pluginfile = _this.opts.scriptPath + 'plugins/' + _this.opts.plugins[i] + '/plugin.js';
          if (_this.opts.pluginPath !== '') pluginfile = _this.opts.pluginPath + 'plugins/' + _this.opts.plugins[i] + '/plugin.js';

          _this.loadScript(pluginfile).then(function () {
            _this.numOfPlugins++;

            if (_this.numOfPlugins === _this.opts.plugins.length) {
              // All plugin scripts loaded
              var pluginbuttons = rteMoreOptions.querySelectorAll('[data-plugin]');
              Array.prototype.forEach.call(pluginbuttons, function (pluginbutton) {
                pluginbutton.outerHTML = ''; //Remove unused buttons (if loaded plugins don't use button)
              });
              pluginbuttons = elementrteMoreOptions.querySelectorAll('[data-plugin]');
              Array.prototype.forEach.call(pluginbuttons, function (pluginbutton) {
                pluginbutton.outerHTML = ''; //Remove unused buttons (if loaded plugins don't use button)
              });

              if (_this.opts.onPluginsLoaded) {
                _this.opts.onPluginsLoaded();
              }

              _this.tooltip.setAll();

              new Draggable$1({
                selector: '.is-draggable'
              }); //draggable for plugins
            }
          });
        }
      }, function () {
        console.log('Fail to load config');
      }); // Tooltip (move to after plugins loaded)
      // new Tooltip();
      // Run Tabs

      new Tabs(); // Color Picker

      this.colorPicker = new ColorPicker({
        lang: this.opts.lang,
        colors: this.opts.colors
      }); // Add document Click event

      document.addEventListener('click', this.doDocumentClick = function (e) {
        e = e || window.event;
        var target = e.target || e.srcElement;
        var rowClicked = dom.hasClass(target.parentNode, 'is-builder');
        var containerClicked = dom.hasClass(target, 'is-builder');
        var a = false,
            b = false,
            c = false,
            d = false,
            f = false,
            g = false,
            h = false,
            i = false,
            j = false,
            k = false;
        var m = false,
            n = false;
        var isSpecialElement = false;
        var element = target;

        while (element) {
          if (!element.tagName) break;
          if (element.tagName === 'BODY' || element.tagName === 'HTML') break;
          if (dom.hasClass(element, 'is-builder')) a = true;
          if (dom.hasClass(element, 'is-modal')) b = true;
          if (dom.hasClass(element, 'is-side')) c = true;
          if (dom.hasClass(element, 'is-pop')) d = true;
          if (dom.hasClass(element, 'is-tool')) f = true;
          if (dom.hasClass(element, 'is-rte-tool') || dom.hasClass(element, 'is-elementrte-tool')) g = true;
          if (dom.hasClass(element, 'is-rte-pop')) h = true;
          if (dom.hasClass(element, 'row-add-initial')) i = true;
          if (dom.hasClass(element, 'sl-wrapper') || dom.hasClass(element, 'sl-overlay') || dom.hasClass(element, 'sl-close')) j = true;
          if (dom.hasClass(element, 'is-selectbox') || dom.hasClass(element, 'is-selectbox-options')) k = true; // dropdown

          if (_this.opts.specialElementClasses) {
            for (var _i = 0; _i < _this.opts.specialElementClasses.length; _i++) {
              if (dom.hasClass(element, _this.opts.specialElementClasses[_i])) isSpecialElement = true;
            }
          }

          if (element.id === 'divImageTool') m = true;
          if (element.id === 'divImageResizer') n = true;
          element = element.parentNode;
        } // dropdown


        if (!k) {
          var dropdowns = document.querySelectorAll('.is-selectbox-options');
          Array.prototype.forEach.call(dropdowns, function (dropdown) {
            dropdown.style.display = 'none';
          });
        } // let a = dom.parentsHasClass(target, 'is-builder'); // builder area
        // let b = dom.parentsHasClass(target, 'is-modal'); // modal
        // let c = dom.parentsHasClass(target, 'is-side'); // side panel
        // let d = dom.parentsHasClass(target, 'is-pop'); // pop
        // let f = dom.parentsHasClass(target, 'is-tool'); // tool
        // let g = dom.parentsHasClass(target, 'is-rte-tool'); 
        // let h = dom.parentsHasClass(target, 'is-rte-pop'); 
        // let i = dom.parentsHasClass(target, 'row-add-initial'); 
        // let j = dom.hasClass(target, 'sl-overlay') || 
        //     dom.parentsHasClass(target, 'sl-overlay') || 
        //     dom.hasClass(target, 'sl-close') || 
        //     dom.parentsHasClass(target, 'sl-close'); 
        // Image Resizer


        var resizeProcess = false;
        var imageResizer = document.querySelector('#divImageResizer');
        if (imageResizer) if (imageResizer.getAttribute('data-resized') === '1') resizeProcess = true;
        if (resizeProcess) return; // to prevent unwanted click/clearActiveCell during image resize end.

        if (!(b || j || m || n || target.tagName.toLowerCase() === 'img')) {
          var imageTool = document.querySelector('#divImageTool');
          imageTool.style.display = '';
          _this.activeImage = null;

          var _imageResizer = document.querySelector('#divImageResizer');

          _imageResizer.style.display = 'none'; // moveable

          _imageResizer.style.top = '-10px';
          _imageResizer.style.left = '-10px';
          _imageResizer.style.width = '1px';
          _imageResizer.style.height = '1px';

          _this.moveable.updateRect();

          document.querySelector('.moveable-control-box').style.display = 'none';
        }

        if (!(a || b || c || d || f || g || h || i || j || isSpecialElement) || rowClicked && !i || containerClicked) {
          // Click anywhere but is not inside builder area, modal, popup, tool or rte, then clear row/column (cell) selection
          if (!dom.getSelected()) {
            util.clearActiveCell();
            util.clearControls();
          }
        } // Backward compatibility (for examples)


        if (!d && !dom.parentsHasId(target, '_cbhtml')) {
          var pops = document.querySelectorAll('.is-pop');
          Array.prototype.forEach.call(pops, function (pop) {
            if (!dom.parentsHasId(pop, '_cbhtml')) pop.style.display = '';
          });
        }
      }); // Drag row will hide content tools

      document.addEventListener('mousedown', this.doDocumentMousedown = function (e) {
        e = e || window.event;
        var target = e.target || e.srcElement;
        var a = dom.parentsHasClass(target, 'row-handle');

        if (a) {
          util.clearControls();
        }
      }); // Undo Redo

      document.addEventListener('keydown', this.doDocumentKeydown = function (e) {
        if (e.which === 90 && (e.ctrlKey || e.metaKey)) {
          //CTRL-Z
          if (e.shiftKey) _this.uo.doRedo();else {
            if (!e.altKey) {
              //if(!document.queryCommandEnabled('undo')){
              _this.uo.doUndo(); //}

            }
          }
        }

        if (e.which === 89 && e.ctrlKey) {
          //CTRL-Y
          if (!e.altKey) _this.uo.doRedo();
        }
      }); // this.uo.saveForUndo(); //First time
      // https://stackoverflow.com/questions/4860936/how-to-remove-the-resizig-handlers-around-an-image-in-ie-with-javascript

      document.body.addEventListener('mscontrolselect', function (e) {
        e.preventDefault();
      }); // Convenience variable for outside access, for example, from snippet dialog (assets/minimalist-blocks/snippets.html))

      window._cb = this;
      window.applyLargerImage = this.applyLargerImage;
      window.selectFile = this.selectFile;
      window.selectImage = this.selectImage;
      window.imageLoaded = this.imageLoaded.bind(this); //this.imageLoaded;
    } // Convenience constructor, so that the plugin can be called directly using: ContentBuilder.run({ ... });


    _createClass$1(ContentBuilder, [{
      key: "applyBehavior",
      value: function applyBehavior() {
        var _this2 = this;

        var util = this.util; // Get all builder areas

        var builders = document.querySelectorAll(this.opts.container);
        Array.prototype.forEach.call(builders, function (builder) {
          //Make absolute
          if (_this2.opts.absolutePath) {
            var links = builder.querySelectorAll('a');
            Array.prototype.forEach.call(links, function (link) {
              var href = link.href;
              link.setAttribute('href', href);
            });
            var imgs = builder.querySelectorAll('img');
            Array.prototype.forEach.call(imgs, function (img) {
              var src = img.src;
              img.setAttribute('src', src);
            });
          } // Add .is-builder class on each builder area (container)


          dom.addClass(builder, 'is-builder'); // Additional setting needed for dynamically added .is-builder. Without this, current toolStyle won't be applied to newly created section (eg. in ContentBox))

          if (localStorage.getItem('_toolstyle') !== null) {
            var toolStyle = localStorage.getItem('_toolstyle');

            _this2.preferences.setToolStyle(toolStyle);
          }

          if (localStorage.getItem('_outlinestyle') !== null) {
            var outlineStyle = localStorage.getItem('_outlinestyle');

            _this2.preferences.setOutlineStyle(outlineStyle);
          } // Apply behavior on each row


          var rows = dom.elementChildren(builder);
          rows.forEach(function (row) {
            if (dom.hasClass(row, 'row-add-initial')) return; // Hack. If a row has margin left/right specified, don't need to set hidden border (that is used to make smooth sortable)

            if (row.style.marginLeft || row.style.marginRight) {
              row.style.border = 'none';
            } // On each row, add 2 tools: Row tool (div.is-row-tool) & Row Add tool (div.is-rowadd-tool)
            // Render Row tool


            _this2.rowtool = new RowTool(_this2);

            _this2.rowtool.render(row); // Render Row Add tool


            var rowaddtool = new RowAddTool(_this2);
            rowaddtool.render(row); // Apply behavior on each column

            var cols = dom.elementChildren(row);
            cols.forEach(function (col) {
              if (dom.hasClass(col, 'is-row-tool') || dom.hasClass(col, 'is-rowadd-tool')) return; // Return if not a column
              // For backward compatibility, replace:
              // - data-mode="readonly" with data-noedit
              // - data-mode="readonly-protected" with data-protected

              if (col.getAttribute('data-mode') === 'readonly') {
                col.setAttribute('data-noedit', '');
                col.removeAttribute('data-mode');
              }

              if (col.getAttribute('data-mode') === 'readonly-protected') {
                col.setAttribute('data-protected', '');
                col.removeAttribute('data-mode');
              } // Set ContentEditable


              var noedit = false;

              if (col.hasAttribute('data-noedit')) {
                // Column is not (text) editable.
                noedit = true;
              }

              var _protected = false;

              if (col.hasAttribute('data-protected')) {
                // Column is not (text) editable and also: cannot be deleted, moved or duplicated.
                _protected = true;
              }

              var customcode = false;

              if (col.hasAttribute('data-html')) {
                // Column contains custom code.
                customcode = true;
              } // let custommodule = false;
              // if (col.hasAttribute('data-module')) { // Column contains custom module.
              //     custommodule = true;
              // }


              if (!customcode && !noedit && !_protected) {
                // Check if column contains editable text
                var elms = col.querySelectorAll('p,h1,h2,h3,h4,h5,h6,table,ul,ol,pre,blockquote,code,figcaption,label,legend,button,a');

                if (elms.length > 0) {
                  col.contentEditable = true; // Column is (text) editable
                }
              } // Apply behavior on several elements for editing purpose


              _this2.element.applyBehavior(col); // Add events on column


              if (!col.getAttribute('data-click')) {
                // ON CLICK
                // Use bind() => https://www.w3schools.com/react/react_events.asp
                col.addEventListener('click', _this2.handleCellClick.bind(_this2, col)); // ON KEYPRESS

                col.addEventListener('keydown', _this2.handleCellKeypress.bind(_this2)); // ON KEYDOWN

                col.addEventListener('keydown', _this2.handleCellKeydown.bind(_this2, col)); // ON KEYUP

                col.addEventListener('keyup', _this2.handleCellKeyup.bind(_this2, col)); // ON PASTE

                col.addEventListener('paste', _this2.handleCellPaste.bind(_this2));
                col.setAttribute('data-click', true);
              }
            });
          }); // Sortable on each builder (container)

          if (!builder.getAttribute('data-sort') && !builder.hasAttribute('nogrid')) {
            // Check first if sortable has been added.
            var userAgentString = navigator.userAgent;
            var safariAgent = userAgentString.indexOf('Safari') > -1;
            var chromeAgent = userAgentString.indexOf('Chrome') > -1;
            if (chromeAgent && safariAgent) safariAgent = false;
            var sortableObject = new Sortable(builder, {
              forceFallback: safariAgent,
              scroll: true,
              invertSwap: true,

              /* https://github.com/SortableJS/Sortable/wiki/Swap-Thresholds-and-Direction#swap-threshold */
              group: 'shared',
              direction: 'dummy',
              animation: 300,
              handle: '.row-handle',
              onStart: function onStart() {
                _this2.uo.saveForUndo(); // Even if cancelled, saveForUndo will make sure not to save if there is no change 


                _this2.colTool.hideColumnTool();

                _this2.elmTool.hide();
              },
              onEnd: function onEnd() {
                if (!_this2.opts.emailMode) {
                  if (dom.hasClass(_this2.activeCol.parentNode, 'row-outline')) {
                    //if not row selection, but col selection
                    //if(this.activeCol.parentNode.classList.contains('row-outline')) { //if not row selection, but col selection
                    _this2.colTool.refreshColumnTool(_this2.activeCol);

                    _this2.colTool.showColumnTool(_this2.activeCol);
                  }
                }
              },
              onAdd: function onAdd(evt) {
                var itemEl = evt.item;

                if (itemEl.getAttribute('data-id')) {
                  // If has data-id attribute, the dropped item is from snippet panel (snippetpanel.js)
                  var snippetid = itemEl.getAttribute('data-id'); // snippetJSON is snippet's JSON (from assets/minimalist-blocks/content.js) that store all snippets' html

                  var result = _this2.opts.snippetJSON.snippets.filter(function (item) {
                    if (item.id + '' === snippetid) return item;else return false;
                  });

                  var html = result[0].html;
                  var noedit = result[0].noedit;
                  var bSnippet;

                  if (html.indexOf('row clearfix') === -1) {
                    bSnippet = true; // Just snippet (without row/column grid)
                  } else {
                    bSnippet = false; // Snippet is wrapped in row/colum
                  }

                  if (_this2.opts.emailMode) bSnippet = false; // Convert snippet into your defined 12 columns grid   

                  var rowClass = _this2.opts.row; //row

                  var colClass = _this2.opts.cols; //['col s1', 'col s2', 'col s3', 'col s4', 'col s5', 'col s6', 'col s7', 'col s8', 'col s9', 'col s10', 'col s11', 'col s12']

                  if (rowClass !== '' && colClass.length === 12) {
                    html = html.replace(new RegExp('row clearfix', 'g'), rowClass);
                    html = html.replace(new RegExp('column full', 'g'), colClass[11]);
                    html = html.replace(new RegExp('column half', 'g'), colClass[5]);
                    html = html.replace(new RegExp('column third', 'g'), colClass[3]);
                    html = html.replace(new RegExp('column fourth', 'g'), colClass[2]);
                    html = html.replace(new RegExp('column fifth', 'g'), colClass[1]);
                    html = html.replace(new RegExp('column sixth', 'g'), colClass[1]);
                    html = html.replace(new RegExp('column two-third', 'g'), colClass[7]);
                    html = html.replace(new RegExp('column two-fourth', 'g'), colClass[8]);
                    html = html.replace(new RegExp('column two-fifth', 'g'), colClass[9]);
                    html = html.replace(new RegExp('column two-sixth', 'g'), colClass[9]);
                  }

                  html = html.replace(/{id}/g, util.makeId()); // Replace {id} with auto generated id (for custom code snippet)

                  if (_this2.opts.onAdd) {
                    html = _this2.opts.onAdd(html);
                  }

                  if (_this2.opts.snippetPathReplace.length > 0) {
                    // try {
                    if (_this2.opts.snippetPathReplace[0] !== '') {
                      var regex = new RegExp(_this2.opts.snippetPathReplace[0], 'g');
                      html = html.replace(regex, _this2.opts.snippetPathReplace[1]);

                      var string1 = _this2.opts.snippetPathReplace[0].replace(/\//g, '%2F');

                      var string2 = _this2.opts.snippetPathReplace[1].replace(/\//g, '%2F');

                      var regex2 = new RegExp(string1, 'g');
                      html = html.replace(regex2, string2);
                    } // } catch (e) { 1; }

                  }

                  if (bSnippet) {
                    // Just snippet (without row/column grid), ex. buttons, line, social, video, map.
                    // Can be inserted after current row, column (cell), element, or last row.
                    html = "<div class=\"".concat(_this2.opts.row, "\"><div class=\"").concat(_this2.opts.cols[_this2.opts.cols.length - 1], "\"").concat(noedit ? ' data-noedit' : '', ">").concat(html, "</div></div>"); // Clean snippet from sortable related code

                    itemEl.removeAttribute('draggable');
                    dom.removeClass(itemEl, 'snippet-item');
                    itemEl.outerHTML = html;
                  } else {
                    // Snippet is wrapped in row/colum (may contain custom code or has [data-html] attribute)
                    // Can only be inserted after current row or last row (not on column or element).
                    var snippet = dom.createElement('div');
                    snippet.innerHTML = html;
                    var blocks = snippet.querySelectorAll('[data-html]');
                    Array.prototype.forEach.call(blocks, function (block) {
                      // Render custom code block
                      html = decodeURIComponent(block.getAttribute('data-html'));
                      html = html.replace(/{id}/g, util.makeId());

                      for (var i = 1; i <= 20; i++) {
                        html = html.replace('[%HTML' + i + '%]', block.getAttribute('data-html-' + i) === undefined ? '' : decodeURIComponent(block.getAttribute('data-html-' + i))); //render editable area
                      }

                      block.innerHTML = html;
                    });
                    html = snippet.innerHTML; // Clean snippet from sortable related code

                    itemEl.removeAttribute('draggable');
                    dom.removeClass(itemEl, 'snippet-item');
                    itemEl.innerHTML = ''; // Use createContextualFragment() to make embedded script executable
                    // https://ghinda.net/article/script-tags/

                    var range = document.createRange();
                    range.setStart(itemEl, 0);
                    itemEl.appendChild(range.createContextualFragment(html));
                    itemEl.outerHTML = itemEl.innerHTML;
                  } // After snippet has been added, re-apply behavior on builder areas


                  _this2.applyBehavior(); // Call onChange


                  _this2.opts.onChange(); // Hide element tool


                  _this2.elmTool.hide();
                }
              }
            });

            _this2.sortableObjects.push(sortableObject);

            builder.setAttribute('data-sort', true);
          } // /Sortable

        }); // Additional contentEditable for subblock

        var subblocks = document.querySelectorAll('.is-subblock');
        Array.prototype.forEach.call(subblocks, function (subblock) {
          subblock.contentEditable = true;
        }); // Check if there is empty builder area (still has no content)

        util.checkEmpty(); // Call onRender to indicate content is ready for editing (applyBehavior has been applied)

        this.opts.onRender();
      }
    }, {
      key: "html",
      value: function html(area) {
        var util = this.util;
        var htmlutil = new HtmlUtil(this);

        if (area) ; else {
          var builders = document.querySelectorAll(this.opts.container);

          if (builders.length > 1) {
            var cell = util.cellSelected();

            if (!cell) {
              // Return first instance
              area = builders[0];
            } else {
              // Return active instance
              area = cell.parentNode.parentNode;
            }
          } else {
            // Single instance
            area = builders[0];
          }

          if (this.opts.page !== '') {
            var wrapper = document.querySelector(this.opts.page);

            if (wrapper) {
              //return wrapper
              area = wrapper;
            }
          }
        }

        return htmlutil.readHtml(area); //for view=false
      } // ContentBox

    }, {
      key: "viewHtmlNormal",
      value: function viewHtmlNormal() {
        var htmlutil = new HtmlUtil(this);
        htmlutil.viewHtmlNormal();
      }
    }, {
      key: "viewHtmlLarger",
      value: function viewHtmlLarger() {
        var htmlutil = new HtmlUtil(this);
        htmlutil.viewHtmlLarger();
      }
    }, {
      key: "readHtml",
      value: function readHtml(content, view, multiple) {
        var htmlutil = new HtmlUtil(this);
        return htmlutil.readHtml(content, view, multiple);
      }
    }, {
      key: "fromViewToActual",
      value: function fromViewToActual(html) {
        var htmlutil = new HtmlUtil(this);
        return htmlutil.fromViewToActual(html);
      }
    }, {
      key: "colorpicker",
      value: function colorpicker(onPick, defaultcolor) {
        return new ColorPicker({
          onPick: onPick,
          color: defaultcolor,
          colors: this.opts.colors,
          animateModal: this.opts.animateModal,
          elementToAnimate: this.opts.container,
          lang: this.opts.lang
        });
      }
    }, {
      key: "gradientpicker",
      value: function gradientpicker() {
        return new GradientPicker({
          gradientcolors: this.opts.gradientcolors,
          colors: this.opts.colors,
          animateModal: this.opts.animateModal,
          elementToAnimate: this.opts.container,
          lang: this.opts.lang
        });
      }
    }, {
      key: "dropdown",
      value: function dropdown(element, opts) {
        new Dropdown(element, opts);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        document.removeEventListener('click', this.doDocumentClick, false);
        document.removeEventListener('keydown', this.doDocumentKeydown, false);
        document.removeEventListener('mousedown', this.doDocumentMousedown, false);
        this.util.clearControls();
        var builderStuff = this.util.builderStuff();
        if (!builderStuff) return; // in case the builder is destroyed

        var htmlutil = new HtmlUtil(this);
        var builders = document.querySelectorAll(this.opts.container);
        Array.prototype.forEach.call(builders, function (builder) {
          builder.innerHTML = htmlutil.readHtml(builder, true);
        });
        Array.prototype.forEach.call(builders, function (builder) {
          builder.removeAttribute('data-sort');
          dom.removeClass(builder, 'is-builder');
        });
        Array.prototype.forEach.call(this.sortableObjects, function (sortableObject) {
          try {
            sortableObject.destroy();
          } catch (e) {// Do Nothing
          }
        });
        this.moveable.destroy();
        this.builderStuff.parentNode.removeChild(this.builderStuff);
        this.builderStuff = null;
      }
    }, {
      key: "saveImages",
      value: function saveImages(handler, onComplete, onBase64Upload) {
        var si = new SaveImages({
          page: this.opts.page,
          container: this.opts.container,
          customval: this.opts.customval,
          handler: handler,
          onComplete: onComplete,
          onBase64Upload: onBase64Upload ? onBase64Upload : null
        });
        si.save();
      } // /ContentBox
      // External (eg. from IFRAME)

    }, {
      key: "clearFont",
      value: function clearFont() {
        this.rte.clearFont();
      }
    }, {
      key: "applyFont",
      value: function applyFont(fontfamily, fontstyle, provider) {
        // called from iframe: parent._cb.applyFont
        this.rte.applyFont(fontfamily, fontstyle, provider);
      }
    }, {
      key: "setFont",
      value: function setFont(fontfamily, fontstyle, fontdisplay, provider) {
        // called from iframe: parent._cb.applyFont
        this.rte.setFont(fontfamily, fontstyle, fontdisplay, provider);
      }
    }, {
      key: "addIcon",
      value: function addIcon(classname) {
        this.rte.addIcon(classname);
      }
    }, {
      key: "applyLargerImage",
      value: function applyLargerImage(s) {
        // called from iframe: parent.applyLargerImage() see line 345
        var forms = document.querySelectorAll('.form-upload-larger'); // elementimage.js

        Array.prototype.forEach.call(forms, function (formUpload) {
          if (dom.hasClass(formUpload, 'please-wait')) {
            dom.removeClass(formUpload, 'please-wait');
            formUpload.parentNode.parentNode.querySelector('input[type="text"]').value = s;
            formUpload.parentNode.parentNode.querySelector('input[type="file"]').value = '';
          }
        });
      }
    }, {
      key: "selectFile",
      value: function selectFile(s) {
        var modal = document.querySelector('.is-modal.fileselect');
        var targetInput = document.querySelector('.is-modal.createlink .input-url');
        targetInput.value = s;
        targetInput.focus();
        dom.removeClass(modal, 'active');
      }
    }, {
      key: "selectImage",
      value: function selectImage(s) {
        var modal = document.querySelector('.is-modal.imageselect');
        var targetInput;

        if (dom.hasClass(document.querySelector('.is-modal.imagelink'), 'active')) {
          targetInput = document.querySelector('.is-modal.imagelink .input-src');
        }

        if (dom.hasClass(document.querySelector('.is-modal.insertimage'), 'active')) {
          targetInput = document.querySelector('.is-modal.insertimage .input-src');
        }

        targetInput.value = s;
        targetInput.focus();
        dom.removeClass(modal, 'active');
      }
    }, {
      key: "LightenDarkenColor",
      value: function LightenDarkenColor(col, amt) {
        // Backward compatibility (used by: Button Editor plugin)
        return this.util.LightenDarkenColor(col, amt);
      }
    }, {
      key: "pickColor",
      value: function pickColor(onPick, defaultcolor) {
        // Backward compatibility (used by: Button Editor plugin)
        var colorPicker = new ColorPicker({
          colors: this.opts.colors,
          animateModal: false,
          lang: this.opts.lang
        });
        colorPicker.open(onPick, defaultcolor);
      }
    }, {
      key: "addSnippet",
      value: function addSnippet(html, bSnippet, noedit) {
        //called by snippetlist.html
        this.util.addSnippet(html, bSnippet, noedit);
      }
    }, {
      key: "viewSnippets",
      value: function viewSnippets() {
        this.rte.viewSnippets();
      }
    }, {
      key: "saveForUndo",
      value: function saveForUndo(checkLater) {
        this.uo.saveForUndo(checkLater);
      }
    }, {
      key: "imageLoaded",
      value: function imageLoaded(obj) {
        obj.removeAttribute('onload');

        if (this.activeCol) {
          this.colTool.refreshColumnTool(this.activeCol);
        }
      } // Module related

    }, {
      key: "getActiveModule",
      value: function getActiveModule() {
        return document.querySelector('[data-module-active]');
      }
    }, {
      key: "getModuleSettings",
      value: function getModuleSettings() {
        var activeModule = document.querySelector('[data-module-active]'); //get active module 

        return decodeURIComponent(activeModule.getAttribute('data-settings'));
      }
    }, {
      key: "setModuleHtml",
      value: function setModuleHtml(html) {
        document.querySelector('#hidContentModuleCode').value = html; // See elementmodule.js
      }
    }, {
      key: "setModuleSettings",
      value: function setModuleSettings(settings) {
        document.querySelector('#hidContentModuleSettings').value = settings; // See elementmodule.js
      }
    }, {
      key: "makeId",
      value: function makeId() {
        return this.util.makeId();
      }
    }, {
      key: "setTooltip",
      value: function setTooltip(area) {
        this.tooltip.setAll(area);
      } // /External
      // Plugins related

    }, {
      key: "undo",
      value: function undo() {
        this.uo.doUndo();
      }
    }, {
      key: "redo",
      value: function redo() {
        this.uo.doRedo();
      }
    }, {
      key: "addHtml",
      value: function addHtml(html) {
        dom.appendHtml(this.builderStuff, html);
      }
    }, {
      key: "addCss",
      value: function addCss(css) {
        dom.appendHtml(document.head, css);
      }
    }, {
      key: "addButton",
      value: function addButton(pluginname, html, selector, exec) {
        var _this3 = this;

        var rteTool = this.builderStuff.querySelector('.is-rte-tool');
        var rteMoreOptions = this.builderStuff.querySelector('.rte-more-options');
        var bUseMore = false;

        if (rteTool.querySelector('[data-plugin="' + pluginname + '"]')) {
          //if plugin button exists on the toolbar
          rteTool.querySelector('[data-plugin="' + pluginname + '"]').outerHTML = html;
        } else if (rteMoreOptions.querySelector('[data-plugin="' + pluginname + '"]')) {
          //if plugin button exists on the more popup
          rteMoreOptions.querySelector('[data-plugin="' + pluginname + '"]').outerHTML = html;
          bUseMore = true;
        } else {
          rteMoreOptions.querySelector('div').insertAdjacentHTML('afterbegin', html);
          bUseMore = true;
        }

        if (!rteTool.querySelector('.rte-more') && bUseMore) {
          rteTool.insertAdjacentHTML('beforeend', "<button title=\"".concat(this.util.out('More'), "\" class=\"rte-more\"><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#ion-more\"></use></svg></button>"));
          var btnRteMore = this.rteTool.querySelector('button.rte-more');
          if (btnRteMore) dom.addEventListener(btnRteMore, 'click', function () {
            _this3.rte.showRteMore();
          });
        }

        var btnPlugin = rteTool.querySelector(selector);
        btnPlugin = btnPlugin ? btnPlugin : rteMoreOptions.querySelector(selector);

        if (btnPlugin) {
          // Prepare for tooltip
          btnPlugin.setAttribute('data-title', btnPlugin.getAttribute('title'));
          dom.addEventListener(btnPlugin, 'click', function (e) {
            exec(e);
          });
        }
      } // Element Toolbar

    }, {
      key: "addButton2",
      value: function addButton2(pluginname, html, selector, exec) {
        var _this4 = this;

        var elementRteTool = this.builderStuff.querySelector('.is-elementrte-tool');
        var elementRteMoreOptions = this.builderStuff.querySelector('.elementrte-more-options');
        var bUseMore = false;

        if (elementRteTool.querySelector('[data-plugin="' + pluginname + '"]')) {
          //if plugin button exists on the toolbar
          elementRteTool.querySelector('[data-plugin="' + pluginname + '"]').outerHTML = html;
        } else if (elementRteMoreOptions.querySelector('[data-plugin="' + pluginname + '"]')) {
          //if plugin button exists on the more popup
          elementRteMoreOptions.querySelector('[data-plugin="' + pluginname + '"]').outerHTML = html;
          bUseMore = true;
        } else {
          elementRteMoreOptions.querySelector('div').insertAdjacentHTML('afterbegin', html);
          bUseMore = true;
        }

        if (!elementRteTool.querySelector('.rte-more') && bUseMore) {
          elementRteTool.insertAdjacentHTML('beforeend', "<button title=\"".concat(this.util.out('More'), "\" class=\"rte-more\"><svg class=\"is-icon-flex\" style=\"width:13px;height:13px;\"><use xlink:href=\"#ion-more\"></use></svg></button>"));
          var btnRteMore = this.elementRteTool.querySelector('button.rte-more');
          if (btnRteMore) dom.addEventListener(btnRteMore, 'click', function () {
            _this4.rte.showElementRteMore();
          });
        }

        var btnPlugin = elementRteTool.querySelector(selector);
        btnPlugin = btnPlugin ? btnPlugin : elementRteMoreOptions.querySelector(selector);

        if (btnPlugin) {
          // Prepare for tooltip
          btnPlugin.setAttribute('data-title', btnPlugin.getAttribute('title'));
          dom.addEventListener(btnPlugin, 'click', function (e) {
            exec(e);
          });
        }
      }
    }, {
      key: "showModal",
      value: function showModal(modal, overlayStay, cancelCallback, animated) {
        this.util.showModal(modal, overlayStay, cancelCallback, animated);
      }
    }, {
      key: "hideModal",
      value: function hideModal(modal) {
        this.util.hideModal(modal);
      }
    }, {
      key: "showSidePanel",
      value: function showSidePanel(panel) {
        var panels = this.builderStuff.querySelectorAll('.is-side');
        Array.prototype.forEach.call(panels, function (panel) {
          dom.removeClass(panel, 'active');
        });
        dom.addClass(panel, 'active');
      }
    }, {
      key: "hideSidePanel",
      value: function hideSidePanel(panel) {
        dom.removeClass(panel, 'active');
      }
    }, {
      key: "getScriptPath",
      value: function getScriptPath() {
        return this.opts.scriptPath;
      }
    }, {
      key: "getSnippetPath",
      value: function getSnippetPath() {
        return this.opts.snippetData.substring(0, this.opts.snippetData.lastIndexOf('/') + 1);
      }
    }, {
      key: "out",
      value: function out(text) {
        return this.util.out(text);
      }
    }, {
      key: "getScope",
      value: function getScope() {
        var area;
        var builders = document.querySelectorAll(this.opts.container);

        if (builders.length > 1) {
          var cell = this.util.cellSelected();

          if (!cell) {
            // Return first instance
            area = builders[0];
          } else {
            // Return active instance
            area = cell.parentNode.parentNode;
          }
        } else {
          // Single instance
          area = builders[0];
        }

        if (this.opts.page !== '') {
          var wrapper = document.querySelector(this.opts.page);

          if (wrapper) {
            //return wrapper
            area = wrapper;
          }
        }

        return area;
      }
    }, {
      key: "pasteHtmlAtCaret",
      value: function pasteHtmlAtCaret(html, selectPastedContent) {
        this.util.pasteHtmlAtCaret(html, selectPastedContent);
      }
    }, {
      key: "getScript",
      value: function getScript(scriptUrl, callback) {
        this.loadScript(scriptUrl).then(function () {
          if (callback) callback();
        }, function () {
          console.log('Fail to load config');
        });
      }
    }, {
      key: "getScripts",
      value: function getScripts(scriptUrls, callback) {
        var _this5 = this;

        var count = 0; //console.log(count)

        var a = this.loadScript(scriptUrls[count]);
        a.then(function () {
          count = _this5._helper1(count, scriptUrls, callback);
        });
      }
    }, {
      key: "_helper1",
      value: function _helper1(count, scriptUrls, callback) {
        var _this6 = this;

        count++;

        if (count < scriptUrls.length) {
          //console.log(count)
          var a = this.loadScript(scriptUrls[count]);
          a.then(function () {
            count = _this6._helper1(count, scriptUrls, callback);
          });
          return count;
        } else {
          if (callback) callback();
        }
      }
    }, {
      key: "includeJs",
      value: function includeJs(filename, callback) {
        if (this.filesAdded.indexOf('[' + filename + ']') === -1) {
          this.getScript(filename, callback);
          this.filesAdded += '[' + filename + ']';
        } else {
          //alert('already added');
          if (callback) callback();
        }
      }
    }, {
      key: "includeCss",
      value: function includeCss(filename) {
        if (this.filesAdded.indexOf('[' + filename + ']') === -1) {
          var inc = document.createElement('link');
          inc.setAttribute('rel', 'stylesheet');
          inc.setAttribute('type', 'text/css');
          inc.setAttribute('href', filename);
          document.getElementsByTagName('head')[0].appendChild(inc);
          this.filesAdded += '[' + filename + ']';
        }
      }
    }, {
      key: "applyStyle",
      value: function applyStyle(id, s) {
        if (this.filesAdded.indexOf('[' + id + ']') === -1) {
          var inc = document.createElement('style');
          inc.innerHTML = s;
          document.getElementsByTagName('head')[0].appendChild(inc);
          this.filesAdded += '[' + id + ']';
        }
      } // /Plugins related

    }, {
      key: "viewHtml",
      value: function viewHtml(area) {
        var htmlutil = new HtmlUtil(this);
        htmlutil.view('full', area);
      }
    }, {
      key: "viewPreferences",
      value: function viewPreferences() {
        this.preferences.view();
      }
    }, {
      key: "viewConfig",
      value: function viewConfig() {
        //backward
        this.preferences.view();
      }
    }, {
      key: "loadHtml",
      value: function loadHtml(html, area) {
        var util = this.util;

        if (area) ; else {
          var builders = document.querySelectorAll(this.opts.container);

          if (builders.length > 1) {
            var cell = util.cellSelected();

            if (!cell) {
              // Return first instance
              area = builders[0];
            } else {
              // Return active instance
              area = cell.parentNode.parentNode;
            }
          } else {
            // Single instance
            area = builders[0];
          }

          if (this.opts.page !== '') {
            var wrapper = document.querySelector(this.opts.page);

            if (wrapper) {
              //return wrapper
              area = wrapper;
            }
          }
        }

        area.innerHTML = html;
        this.applyBehavior(); // this.uo.saveForUndo(); //First time
        //Trigger Change event

        this.opts.onChange(); //Trigger Render event

        this.opts.onRender();
      } // loadHtml(html) {
      //     let area = this.getScope();
      //     area.innerHTML = html;
      //     this.builder.applyBehavior();
      //     //Trigger Change event
      //     this.builder.opts.onChange();
      //     //Trigger Render event
      //     this.builder.opts.onRender();
      // }

    }, {
      key: "loadHTML",
      value: function loadHTML(html) {
        //backward
        this.loadHtml(html);
      }
    }, {
      key: "handleCellClick",
      value: function handleCellClick(col, e) {
        var util = this.util;
        util.clearActiveCell();
        this.activeCol = col;
        var elm = e.target;
        dom.addClass(col, 'cell-active');
        var row = col.parentNode; //Since a col can be moved to another row, then re-get the active row

        dom.addClass(row, 'row-active');
        var builders = document.querySelectorAll(this.opts.container);
        Array.prototype.forEach.call(builders, function (builder) {
          dom.removeClass(builder, 'builder-active');
        });
        dom.addClass(row.parentNode, 'builder-active');

        if (row.childElementCount - 2 === 1) ; else {
          dom.addClass(row, 'row-outline');
        } //this.getState();
        // Call onContentClick to indicate click on editable content (eg. for plugin usage)


        if (!col.hasAttribute('data-html')) {
          this.opts.onContentClick(e);
        }

        this.element.click(col, e);
        this.colTool.click(col);
        this.elmTool.click(col, e); //this.rowtool.click(col);

        this.rte.click(col, e); // Disable link open on builder area

        if (elm.tagName.toLowerCase() === 'a' || dom.parentsHasElement(elm, 'a')) {
          return false;
        } // LATER: (builder inside builder)
        // if (jQuery(e.target).parents('.is-builder').length>1) {
        //     e.preventDefault();
        //     e.stopImmediatePropagation();
        // }

      }
    }, {
      key: "handleCellKeypress",
      value: function handleCellKeypress(e) {
        var _this7 = this;

        if (e.ctrlKey || e.metaKey) {
          //CTRL
          return;
        }

        if (this.uoTm === null) {
          this.uo.saveForUndo();
          this.uoTm = setTimeout(function () {
            _this7.uoTm = null;
          }, 1000);
        } else {
          clearTimeout(this.uoTm);
          this.uoTm = setTimeout(function () {
            _this7.uoTm = null;
          }, 1000);
        }
      }
    }, {
      key: "handleCellKeydown",
      value: function handleCellKeydown(col, e) {
        // // Cleanup unwanted span
        // let spans = col.querySelectorAll('span');
        // Array.prototype.forEach.call(spans, (span) => {
        //     span.setAttribute('data-keep', '');
        // });
        // // Cleanup all elements with unwanted style
        // let elms = col.querySelectorAll('*');
        // Array.prototype.forEach.call(elms, (elm) => {
        //     let attr = elm.getAttribute('style');
        //     if(attr) {
        //         if(attr.indexOf('font-size')!==-1){
        //             elm.setAttribute('data-keep-font-size','');
        //         }
        //         if(attr.indexOf('background-color')!==-1){
        //             elm.setAttribute('data-keep-background-color','');
        //         }
        //         if(attr.indexOf('background')!==-1){
        //             elm.setAttribute('data-keep-background','');
        //         }
        //         if(attr.indexOf('line-height')!==-1){
        //             elm.setAttribute('data-keep-line-height','');
        //         }
        //     }
        // });
        // this.autoclean=true;
        if ((e.ctrlKey || e.metaKey) && e.which === 86) {
          //CTRL-V
          this.handleCellPaste();
        }

        if (this.opts.elementSelection && !this.emailMode) {
          if ((e.ctrlKey || e.metaKey) && e.which === 65) {
            //CTRL-A
            var el;

            try {
              if (window.getSelection) {
                el = window.getSelection().getRangeAt(0).commonAncestorContainer.parentNode;
              } else if (document.selection) {
                el = document.selection.createRange().parentElement();
              }

              if (!dom.hasClass(el.parentNode.parentNode, 'is-builder')) {
                dom.selectElementContents(el);
              }

              e.preventDefault();
            } catch (e) {// Do Nothing
            }
          }
        }

        if (e.keyCode === 46) {
          // console.log("delete");
          var curr;

          try {
            if (window.getSelection) {
              curr = window.getSelection().getRangeAt(0).commonAncestorContainer;
            } else if (document.selection) {
              curr = document.selection.createRange();
            }

            if (curr.innerHTML === '<br>') {
              var next = curr.nextElementSibling;

              if (next) {
                curr.parentNode.removeChild(curr); //without this, empty P, H1, H2 (contains only <br />) cannot be deleted (when there is another P below)
                // Of course, we can backspace from the P below, but the formatting will change.

                e.preventDefault();
              }
            }
          } catch (e) {// Do Nothing
          }
        }

        if (e.keyCode === 8) {
          // delete on Mac
          var _curr;

          try {
            if (window.getSelection) {
              _curr = window.getSelection().getRangeAt(0).commonAncestorContainer;
            } else if (document.selection) {
              _curr = document.selection.createRange();
            }

            if (_curr.textContent === '') {
              var prev = _curr.previousElementSibling;

              if (!prev) {
                e.preventDefault(); //Without this, empty P, H1, H2 (that doesn't have prev element) will be lost => can make empty column.
              }
            }
          } catch (e) {// Do Nothing
          }
        }
      }
    }, {
      key: "handleCellKeyup",
      value: function handleCellKeyup(col, e) {
        if (dom.textSelection()) {
          if (e.keyCode === '38') {
            // Up arrow
            this.util.saveSelection();
          } else if (e.keyCode === '40') {
            // Down arrow
            this.util.saveSelection();
          } else if (e.keyCode === '37') {
            // Left arrow
            this.util.saveSelection();
          } else if (e.keyCode === '39') {
            // Right arrow
            this.util.saveSelection();
          }
        } // // See: handleCellKeydown
        // // Cleanup unwanted span
        // let spans = col.querySelectorAll('span');
        // Array.prototype.forEach.call(spans, (span) => {
        //     let attr = span.getAttribute('data-keep');
        //     if(!attr) {
        //         // Remove unwanted span
        //         span.outerHTML = span.innerHTML;
        //     }
        // });
        // // Cleanup all elements with unwanted style
        // if(this.autoclean){
        //     let elms = col.querySelectorAll('*');
        //     Array.prototype.forEach.call(elms, (elm) => {
        //         let attr = elm.getAttribute('style');
        //         if(attr) {
        //             if(attr.indexOf('font-size')!==-1){
        //                 let attrkeep = elm.getAttribute('data-keep-font-size');
        //                 if (!attrkeep) {
        //                     // Remove unwanted font size
        //                     elm.style.fontSize = '';
        //                 }
        //             }
        //             if(attr.indexOf('background-color')!==-1){
        //                 let attrkeep = elm.getAttribute('data-keep-background-color');
        //                 if (!attrkeep) {
        //                     // Remove unwanted background color
        //                     elm.style.backgroundColor = '';
        //                 }
        //             }
        //             if(attr.indexOf('background')!==-1){
        //                 let attrkeep = elm.getAttribute('data-keep-background');
        //                 if (!attrkeep) {
        //                     // Remove unwanted background
        //                     elm.style.background = '';
        //                 }
        //             }
        //             if(attr.indexOf('line-height')!==-1){
        //                 let attrkeep = elm.getAttribute('data-keep-line-height');
        //                 if (!attrkeep) {
        //                     // Remove unwanted line height
        //                     elm.style.lineHeight = '';
        //                 }
        //             }
        //         }
        //     });
        //     elms = col.querySelectorAll('[data-keep-font-size]');
        //     Array.prototype.forEach.call(elms, (elm) => {
        //         elm.removeAttribute('data-keep-font-size');
        //     });
        //     elms = col.querySelectorAll('[data-keep-background-color]');
        //     Array.prototype.forEach.call(elms, (elm) => {
        //         elm.removeAttribute('data-keep-background-color');
        //     });
        //     elms = col.querySelectorAll('[data-keep-background]');
        //     Array.prototype.forEach.call(elms, (elm) => {
        //         elm.removeAttribute('data-keep-background');
        //     });
        //     elms = col.querySelectorAll('[data-keep-line-height]');
        //     Array.prototype.forEach.call(elms, (elm) => {
        //         elm.removeAttribute('data-keep-line-height');
        //     });                       
        // }
        // this.autoclean =false;


        var el; // var curr;

        try {
          if (window.getSelection) {
            // curr = window.getSelection().getRangeAt(0).commonAncestorContainer;
            el = window.getSelection().getRangeAt(0).commonAncestorContainer.parentNode;
          } else if (document.selection) {
            // curr = document.selection.createRange();
            el = document.selection.createRange().parentElement();
          }
        } catch (e) {
          return;
        } //Use try to prevent lost selection after undo


        if (e.keyCode === 13 && !e.shiftKey) {
          //So that enter at the end of list returns <p>
          var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor); //var isSafari = /Safari/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor);

          var isOpera = window.opera; // var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;

          if (isChrome || isOpera) {
            //Without this, pressing ENTER at the end of list will returns <p> on Chrome but then it become <div> (On Opera it returns <div>)
            //With this, we change it into <p>
            if (el.tagName.toLowerCase() === 'p' || el.tagName.toLowerCase() === 'div') {
              document.execCommand('formatBlock', false, '<p>');
            }
          }
          /*
          if(isFirefox) {
              //On FF (when enter at the end of list) jQuery(curr).html() returns undefined
              if(curr) document.execCommand('formatBlock', false, '<p>');
          }*/


          var elms = col.querySelectorAll('[data-keep]');
          Array.prototype.forEach.call(elms, function (elm) {
            elm.removeAttribute('data-keep');
          });
        } // LATER
        // jQuery('.cell-active').find('.elm-active').removeClass('elm-active');
        // jQuery("#divElementTool").css("display", "none"); //force hide ellement tool
        // Call onChange to indicate content change


        this.opts.onChange(); // Hide element highlight & tool during typing

        this.elmTool.hide();
      }
    }, {
      key: "handleCellPaste",
      value: function handleCellPaste() {
        var _this8 = this;

        this.uo.saveForUndo();
        var util = this.util;
        util.saveSelection(); //required. Without this, CTRL-A (select element) & CTRL-V won't replace the element, but will paste at the end of the element.

        var contentword = document.querySelector('#idContentWord');
        if (contentword) contentword.parentNode.removeChild(contentword);
        var el;
        var curr;

        if (window.getSelection) {
          curr = window.getSelection().getRangeAt(0).commonAncestorContainer;

          if (curr.nodeType === 3) {
            //ini text node
            el = curr.parentNode;
          } else {
            el = curr;
          }
        } else if (document.selection) {
          curr = document.selection.createRange();
          el = document.selection.createRange().parentElement();
        }

        var tmptop = el.getBoundingClientRect().top + window.pageYOffset;
        var html = '<div style="position:absolute;z-index:-1000;top:' + tmptop + 'px;left:-1000px;width:100px;height:100px;overflow:auto;" name="idContentWord" id="idContentWord" contenteditable="true"></div>';
        dom.appendHtml(this.builderStuff, html);
        contentword = document.querySelector('#idContentWord');
        contentword.focus();
        setTimeout(function () {
          try {
            var sPastedText = '';

            var _contentword = document.querySelector('#idContentWord'); //Check video embed


            var bPasteObject = false;
            var src = _contentword.innerText; //var youRegex = /^http[s]?:\/\/(((www.youtube.com\/watch\?(feature=player_detailpage&)?)v=)|(youtu.be\/))([^#\&\?]*)/;

            var youRegex = /^http[s]?:\/\/(((www.youtube.com\/watch\?(feature=player_detailpage&)?)v=)|(youtu.be\/))([^#&?]*)/;
            var vimeoRegex = /^.*(vimeo\.com\/)((channels\/[A-z]+\/)|(groups\/[A-z]+\/videos\/)|(video\/))?([0-9]+)\/?/;
            var youRegexMatches = youRegex.exec(src);
            var vimeoRegexMatches = vimeoRegex.exec(src);

            if (youRegexMatches !== null || vimeoRegexMatches !== null) {
              if (youRegexMatches !== null && youRegexMatches.length >= 7) {
                var youMatch = youRegexMatches[6];
                src = '//www.youtube.com/embed/' + youMatch + '?rel=0';
              }

              if (vimeoRegexMatches !== null && vimeoRegexMatches.length >= 7) {
                var vimeoMatch = vimeoRegexMatches[6];
                src = '//player.vimeo.com/video/' + vimeoMatch;
              }

              sPastedText = '<div class="embed-responsive embed-responsive-16by9"><iframe width="560" height="315" src="' + src + '" frameborder="0" allowfullscreen=""></iframe></div>';
              bPasteObject = true;
            }

            if (!bPasteObject) {
              if (_this8.opts.paste === 'text') {
                var elms = _contentword.querySelectorAll('p,h1,h2,h3,h4,h5,h6');

                Array.prototype.forEach.call(elms, function (elm) {
                  elm.innerHTML = elm.innerHTML + ' '; //add space (&nbsp;)
                });
                sPastedText = _contentword.innerText;
              } else {
                sPastedText = _contentword.innerHTML;

                if (_this8.opts.paste === 'html') {
                  //with styles
                  sPastedText = util.cleanHTML(sPastedText, false);
                } else {
                  //html-without-styles (default)
                  sPastedText = util.cleanHTML(sPastedText, true);
                }

                _contentword.innerHTML = sPastedText; // NOTE: paste <h1><p> jadi nempel
                // NOTE ($editor => contentword)
                // if($editor.children('p,h1,h2,h3,h4,h5,h6,ul,li').length>1){
                //     //Fix text that doesn't have paragraph
                //     $editor.contents().filter(function() {
                //         return (this.nodeType === 3 && jQuery.trim(this.nodeValue)!=='');
                //     }).wrap( "<p></p>" ).end().filter("br").remove();
                // }
                // // Source: https://gist.github.com/sbrin/6801034 
                // jQuery('p', $editor).each(function(){
                //     var str = jQuery(this).attr('style');
                //     var matches = /mso-list:\w+ \w+([0-9]+)/.exec(str);
                //     if (matches) {
                //         jQuery(this).data('_listLevel',  parseInt(matches[1], 10));
                //     }
                // });
                // var last_level=0;
                // var pnt = null;
                // jQuery('p', $editor).each(function(){
                //     var cur_level = jQuery(this).data('_listLevel');
                //     if(cur_level !== undefined){
                //         var txt = jQuery(this).text();
                //         var list_tag = '<ul></ul>';
                //         if (/^\s*\w+\./.test(txt)) {
                //             var matches = /([0-9])\./.exec(txt);
                //             if (matches) {
                //                 var start = parseInt(matches[1], 10);
                //                 list_tag = start>1 ? '<ol start="' + start + '"></ol>' : '<ol></ol>';
                //             }else{
                //                 list_tag = '<ol></ol>';
                //             }
                //         }
                //         if(cur_level>last_level){
                //             if(last_level===0){
                //                 jQuery(this).before(list_tag);
                //                 pnt = jQuery(this).prev();
                //             }else{
                //                 pnt = jQuery(list_tag).appendTo(pnt);
                //             }
                //         }
                //         if(cur_level<last_level){
                //             for(var i=0; i<last_level-cur_level; i++){
                //                 pnt = pnt.parent();
                //             }
                //         }
                //         jQuery('span:first', this).remove();
                //         pnt.append('<li>' + jQuery(this).html() + '</li>');
                //         jQuery(this).remove();
                //         last_level = cur_level;
                //     }else{
                //         last_level = 0;
                //     }
                // });
                // //jQuery('[style]', $editor).removeAttr('style'); //done (see cleanHTML)
                // jQuery('[align]', $editor).removeAttr('align');
                // //jQuery('span', $editor).replaceWith(function() {return jQuery(this).contents();}); //done (see cleanHTML)
                // jQuery('span:empty', $editor).remove();
                // //jQuery("[class^='Mso']", $editor).removeAttr('class'); //done (see cleanHTML)
                // jQuery('p:empty', $editor).remove();

                sPastedText = _contentword.innerHTML;
              }
            }

            _contentword = document.querySelector('#idContentWord');
            if (_contentword) _contentword.parentNode.removeChild(_contentword); // LATER
            // jQuery('.cell-active').find('.elm-active').removeClass('elm-active');
            // jQuery("#divElementTool").css("display", "none"); //force hide ellement tool 

            util.restoreSelection();
            var oSel = window.getSelection();
            var range = oSel.getRangeAt(0);
            range.extractContents();
            range.collapse(true);
            var docFrag = range.createContextualFragment(sPastedText);
            var lastNode = docFrag.lastChild;
            range.insertNode(docFrag); // // Fix HTML structure (Sometimes h1 can be pasted inside p)
            // let elms = col.querySelectorAll('p,h1,h2,h3,h4,h5,h6');
            // Array.prototype.forEach.call(elms, (elm) => {
            //     let elmswithin = elm.querySelectorAll('p,h1,h2,h3,h4,h5,h6');
            //     Array.prototype.forEach.call(elmswithin, (elmwithin) => {
            //         elmwithin.outerHTML = elmwithin.innerHTML;
            //     });
            // });
            // LATER
            // $block.find('h1:empty,h2:empty,h3:empty,h4:empty,h5:empty,h6:empty,p:empty').remove();

            range.setStartAfter(lastNode);
            range.setEndAfter(lastNode);
            range.collapse(false);
            var comCon = range.commonAncestorContainer;

            if (comCon && comCon.parentNode) {
              try {
                comCon.parentNode.normalize();
              } catch (e) {// Do Nothing
              }
            }

            oSel.removeAllRanges();
            oSel.addRange(range);

            _this8.applyBehavior(); //Trigger Change event


            _this8.opts.onChange(); //Trigger Render event


            _this8.opts.onRender();
          } catch (e) {
            var _contentword2 = document.querySelector('#idContentWord');

            if (_contentword2) _contentword2.parentNode.removeChild(_contentword2);
          }
        }, 800);
      }
    }, {
      key: "cellSelected",
      value: function cellSelected() {
        var util = this.util;
        return util.cellSelected();
      } // https://stackoverflow.com/questions/16839698/jquery-getscript-alternative-in-native-javascript

    }, {
      key: "loadScript",
      value: function loadScript(source, beforeEl) {
        var async = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var defer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
        return new Promise(function (resolve, reject) {
          var script = document.createElement('script');
          var prior = beforeEl || document.getElementsByTagName('script')[0];
          script.async = async;
          script.defer = defer;

          function onloadHander(_, isAbort) {
            if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
              script.onload = null;
              script.onreadystatechange = null;
              script = undefined;

              if (isAbort) {
                reject();
              } else {
                resolve();
              }
            }
          }

          script.onload = onloadHander;
          script.onreadystatechange = onloadHander;
          script.src = source;
          prior.parentNode.insertBefore(script, prior);
        });
      } // If scriptPath is not set, this will be used.

    }, {
      key: "currentScriptPath",
      value: function currentScriptPath() {
        var filename, location;
        var scriptElements = document.getElementsByTagName('script');

        for (var i = 0; i < scriptElements.length; i++) {
          var source = scriptElements[i].src;
          filename = 'contentbuilder.js';

          if (source.indexOf(filename) > -1) {
            location = source.substring(0, source.indexOf(filename));
          }

          filename = 'contentbuilder.min.js';

          if (source.indexOf(filename) > -1) {
            location = source.substring(0, source.indexOf(filename));
          }
        }

        return location; // var scripts = document.querySelectorAll('script[src]');
        // var currentScript = scripts[scripts.length - 1].src;
        // var currentScriptChunks = currentScript.split('/');
        // var currentScriptFile = currentScriptChunks[currentScriptChunks.length - 1];
        // return currentScript.replace(currentScriptFile, '');
      }
    }], [{
      key: "run",
      value: function run() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return new ContentBuilder(opts);
      }
    }]);

    return ContentBuilder;
  }();
  //     var run = (opts = {}) => {
  //         return new ContentBuilder(opts);
  //     }
  //     window.ContentBuilder = run;
  // })(window);

  (function (window) {
    var $ = window.jQuery;
    if ($) $.contentbuilder = function (options) {
      return new ContentBuilder(options);
    };
  })(window);

  return ContentBuilder;

}());
